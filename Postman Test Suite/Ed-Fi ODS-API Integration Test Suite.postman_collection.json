{
	"info": {
		"_postman_id": "829ceac5-1c29-44c8-8df4-994aa4747b6e",
		"name": "Ed-Fi ODS/API Integration Test Suite",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7275232"
	},
	"item": [
		{
			"name": "Authenicate API Client Key/Secret",
			"item": [
				{
					"name": "Valid Key/Secret Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a access_token\", () => {\r",
									"  const responseItem = pm.response.text();\r",
									"  pm.expect(responseItem).to.contains(\"access_token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ApiSecret_255901}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ApiKey_255901}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid Key/Secret with EdorgID Scope Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a access_token\", () => {\r",
									"  const responseItem = pm.response.text();\r",
									"  pm.expect(responseItem).to.contains(\"access_token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a scope\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.scope).to.equal(\"255901\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ApiSecret_255901}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ApiKey_255901}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								},
								{
									"key": "scope",
									"value": "255901",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non Exist Key Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a invalid_client\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error).to.equal(\"invalid_client\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "non-existing-password",
									"type": "string"
								},
								{
									"key": "username",
									"value": "non-existing-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exist Key -Mismatch Secret Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a invalid_client\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error).to.equal(\"invalid_client\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{ApiKey_255901}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "non-existing-password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Key/Secret Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a invalid_request\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error).to.equal(\"invalid_request\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong Basic Authorization Type Format Auth Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a invalid_request\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error).to.equal(\"invalid_request\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic Test Test",
								"type": "default"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong  AuthorizationType Auth Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a invalid_client\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error).to.equal(\"invalid_client\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Test Test",
								"type": "default"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsupported GrantType Auth Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a unsupported_grant_type\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error).to.equal(\"unsupported_grant_type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ApiSecret_255901}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ApiKey_255901}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Test Test",
								"type": "default"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "server_credentials",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidScope Auth Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a invalid_scope\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error).to.equal(\"invalid_scope\");\r",
									"});\r",
									"\r",
									"pm.test(\"Should return error description The client is not explicitly associated with the EducationOrganizationId specified in the requested 'scope'.\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error_description).to.equal(\"The client is not explicitly associated with the EducationOrganizationId specified in the requested 'scope'.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ApiSecret_255901}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ApiKey_255901}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Test Test",
								"type": "default"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								},
								{
									"key": "scope",
									"value": "343",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidScope with wrong EdorgId  Auth Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return a invalid_scope\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error).to.equal(\"invalid_scope\");\r",
									"});\r",
									"\r",
									"pm.test(\"Should return error description The supplied 'scope' was not a number (it should be an EducationOrganizationId that is explicitly associated with the client).\", () => {\r",
									"  const responseItem = pm.response.json();\r",
									"  pm.expect(responseItem.error_description).to.equal(\"The supplied 'scope' was not a number (it should be an EducationOrganizationId that is explicitly associated with the client).\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ApiSecret_255901}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ApiKey_255901}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Test Test",
								"type": "default"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mode",
									"value": "urlencoded",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								},
								{
									"key": "scope",
									"value": "test",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8765/oauth/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8765",
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "api_is_healthy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return string Healthy\", () => {",
									"    ",
									"     pm.response.to.have.body(\"Healthy\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/health",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "This api get method checks the health of API application"
					},
					"response": []
				}
			]
		},
		{
			"name": "Initialize Known Data",
			"item": [
				{
					"name": "Initialize Known School Ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"const schools = pm.response.json();",
									"const schoolIds = __.map(schools, school => school.schoolId);",
									"pm.environment.set(\"known:schoolIds\",schoolIds);",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?localEducationAgencyId=255901",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"schools"
							],
							"query": [
								{
									"key": "localEducationAgencyId",
									"value": "255901"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AcademicWeeks",
			"item": [
				{
					"name": "WeekIdentifier is required validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item with WeekIdentifier is required string\", () => {",
									"    ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"Validation of \\'AcademicWeek\\' failed\");",
									"     pm.expect(responseItem.message).to.include(\"WeekIdentifier is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "SchoolId is required validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 403 or 400\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 400]) ",
									" });",
									"",
									"pm.test(\"Should return the item with SchoolId of the resource is empty string\", function () {",
									"    const responseItem = pm.response.json();",
									"    const expectedErrorMessage1 = \"Access to the resource item could not be authorized because the 'SchoolId' of the resource is empty.\";",
									"    const expectedErrorMessage2 = \"The request is invalid.\";",
									"    pm.expect(responseItem.message).to.satisfy(function (message) {",
									"        return message === expectedErrorMessage1 || message === expectedErrorMessage2;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw SchoolId is required error when SchoolId is not passed in Request."
					},
					"response": []
				},
				{
					"name": "BeginDate is required validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Should returns the item with String was not recognized as a valid date string\", () => {",
									"     ",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"The request is invalid\");",
									"     pm.expect(responseItem.modelState[\"request.beginDate\"][0]).to.include(\"The supplied value is invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw BeginDate is required error when BeginDate is not passed in Request."
					},
					"response": []
				},
				{
					"name": "EndDate is required validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let  endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item with String was not recognized as a valid date string\", () => {",
									"     ",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"The request is invalid\");",
									"     pm.expect(responseItem.modelState[\"request.endDate\"][0]).to.include(\"The supplied value is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw EndDate is required error when EndDate is not passed in Request."
					},
					"response": []
				},
				{
					"name": "Non-existing SchoolID validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"const responseItem = pm.response.json();",
									"",
									"pm.test(`Error message of '${responseItem.message}' should match expected`, () => {",
									"    pm.expect(responseItem.message).to.equal(\"Authorization denied. No relationships have been established between the caller's education organization id claim (255901) and the resource item's 'SchoolId' value.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"23432\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw Invalid SchoolId  error when Invalid SchoolId is passed in Request."
					},
					"response": []
				},
				{
					"name": "Invalid BeginDate & EndDate Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(70));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item with BeginDate must be required and not default\", () => {",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"BeginDate is required.\");",
									"});",
									"",
									"pm.test(\"Should return the item with EndDate must be required and not default\", () => {",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"EndDate is required.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n  \"beginDate\":\"1/1/0001\",\r\n  \"endDate\":\"1/1/0001\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw BeginDate & EndDate invalid error when invalid BeginDate & EndDate  is  passed in Request."
					},
					"response": []
				},
				{
					"name": "Insert new academicWeeks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"const title =\"Should return newly Added Academic weeks for School \"+schoolId;",
									"let isacadmeicWeeksAdded = false;",
									"",
									"const academicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks\",",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"pm.test(title,  () => {",
									"    ",
									"    pm.sendRequest(academicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"   ",
									"     academicWeeks.json().forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"             isacadmeicWeeksAdded=true;",
									"             pm.environment.set(\"known:academicWeeksReferenceIdforSchool\",responseItem.id);",
									"             pm.environment.set(\"known:academicWeeksReferenceIds\",[]);",
									"             const academicWeeksReferenceIds=pm.environment.get(\"known:academicWeeksReferenceIds\");",
									"              academicWeeksReferenceIds.push(responseItem.id);",
									"             pm.environment.set(\"known:academicWeeksReferenceIds\",academicWeeksReferenceIds);",
									"             pm.expect(responseItem.schoolReference.schoolId).to.eql(schoolId);",
									"         }",
									"    });",
									"      pm.expect(Boolean(isacadmeicWeeksAdded)).to.eql(true);",
									"    }",
									"    });",
									"     ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\", pm.variables.replaceIn(\"{{$guid}}\").substring(0, 6));",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(12));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\",\r\n  \"_etag\": \"string\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "Pre-Condition : School record should be pre-populated.\n\nThis api post method adds new academicWeeks for particular school ."
					},
					"response": []
				},
				{
					"name": "Get  by ReferenceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Should return the item matching the supplied academicWeeks reference Id \", () => {",
									"    ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"     pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"     pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"     pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"     pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"     pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"     ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Get method retrieves academicWeeks for given school .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Insert new academicWeeks -Second",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\", pm.variables.replaceIn(\"{{$guid}}\").substring(0, 6));",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(12));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"",
									"",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"const title =\"Should return newly Added Academic weeks for School \"+schoolId;",
									"let isacadmeicWeeksAdded = false;",
									"",
									"",
									"const academicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks\",",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"",
									"",
									"pm.test(title, function () {",
									"    ",
									"    pm.sendRequest(academicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        ",
									"        ",
									"        academicWeeks.json().forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"            isacadmeicWeeksAdded=true;",
									"            pm.environment.set(\"known:academicWeeksReferenceIdforSchool\",responseItem.id);",
									"            const academicWeeksReferenceIds=pm.environment.get(\"known:academicWeeksReferenceIds\");",
									"            academicWeeksReferenceIds.push(responseItem.id);",
									"            pm.environment.set(\"known:academicWeeksReferenceIds\",academicWeeksReferenceIds);",
									"            pm.expect(responseItem.schoolReference.schoolId).to.eql(schoolId);",
									"         }",
									"    });",
									"    ",
									"      pm.expect(Boolean(isacadmeicWeeksAdded)).to.eql(true);",
									"",
									"    }",
									"    });",
									"    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\",\r\n  \"_etag\": \"string\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "Pre-Condition : School record should be pre-populated.\n\nThis api post method adds new academicWeeks for particular school ."
					},
					"response": []
				},
				{
					"name": "Get  by ReferenceId -Second",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the item matching the supplied academicWeeks reference Id \", () => {",
									"    ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"     pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"     pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"     pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"     pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"     pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"     ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Get method retrieves academicWeeks for given school .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "BeginDate is required Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(9));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item  with String was not recognized as a valid date string\", () => {",
									"     ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.modelState[\"request.beginDate\"][0]).to.include(\"The supplied value is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Put method updates academicWeeks for given school .\nThis test method will throw  BeginDate is required error when BeginDate  is not passed in Request."
					},
					"response": []
				},
				{
					"name": "EndDate is required Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(9));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Should return the item  with String was not recognized as a valid date String\", () => {",
									"     ",
									"      const responseItem = pm.response.json();",
									"      pm.expect(responseItem.modelState[\"request.endDate\"][0]).to.include(\"The supplied value is invalid\");",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Put method updates academicWeeks for given school .\nThis test method will throw  EndDate is required error when EndDate  is not passed in Request."
					},
					"response": []
				},
				{
					"name": "Invalid BeginDate & EndDate Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item with BeginDate must be required and not default\", () => {",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"BeginDate is required.\");",
									"});",
									"",
									"pm.test(\"Should return the item with EndDate must be required and not default\", () => {",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"EndDate is required.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"1/1/0001\",\r\n  \"endDate\":\"1/1/0001\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Put method updates academicWeeks for given school .\nThis test method will throw BeginDate & EndDate invalid error when invalid BeginDate & EndDate  is  passed in Request."
					},
					"response": []
				},
				{
					"name": "Invalid Key Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return message indicating key value cannot be changed\", () => {",
									"  const responseItem = pm.response.json();",
									"  pm.expect(responseItem.message).to.include(\"Key values for this resource cannot be changed.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}{{$randomInt}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Put method attempts to update the weekIdentifier property of a specific academicWeek. The weekIdentifier property is part of academicWeek's natural key.\n\nThis test method will throw bad request error 400 because academicWeeks does not support cascading key updates."
					},
					"response": []
				},
				{
					"name": "Put on  EndDate & TotalInstructionalDays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(9));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\",() => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const title =\"Should return newly updated Academic weeks for School \"+schoolId;",
									"const isacadmeicWeeksAdded = false;",
									"const academicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks/\"+pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"),",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"pm.test(title, () => {",
									"    pm.sendRequest(academicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        ",
									"        const responseItem = academicWeeks.json();",
									"         pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"         pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"         pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"         pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"         pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"         pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"",
									"    }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\",\r\n    \"link\": {\r\n      \"rel\": \"\",\r\n      \"href\": \"\"\r\n    }\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\",\r\n  \"_etag\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "Update the AcademicWeeks and Will create Academicweeks if not exist already "
					},
					"response": []
				},
				{
					"name": "Get all academicWeeks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the all items for  academicWeeks\", () => {",
									"    ",
									"     const responseItems = pm.response.json();",
									"     const schoolId =pm.environment.get(\"known:schoolId\");",
									"     const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"     pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api Get method retrieves all academicWeeks .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by weekIdentifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the item for matching week identifier\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      ",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?weekIdentifier={{known:weekIdentifier}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "weekIdentifier",
									"value": "{{known:weekIdentifier}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by weekIdenitifier .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by schoolId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for matching schoolId\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      ",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?schoolId={{known:schoolId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "schoolId",
									"value": "{{known:schoolId}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by SchoolId .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by beginDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for matching beginDate\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      const beginDate =pm.environment.get(\"known:beginDate\");",
									"      ",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier && responseItem.beginDate===beginDate)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?beginDate={{known:beginDate}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "beginDate",
									"value": "{{known:beginDate}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by Begindate .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by endDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for matching endDate\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      const endDate =pm.environment.get(\"known:endDate\");",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem => {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier && responseItem.endDate===endDate)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?endDate={{known:endDate}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "endDate",
									"value": "{{known:endDate}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by endDate.\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by totalInstructionalDays",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for matching TotalInstructionDays\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      const totalInstructionalDays =pm.environment.get(\"known:totalInstructionalDays\");",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem => {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier && responseItem.totalInstructionalDays===totalInstructionalDays)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?totalInstructionalDays={{known:totalInstructionalDays}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "totalInstructionalDays",
									"value": "{{known:totalInstructionalDays}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by totalInstructionalDays.\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for limit\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      const totalInstructionalDays =pm.environment.get(\"known:totalInstructionalDays\");",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier )",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?limit=2",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by limit .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Delete  by ReferenceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"const academicWeeksReferenceIdforSchool =pm.environment.get(\"known:academicWeeksReferenceIdforSchool\");",
									"const title =\" Should academic weeks by ReferenceID \"+academicWeeksReferenceIdforSchool+\" is deleted\";",
									"",
									"const gacademicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks/\"+pm.environment.get(\"known:academicWeeksReferenceIdforSchool\") ,",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"pm.test(title, () => {",
									"    ",
									"    pm.sendRequest(gacademicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        ",
									"    const responseItem = academicWeeks.json();",
									"    pm.expect(responseItem.message).to.include(\"Entity of type \\'AcademicWeek\\' with the specified id was not found\");",
									"    ",
									"    }",
									"    });",
									"});",
									" ",
									"const academicWeeksReferenceIds=pm.environment.get(\"known:academicWeeksReferenceIds\");",
									"const index = academicWeeksReferenceIds.indexOf(pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"if (index !== -1) academicWeeksReferenceIds.splice(index, 1);",
									"pm.environment.set(\"known:academicWeeksReferenceIds\",academicWeeksReferenceIds);",
									"pm.environment.set(\"known:academicWeeksReferenceIdforSchool\",academicWeeksReferenceIds[0]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Delete method deletes academicWeeks by referenceID\nThis test method will validate the academicweeks record is deleted or not."
					},
					"response": []
				},
				{
					"name": "Delete  by ReferenceId Second one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"const academicWeeksReferenceIdforSchool =pm.environment.get(\"known:academicWeeksReferenceIdforSchool\");",
									"const title =\" Should academic weeks by ReferenceID \"+academicWeeksReferenceIdforSchool+\" is deleted\";",
									"",
									"const gacademicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks/\"+pm.environment.get(\"known:academicWeeksReferenceIdforSchool\") ,",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"pm.test(title, () => {",
									"    ",
									"    pm.sendRequest(gacademicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        ",
									"    const responseItem = academicWeeks.json();",
									"    pm.expect(responseItem.message).to.include(\"Entity of type \\'AcademicWeek\\' with the specified id was not found\");",
									"    ",
									"    }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Delete method deletes academicWeeks by referenceID\nThis test method will validate the academicweeks record is deleted or not."
					},
					"response": []
				}
			],
			"description": "This folder will contain CRUD operations for Academic weeks",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Limit/Offset/Total Count",
			"item": [
				{
					"name": "Include total count in Get request without search condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return the DefaultPageSizeLimit items in response\", () => {",
									"     pm.expect(responseItems.length).to.be.at.least(1).and.at.most(500);",
									"});",
									"pm.environment.set('known:courseCode', __.first(responseItems).courseCode);",
									"pm.environment.set('known:totalCount', postman.getResponseHeader(\"Total-Count\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=true",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request ,Set limit to 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return less than or equal to 100  item in response\", () => {",
									"     pm.expect(responseItems.length).to.be.at.most(100);",
									"});",
									"const courses = __.takeRight(responseItems, 25);",
									"const courseCodes = __.map(courses, course => course.courseCode);",
									"console.log(courseCodes);",
									"pm.environment.set(\"known:courseCodes\",courseCodes);    ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=100",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request and a search parameter like course code is passed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"",
									"pm.test(\"Total-Count header has correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Total-Count\")).to.eql(\"1\");",
									"});",
									"",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"    });",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=true&courseCode={{known:courseCode}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								},
								{
									"key": "courseCode",
									"value": "{{known:courseCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"});",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const totalCount =pm.environment.get(\"known:totalCount\");",
									"pm.environment.set(\"known:offset\", Number(totalCount) -1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?offset={{known:offset}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:offset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus 25 and limit is 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 25 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"",
									"pm.test(\"Should match with each  item course  in response\", () => {",
									"    const courseCodes= pm.environment.get(\"known:courseCodes\");",
									"     \t__.each(responseItems, responseItem => {",
									"        \t      pm.expect(__.includes(courseCodes, responseItem.courseCode)).to.equal(true);",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const totalCount =pm.environment.get(\"known:totalCount\");",
									"pm.environment.set(\"known:offset\", Number(totalCount) -25);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?offset={{known:offset}}&limit=25",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:offset}}"
								},
								{
									"key": "limit",
									"value": "25"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Person Entity",
			"item": [
				{
					"name": "Scenario 1 - Create Person With \"District\" sourceSystemDescriptor and associate with Staff",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Staffs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', __.random(10000));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  },\r\n  \"birthDate\": \"1969-09-13\",\r\n  \"firstName\": \"Steve\",\r\n  \"lastSurname\": \"Buck\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"255901\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{supplied:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Staff by StaffUniqueId & PersonId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.test(\"Should return the 1 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(1);",
											"});",
											"",
											"pm.test(\"Should match with Staffs Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Staffs?staffUniqueId={{supplied:{{scenarioId}}:staffUniqueId}}&personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Staffs"
									],
									"query": [
										{
											"key": "staffUniqueId",
											"value": "{{supplied:{{scenarioId}}:staffUniqueId}}"
										},
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 1 - Create Person With \"District\" sourceSystemDescriptor and Associate with Staff\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3 Create Staff With Associated Person\r\nStep 4 Link  Staff With StaffEducationOrganizationEmploymentAssociations\r\nStep 5 Get Staff by StaffUniqueId & PersonUniqueId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Scenario 2 - Create same Person With  different  sourceSystemDescriptor and associate with Staff",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create SourceSystemDescriptors -Two",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':seconddescription', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:seconddescription}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:seconddescription}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:seconddescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create same People with different SourceSystemDescriptor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':secondsourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':seconddescription'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:secondsourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get person by PersonId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 2 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(2);",
											"});",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const sourceSystemDescriptors = [''];",
											"sourceSystemDescriptors.push(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"sourceSystemDescriptors.push(pm.environment.get('supplied:'+scenarioId+':secondsourceSystemDescriptor'));",
											"pm.test(\"Should match with Person Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"       pm.expect(sourceSystemDescriptors.includes(responseItem.sourceSystemDescriptor)).to.equal(true);",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people?personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									],
									"query": [
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Staffs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', __.random(10000));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n     \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:secondsourceSystemDescriptor}}\"\r\n  },\r\n  \"birthDate\": \"1969-09-13\",\r\n  \"firstName\": \"Steve\",\r\n  \"lastSurname\": \"Buck\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"255901\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{supplied:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Staff by StaffUniqueId & personId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 1 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(1);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											" ",
											"pm.test(\"Should match with Staffs Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':secondsourceSystemDescriptor'));",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Staffs?staffUniqueId={{supplied:{{scenarioId}}:staffUniqueId}}&personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Staffs"
									],
									"query": [
										{
											"key": "staffUniqueId",
											"value": "{{supplied:{{scenarioId}}:staffUniqueId}}"
										},
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 2 - Create same Person With  different  sourceSystemDescriptor and associate with Staff\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3  Create \"State\" sourceSystemDescriptor\r\nStep 4 Create same Person With \"State\" sourceSystemDescriptor\r\nStep 5 Create Staff With Associated Person\r\nStep 6 Link  Staff With StaffEducationOrganizationEmploymentAssociations\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Scenario 3 - Create Person With  District  sourceSystemDescriptor and associate with Student",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':StudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':LastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':FirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':BirthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:StudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:BirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"255901001\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{supplied:{{scenarioId}}:StudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get Student By studentuniqueId and personID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });   ",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 1 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(1);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											" ",
											"pm.test(\"Should match with Student Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?studentUniqueId={{supplied:{{scenarioId}}:StudentUniqueId}}&personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									],
									"query": [
										{
											"key": "studentUniqueId",
											"value": "{{supplied:{{scenarioId}}:StudentUniqueId}}"
										},
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 3 - Create Person With \"District\" sourceSystemDescriptor and Associate with Student\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3 Create Student With Associated Person\r\nStep 4 Get Student by StudenID & PersonId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Scenario 4 - Create Person With  District  sourceSystemDescriptor and associate the same person with multiple Student",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':StudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':LastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':FirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':BirthDate',birthDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:StudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:BirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"255901001\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{supplied:{{scenarioId}}:StudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create Student -two",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':SecondStudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':SecondLastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':SecondFirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':SecondBirthDate',birthDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:SecondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:SecondBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:SecondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:SecondLastSurname}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data -Two",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"255901001\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{supplied:{{scenarioId}}:SecondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get Student By personID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });   ",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 2 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(2);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											" ",
											"pm.test(\"Should match with Student Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									],
									"query": [
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 4 - Create Person With  District  sourceSystemDescriptor and associate the same person with multiple Student\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3 Create Student With Associated Person\r\nStep 4 Create another Student With Associated same Person\r\nStep 4 Get Student by  PersonId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Scenario 5 - Create Person With \"District\" sourceSystemDescriptor and Associate with Parent",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Student Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											"",
											"let enteredUSDate=new Date();",
											"enteredUSDate = enteredUSDate.addMonths(-20);",
											"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data for Post Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Contact Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is  201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201) ",
											" });",
											"",
											"if (pm.response.code === 201 ) {",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
											"}",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  },\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"{{ParentOrContactCollectionName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentContactAssociations Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is  201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201) ",
											" });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"{{ParentOrContactName}}Reference\": {\r\n    \"{{ParentOrContactUniqueIdName}}\": \"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"bedtimeReader\": true,\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"{{StudentParentOrContactAssociationCollectionName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Contact By PersonID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200) ",
											" });  ",
											"",
											"if (pm.response.code === 200 ) {",
											"    const __ = require('lodash');",
											"    const responseItems = pm.response.json();",
											"    pm.test(\"Should return the 1 item in response\", () => {",
											"        pm.expect(responseItems).to.have.lengthOf(1);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    ",
											"    pm.test(\"Should match with Student Response \", () => {",
											"        __.each(responseItems, (responseItem) => {",
											"            pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"            pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"        });       ",
											"    });",
											" }",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}?{{ParentOrContactUniqueIdName}}={{supplied:{{scenarioId}}:parentUniqueId}}&personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"{{ParentOrContactCollectionName}}"
									],
									"query": [
										{
											"key": "{{ParentOrContactUniqueIdName}}",
											"value": "{{supplied:{{scenarioId}}:parentUniqueId}}"
										},
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 4 - Create Person With \"District\" sourceSystemDescriptor and Associate with Contact\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3 Create Student With Associated Person\r\nStep 4 Create contact With Associated same Person\r\nStep 4 Get Contact  by PersonId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Limit/Offset/Total Count - Student",
			"item": [
				{
					"name": "Include total count in Get request without search condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return the DefaultPageSizeLimit items in response\", () => {",
									"     pm.expect(responseItems.length).to.equal(500);",
									"});",
									"pm.environment.set('known:studentUniqueId', __.first(responseItems).studentUniqueId);",
									"pm.environment.set('known:studentTotalCount', postman.getResponseHeader(\"Total-Count\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?totalCount=true",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request ,Set limit to 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return less than or equal to 100  item in response\", () => {",
									"     pm.expect(responseItems.length).to.be.at.most(100);",
									"});",
									"const students = __.takeRight(responseItems, 25);",
									"const studentUniqueIds = __.map(students, student => student.studentUniqueId);",
									"console.log(studentUniqueIds);",
									"pm.environment.set(\"known:studentUniqueIds\",studentUniqueIds);    ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?limit=100",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request and a search parameter like Student Unique Id is passed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"",
									"pm.test(\"Total-Count header has correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Total-Count\")).to.eql(\"1\");",
									"});",
									"",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"    });",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?totalCount=true&studentUniqueId={{known:studentUniqueId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								},
								{
									"key": "studentUniqueId",
									"value": "{{known:studentUniqueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"});",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const totalCount =pm.environment.get(\"known:studentTotalCount\");",
									"pm.environment.set(\"known:studentOffset\", Number(totalCount) -1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?offset={{known:studentOffset}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:studentOffset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus 25 and limit is 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 25 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"",
									"pm.test(\"Should match with each  item course  in response\", () => {",
									"    const studentUniqueIds= pm.environment.get(\"known:studentUniqueIds\");",
									"     \t__.each(responseItems, responseItem => {",
									"        \t      pm.expect(__.includes(studentUniqueIds, responseItem.studentUniqueId)).to.equal(true);",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const totalCount =pm.environment.get(\"known:studentTotalCount\");",
									"pm.environment.set(\"known:studentOffset\", 100 - 25);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?offset={{known:studentOffset}}&limit=25",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:studentOffset}}"
								},
								{
									"key": "limit",
									"value": "25"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Limit/Offset/Total Count - Staff",
			"item": [
				{
					"name": "Include total count in Get request without search condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return the DefaultPageSizeLimit items in response\", () => {",
									"     pm.expect(responseItems.length).to.be.at.least(1).and.at.most(500);",
									"});",
									"pm.environment.set('known:staffUniqueId', __.first(responseItems).staffUniqueId);",
									"pm.environment.set('known:staffTotalCount', postman.getResponseHeader(\"Total-Count\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?totalCount=true",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request ,Set limit to 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return less than or equal to 100  item in response\", () => {",
									"     pm.expect(responseItems.length).to.be.at.most(100);",
									"});",
									"const staffs = __.takeRight(responseItems, 25);",
									"const staffUniqueIds = __.map(staffs, staff => staff.staffUniqueId);",
									"console.log(staffUniqueIds);",
									"pm.environment.set(\"known:staffUniqueIds\",staffUniqueIds);    ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?limit=100",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request and a search parameter like Staff Unique Id is passed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"",
									"pm.test(\"Total-Count header has correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Total-Count\")).to.eql(\"1\");",
									"});",
									"",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"    });",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?totalCount=true&staffUniqueId={{known:staffUniqueId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								},
								{
									"key": "staffUniqueId",
									"value": "{{known:staffUniqueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"});",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const totalCount =pm.environment.get(\"known:staffTotalCount\");",
									"pm.environment.set(\"known:staffOffset\", Number(totalCount) -1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?offset={{known:staffOffset}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:staffOffset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus 25 and limit is 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 25 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"",
									"pm.test(\"Should match with each  item course  in response\", () => {",
									"    const staffUniqueIds= pm.environment.get(\"known:staffUniqueIds\");",
									"     \t__.each(responseItems, responseItem => {",
									"        \t      pm.expect(__.includes(staffUniqueIds, responseItem.staffUniqueId)).to.equal(true);",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const totalCount =pm.environment.get(\"known:staffTotalCount\");",
									"pm.environment.set(\"known:staffOffset\", Number(totalCount) -25);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?offset={{known:staffOffset}}&limit=25",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:staffOffset}}"
								},
								{
									"key": "limit",
									"value": "25"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Key unification on locally defined properties",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create FunctionDimension 2022",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:functionDimension:2022:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"Test 2022\",\r\n  \"fiscalYear\": 2022\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/functionDimensions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"functionDimensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create BalanceSheetDimension 2022",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:balanceSheetDimension:2022:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"Test 2022\",\r\n  \"fiscalYear\": 2022\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/balanceSheetDimensions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"balanceSheetDimensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create FunctionDimension 2019",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:functionDimension:2019:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"Test 2019\",\r\n  \"fiscalYear\": 2020\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/functionDimensions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"functionDimensions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Resource with optional unifying references",
					"item": [
						{
							"name": "Property supplied, no references supplied",
							"item": [
								{
									"name": "Create ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:chartOfAccount:1:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 1\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"255901\"\r\n  },\r\n  \"accountTypeDescriptor\": \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property supplied, one reference supplied with matching value",
							"item": [
								{
									"name": "Create ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:chartOfAccount:2:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 2\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"255901\"\r\n  },\r\n  \"functionDimensionReference\": {\r\n    \"code\": \"Test 2022\",\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"accountTypeDescriptor\": \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property supplied, both references supplied with matching values",
							"item": [
								{
									"name": "Create ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:chartOfAccount:3:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 3\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"255901\"\r\n  },\r\n  \"functionDimensionReference\": {\r\n    \"code\": \"Test 2022\",\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"balanceSheetDimensionReference\": {\r\n    \"code\": \"Test 2022\",\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"accountTypeDescriptor\": \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"FunctionDimensionReference and BalanceSheetDimensionReference are initialized\", () => {\r",
													"  pm.expect(pm.response.json().functionDimensionReference.fiscalYear).to.equal(2022);\r",
													"  pm.expect(pm.response.json().balanceSheetDimensionReference.fiscalYear).to.equal(2022);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:chartOfAccount:3:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts",
												"{{known:chartOfAccount:3:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property supplied, one reference supplied with mismatched value to property",
							"item": [
								{
									"name": "Create ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a message indicating that unified keys don't match.\", () => {\r",
													"\r",
													"  const responseItem = pm.response.json();\r",
													"  pm.expect(responseItem.message).to.include(\"Supplied values for unified key property 'fiscalYear' on 'ChartOfAccount' are not consistent: fiscalYear = 2022, functionDimensionReference.fiscalYear = 2019\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 4\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"255901\"\r\n  },\r\n  \"functionDimensionReference\": {\r\n    \"code\": \"Test 2019\",\r\n    \"fiscalYear\": 2019\r\n  },\r\n  \"accountTypeDescriptor\": \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property supplied, both references supplied with one mismatched value",
							"item": [
								{
									"name": "Create ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a message indicating that unified keys don't match.\", () => {\r",
													"\r",
													"  const responseItem = pm.response.json();\r",
													"  pm.expect(responseItem.message).to.include(\"Supplied values for unified key property 'fiscalYear' on 'ChartOfAccount' are not consistent: fiscalYear = 2022, balanceSheetDimensionReference.fiscalYear = 2022, functionDimensionReference.fiscalYear = 2019\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 5\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"255901\"\r\n  },\r\n  \"functionDimensionReference\": {\r\n    \"code\": \"Test 2019\",\r\n    \"fiscalYear\": 2019\r\n  },\r\n  \"balanceSheetDimensionReference\": {\r\n    \"code\": \"Test 2022\",\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"accountTypeDescriptor\": \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property not supplied, no references supplied",
							"item": [
								{
									"name": "Create ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a message indicating that FiscalYear was not explicitly assigned\", () => {\r",
													"\r",
													"    const responseItem = pm.response.json();\r",
													"    const expectedErrorMessage1 = \"The request is invalid.\";\r",
													"    pm.expect(responseItem.message).to.satisfy(function (message) {\r",
													"        return (message === expectedErrorMessage1);\r",
													"    });\r",
													"\r",
													"    if (request && request.FiscalYear) {\r",
													"    pm.expect(responseItem.modelState[\"request.FiscalYear\"]).to.contain(\"Required value not explicitly assigned.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 6\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"255901\"\r\n  },\r\n  \"accountTypeDescriptor\": \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property not supplied, one reference supplied",
							"item": [
								{
									"name": "Create ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a message indicating that FiscalYear was not explicitly assigned\", () => {\r",
													"\r",
													"    const responseItem = pm.response.json();\r",
													"    const expectedErrorMessage1 = \"The request is invalid.\";\r",
													"    pm.expect(responseItem.message).to.satisfy(function (message) {\r",
													"        return (message === expectedErrorMessage1);\r",
													"    });\r",
													"\r",
													"    if (request && request.FiscalYear) {\r",
													"    pm.expect(responseItem.modelState[\"request.FiscalYear\"]).to.contain(\"Required value not explicitly assigned.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 7\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"255901\"\r\n  },\r\n  \"functionDimensionReference\": {\r\n    \"code\": \"Test 2022\",\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"accountTypeDescriptor\": \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property not supplied, both references supplied with values matching each other",
							"item": [
								{
									"name": "Create ChartOfAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a message indicating that FiscalYear was not explicitly assigned\", () => {\r",
													"\r",
													"    const responseItem = pm.response.json();\r",
													"    const expectedErrorMessage1 = \"The request is invalid.\";\r",
													"    pm.expect(responseItem.message).to.satisfy(function (message) {\r",
													"        return (message === expectedErrorMessage1);\r",
													"    });\r",
													"\r",
													"    if (request && request.FiscalYear) {\r",
													"    pm.expect(responseItem.modelState[\"request.FiscalYear\"]).to.contain(\"Required value not explicitly assigned.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 8\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"255901\"\r\n  },\r\n  \"functionDimensionReference\": {\r\n    \"code\": \"Test 2022\",\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"balanceSheetDimensionReference\": {\r\n    \"code\": \"Test 2022\",\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"accountTypeDescriptor\": \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"chartOfAccounts"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Resource with required unifying reference",
					"item": [
						{
							"name": "Property supplied, no references supplied",
							"item": [
								{
									"name": "Create LocalAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a message indicating that FiscalYear is required\", () => {\r",
													"\r",
													"  const responseItem = pm.response.json();\r",
													"  pm.expect(responseItem.message).to.include(\"ChartOfAccountEducationOrganizationId is required\");\r",
													"  pm.expect(responseItem.message).to.include(\"ChartOfAccountIdentifier is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 1\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localAccounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property supplied, required reference supplied with matching value",
							"item": [
								{
									"name": "Create LocalAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:localAccount:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 2\",\r\n  \"fiscalYear\": 2022,\r\n  \"chartOfAccountReference\": {\r\n    \"accountIdentifier\": \"Test 3\",\r\n    \"educationOrganizationId\": 255901,\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localAccounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get LocalAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"ChartOfAccount reference is initialized\", () => {\r",
													"  pm.expect(pm.response.json().chartOfAccountReference.fiscalYear).to.equal(2022);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localAccounts/{{known:localAccount:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localAccounts",
												"{{known:localAccount:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property supplied, required reference supplied with non-matching value",
							"item": [
								{
									"name": "Create LocalAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a message indicating that unified keys don't match.\", () => {\r",
													"\r",
													"  const responseItem = pm.response.json();\r",
													"  pm.expect(responseItem.message).to.include(\"Supplied values for unified key property 'fiscalYear' on 'LocalAccount' are not consistent: fiscalYear = 2019, chartOfAccountReference.fiscalYear = 2022\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 3\",\r\n  \"fiscalYear\": 2019,\r\n  \"chartOfAccountReference\": {\r\n    \"accountIdentifier\": \"Test 3\",\r\n    \"educationOrganizationId\": 255901,\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localAccounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Property not supplied, required reference supplied",
							"item": [
								{
									"name": "Create LocalAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a message indicating that FiscalYear was not explicitly assigned\", () => {\r",
													"\r",
													"    const responseItem = pm.response.json();\r",
													"    const expectedErrorMessage1 = \"The request is invalid.\";\r",
													"    pm.expect(responseItem.message).to.satisfy(function (message) {\r",
													"        return (message === expectedErrorMessage1);\r",
													"    });\r",
													"\r",
													"    if (request && request.FiscalYear) {\r",
													"    pm.expect(responseItem.modelState[\"request.FiscalYear\"]).to.contain(\"Required value not explicitly assigned.\");\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"accountIdentifier\": \"Test 3\",\r\n  \"chartOfAccountReference\": {\r\n    \"accountIdentifier\": \"Test 3\",\r\n    \"educationOrganizationId\": 255901,\r\n    \"fiscalYear\": 2022\r\n  },\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localAccounts",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localAccounts"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete ChartOfAccount 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:chartOfAccount:1:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"chartOfAccounts",
										"{{known:chartOfAccount:1:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ChartOfAccount 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:chartOfAccount:2:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"chartOfAccounts",
										"{{known:chartOfAccount:2:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LocalAccount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localAccounts/{{known:localAccount:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localAccounts",
										"{{known:localAccount:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ChartOfAccount 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:chartOfAccount:3:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"chartOfAccounts",
										"{{known:chartOfAccount:3:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete FunctionDimension 2022",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/functionDimensions/{{known:functionDimension:2022:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"functionDimensions",
										"{{known:functionDimension:2022:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete FunctionDimension 2019",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/functionDimensions/{{known:functionDimension:2019:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"functionDimensions",
										"{{known:functionDimension:2019:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete BalanceSheetDimension 2022",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/balanceSheetDimensions/{{known:balanceSheetDimension:2022:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"balanceSheetDimensions",
										"{{known:balanceSheetDimension:2022:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Data Validation",
			"item": [
				{
					"name": "String Length",
					"item": [
						{
							"name": "Create Staff with Pet with name too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Should indicate that the pet name should have a length between 3 and 20 characters\", () => {\r",
											"  const message = pm.response.json().message;\r",
											"\r",
											"  pm.expect(message).to.contain(\"The field PetName must be a string with a minimum length of 3 and a maximum length of 20.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"staffUniqueId\": \"TEST-StringLength\",\r\n    \"birthDate\": \"1976-08-19\",\r\n    \"firstName\": \"Barry\",\r\n    \"highestCompletedLevelOfEducationDescriptor\": \"uri://ed-fi.org/LevelOfEducationDescriptor#Master's\",\r\n    \"hispanicLatinoEthnicity\": false,\r\n    \"lastSurname\": \"Tanner\",\r\n    \"loginId\": \"btanner\",\r\n    \"personalTitlePrefix\": \"Mr\",\r\n    \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Male\",\r\n    \"yearsOfPriorProfessionalExperience\": 30.00,\r\n    \"_ext\": {\r\n      \"Sample\": {\r\n        \"pets\": [\r\n          {\r\n            \"petName\": \"It\",\r\n            \"isFixed\": true\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"addresses\": [],\r\n    \"ancestryEthnicOrigins\": [],\r\n    \"credentials\": [],\r\n    \"electronicMails\": [\r\n      {\r\n        \"electronicMailAddress\": \"BarryTanner@edfi.org\",\r\n        \"electronicMailTypeDescriptor\": \"uri://ed-fi.org/ElectronicMailTypeDescriptor#Work\"\r\n      }\r\n    ],\r\n    \"identificationCodes\": [\r\n      {\r\n        \"staffIdentificationSystemDescriptor\": \"uri://ed-fi.org/StaffIdentificationSystemDescriptor#State\",\r\n        \"identificationCode\": \"207288\"\r\n      }\r\n    ],\r\n    \"identificationDocuments\": [],\r\n    \"internationalAddresses\": [],\r\n    \"languages\": [],\r\n    \"otherNames\": [],\r\n    \"personalIdentificationDocuments\": [\r\n      {\r\n        \"identificationDocumentUseDescriptor\": \"uri://ed-fi.org/IdentificationDocumentUseDescriptor#Personal Information Verification\",\r\n        \"personalInformationVerificationDescriptor\": \"uri://ed-fi.org/PersonalInformationVerificationDescriptor#State-issued ID\"\r\n      }\r\n    ],\r\n    \"races\": [\r\n      {\r\n        \"raceDescriptor\": \"uri://ed-fi.org/RaceDescriptor#American Indian - Alaska Native\"\r\n      }\r\n    ],\r\n    \"recognitions\": [],\r\n    \"telephones\": [],\r\n    \"tribalAffiliations\": [],\r\n    \"visas\": []\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Staff with Pet with name too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Should indicate that the pet name should have a length between 3 and 20 characters\", () => {\r",
											"  const message = pm.response.json().message;\r",
											"\r",
											"  pm.expect(message).to.contain(\"The field PetName must be a string with a minimum length of 3 and a maximum length of 20.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"staffUniqueId\": \"TEST-StringLength\",\r\n    \"birthDate\": \"1976-08-19\",\r\n    \"firstName\": \"Barry\",\r\n    \"highestCompletedLevelOfEducationDescriptor\": \"uri://ed-fi.org/LevelOfEducationDescriptor#Master's\",\r\n    \"hispanicLatinoEthnicity\": false,\r\n    \"lastSurname\": \"Tanner\",\r\n    \"loginId\": \"btanner\",\r\n    \"personalTitlePrefix\": \"Mr\",\r\n    \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Male\",\r\n    \"yearsOfPriorProfessionalExperience\": 30.00,\r\n    \"_ext\": {\r\n      \"Sample\": {\r\n        \"pets\": [\r\n          {\r\n            \"petName\": \"John Jacob Jingleheimer Schmidt\",\r\n            \"isFixed\": true\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"addresses\": [],\r\n    \"ancestryEthnicOrigins\": [],\r\n    \"credentials\": [],\r\n    \"electronicMails\": [\r\n      {\r\n        \"electronicMailAddress\": \"BarryTanner@edfi.org\",\r\n        \"electronicMailTypeDescriptor\": \"uri://ed-fi.org/ElectronicMailTypeDescriptor#Work\"\r\n      }\r\n    ],\r\n    \"identificationCodes\": [\r\n      {\r\n        \"staffIdentificationSystemDescriptor\": \"uri://ed-fi.org/StaffIdentificationSystemDescriptor#State\",\r\n        \"identificationCode\": \"207288\"\r\n      }\r\n    ],\r\n    \"identificationDocuments\": [],\r\n    \"internationalAddresses\": [],\r\n    \"languages\": [],\r\n    \"otherNames\": [],\r\n    \"personalIdentificationDocuments\": [\r\n      {\r\n        \"identificationDocumentUseDescriptor\": \"uri://ed-fi.org/IdentificationDocumentUseDescriptor#Personal Information Verification\",\r\n        \"personalInformationVerificationDescriptor\": \"uri://ed-fi.org/PersonalInformationVerificationDescriptor#State-issued ID\"\r\n      }\r\n    ],\r\n    \"races\": [\r\n      {\r\n        \"raceDescriptor\": \"uri://ed-fi.org/RaceDescriptor#American Indian - Alaska Native\"\r\n      }\r\n    ],\r\n    \"recognitions\": [],\r\n    \"telephones\": [],\r\n    \"tribalAffiliations\": [],\r\n    \"visas\": []\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Staff with Pet with name valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:staff:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"staffUniqueId\": \"TEST-StringLength\",\r\n    \"birthDate\": \"1976-08-19\",\r\n    \"firstName\": \"Barry\",\r\n    \"highestCompletedLevelOfEducationDescriptor\": \"uri://ed-fi.org/LevelOfEducationDescriptor#Master's\",\r\n    \"hispanicLatinoEthnicity\": false,\r\n    \"lastSurname\": \"Tanner\",\r\n    \"loginId\": \"btanner\",\r\n    \"personalTitlePrefix\": \"Mr\",\r\n    \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Male\",\r\n    \"yearsOfPriorProfessionalExperience\": 30.00,\r\n    \"_ext\": {\r\n      \"Sample\": {\r\n        \"pets\": [\r\n          {\r\n            \"petName\": \"Gecko of Awesomeness\",\r\n            \"isFixed\": true\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"addresses\": [],\r\n    \"ancestryEthnicOrigins\": [],\r\n    \"credentials\": [],\r\n    \"electronicMails\": [\r\n      {\r\n        \"electronicMailAddress\": \"BarryTanner@edfi.org\",\r\n        \"electronicMailTypeDescriptor\": \"uri://ed-fi.org/ElectronicMailTypeDescriptor#Work\"\r\n      }\r\n    ],\r\n    \"identificationCodes\": [\r\n      {\r\n        \"staffIdentificationSystemDescriptor\": \"uri://ed-fi.org/StaffIdentificationSystemDescriptor#State\",\r\n        \"identificationCode\": \"207288\"\r\n      }\r\n    ],\r\n    \"identificationDocuments\": [],\r\n    \"internationalAddresses\": [],\r\n    \"languages\": [],\r\n    \"otherNames\": [],\r\n    \"personalIdentificationDocuments\": [\r\n      {\r\n        \"identificationDocumentUseDescriptor\": \"uri://ed-fi.org/IdentificationDocumentUseDescriptor#Personal Information Verification\",\r\n        \"personalInformationVerificationDescriptor\": \"uri://ed-fi.org/PersonalInformationVerificationDescriptor#State-issued ID\"\r\n      }\r\n    ],\r\n    \"races\": [\r\n      {\r\n        \"raceDescriptor\": \"uri://ed-fi.org/RaceDescriptor#American Indian - Alaska Native\"\r\n      }\r\n    ],\r\n    \"recognitions\": [],\r\n    \"telephones\": [],\r\n    \"tribalAffiliations\": [],\r\n    \"visas\": []\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs",
										"{{known:staff:id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Embedded Objects",
					"item": [
						{
							"name": "Required",
							"item": [
								{
									"name": "Invalid (Required Object Missing)",
									"item": [
										{
											"name": "Create LearningStandard without ContentStandard",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Should indicate that the LearningStandard is required\", () => {\r",
															"  const message = pm.response.json().message;\r",
															"\r",
															"  pm.expect(message).to.contain(\"The LearningStandardContentStandard field is required.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"learningStandardId\": \"REQUIRED-TEST\",\r\n  \"description\": \"Reading/Beginning Reading Skills/Print Awareness. Students understand how English is written and printed.\",\r\n  \"namespace\": \"uri://ed-fi.org/LearningStandard/LearningStandard.xml\",\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/learningStandards",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"learningStandards"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid (Required Object Supplied)",
									"item": [
										{
											"name": "Create LearningStandard with ContentStandard",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(201);\r",
															"});\r",
															"\r",
															"pm.environment.set('known:learningStandard:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"learningStandardId\": \"REQUIRED-TEST\",\r\n  \"contentStandard\": {\r\n    \"title\": \"State Standard\",\r\n    \"authors\": []\r\n  },\r\n  \"description\": \"Reading/Beginning Reading Skills/Print Awareness. Students understand how English is written and printed.\",\r\n  \"namespace\": \"uri://ed-fi.org/LearningStandard/LearningStandard.xml\",\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/learningStandards",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"learningStandards"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Teardown",
									"item": [
										{
											"name": "Delete the LearningStandard",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/learningStandards/{{known:learningStandard:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"learningStandards",
														"{{known:learningStandard:id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Optional",
							"item": [
								{
									"name": "Valid (Optional Object)",
									"item": [
										{
											"name": "Create Assessment without ContentStandard",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(201);\r",
															"});\r",
															"\r",
															"pm.environment.set('known:assessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"assessmentIdentifier\": \"TEST-ASSESSMENT\",\r\n  \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\",\r\n  \"assessmentTitle\": \"3rd Grade Reading 1st Six Weeks 2021-2022\",\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Assessment adding the ContentStandard",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.environment.set('known:assessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"assessmentIdentifier\": \"TEST-ASSESSMENT\",\r\n  \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\",\r\n  \"assessmentTitle\": \"3rd Grade Reading 1st Six Weeks 2021-2022\",\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n    }\r\n  ],\r\n  \"contentStandard\": {\r\n    \"title\": \"State Essential Knowledge and Skills\",\r\n    \"authors\": []\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Teardown",
									"item": [
										{
											"name": "Delete the Assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments",
														"{{known:assessment:id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Extensions",
					"item": [
						{
							"name": "Aggregate Extensions",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Initialize Supplied Contact UniqueId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"supplied:parentOrContact:uniqueId\", pm.variables.replaceIn(\"AGGREGATE-EXTENSION-{{$randomInt}}{{$randomInt}}\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}?limit=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"{{ParentOrContactCollectionName}}"
													],
													"query": [
														{
															"key": "limit",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid (Collections Empty)",
									"item": [
										{
											"name": "Create Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is  400\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(400);\r",
															"});\r",
															"\r",
															"const parentOrContactProperName = pm.environment.get('parentOrContactProperName');\r",
															"\r",
															"const message = pm.response.json().message;\r",
															"\r",
															"/*\r",
															"    string FavoriteBookTitle\r",
															"        documentation \"The title of the contact's favorite book.\"\r",
															"        is required collection\r",
															"        max length 100\r",
															"*/\r",
															"pm.test(\"Should indicate that the required collection has no items.\", () => {\r",
															"  pm.expect(message).to.contain(`FavoriteBookTitles (Sample) requires at least one object in the collection.`);\r",
															"});\r",
															"\r",
															"/*\r",
															"    shared string EdFi.Author\r",
															"        documentation \"The contact's favorite authors.\"\r",
															"        is optional collection\r",
															"*/\r",
															"pm.test(\"Should NOT indicate any issues with the optional collection that is empty.\", () => {\r",
															"  pm.expect(message).to.not.contain(`${parentOrContactProperName}Authors (Sample)`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:parentOrContact:uniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"{{ParentOrContactCollectionName}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid (Embedded Objects Not Supplied)",
									"item": [
										{
											"name": "Create Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is  400\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(400);\r",
															"});\r",
															"\r",
															"const parentOrContactProperName = pm.environment.get('ParentOrContactProperName');\r",
															"\r",
															"if (pm.response.code === 400) {\r",
															"  const message = pm.response.json().message;\r",
															"\r",
															"  /*\r",
															"      common TeacherConference\r",
															"          documentation \"The contact's preferred day of the week and time for contact-teacher conferences.\"\r",
															"          is required\r",
															"  */\r",
															"  pm.test(\"Should indicate that the required embedded object is missing.\", () => {\r",
															"    pm.expect(message).to.contain(`${parentOrContactProperName}TeacherConference (Sample) is required.`);\r",
															"  });\r",
															"\r",
															"  /*\r",
															"      common EdFi.CTEProgram\r",
															"          documentation \"A CTE program the contact has completed.\"\r",
															"          is optional\r",
															"  */\r",
															"  pm.test(\"Should NOT indicate any issues with the optional embedded object that is missing.\", () => {\r",
															"    pm.expect(message).to.not.contain(`${parentOrContactProperName}CTEProgram (Sample)`);\r",
															"  });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:parentOrContact:uniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"{{ParentOrContactCollectionName}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid (Required Items Supplied)",
									"item": [
										{
											"name": "Create Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is  201\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															" });\r",
															"\r",
															"pm.environment.set('known:parentOrContact:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:parentOrContact:uniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"{{ParentOrContactCollectionName}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Teardown",
									"item": [
										{
											"name": "Delete the Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is  204\", () => {",
															"  pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.writable+json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}/{{known:parentOrContact:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"{{ParentOrContactCollectionName}}",
														"{{known:parentOrContact:id}}"
													]
												},
												"description": "Scenario: A POST request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
											},
											"response": []
										},
										{
											"name": "Clean up Environment Variables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
															"_.chain(_.keys(pm.environment.toObject()))\r",
															"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
															"  .each(k => pm.environment.unset(k)).value();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}",
													"host": [
														"{{ApiBaseUrl}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Deletes",
			"item": [
				{
					"name": "Inheritance-based Entities",
					"item": [
						{
							"name": "Descriptors",
							"item": [
								{
									"name": "Create Descriptor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:descriptor:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"codeValue\": \"Delete-Test\",\r\n  \"description\": \"Delete-Test\",\r\n  \"namespace\": \"uri://ed-fi.org/AcademicSubjectDescriptor\",\r\n  \"shortDescription\": \"Delete-Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/AcademicSubjectDescriptors",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"AcademicSubjectDescriptors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Descriptor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/AcademicSubjectDescriptors/{{known:descriptor:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"AcademicSubjectDescriptors",
												"{{known:descriptor:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Education Organizations (single column PK)",
							"item": [
								{
									"name": "Create School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "  {\r\n    \"schoolId\": 999999,\r\n    \"nameOfInstitution\": \"Test School\",\r\n    \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n        \"city\": \"Austin\",\r\n        \"postalCode\": \"78712\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"1912 Speedway Stop D5000\",\r\n        \"nameOfCounty\": \"Travis\",\r\n        \"periods\": []\r\n      }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n    \"identificationCodes\": [],\r\n    \"indicators\": [],\r\n    \"institutionTelephones\": [],\r\n    \"internationalAddresses\": [],\r\n    \"schoolCategories\": [],\r\n    \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\"\r\n      }\r\n    ]\r\n  }\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:school:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Student Program Associations (composite PK)",
							"item": [
								{
									"name": "Create Student Program Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:studentProgramAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  },\r\n  \"programReference\": {\r\n    \"educationOrganizationId\": 255901,\r\n    \"programName\": \"Special Education\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Special Education\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"604872\"\r\n  },\r\n  \"beginDate\": \"2099-09-09\",\r\n  \"ideaEligibility\": true,\r\n  \"iepBeginDate\": \"2021-09-01\",\r\n  \"iepReviewDate\": \"2021-08-27\",\r\n  \"lastEvaluationDate\": \"2021-08-23\",\r\n  \"schoolHoursPerWeek\": 10.00,\r\n  \"specialEducationHoursPerWeek\": 25.00,\r\n  \"specialEducationSettingDescriptor\": \"uri://ed-fi.org/SpecialEducationSettingDescriptor#Inside regular class less than 40% of the day\",\r\n  \"programParticipationStatuses\": [],\r\n  \"disabilities\": [\r\n    {\r\n      \"disabilityDescriptor\": \"uri://ed-fi.org/DisabilityDescriptor#Autism Spectrum Disorders\",\r\n      \"designations\": []\r\n    }\r\n  ],\r\n  \"serviceProviders\": [],\r\n  \"specialEducationProgramServices\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Student Program Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentProgramAssociation:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations",
												"{{known:studentProgramAssociation:id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Standard Entities",
					"item": [
						{
							"name": "Student (alternate key-based)",
							"item": [
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "  {\r\n    \"studentUniqueId\": \"DELETE-TEST\",\r\n    \"birthDate\": \"2008-09-13\",\r\n    \"firstName\": \"John\",\r\n    \"lastSurname\": \"Doe\",\r\n    \"middleName\": \"X\",\r\n    \"personalTitlePrefix\": \"Ms\",\r\n    \"identificationDocuments\": [],\r\n    \"otherNames\": [],\r\n    \"personalIdentificationDocuments\": [],\r\n    \"visas\": []\r\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Academic Week (composite PK)",
							"item": [
								{
									"name": "Create Academic Week",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:academicWeek:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"weekIdentifier\": \"TEST-DELETE\",\r\n  \"beginDate\": \"2099-09-09\",\r\n  \"endDate\": \"2099-09-09\",\r\n  \"totalInstructionalDays\": 5\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"academicWeeks"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Academic Week",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeek:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"academicWeeks",
												"{{known:academicWeek:id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "StudentProgramAssociations",
			"item": [
				{
					"name": "Get Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const __ = require('lodash');\r",
									"const responseItems = pm.response.json();\r",
									"pm.environment.set('known:studentUniqueId', __.first(responseItems).studentUniqueId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New StudentProgramAssociation with a Service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');\r",
									"\r",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");\r",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));\r",
									"\r",
									"const moment = require('moment');\r",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");\r",
									"pm.environment.set(\"known:educationOrganizationId\", 255901);\r",
									"pm.environment.set(\"known:beginDate\",beginDate);\r",
									"pm.environment.set(\"known:programName\", \"Bilingual\");\r",
									"pm.environment.set(\"known:programTypeDescriptor\", \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\");\r",
									"pm.environment.set(\"known:serviceDescriptor\", \"uri://ed-fi.org/ServiceDescriptor#Counseling services\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": \"{{known:educationOrganizationId}}\"\r\n    },\r\n    \"programReference\": {\r\n        \"educationOrganizationId\": \"{{known:educationOrganizationId}}\",\r\n        \"programName\": \"{{known:programName}}\",\r\n        \"programTypeDescriptor\": \"{{known:programTypeDescriptor}}\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:studentUniqueId}}\"\r\n    },\r\n    \"beginDate\": \"{{known:beginDate}}\",\r\n    \"services\": [\r\n        {\r\n            \"serviceDescriptor\": \"{{known:serviceDescriptor}}\"\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentProgramAssociations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get StudentProgramAssociation with a Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const __ = require('lodash');\r",
									"const responseItems = pm.response.json();\r",
									"const studentProgramAssociation = __.first(responseItems);\r",
									"pm.environment.set('known:studentProgramAssociationId', studentProgramAssociation.id);\r",
									"\r",
									"pm.expect(studentProgramAssociation.beginDate).to.equal(pm.environment.get('known:beginDate'));\r",
									"\r",
									"pm.expect(studentProgramAssociation.educationOrganizationReference.educationOrganizationId).to.equal(pm.environment.get('known:educationOrganizationId'));\r",
									"\r",
									"pm.expect(studentProgramAssociation.studentReference.studentUniqueId).to.equal(pm.environment.get('known:studentUniqueId'));\r",
									"\r",
									"pm.expect(studentProgramAssociation.programReference.educationOrganizationId).to.equal(pm.environment.get(\"known:educationOrganizationId\"));\r",
									"pm.expect(studentProgramAssociation.programReference.programName).to.equal(pm.environment.get(\"known:programName\"));\r",
									"pm.expect(studentProgramAssociation.programReference.programTypeDescriptor).to.equal(pm.environment.get(\"known:programTypeDescriptor\"));\r",
									"\r",
									"const services = studentProgramAssociation.services;\r",
									"pm.expect(services.length).to.equal(1);\r",
									"pm.expect(services[0].serviceDescriptor).to.equal(pm.environment.get(\"known:serviceDescriptor\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations?beginDate={{known:beginDate}}&studentUniqueId={{known:studentUniqueId}}&educationOrganizationId={{known:educationOrganizationId}}&programEducationOrganizationId={{known:educationOrganizationId}}&programName={{known:programName}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentProgramAssociations"
							],
							"query": [
								{
									"key": "beginDate",
									"value": "{{known:beginDate}}"
								},
								{
									"key": "studentUniqueId",
									"value": "{{known:studentUniqueId}}"
								},
								{
									"key": "educationOrganizationId",
									"value": "{{known:educationOrganizationId}}"
								},
								{
									"key": "programEducationOrganizationId",
									"value": "{{known:educationOrganizationId}}"
								},
								{
									"key": "programName",
									"value": "{{known:programName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update StudentProgramAssociation Removing the Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"known:reasonExitedDescriptor\", \"uri://ed-fi.org/ReasonExitedDescriptor#Transferred to another district or school\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": \"{{known:educationOrganizationId}}\"\r\n    },\r\n    \"programReference\": {\r\n        \"educationOrganizationId\": \"{{known:educationOrganizationId}}\",\r\n        \"programName\": \"{{known:programName}}\",\r\n        \"programTypeDescriptor\": \"{{known:programTypeDescriptor}}\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:studentUniqueId}}\"\r\n    },\r\n    \"beginDate\": \"{{known:beginDate}}\",\r\n    \"reasonExitedDescriptor\" : \"{{known:reasonExitedDescriptor}}\",\r\n    \"services\": []\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentProgramAssociations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get StudentProgramAssociation with no Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const studentProgramAssociation = pm.response.json();\r",
									"\r",
									"pm.expect(studentProgramAssociation.beginDate).to.equal(pm.environment.get('known:beginDate'));\r",
									"pm.expect(studentProgramAssociation.reasonExitedDescriptor).to.equal(pm.environment.get('known:reasonExitedDescriptor'));\r",
									"\r",
									"pm.expect(studentProgramAssociation.educationOrganizationReference.educationOrganizationId).to.equal(pm.environment.get('known:educationOrganizationId'));\r",
									"\r",
									"pm.expect(studentProgramAssociation.studentReference.studentUniqueId).to.equal(pm.environment.get('known:studentUniqueId'));\r",
									"\r",
									"pm.expect(studentProgramAssociation.programReference.educationOrganizationId).to.equal(pm.environment.get(\"known:educationOrganizationId\"));\r",
									"pm.expect(studentProgramAssociation.programReference.programName).to.equal(pm.environment.get(\"known:programName\"));\r",
									"pm.expect(studentProgramAssociation.programReference.programTypeDescriptor).to.equal(pm.environment.get(\"known:programTypeDescriptor\"));\r",
									"\r",
									"const services = studentProgramAssociation.services;\r",
									"pm.expect(services.length).to.equal(0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations/{{known:studentProgramAssociationId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentProgramAssociations",
								"{{known:studentProgramAssociationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete StudentProgramAssociation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations/{{known:studentProgramAssociationId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentProgramAssociations",
								"{{known:studentProgramAssociationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "StudentTitleIPartAProgramAssociation",
			"item": [
				{
					"name": "Get Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const __ = require('lodash');\r",
									"const responseItems = pm.response.json();\r",
									"pm.environment.set('known:studentUniqueId', __.first(responseItems).studentUniqueId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New StudentTitleIPartAProgramAssociation with a service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');\r",
									"\r",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");\r",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));\r",
									"\r",
									"const moment = require('moment');\r",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");\r",
									"pm.environment.set(\"known:educationOrganizationId\", 255901);\r",
									"pm.environment.set(\"known:beginDate\",beginDate);\r",
									"pm.environment.set(\"known:programName\", \"Bilingual\");\r",
									"pm.environment.set(\"known:programTypeDescriptor\", \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\");\r",
									"pm.environment.set(\"known:serviceDescriptor\", \"uri://ed-fi.org/ServiceDescriptor#Counseling services\");\r",
									"pm.environment.set(\"known:titleIPartAParticipantDescriptor\", \"uri://ed-fi.org/TitleIPartAParticipantDescriptor#Local Neglected Program\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": \"{{known:educationOrganizationId}}\"\r\n    },\r\n    \"programReference\": {\r\n        \"educationOrganizationId\": \"{{known:educationOrganizationId}}\",\r\n        \"programName\": \"{{known:programName}}\",\r\n        \"programTypeDescriptor\": \"{{known:programTypeDescriptor}}\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:studentUniqueId}}\"\r\n    },\r\n    \"beginDate\": \"{{known:beginDate}}\",\r\n    \"titleIPartAParticipantDescriptor\": \"{{known:titleIPartAParticipantDescriptor}}\",\r\n    \"services\": [\r\n        {\r\n            \"serviceDescriptor\": \"{{known:serviceDescriptor}}\"\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTitleIPartAProgramAssociations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTitleIPartAProgramAssociations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get StudentTitleIPartAProgramAssociation and test for service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const __ = require('lodash');\r",
									"const responseItems = pm.response.json();\r",
									"const studentTitleIPartAProgramAssociation = __.first(responseItems);\r",
									"pm.environment.set('known:studentTitleIPartAProgramAssociationsId', studentTitleIPartAProgramAssociation.id);\r",
									"\r",
									"pm.expect(studentTitleIPartAProgramAssociation.beginDate).to.equal(pm.environment.get('known:beginDate'));\r",
									"\r",
									"pm.expect(studentTitleIPartAProgramAssociation.educationOrganizationReference.educationOrganizationId).to.equal(pm.environment.get('known:educationOrganizationId'));\r",
									"\r",
									"pm.expect(studentTitleIPartAProgramAssociation.studentReference.studentUniqueId).to.equal(pm.environment.get('known:studentUniqueId'));\r",
									"\r",
									"pm.expect(studentTitleIPartAProgramAssociation.programReference.educationOrganizationId).to.equal(pm.environment.get(\"known:educationOrganizationId\"));\r",
									"pm.expect(studentTitleIPartAProgramAssociation.programReference.programName).to.equal(pm.environment.get(\"known:programName\"));\r",
									"pm.expect(studentTitleIPartAProgramAssociation.programReference.programTypeDescriptor).to.equal(pm.environment.get(\"known:programTypeDescriptor\"));\r",
									"\r",
									"// In StandardVersion 5.0.0 the services property was removed from studentTitleIPartAProgramAssociations\r",
									"// We use ParentOrContactName environment variable to differentiate between standard versions. \r",
									"if(pm.environment.get(\"ParentOrContactName\") == \"contact\") {\r",
									"    pm.expect(studentTitleIPartAProgramAssociation.services).to.be.undefined;\r",
									"} else if(pm.environment.get(\"ParentOrContactName\") == \"parent\") {\r",
									"    const services = studentTitleIPartAProgramAssociation.services;\r",
									"    pm.expect(services.length).to.equal(1);\r",
									"    pm.expect(services[0].serviceDescriptor).to.equal(pm.environment.get(\"known:serviceDescriptor\"));\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTitleIPartAProgramAssociations?beginDate={{known:beginDate}}&studentUniqueId={{known:studentUniqueId}}&educationOrganizationId={{known:educationOrganizationId}}&programEducationOrganizationId={{known:educationOrganizationId}}&programName={{known:programName}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTitleIPartAProgramAssociations"
							],
							"query": [
								{
									"key": "beginDate",
									"value": "{{known:beginDate}}"
								},
								{
									"key": "studentUniqueId",
									"value": "{{known:studentUniqueId}}"
								},
								{
									"key": "educationOrganizationId",
									"value": "{{known:educationOrganizationId}}"
								},
								{
									"key": "programEducationOrganizationId",
									"value": "{{known:educationOrganizationId}}"
								},
								{
									"key": "programName",
									"value": "{{known:programName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update StudentTitleIPartAProgramAssociation Removing the Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"known:reasonExitedDescriptor\", \"uri://ed-fi.org/ReasonExitedDescriptor#Transferred to another district or school\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": \"{{known:educationOrganizationId}}\"\r\n    },\r\n    \"programReference\": {\r\n        \"educationOrganizationId\": \"{{known:educationOrganizationId}}\",\r\n        \"programName\": \"{{known:programName}}\",\r\n        \"programTypeDescriptor\": \"{{known:programTypeDescriptor}}\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:studentUniqueId}}\"\r\n    },\r\n    \"beginDate\": \"{{known:beginDate}}\",\r\n    \"reasonExitedDescriptor\" : \"{{known:reasonExitedDescriptor}}\",\r\n    \"titleIPartAParticipantDescriptor\": \"{{known:titleIPartAParticipantDescriptor}}\",\r\n    \"services\": []\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTitleIPartAProgramAssociations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTitleIPartAProgramAssociations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get StudentTitleIPartAProgramAssociation with no Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const studentTitleIPartAProgramAssociation = pm.response.json();\r",
									"\r",
									"pm.expect(studentTitleIPartAProgramAssociation.beginDate).to.equal(pm.environment.get('known:beginDate'));\r",
									"pm.expect(studentTitleIPartAProgramAssociation.reasonExitedDescriptor).to.equal(pm.environment.get('known:reasonExitedDescriptor'));\r",
									"\r",
									"pm.expect(studentTitleIPartAProgramAssociation.educationOrganizationReference.educationOrganizationId).to.equal(pm.environment.get('known:educationOrganizationId'));\r",
									"\r",
									"pm.expect(studentTitleIPartAProgramAssociation.studentReference.studentUniqueId).to.equal(pm.environment.get('known:studentUniqueId'));\r",
									"\r",
									"pm.expect(studentTitleIPartAProgramAssociation.programReference.educationOrganizationId).to.equal(pm.environment.get(\"known:educationOrganizationId\"));\r",
									"pm.expect(studentTitleIPartAProgramAssociation.programReference.programName).to.equal(pm.environment.get(\"known:programName\"));\r",
									"pm.expect(studentTitleIPartAProgramAssociation.programReference.programTypeDescriptor).to.equal(pm.environment.get(\"known:programTypeDescriptor\"));\r",
									"\r",
									"// In StandardVersion 5.0.0 the services property was removed from studentTitleIPartAProgramAssociations\r",
									"// We use ParentOrContactName environment variable to differentiate between standard versions. \r",
									"if(pm.environment.get(\"ParentOrContactName\") == \"contact\") {\r",
									"    pm.expect(studentTitleIPartAProgramAssociation.services).to.be.undefined;\r",
									"} else if(pm.environment.get(\"ParentOrContactName\") == \"parent\") {\r",
									"    const services = studentTitleIPartAProgramAssociation.services;\r",
									"    pm.expect(services.length).to.equal(0);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTitleIPartAProgramAssociations/{{known:studentTitleIPartAProgramAssociationsId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTitleIPartAProgramAssociations",
								"{{known:studentTitleIPartAProgramAssociationsId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete StudentTitleIPartAProgramAssociation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTitleIPartAProgramAssociations/{{known:studentTitleIPartAProgramAssociationsId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTitleIPartAProgramAssociations",
								"{{known:studentTitleIPartAProgramAssociationsId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set variables related to data standard specific contact/parent variablility ",
					"let ParentOrContactProperName = pm.environment.get(\"ParentOrContactProperName\");",
					"let StudentParentOrContactAssociationCollectionName = \"Student\" + ParentOrContactProperName + \"Associations\";",
					"let ParentOrContactUniqueIdName = ParentOrContactProperName + \"UniqueId\";",
					"let ParentOrContactName =  ParentOrContactProperName.toLowerCase();",
					"let ParentOrContactCollectionName = ParentOrContactName + \"s\";",
					"",
					"pm.environment.set(\"StudentParentOrContactAssociationCollectionName\", StudentParentOrContactAssociationCollectionName);",
					"pm.environment.set(\"ParentOrContactUniqueIdName\", ParentOrContactUniqueIdName);",
					"pm.environment.set(\"ParentOrContactName\", ParentOrContactName);",
					"pm.environment.set(\"ParentOrContactCollectionName\", ParentOrContactCollectionName);",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"let tokenExpiration = pm.environment.get('TokenExpiry');",
					"let currentToken = pm.environment.get('AccessToken');",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get('ApiKey_255901');",
					"    let clientSecret = pm.environment.get('ApiSecret_255901');",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        // console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(\"AccessToken\", newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set('TokenExpiry', expiryDate.getTime());",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}