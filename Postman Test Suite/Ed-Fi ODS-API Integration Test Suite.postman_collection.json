{
	"info": {
		"_postman_id": "dc652c0b-5efc-4042-b7e5-0e5da7f315d5",
		"name": "Ed-Fi ODS/API Integration Test Suite",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Initialize Known Data",
			"item": [
				{
					"name": "Initialize Known School Ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42274885-9457-44c7-8b35-c3e048fec194",
								"exec": [
									"const __ = require('lodash');",
									"const schools = pm.response.json();",
									"const schoolIds = __.map(schools, school => school.schoolId);",
									"pm.environment.set(\"known:schoolIds\",schoolIds);",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?localEducationAgencyId=255901",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"schools"
							],
							"query": [
								{
									"key": "localEducationAgencyId",
									"value": "255901"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AcademicWeeks",
			"item": [
				{
					"name": "WeekIdentifier is required validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "424f96b2-3237-4383-8ff1-98f3d9c8f98f",
								"exec": [
									"const __ = require('lodash');",
									"",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f72a51c1-5c24-422c-b927-e01c88b78619",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item with WeekIdentifier is required string\", () => {",
									"    ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"Validation of \\'AcademicWeek\\' failed\");",
									"     pm.expect(responseItem.message).to.include(\"WeekIdentifier is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "SchoolId is required validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5302a112-ba7b-49b2-aea0-dd191d149b50",
								"exec": [
									"const __ = require('lodash');",
									"",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9a64fee2-3377-403d-aeb8-a5391feb521c",
								"exec": [
									"pm.test(\"Status code is 403\", () => {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Should return the item with SchoolId of the resource is empty string\", () => {",
									"     ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"Access to the resource item could not be authorized because the \\'SchoolId\\' of the resource is empty\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw SchoolId is required error when SchoolId is not passed in Request."
					},
					"response": []
				},
				{
					"name": "BeginDate is required validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1045d951-f036-49f7-a178-abce705c9670",
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6dff620-5883-41a6-a99b-75dfbe50a79b",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Should returns the item with String was not recognized as a valid date string\", () => {",
									"     ",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"The request is invalid\");",
									"     pm.expect(responseItem.modelState[\"request.beginDate\"][0]).to.include(\"The supplied value is invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw BeginDate is required error when BeginDate is not passed in Request."
					},
					"response": []
				},
				{
					"name": "EndDate is required validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b51e4bdd-0c72-45cb-b006-7faefdbe05ea",
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let  endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2db630fa-58f9-4868-a96e-ffd322158276",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item with String was not recognized as a valid date string\", () => {",
									"     ",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"The request is invalid\");",
									"     pm.expect(responseItem.modelState[\"request.endDate\"][0]).to.include(\"The supplied value is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw EndDate is required error when EndDate is not passed in Request."
					},
					"response": []
				},
				{
					"name": "Invalid SchoolID validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4a2c4e0-7414-4c89-af5c-10252424c2c8",
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(12);",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3422f6b0-79da-47e4-b548-4131d04d6847",
								"exec": [
									"pm.test(\"Status code is 403\", () => {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"pm.test(\"Should return the item with Invalid SchoolId Validation string\", () => {",
									"     ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"Authorization denied. No relationships have been established between the caller's education organization id claim (value 255901 of type 'LocalEducationAgencyId') and the requested resource's 'SchoolId' value.\");",
									"      ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"23432\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw Invalid SchoolId  error when Invalid SchoolId is passed in Request."
					},
					"response": []
				},
				{
					"name": "Invalid BeginDate & EndDate Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "943ca9dc-f5ea-490b-8114-4074529717d1",
								"exec": [
									"const __ = require('lodash');",
									"",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(70));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0bfe670a-6163-4d35-8bc0-68977645dd24",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item with BeginDate must be within SQL datetime range string\", () => {",
									"     ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"BeginDate : \\'1/1/1751 12:00:00 AM\\' must be within SQL datetime range\");",
									"});",
									"",
									"pm.test(\"Should return the item with EndDate must be within SQL datetime range string\", () => {",
									"     ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"EndDate : \\'1/1/1752 12:00:00 AM\\' must be within SQL datetime range\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"1/1/1751\",\r\n  \"endDate\":\"1/1/1752\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw BeginDate & EndDate invalid error when invalid BeginDate & EndDate  is  passed in Request."
					},
					"response": []
				},
				{
					"name": "Insert new academicWeeks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99db2ddb-7b72-4579-985f-b51d132fd46f",
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"const title =\"Should return newly Added Academic weeks for School \"+schoolId;",
									"let isacadmeicWeeksAdded = false;",
									"",
									"const academicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks\",",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"pm.test(title,  () => {",
									"    ",
									"    pm.sendRequest(academicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"   ",
									"     academicWeeks.json().forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"             isacadmeicWeeksAdded=true;",
									"             pm.environment.set(\"known:academicWeeksReferenceIdforSchool\",responseItem.id);",
									"             pm.environment.set(\"known:academicWeeksReferenceIds\",[]);",
									"             const academicWeeksReferenceIds=pm.environment.get(\"known:academicWeeksReferenceIds\");",
									"              academicWeeksReferenceIds.push(responseItem.id);",
									"             pm.environment.set(\"known:academicWeeksReferenceIds\",academicWeeksReferenceIds);",
									"             pm.expect(responseItem.schoolReference.schoolId).to.eql(schoolId);",
									"         }",
									"    });",
									"      pm.expect(Boolean(isacadmeicWeeksAdded)).to.eql(true);",
									"    }",
									"    });",
									"     ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b20f759a-66a4-4594-ac58-ee811391523d",
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(12));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\",\r\n  \"_etag\": \"string\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "Pre-Condition : School record should be pre-populated.\n\nThis api post method adds new academicWeeks for particular school ."
					},
					"response": []
				},
				{
					"name": "Get  by ReferenceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f64b868a-e318-4f14-ae61-942262c41d9c",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Should return the item matching the supplied academicWeeks reference Id \", () => {",
									"    ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"     pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"     pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"     pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"     pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"     pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"     ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Get method retrieves academicWeeks for given school .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Insert new academicWeeks -Second",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "08280d7c-5a44-4ddc-807e-99207bc4851f",
								"exec": [
									"const __ = require('lodash');",
									"const schoolIds =pm.environment.get(\"known:schoolIds\");",
									"pm.environment.set(\"known:schoolId\", __.sample(schoolIds));",
									"pm.environment.set(\"known:weekIdentifier\",__.random(70).toString());",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(12));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"",
									"",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5dbaeabc-5d3f-4607-9ff2-1d83fcbba5ef",
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"const title =\"Should return newly Added Academic weeks for School \"+schoolId;",
									"let isacadmeicWeeksAdded = false;",
									"",
									"",
									"const academicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks\",",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"",
									"",
									"pm.test(title, function () {",
									"    ",
									"    pm.sendRequest(academicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        ",
									"        ",
									"        academicWeeks.json().forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"            isacadmeicWeeksAdded=true;",
									"            pm.environment.set(\"known:academicWeeksReferenceIdforSchool\",responseItem.id);",
									"            const academicWeeksReferenceIds=pm.environment.get(\"known:academicWeeksReferenceIds\");",
									"            academicWeeksReferenceIds.push(responseItem.id);",
									"            pm.environment.set(\"known:academicWeeksReferenceIds\",academicWeeksReferenceIds);",
									"            pm.expect(responseItem.schoolReference.schoolId).to.eql(schoolId);",
									"         }",
									"    });",
									"    ",
									"      pm.expect(Boolean(isacadmeicWeeksAdded)).to.eql(true);",
									"",
									"    }",
									"    });",
									"    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\",\r\n  \"_etag\": \"string\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "Pre-Condition : School record should be pre-populated.\n\nThis api post method adds new academicWeeks for particular school ."
					},
					"response": []
				},
				{
					"name": "Get  by ReferenceId -Second",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7de341e2-84fc-40db-aaff-b7665edd0625",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the item matching the supplied academicWeeks reference Id \", () => {",
									"    ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"     pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"     pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"     pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"     pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"     pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"     ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Get method retrieves academicWeeks for given school .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "BeginDate is required Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00d849f1-a39f-44d5-8128-535f61d98105",
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(9));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37deba23-b302-4134-b423-e9b50825a6f1",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item  with String was not recognized as a valid date string\", () => {",
									"     ",
									"     const responseItem = pm.response.json();",
									"     pm.expect(responseItem.modelState[\"request.beginDate\"][0]).to.include(\"The supplied value is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Put method updates academicWeeks for given school .\nThis test method will throw  BeginDate is required error when BeginDate  is not passed in Request."
					},
					"response": []
				},
				{
					"name": "EndDate is required Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "188b1925-ba6e-4f9f-9594-8601a2a7a073",
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(9));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b39152b2-104e-4511-ac8d-8df104c5f63d",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Should return the item  with String was not recognized as a valid date String\", () => {",
									"     ",
									"      const responseItem = pm.response.json();",
									"      pm.expect(responseItem.modelState[\"request.endDate\"][0]).to.include(\"The supplied value is invalid\");",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Put method updates academicWeeks for given school .\nThis test method will throw  EndDate is required error when EndDate  is not passed in Request."
					},
					"response": []
				},
				{
					"name": "Invalid BeginDate & EndDate Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22d431f1-23db-45ad-9269-1637f3e8ce6b",
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "680ba94d-f234-4545-8f68-d09a72f65f31",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Should return the item  with BeginDate must be within SQL datetime range string\", () => {",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"BeginDate : \\'1/1/1751 12:00:00 AM\\' must be within SQL datetime range\");",
									"});",
									"",
									"pm.test(\"Should return the item  with EndDate must be within SQL datetime range string\", () => {",
									"      const responseItem = pm.response.json();",
									"     pm.expect(responseItem.message).to.include(\"EndDate : \\'1/1/1752 12:00:00 AM\\' must be within SQL datetime range\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n \"beginDate\":\"1/1/1751\",\r\n  \"endDate\":\"1/1/1752\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Put method updates academicWeeks for given school .\nThis test method will throw BeginDate & EndDate invalid error when invalid BeginDate & EndDate  is  passed in Request."
					},
					"response": []
				},
				{
					"name": "Put on  EndDate & TotalInstructionalDays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "359ed4aa-7615-4bce-9182-2a06e40c5933",
								"exec": [
									"const __ = require('lodash');",
									"pm.environment.set(\"known:id\",pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"const moment = require('moment');",
									"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:beginDate\",beginDate);",
									"let endDate=new Date();",
									"endDate = endDate.addMonths(__.random(9));",
									"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set(\"known:endDate\",endDate);",
									"pm.environment.set(\"known:totalInstructionalDays\",__.random(9));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "482d6826-b5e2-43f8-9fb4-7e41d073438d",
								"exec": [
									"pm.test(\"Status code is 204\",() => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const title =\"Should return newly updated Academic weeks for School \"+schoolId;",
									"const isacadmeicWeeksAdded = false;",
									"const academicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks/\"+pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"),",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"pm.test(title, () => {",
									"    pm.sendRequest(academicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        ",
									"        const responseItem = academicWeeks.json();",
									"         pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"         pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"         pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"         pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"         pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"         pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"",
									"    }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"weekIdentifier\":\"{{known:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\",\r\n    \"link\": {\r\n      \"rel\": \"\",\r\n      \"href\": \"\"\r\n    }\r\n  },\r\n \"beginDate\":\"{{known:beginDate}}\",\r\n  \"endDate\":\"{{known:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{known:totalInstructionalDays}}\",\r\n  \"_etag\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "Update the AcademicWeeks and Will create Academicweeks if not exist already "
					},
					"response": []
				},
				{
					"name": "Get all academicWeeks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad361f4-3dd3-41cc-b64f-09c1122156a9",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the all items for  academicWeeks\", () => {",
									"    ",
									"     const responseItems = pm.response.json();",
									"     const schoolId =pm.environment.get(\"known:schoolId\");",
									"     const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"     pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							]
						},
						"description": "This api Get method retrieves all academicWeeks .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by weekIdentifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfd3b682-b98b-4011-93eb-db9c38a74d1d",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the item for matching week identifier\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      ",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?weekIdentifier={{known:weekIdentifier}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "weekIdentifier",
									"value": "{{known:weekIdentifier}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by weekIdenitifier .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by schoolId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a21384d9-e5bf-4310-a7d8-ccb91d381c15",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for matching schoolId\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      ",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?schoolId={{known:schoolId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "schoolId",
									"value": "{{known:schoolId}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by SchoolId .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by beginDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24a5b06b-0b2b-4f76-b1c5-553c289ce56b",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for matching beginDate\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      const beginDate =pm.environment.get(\"known:beginDate\");",
									"      ",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier && responseItem.beginDate===beginDate)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?beginDate={{known:beginDate}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "beginDate",
									"value": "{{known:beginDate}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by Begindate .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by endDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40a3c833-0bbd-4306-87b0-f05b1628e0ea",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for matching endDate\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      const endDate =pm.environment.get(\"known:endDate\");",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem => {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier && responseItem.endDate===endDate)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?endDate={{known:endDate}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "endDate",
									"value": "{{known:endDate}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by endDate.\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by totalInstructionalDays",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0456ace6-36b7-4a5b-a385-3e4a05b99aa2",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for matching TotalInstructionDays\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      const totalInstructionalDays =pm.environment.get(\"known:totalInstructionalDays\");",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem => {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier && responseItem.totalInstructionalDays===totalInstructionalDays)",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?totalInstructionalDays={{known:totalInstructionalDays}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "totalInstructionalDays",
									"value": "{{known:totalInstructionalDays}}"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by totalInstructionalDays.\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Get all by limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e4e24c4-db75-4889-8cb1-5ea24c14d862",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return the items for limit\", () => {",
									"    ",
									"      const responseItems = pm.response.json();",
									"      const schoolId =pm.environment.get(\"known:schoolId\");",
									"      const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"      const totalInstructionalDays =pm.environment.get(\"known:totalInstructionalDays\");",
									"      pm.expect(Boolean(responseItems.length)).to.equal(true);",
									"     ",
									"     ",
									"     responseItems.forEach(responseItem =>  {",
									"        if(responseItem.schoolReference.schoolId===schoolId && responseItem.weekIdentifier===weekIdentifier )",
									"         {",
									"             pm.expect(responseItem.weekIdentifier).to.equal(pm.environment.get(\"known:weekIdentifier\"));",
									"             pm.expect(responseItem.beginDate).to.equal(pm.environment.get(\"known:beginDate\"));",
									"             pm.expect(responseItem.endDate).to.equal(pm.environment.get(\"known:endDate\"));",
									"             pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\"));",
									"             pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get(\"known:schoolId\"));",
									"         }",
									"    });",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks?limit=2",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						},
						"description": "This api Get method retrieves all academicWeeks by limit .\nThis test method will validate the academicweeks record exist or not."
					},
					"response": []
				},
				{
					"name": "Delete  by ReferenceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b843de3-a45e-4975-b617-abef2fb6135b",
								"exec": [
									"",
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"const academicWeeksReferenceIdforSchool =pm.environment.get(\"known:academicWeeksReferenceIdforSchool\");",
									"const title =\" Should academic weeks by ReferenceID \"+academicWeeksReferenceIdforSchool+\" is deleted\";",
									"",
									"const gacademicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks/\"+pm.environment.get(\"known:academicWeeksReferenceIdforSchool\") ,",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"pm.test(title, () => {",
									"    ",
									"    pm.sendRequest(gacademicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        ",
									"    const responseItem = academicWeeks.json();",
									"    pm.expect(responseItem.message).to.include(\"Entity of type \\'AcademicWeek\\' with the specified id was not found\");",
									"    ",
									"    }",
									"    });",
									"});",
									" ",
									"const academicWeeksReferenceIds=pm.environment.get(\"known:academicWeeksReferenceIds\");",
									"const index = academicWeeksReferenceIds.indexOf(pm.environment.get(\"known:academicWeeksReferenceIdforSchool\"));",
									"if (index !== -1) academicWeeksReferenceIds.splice(index, 1);",
									"pm.environment.set(\"known:academicWeeksReferenceIds\",academicWeeksReferenceIds);",
									"pm.environment.set(\"known:academicWeeksReferenceIdforSchool\",academicWeeksReferenceIds[0]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Delete method deletes academicWeeks by referenceID\nThis test method will validate the academicweeks record is deleted or not."
					},
					"response": []
				},
				{
					"name": "Delete  by ReferenceId Second one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96d20f08-d432-4f7e-b0c7-e5362359cadc",
								"exec": [
									"",
									"pm.test(\"Status code is 204\", () => {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"const schoolId =pm.environment.get(\"known:schoolId\");",
									"const weekIdentifier =pm.environment.get(\"known:weekIdentifier\");",
									"const academicWeeksReferenceIdforSchool =pm.environment.get(\"known:academicWeeksReferenceIdforSchool\");",
									"const title =\" Should academic weeks by ReferenceID \"+academicWeeksReferenceIdforSchool+\" is deleted\";",
									"",
									"const gacademicWeeksGetRequest = {",
									"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/academicWeeks/\"+pm.environment.get(\"known:academicWeeksReferenceIdforSchool\") ,",
									"  method:'GET',",
									"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken\"),",
									"  body: {",
									"  }",
									"};",
									"",
									"pm.test(title, () => {",
									"    ",
									"    pm.sendRequest(gacademicWeeksGetRequest, function (err, academicWeeks) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        ",
									"    const responseItem = academicWeeks.json();",
									"    pm.expect(responseItem.message).to.include(\"Entity of type \\'AcademicWeek\\' with the specified id was not found\");",
									"    ",
									"    }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{known:academicWeeksReferenceIdforSchool}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"academicWeeks",
								"{{known:academicWeeksReferenceIdforSchool}}"
							]
						},
						"description": "This api Delete method deletes academicWeeks by referenceID\nThis test method will validate the academicweeks record is deleted or not."
					},
					"response": []
				}
			],
			"description": "This folder will contain CRUD operations for Academic weeks",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c9c63be-1191-4ccb-bae3-e5a2a44325bd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7754d8fb-196a-4231-9bbe-bebd53ec985b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Limit/Offset/Total Count",
			"item": [
				{
					"name": "Include total count in Get request without search condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83693567-6739-426c-aba4-1009af9ad79a",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return the 25 items in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"pm.environment.set('known:courseCode', __.first(responseItems).courseCode);",
									"pm.environment.set('known:totalCount', postman.getResponseHeader(\"Total-Count\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=true",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request ,Set limit to 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83842e29-86da-47b1-a177-ec9fe7c5e482",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return less than or equal to 100  item in response\", () => {",
									"     pm.expect(responseItems.length).to.be.at.most(100);",
									"});",
									"const courses = __.takeRight(responseItems, 25);",
									"const courseCodes = __.map(courses, course => course.courseCode);",
									"console.log(courseCodes);",
									"pm.environment.set(\"known:courseCodes\",courseCodes);    ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=100",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request and a search parameter like course code is passed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dd41890-53b6-4c6a-9726-a2fd148bd67d",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"",
									"pm.test(\"Total-Count header has correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Total-Count\")).to.eql(\"1\");",
									"});",
									"",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"    });",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=true&courseCode={{known:courseCode}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								},
								{
									"key": "courseCode",
									"value": "{{known:courseCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e781c675-b74c-4366-a911-79a080f9d5be",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"});",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "63538ef2-6e39-4698-a6cc-a9e45a18a264",
								"exec": [
									"const totalCount =pm.environment.get(\"known:totalCount\");",
									"pm.environment.set(\"known:offset\", Number(totalCount) -1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?offset={{known:offset}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:offset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus 25 and limit is 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16544956-4bec-48cc-b162-cda6c0e7c12e",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 25 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"",
									"pm.test(\"Should match with each  item course  in response\", () => {",
									"    const courseCodes= pm.environment.get(\"known:courseCodes\");",
									"     \t__.each(responseItems, responseItem => {",
									"        \t      pm.expect(__.includes(courseCodes, responseItem.courseCode)).to.equal(true);",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a932ee78-f8f5-42a2-b6db-9d581d30c873",
								"exec": [
									"const totalCount =pm.environment.get(\"known:totalCount\");",
									"pm.environment.set(\"known:offset\", Number(totalCount) -25);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?offset={{known:offset}}&limit=25",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"courses"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:offset}}"
								},
								{
									"key": "limit",
									"value": "25"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Person Entity",
			"item": [
				{
					"name": "Scenario 1 - Create Person With \"District\" sourceSystemDescriptor and associate with Staff",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f0ab693b-dd5b-4713-b7e2-a615a1cab51c",
										"exec": [
											"const __ = require('lodash');\r",
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d3f3becd-8f62-4212-a358-3f914f82f4d1",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ee30d33-e0cb-4131-a707-92fdb0b6330b",
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cafa236c-3701-46ff-8294-a37ef1d82cc7",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Staffs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb517979-7e27-48fe-8950-8900a05aec5c",
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', __.random(10000));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7262d462-dc3a-4d67-b32c-69128798c2b6",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  },\r\n  \"birthDate\": \"1969-09-13\",\r\n  \"firstName\": \"Steve\",\r\n  \"lastSurname\": \"Buck\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad230c77-d8cc-4290-888f-65e13d0fb9eb",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "887e3e23-ebb8-4611-a86f-812e5165befb",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"255901\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{supplied:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Staff by StaffUniqueId & PersonId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "31901af7-90e9-4c5b-aeab-2a7acfa32962",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "82c45f1f-c334-4799-94fe-e145f81b065b",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.test(\"Should return the 1 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(1);",
											"});",
											"",
											"pm.test(\"Should match with Staffs Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Staffs?staffUniqueId={{supplied:{{scenarioId}}:staffUniqueId}}&personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Staffs"
									],
									"query": [
										{
											"key": "staffUniqueId",
											"value": "{{supplied:{{scenarioId}}:staffUniqueId}}"
										},
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 1 - Create Person With \"District\" sourceSystemDescriptor and Associate with Staff\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3 Create Staff With Associated Person\r\nStep 4 Link  Staff With StaffEducationOrganizationEmploymentAssociations\r\nStep 5 Get Staff by StaffUniqueId & PersonUniqueId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3061211b-be4f-4e11-8493-baf1741e26be",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad7f7e87-3a55-471a-a599-16d257b1da10",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Scenario 2 - Create same Person With  different  sourceSystemDescriptor and associate with Staff",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "31ca2fee-c387-4e35-af44-0671cfaa2912",
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12609b47-b9aa-40f1-85a9-a18893ed0267",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26cba63a-fbe6-4675-bdb4-543e34fd1a8f",
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3e67cc6-0414-42d7-8e3e-e4a72f1092e8",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create SourceSystemDescriptors -Two",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "77999905-33f3-4471-aa8d-0f4b6a66f2a8",
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':seconddescription', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f87c7cc4-4199-4835-b665-db83087c45dc",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:seconddescription}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:seconddescription}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:seconddescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create same People with different SourceSystemDescriptor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7133e3d3-f951-4bd1-ab64-3d60e4503aca",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':secondsourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':seconddescription'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eb3b6a80-9a1f-4fdf-994b-b02fbccba163",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:secondsourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get person by PersonId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "36cee28e-243a-4ba3-8d42-f9f2a689b120",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "59d0c901-8d7c-42ae-8dd8-8409c24c6c7f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 2 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(2);",
											"});",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const sourceSystemDescriptors = [''];",
											"sourceSystemDescriptors.push(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"sourceSystemDescriptors.push(pm.environment.get('supplied:'+scenarioId+':secondsourceSystemDescriptor'));",
											"pm.test(\"Should match with Person Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"       pm.expect(sourceSystemDescriptors.includes(responseItem.sourceSystemDescriptor)).to.equal(true);",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people?personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									],
									"query": [
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Staffs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0cf0db40-5d51-4954-a614-d25fb1d539d4",
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', __.random(10000));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "904a9076-0abb-48f7-a4a3-b45067e1a2c2",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n     \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:secondsourceSystemDescriptor}}\"\r\n  },\r\n  \"birthDate\": \"1969-09-13\",\r\n  \"firstName\": \"Steve\",\r\n  \"lastSurname\": \"Buck\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8714c536-40f6-4c82-93f3-37d10832825b",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6555a714-8147-49bf-b07e-cf760c1ada19",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"255901\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{supplied:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Staff by StaffUniqueId & personId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98085c18-b66d-49be-b7cd-eddbd1bc0549",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "09524f09-4a7b-426d-9280-3d711d62267a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 1 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(1);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											" ",
											"pm.test(\"Should match with Staffs Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':secondsourceSystemDescriptor'));",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Staffs?staffUniqueId={{supplied:{{scenarioId}}:staffUniqueId}}&personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Staffs"
									],
									"query": [
										{
											"key": "staffUniqueId",
											"value": "{{supplied:{{scenarioId}}:staffUniqueId}}"
										},
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 2 - Create same Person With  different  sourceSystemDescriptor and associate with Staff\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3  Create \"State\" sourceSystemDescriptor\r\nStep 4 Create same Person With \"State\" sourceSystemDescriptor\r\nStep 5 Create Staff With Associated Person\r\nStep 6 Link  Staff With StaffEducationOrganizationEmploymentAssociations\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7ee6493c-b411-49c5-b13c-a86c12682f03",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e794e846-c34c-4929-8624-9a0dde4a7759",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Scenario 3 - Create Person With  District  sourceSystemDescriptor and associate with Student",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "60d1c8fb-0e4a-43e3-a732-134de17d3aa0",
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fca9c62e-2782-4246-b004-353c594d30ef",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29d36e12-c20b-49ec-a2fe-0a14f0434718",
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6cc5eccb-3b97-4f43-abf4-5ba16faecf58",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab62ab91-9fde-4952-a83a-794b393baf54",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4598054-e81b-4436-83ae-b63802e288f0",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':StudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':LastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':FirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':BirthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:StudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:BirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e459a183-89aa-4be9-858a-a580b7b8137c",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9ad5a753-cb17-4f07-a805-1c2f44e6f5db",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"255901001\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{supplied:{{scenarioId}}:StudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get Student By studentuniqueId and personID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1354598e-5824-4ed9-abc3-5d328fbe2125",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });   ",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 1 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(1);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											" ",
											"pm.test(\"Should match with Student Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bb53baf-872d-4a38-a25b-4737f8b8b6a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?studentUniqueId={{supplied:{{scenarioId}}:StudentUniqueId}}&personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									],
									"query": [
										{
											"key": "studentUniqueId",
											"value": "{{supplied:{{scenarioId}}:StudentUniqueId}}"
										},
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 3 - Create Person With \"District\" sourceSystemDescriptor and Associate with Student\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3 Create Student With Associated Person\r\nStep 4 Get Student by StudenID & PersonId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "917ce301-6fd1-4451-9ace-43137f491b20",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36c7e0c2-38fe-4982-97d9-2862ad47d7cb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Scenario 4 - Create Person With  District  sourceSystemDescriptor and associate the same person with multiple Student",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bde7f382-33c3-46df-a8d5-6dd4da458ae5",
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30c11d13-1889-4f09-ac1c-b5f1670427a5",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c603f57-0c3c-4045-a15f-b4f24d7c0355",
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6cd266cb-6a26-4d1d-b981-3e0a71494081",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4695d5bf-9d77-476e-b469-113119c17fc9",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7b6c921-32cf-459c-b767-667a6783a9a7",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':StudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':LastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':FirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':BirthDate',birthDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:StudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:BirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b0ea4281-b283-48b4-8aa8-58d931357335",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "864820cf-4a1b-4dc4-a0ce-c8a94b46c606",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"255901001\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{supplied:{{scenarioId}}:StudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create Student -two",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf7bf0fc-6798-40f0-9b5e-1cc61c48fba8",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83d327f1-9109-4a3c-bd83-f751f92b0c33",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':SecondStudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':SecondLastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':SecondFirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':SecondBirthDate',birthDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:SecondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:SecondBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:SecondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:SecondLastSurname}}\",\r\n  \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data -Two",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "58144cdc-f218-4c3d-8a0b-d0d205d374ce",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d116c509-9913-4c19-b27f-dc6f5e1a2e47",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"255901001\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{supplied:{{scenarioId}}:SecondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get Student By personID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1735fb8d-81a2-4104-b36e-93dcdecdeac0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });   ",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 2 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(2);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											" ",
											"pm.test(\"Should match with Student Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"      });       ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41141b3c-7544-4b18-9220-fff9df8b3815",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									],
									"query": [
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 4 - Create Person With  District  sourceSystemDescriptor and associate the same person with multiple Student\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3 Create Student With Associated Person\r\nStep 4 Create another Student With Associated same Person\r\nStep 4 Get Student by  PersonId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87d06731-6090-416c-98f1-d28d2144ae5b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60578304-8203-4bb8-b0da-b11f9bed04a4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Scenario 5 - Create Person With \"District\" sourceSystemDescriptor and Associate with Parent",
					"item": [
						{
							"name": "Create SourceSystemDescriptors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e4042f4d-8f09-44d5-a373-d6db20d8335a",
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':description', newGuid());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f2512460-5eac-43a8-bf93-ee59767b11bb",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"codeValue\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"description\": \"{{supplied:{{scenarioId}}:description}}\",\r\n  \"namespace\": \"uri://ed-fi.org/SourceSystemDescriptor\",\r\n  \"shortDescription\": \"{{supplied:{{scenarioId}}:description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sourceSystemDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sourceSystemDescriptors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create People",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "feebad7e-aa0c-4aad-b88b-6a1210876204",
										"exec": [
											"const __ = require('lodash');\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':personId', __.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':sourceSystemDescriptor','uri://ed-fi.org/SourceSystemDescriptor#'+ pm.environment.get('supplied:'+scenarioId+':description'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c8adae54-f835-47d7-9741-1fedd279a1bc",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':peopleGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n  \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/people",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"people"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Student Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "297b0c0c-8a93-431a-9e55-57139f824866",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff4e5d58-06aa-4c73-a6a4-80149d790f69",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											"",
											"let enteredUSDate=new Date();",
											"enteredUSDate = enteredUSDate.addMonths(-20);",
											"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data for Post Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "907c8156-06c4-4234-8703-f1d716ea3894",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a10f12de-7aa5-495a-ac6d-82bb0621f09f",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Parent Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9dbe213-df00-4a61-8b05-a2cfbdd9f441",
										"exec": [
											" pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf883636-788b-46fb-926c-7f5ee52a125e",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n    \"personReference\": {\r\n    \"personId\": \"{{supplied:{{scenarioId}}:personId}}\",\r\n    \"sourceSystemDescriptor\": \"{{supplied:{{scenarioId}}:sourceSystemDescriptor}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"parents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentParentAssociations Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e03a4bd0-fc6b-4f42-b180-2c2abefc0ce6",
										"exec": [
											" pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "136cbe28-7946-4ccc-adfb-7c1761b1f7c7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentParentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Parent  By PersonID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9916134f-f8ff-4b92-9e00-4bbf862db944",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });   ",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return the 1 item in response\", () => {",
											"     pm.expect(responseItems).to.have.lengthOf(1);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											" ",
											"pm.test(\"Should match with Student Response \", () => {",
											"    __.each(responseItems, (responseItem) => {",
											"        pm.expect(responseItem.personReference.personId).to.equal(pm.environment.get('supplied:'+scenarioId+':personId').toString());",
											"        pm.expect(responseItem.personReference.sourceSystemDescriptor).to.equal(pm.environment.get('supplied:'+scenarioId+':sourceSystemDescriptor'));",
											"      });       ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4958366a-4cba-4ef4-b8da-dfbd6d96349c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents?parentUniqueId={{supplied:{{scenarioId}}:parentUniqueId}}&personId={{supplied:{{scenarioId}}:personId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"parents"
									],
									"query": [
										{
											"key": "parentUniqueId",
											"value": "{{supplied:{{scenarioId}}:parentUniqueId}}"
										},
										{
											"key": "personId",
											"value": "{{supplied:{{scenarioId}}:personId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Scenario 4 - Create Person With \"District\" sourceSystemDescriptor and Associate with Parent\r\n\r\nStep 1  Create \"District\" sourceSystemDescriptor\r\nStep 2 Create Person With \"District\" sourceSystemDescriptor\r\nStep 3 Create Student With Associated Person\r\nStep 4 Create parent With Associated same Person\r\nStep 4 Get Parent  by PersonId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1db5d57d-9e5b-41c5-a2cc-bf8ebeea7559",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be4dab82-e7a6-4bdd-b560-5b66736a36fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Limit/Offset/Total Count - Student",
			"item": [
				{
					"name": "Include total count in Get request without search condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9dc2ff5-043b-4eb6-85c2-3335eb9fd49f",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return the 25 items in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"pm.environment.set('known:studentUniqueId', __.first(responseItems).studentUniqueId);",
									"pm.environment.set('known:studentTotalCount', postman.getResponseHeader(\"Total-Count\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?totalCount=true",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request ,Set limit to 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f50d07c-5195-4ab5-bc56-d44dcd8a8a12",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return less than or equal to 100  item in response\", () => {",
									"     pm.expect(responseItems.length).to.be.at.most(100);",
									"});",
									"const students = __.takeRight(responseItems, 25);",
									"const studentUniqueIds = __.map(students, student => student.studentUniqueId);",
									"console.log(studentUniqueIds);",
									"pm.environment.set(\"known:studentUniqueIds\",studentUniqueIds);    ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?limit=100",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request and a search parameter like Student Unique Id is passed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ea2c5bf-a304-4c78-9c66-65ab24f939b5",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"",
									"pm.test(\"Total-Count header has correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Total-Count\")).to.eql(\"1\");",
									"});",
									"",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"    });",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?totalCount=true&studentUniqueId={{known:studentUniqueId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								},
								{
									"key": "studentUniqueId",
									"value": "{{known:studentUniqueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e781c675-b74c-4366-a911-79a080f9d5be",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"});",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4b286932-9164-459e-bfaa-1cd9004d8286",
								"exec": [
									"const totalCount =pm.environment.get(\"known:studentTotalCount\");",
									"pm.environment.set(\"known:studentOffset\", Number(totalCount) -1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?offset={{known:studentOffset}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:studentOffset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus 25 and limit is 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "911e5ae2-9acd-4c57-94d5-bc1ffcd81e5d",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 25 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"",
									"pm.test(\"Should match with each  item course  in response\", () => {",
									"    const studentUniqueIds= pm.environment.get(\"known:studentUniqueIds\");",
									"     \t__.each(responseItems, responseItem => {",
									"        \t      pm.expect(__.includes(studentUniqueIds, responseItem.studentUniqueId)).to.equal(true);",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ebd02d96-0183-4ac6-9c88-e5d16f4a2fce",
								"exec": [
									"const totalCount =pm.environment.get(\"known:studentTotalCount\");",
									"pm.environment.set(\"known:studentOffset\", 100 - 25);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?offset={{known:studentOffset}}&limit=25",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:studentOffset}}"
								},
								{
									"key": "limit",
									"value": "25"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Limit/Offset/Total Count - Staff",
			"item": [
				{
					"name": "Include total count in Get request without search condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a523c94-426c-4024-be94-a771e4053852",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return the 25 items in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"pm.environment.set('known:staffUniqueId', __.first(responseItems).staffUniqueId);",
									"pm.environment.set('known:staffTotalCount', postman.getResponseHeader(\"Total-Count\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?totalCount=true",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request ,Set limit to 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d3be372-4f03-4d5f-b63d-a7148e3d3866",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return less than or equal to 100  item in response\", () => {",
									"     pm.expect(responseItems.length).to.be.at.most(100);",
									"});",
									"const staffs = __.takeRight(responseItems, 25);",
									"const staffUniqueIds = __.map(staffs, staff => staff.staffUniqueId);",
									"console.log(staffUniqueIds);",
									"pm.environment.set(\"known:staffUniqueIds\",staffUniqueIds);    ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?limit=100",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request and a search parameter like Staff Unique Id is passed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "815406f7-6b7d-4472-ada6-b8e3741696e2",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Total-Count header is present\", () => {",
									"    pm.response.to.have.header(\"Total-Count\");",
									"});",
									"",
									"pm.test(\"Total-Count header has correct value\", () => {",
									"    pm.expect(pm.response.headers.get(\"Total-Count\")).to.eql(\"1\");",
									"});",
									"",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"    });",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?totalCount=true&staffUniqueId={{known:staffUniqueId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "totalCount",
									"value": "true"
								},
								{
									"key": "staffUniqueId",
									"value": "{{known:staffUniqueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb90f3b-549a-4819-a69e-60a28855d57b",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 1 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(1);",
									"});",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d884f43f-2dc0-4327-a510-0377afdc7755",
								"exec": [
									"const totalCount =pm.environment.get(\"known:staffTotalCount\");",
									"pm.environment.set(\"known:staffOffset\", Number(totalCount) -1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?offset={{known:staffOffset}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:staffOffset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Include total count in Get request , Set offset equal to totalcount minus 25 and limit is 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b98fb0f-2212-4ad9-a444-6fb57d2128cb",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.test(\"Should return 25 item in response\", () => {",
									"     pm.expect(responseItems).to.have.lengthOf(25);",
									"});",
									"",
									"pm.test(\"Should match with each  item course  in response\", () => {",
									"    const staffUniqueIds= pm.environment.get(\"known:staffUniqueIds\");",
									"     \t__.each(responseItems, responseItem => {",
									"        \t      pm.expect(__.includes(staffUniqueIds, responseItem.staffUniqueId)).to.equal(true);",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ebe3fbff-1d75-4edd-8162-98a95f4fa292",
								"exec": [
									"const totalCount =pm.environment.get(\"known:staffTotalCount\");",
									"pm.environment.set(\"known:staffOffset\", Number(totalCount) -25);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?offset={{known:staffOffset}}&limit=25",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"staffs"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{known:staffOffset}}"
								},
								{
									"key": "limit",
									"value": "25"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "20976f5f-b0f2-4c13-b3f7-2641a8d505ff",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"let tokenExpiration = pm.environment.get('TokenExpiry');",
					"let currentToken = pm.environment.get('AccessToken');",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get('ApiKey_255901');",
					"    let clientSecret = pm.environment.get('ApiSecret_255901');",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(\"AccessToken\", newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set('TokenExpiry', expiryDate.getTime());",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a9c1b0ae-1f01-499a-b23b-1fd9eddd88b0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}