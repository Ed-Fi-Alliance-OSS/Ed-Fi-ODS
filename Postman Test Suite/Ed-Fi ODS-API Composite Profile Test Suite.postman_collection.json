{
	"info": {
		"_postman_id": "3c36318e-42f6-4a36-ab26-343484d46eac",
		"name": "Ed-Fi ODS/API Composite Profile Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Initialize Setup",
			"item": [
				{
					"name": "Initialize Education Organization Ids",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "112271e1-3ff0-4379-8cab-170739feb315",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "944aaba2-acfc-4474-9141-b367686109a6",
								"exec": [
									"pm.environment.set('known:stateEducationAgencyId',31);\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId1', 100001);\r",
									"pm.environment.set('known:schoolId1',100001001);\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId2', 100002);\r",
									"pm.environment.set('known:schoolId2',100002001);\r",
									"\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId3', 100003);\r",
									"pm.environment.set('known:schoolId3',100003001);\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId4', 100004);\r",
									"pm.environment.set('known:schoolId4',100004001);\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId5', 100005);\r",
									"pm.environment.set('known:schoolId5',100005001);\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId6', 100006);\r",
									"pm.environment.set('known:schoolId6',100006001);\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId7', 100007);\r",
									"pm.environment.set('known:schoolId7',100007001);\r",
									"\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId8', 100008);\r",
									"pm.environment.set('known:schoolId8',100008001);\r",
									"\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId9', 100009);\r",
									"pm.environment.set('known:schoolId9',100009001);\r",
									"\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId10', 100010);\r",
									"pm.environment.set('known:schoolId10',100010001);\r",
									"\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId11', 100011);\r",
									"pm.environment.set('known:schoolId11',100011001);\r",
									"\r",
									"pm.environment.set('known:localEducationAgencyId12', 100012);\r",
									"pm.environment.set('known:schoolId12',100012001);\r",
									"\r",
									"\r",
									"pm.environment.set('known:multipleprofile:localEducationAgencyId1', 200001);\r",
									"pm.environment.set('known:multipleprofile:schoolId1',200001001);\r",
									"\r",
									"\r",
									"pm.environment.set('known:multipleprofile:localEducationAgencyId2', 200002);\r",
									"pm.environment.set('known:multipleprofile:schoolId2',200002001);\r",
									"\r",
									"\r",
									"pm.environment.set('known:multipleprofile:localEducationAgencyId3', 200003);\r",
									"pm.environment.set('known:multipleprofile:schoolId3',200003001);\r",
									"\r",
									"pm.environment.set('known:multipleprofile:localEducationAgencyId4', 200004);\r",
									"pm.environment.set('known:multipleprofile:schoolId4',200004001);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize stateEducationAgency Data for Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
								"exec": [
									"const uuid = require('uuid');\r",
									"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
									"function createScenarioId() { return newGuid().substring(0,5); }\r",
									"pm.environment.set('scenarioId', createScenarioId());\r",
									"const scenarioId = pm.environment.get('scenarioId');\r",
									"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'State-31');\r",
									"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#State Education Agency\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === 'true'){",
									"    pm.test(\"Status code is 200 or 201\", () => {",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"stateEducationAgencyId\":\"{{known:stateEducationAgencyId}}\",\r\n  \"nameOfInstitution\":\"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n  \r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/stateEducationAgencies",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"stateEducationAgencies"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Feature: Composites are constrained by Profiles",
			"item": [
				{
					"name": "Composite resource contains School which is constrained by an include-only Profile",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100001');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId1}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId1}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId1}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains School which is constrained by an include-only Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with  specific members [id, schoolId, nameOfInstitution, operationalStatusDescriptor, type, administrativeFundingControlDescriptor, addresses, schoolCategories]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"            pm.expect(properties).to.have.members(['id', 'schoolId', 'nameOfInstitution', 'operationalStatusDescriptor', 'type', 'administrativeFundingControlDescriptor', 'addresses', 'schoolCategories']);",
											"         ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100001}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an include-only Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, nameOfInstitution, operationalStatusDescriptor, type, administrativeFundingControlDescriptor, addresses, schoolCategories]\r\n    ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource contains School which is constrained by an exclude-only Profile",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100002');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId2}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId2}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId2}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n  \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains School which is constrained by an exclude-only Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with  specific members [id, schoolId, localEducationAgencyReference, shortNameOfInstitution, webSite, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, gradeLevels]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"            pm.expect(properties).to.have.members(['id', 'schoolId', 'localEducationAgencyReference', 'shortNameOfInstitution', 'webSite', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'gradeLevels']);",
											"         ",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100002}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an exclude-only Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-ExcludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference, shortNameOfInstitution, webSite, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, gradeLevels]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource contains School which is constrained by an include-only references Profile",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100003');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId3}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId3}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId3}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains School which is constrained by an include-only references Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with  specific members [id, schoolId, localEducationAgencyReference]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"         pm.expect(properties).to.have.members(['id', 'schoolId', 'localEducationAgencyReference']);",
											"         ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100003}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an include-only references Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-References-IncludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource contains School which is constrained by an exclude-only references Profile",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100004');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId4}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId4}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId4}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains School which is constrained by an exclude-only references Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Should the item return with  specific members [id, schoolId, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\", () => {",
											"    ",
											"     const responseItem = pm.response.json();",
											"     const properties = Object.keys(responseItem); ",
											"        pm.expect(properties).to.have.members(['id', 'schoolId', 'nameOfInstitution', 'shortNameOfInstitution', 'webSite', 'operationalStatusDescriptor', 'type', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'administrativeFundingControlDescriptor', 'addresses', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'schoolCategories', 'gradeLevels']);",
											"     ",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100004}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an exclude-only references Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-References-ExcludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\r\n     ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource contains School which is constrained by an include-all Profile",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100005');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId5}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId5}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId5}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains School which is constrained by an include-all Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with  specific members [id, schoolId,localEducationAgencyReference, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"            pm.expect(properties).to.have.members(['id', 'schoolId', 'nameOfInstitution', 'shortNameOfInstitution', 'webSite', 'operationalStatusDescriptor', 'type', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'administrativeFundingControlDescriptor', 'addresses', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'schoolCategories', 'gradeLevels','localEducationAgencyReference']);",
											"         ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100005}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an include-all Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\r\n     ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource contains Staff which is constrained by an include-all Profile",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100006');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100006}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId6}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Staff Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"pm.environment.set('supplied:'+scenarioId+':personalTitlePrefix', \"Mr\");",
											"pm.environment.set('supplied:'+scenarioId+':hispanicLatinoEthnicity', \"true\");",
											"pm.environment.set('supplied:'+scenarioId+':loginId',  newGuid());",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate', beginDate);",
											"",
											"",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"personalTitlePrefix\": \"{{supplied:{{scenarioId}}:personalTitlePrefix}}\",\r\n  \"birthDate\": \"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"hispanicLatinoEthnicity\": \"{{supplied:{{scenarioId}}:hispanicLatinoEthnicity}}\",\r\n  \"loginId\": \"{{supplied:{{scenarioId}}:loginId}}\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100006}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId6}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Composite resource contains Staff which is constrained by an include-all Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with  specific members [id, staffUniqueId, personalTitlePrefix, firstName, lastSurname, sexDescriptor, birthDate, hispanicLatinoEthnicity, loginId, addresses, electronicMails, identificationCodes, languages, races, telephones, classifications]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"            pm.expect(properties).to.have.members(['id', 'staffUniqueId', 'personalTitlePrefix', 'firstName', 'lastSurname', 'sexDescriptor', 'birthDate', 'hispanicLatinoEthnicity', 'loginId', 'addresses', 'electronicMails', 'identificationCodes', 'languages', 'races', 'telephones', 'classifications']);",
											"         ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100006}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/Staffs/{{known:{{scenarioId}}:staffGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"Staffs",
										"{{known:{{scenarioId}}:staffGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains Staff which is constrained by an include-all Profile\r\n    Given the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the subject of the request is a staff\r\n    When a GET (by id) request is submitted to the test \"Staff\" composite\r\n    Then the response model should have only the specific members [id, staffUniqueId, personalTitlePrefix, firstName, lastSurname, sexDescriptor, birthDate, hispanicLatinoEthnicity, loginId, addresses, electronicMails, identificationCodes, languages, races, telephones, classifications]\r\n    And the response model at path \"classifications[0]\" should only have the specific members [classification]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource's base resource is constrained by a write-only Profile",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100007');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId7}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId7}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId7}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource's base resource is constrained by a write-only Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 405\", () => {",
											"        pm.expect(pm.response.code).to.equal(405);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with message There is no Readable content type available to the caller for the requested resource\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.equal(\"There is no Readable content type available to the caller for the requested resource.\");",
											"         ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100007}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource's base resource is constrained by a write-only Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-WriteOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"There is no Readable content type available to the caller for the requested resource.\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource is constrained by a Profile with an include all on a child collection",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100008');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId8}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId8}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId8}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource is constrained by a Profile with an include all on a child collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with addresses[0] should only have specific members [addressTypeDescriptor, streetNumberName, city, stateAbbreviationDescriptor, postalCode, nameOfCounty]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const __ = require('lodash');",
											"       ",
											"         \t__.each(responseItem.addresses, address => {",
											"    \t\t\tlet properties = Object.keys(address);",
											"    \t    \tpm.expect(properties).to.have.members(['addressTypeDescriptor', 'streetNumberName', 'city', 'stateAbbreviationDescriptor', 'postalCode', 'nameOfCounty']);",
											"         ",
											"         \t});",
											"    });",
											"}",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100008}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an include all on a child collection\r\n    Given the caller is assigned the \"Test-Profile-Resource-Child-Collection-IncludeAll\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model at path \"addresses[0]\" should only have the specific members [addressTypeDescriptor, streetNumberName, city, stateAbbreviationDescriptor, postalCode, nameOfCounty]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource is constrained by a Profile with an include only on a child collection",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100009');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId9}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId9}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId9}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n   \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource is constrained by a Profile with an include only on a child collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with addresses[0] should only have specific members [addressTypeDescriptor, city, stateAbbreviationDescriptor, postalCode, streetNumberName]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const __ = require('lodash');",
											"       ",
											"         \t__.each(responseItem.addresses, address => {",
											"    \t\t\tlet properties = Object.keys(address);",
											"    \t    \tpm.expect(properties).to.have.members(['addressTypeDescriptor', 'city', 'stateAbbreviationDescriptor', 'postalCode', 'streetNumberName']);",
											"         ",
											"         \t});",
											"    });",
											"}",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100009}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an include only on a child collection\r\n    Given the caller is assigned the \"Test-Profile-Resource-BaseClass-Child-Collection-IncludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the enrollment \"School\" composite\r\n    Then the response model at path \"addresses[0]\" should only have the specific members [addressTypeDescriptor, city, stateAbbreviationDescriptor, postalCode, streetNumberName]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource is constrained by a Profile with an exclude only on a child collection",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100010');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId10}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId10}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId10}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource is constrained by a Profile with an exclude only on a child collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with addresses[0] should only have specific members [addressTypeDescriptor, city, nameOfCounty, postalCode, stateAbbreviationDescriptor, streetNumberName]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const __ = require('lodash');",
											"       ",
											"         \t__.each(responseItem.addresses, address => {",
											"    \t\t\tlet properties = Object.keys(address);",
											"    \t    \tpm.expect(properties).to.have.members(['addressTypeDescriptor', 'city', 'nameOfCounty', 'postalCode', 'stateAbbreviationDescriptor', 'streetNumberName']);",
											"         ",
											"         \t});",
											"    });",
											"}",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100010}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an exclude only on a child collection\r\n    Given the caller is assigned the \"Test-Profile-Resource-BaseClass-Child-Collection-ExcludeOnly-2\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model at path \"addresses[0]\" should only have the specific members [addressTypeDescriptor, city, nameOfCounty, postalCode, stateAbbreviationDescriptor, streetNumberName]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource is constrained by a Profile with an inclusive collection value filter on a child collection",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100011');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId11}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Staff Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"pm.environment.set('supplied:'+scenarioId+':personalTitlePrefix', \"Mr\");",
											"pm.environment.set('supplied:'+scenarioId+':hispanicLatinoEthnicity', \"true\");",
											"pm.environment.set('supplied:'+scenarioId+':loginId',  newGuid());",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate', beginDate);",
											"",
											"",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"personalTitlePrefix\": \"{{supplied:{{scenarioId}}:personalTitlePrefix}}\",\r\n  \"birthDate\": \"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"hispanicLatinoEthnicity\": \"{{supplied:{{scenarioId}}:hispanicLatinoEthnicity}}\",\r\n  \"loginId\": \"{{supplied:{{scenarioId}}:loginId}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId11}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId11}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId11}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Course Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':courseDefinedByDescriptor',\"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\");",
											"pm.environment.set('supplied:'+scenarioId+':courseDescription',\"Algebra I\");",
											"pm.environment.set('supplied:'+scenarioId+':courseTitle',\"Algebra I\");",
											"pm.environment.set('supplied:'+scenarioId+':courseIdentificationSystemDescriptor',\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':assigningOrganizationIdentificationCode',\"CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':identificationCode',\"CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':courseCode',newGuid());",
											"",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"courseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"{{supplied:{{scenarioId}}:courseIdentificationSystemDescriptor}}\",\r\n      \"assigningOrganizationIdentificationCode\": \"{{supplied:{{scenarioId}}:assigningOrganizationIdentificationCode}}\",\r\n      \"identificationCode\": \"{{supplied:{{scenarioId}}:identificationCode}}\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{known:schoolId11}}\"\r\n  },\r\n  \"courseDefinedByDescriptor\": \"{{supplied:{{scenarioId}}:courseDefinedByDescriptor}}\",\r\n  \"courseDescription\": \"{{supplied:{{scenarioId}}:courseDescription}}\",\r\n  \"courseTitle\": \"{{supplied:{{scenarioId}}:courseTitle}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize session Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':schoolYear',2011);",
											"pm.environment.set('supplied:'+scenarioId+':termDescriptor',\"uri://ed-fi.org/TermDescriptor#Fall Semester\");",
											"pm.environment.set('supplied:'+scenarioId+':totalInstructionalDays',__.random(10));",
											" pm.environment.set('supplied:'+scenarioId+':sessionName', \"2010-2011 Fall Semester\");",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sessionName\":  \"{{supplied:{{scenarioId}}:sessionName}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"schoolYearTypeReference\": {\r\n    \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\"\r\n  },\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\",\r\n  \"termDescriptor\":\"{{supplied:{{scenarioId}}:termDescriptor}}\",\r\n  \"totalInstructionalDays\": \"{{supplied:{{scenarioId}}:totalInstructionalDays}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize courseOfferings Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"localCourseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"courseReference\": {\r\n    \"courseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n    \"educationOrganizationId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"sessionReference\": {\r\n    \"schoolId\": \"{{known:schoolId11}}\",\r\n    \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n    \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n \r\n  \"localCourseTitle\":\"{{supplied:{{scenarioId}}:sessionName}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courseOfferings",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"courseOfferings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Section Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':sectionGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':educationalEnvironmentDescriptor',\"uri://ed-fi.org/EducationalEnvironmentDescriptor#Classroom\");",
											"pm.environment.set('supplied:'+scenarioId+':mediumOfInstructionDescriptor',\"uri://ed-fi.org/MediumOfInstructionDescriptor#Correspondence instruction\");",
											"pm.environment.set('supplied:'+scenarioId+':populationServedDescriptor',\"uri://ed-fi.org/PopulationServedDescriptor#Regular Students\");",
											"pm.environment.set('supplied:'+scenarioId+':sectionIdentifier',newGuid());",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n  \"courseOfferingReference\": {\r\n    \"localCourseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"schoolId\": \"{{known:schoolId11}}\",\r\n      \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n      \"sessionName\":\"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \r\n  \"locationSchoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"educationalEnvironmentDescriptor\": \"{{supplied:{{scenarioId}}:educationalEnvironmentDescriptor}}\",\r\n  \"mediumOfInstructionDescriptor\": \"{{supplied:{{scenarioId}}:mediumOfInstructionDescriptor}}\",\r\n   \"populationServedDescriptor\": \"{{supplied:{{scenarioId}}:populationServedDescriptor}}\"\r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffSectionAssociationData for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':classroomPositionDescriptor', \"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n       \"schoolId\": \"{{known:schoolId11}}\",\r\n       \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n       \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n  },\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"classroomPositionDescriptor\":\"{{supplied:{{scenarioId}}:classroomPositionDescriptor}}\",\r\n  \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n}\r\n\r\n\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffSectionAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Student Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
											"}",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											"",
											"let enteredUSDate=new Date();",
											"enteredUSDate = enteredUSDate.addMonths(-20);",
											"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId11}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize StudentSectionAssociations Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':attemptStatusDescriptor',\"uri://ed-fi.org/AttemptStatusDescriptor#Audited\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n   \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n       \"schoolId\": \"{{known:schoolId11}}\",\r\n       \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n       \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"attemptStatusDescriptor\": \"{{supplied:{{scenarioId}}:attemptStatusDescriptor}}\",\r\n  \"endDate\":\"{{supplied:{{scenarioId}}:beginDate}}\"\r\n \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize StudentEducationOrganizationAssociation Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Physical\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor1', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor2', \"uri://ed-fi.org/AddressTypeDescriptor#Home\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor3', \"uri://ed-fi.org/AddressTypeDescriptor#Work\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#HI\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Austin\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode', \"70007\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName', \"Ranch Road\");",
											"pm.environment.set('supplied:'+scenarioId+':localeDescriptor', \"uri://ed-fi.org/LocaleDescriptor#City-Large\");",
											"pm.environment.set('supplied:'+scenarioId+':apartmentRoomSuiteNumber', \"15510\");",
											"",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100011}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"studentReference\": {\r\n     \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor1}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor2}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    }\r\n    ,\r\n     {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor3}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    }\r\n  ],\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentEducationOrganizationAssociations",
										""
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource is constrained by a Profile with an inclusive collection value filter on a child collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Should the item return with all addresses should have addressTypeDescriptor values of either Physical or Home\", () => {",
											"        ",
											"        let dataVerified = false;",
											"        let expectedAddressTypes=['uri://ed-fi.org/AddressTypeDescriptor#Physical','uri://ed-fi.org/AddressTypeDescriptor#Home'];",
											"         const responseItem = pm.response.json();",
											"         const __ = require('lodash');",
											"           ",
											"            ",
											"         __.each(responseItem.students, student => {",
											"         \t    ",
											"         \t     if(student.educationOrganizations!==null)",
											"         \t     {",
											"         \t    \t__.each(student.educationOrganizations, educationOrganization => {",
											"         \t    \t ",
											"         \t    \t   if(educationOrganization.addresses!==null)",
											"         \t            {",
											"    ",
											"         \t                const actualAddressTypeDescriptors = __.map(educationOrganization.addresses, address => address.addressTypeDescriptor);",
											"                            pm.expect(actualAddressTypeDescriptors).to.have.members(expectedAddressTypes);",
											"                            dataVerified = true;",
											"         \t            }",
											"         \t    \t});",
											"         \t    }",
											"         ",
											"         \t});",
											"        pm.expect(Boolean(dataVerified),'educationOrganization.addresses is empty').to.eql(true); ",
											"    });",
											"}",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_CompositesWithMultipleResources}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SectionEnrollments/{{known:{{scenarioId}}:sectionGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"SectionEnrollments",
										"{{known:{{scenarioId}}:sectionGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an inclusive collection value filter on a child collection\r\n    Given the caller is assigned the \"Test-Profile-For-Composites-With-Multiple-Resources\" profile\r\n    And the subject of the request is a Section with associated Staff and Students with address type code values of [Physical, Home, Mailing]\r\n    When a GET (by id) request is submitted to the test \"SectionEnrollment\" composite\r\n    Then the response model at path \"students[*]/educationOrganizations[*]/addresses[*]\" should have \"addressTypeDescriptor\" values of [uri://ed-fi.org/AddressTypeDescriptor#Physical, uri://ed-fi.org/AddressTypeDescriptor#Home]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource is constrained by a Profile with an exclusive collection value filter on a child collection",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100012');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId12}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Staff Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"pm.environment.set('supplied:'+scenarioId+':personalTitlePrefix', \"Mr\");",
											"pm.environment.set('supplied:'+scenarioId+':hispanicLatinoEthnicity', \"true\");",
											"pm.environment.set('supplied:'+scenarioId+':loginId',  newGuid());",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate', beginDate);",
											"",
											"",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"personalTitlePrefix\": \"{{supplied:{{scenarioId}}:personalTitlePrefix}}\",\r\n  \"birthDate\": \"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"hispanicLatinoEthnicity\": \"{{supplied:{{scenarioId}}:hispanicLatinoEthnicity}}\",\r\n  \"loginId\": \"{{supplied:{{scenarioId}}:loginId}}\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId12}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId12}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId12}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n   \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Course Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':courseDefinedByDescriptor',\"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\");",
											"pm.environment.set('supplied:'+scenarioId+':courseDescription',\"Algebra I\");",
											"pm.environment.set('supplied:'+scenarioId+':courseTitle',\"Algebra I\");",
											"pm.environment.set('supplied:'+scenarioId+':courseIdentificationSystemDescriptor',\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':assigningOrganizationIdentificationCode',\"CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':identificationCode',\"CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':courseCode',newGuid());",
											"",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"courseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"{{supplied:{{scenarioId}}:courseIdentificationSystemDescriptor}}\",\r\n      \"assigningOrganizationIdentificationCode\": \"{{supplied:{{scenarioId}}:assigningOrganizationIdentificationCode}}\",\r\n      \"identificationCode\": \"{{supplied:{{scenarioId}}:identificationCode}}\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{known:schoolId12}}\"\r\n  },\r\n  \"courseDefinedByDescriptor\": \"{{supplied:{{scenarioId}}:courseDefinedByDescriptor}}\",\r\n  \"courseDescription\": \"{{supplied:{{scenarioId}}:courseDescription}}\",\r\n  \"courseTitle\": \"{{supplied:{{scenarioId}}:courseTitle}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize session Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':schoolYear',2011);",
											"pm.environment.set('supplied:'+scenarioId+':termDescriptor',\"uri://ed-fi.org/TermDescriptor#Fall Semester\");",
											"pm.environment.set('supplied:'+scenarioId+':totalInstructionalDays',__.random(10));",
											" pm.environment.set('supplied:'+scenarioId+':sessionName', \"2010-2011 Fall Semester\");",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sessionName\":  \"{{supplied:{{scenarioId}}:sessionName}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"schoolYearTypeReference\": {\r\n    \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\"\r\n  },\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\",\r\n  \"termDescriptor\":\"{{supplied:{{scenarioId}}:termDescriptor}}\",\r\n  \"totalInstructionalDays\": \"{{supplied:{{scenarioId}}:totalInstructionalDays}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize courseOfferings Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"localCourseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"courseReference\": {\r\n    \"courseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n    \"educationOrganizationId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"sessionReference\": {\r\n    \"schoolId\": \"{{known:schoolId12}}\",\r\n    \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n    \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n \r\n  \"localCourseTitle\":\"{{supplied:{{scenarioId}}:sessionName}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courseOfferings",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"courseOfferings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Section Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':sectionGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':educationalEnvironmentDescriptor',\"uri://ed-fi.org/EducationalEnvironmentDescriptor#Classroom\");",
											"pm.environment.set('supplied:'+scenarioId+':mediumOfInstructionDescriptor',\"uri://ed-fi.org/MediumOfInstructionDescriptor#Correspondence instruction\");",
											"pm.environment.set('supplied:'+scenarioId+':populationServedDescriptor',\"uri://ed-fi.org/PopulationServedDescriptor#Regular Students\");",
											"pm.environment.set('supplied:'+scenarioId+':sectionIdentifier',newGuid());",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n  \"courseOfferingReference\": {\r\n    \"localCourseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"schoolId\": \"{{known:schoolId12}}\",\r\n      \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n      \"sessionName\":\"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \r\n  \"locationSchoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"educationalEnvironmentDescriptor\": \"{{supplied:{{scenarioId}}:educationalEnvironmentDescriptor}}\",\r\n  \"mediumOfInstructionDescriptor\": \"{{supplied:{{scenarioId}}:mediumOfInstructionDescriptor}}\",\r\n   \"populationServedDescriptor\": \"{{supplied:{{scenarioId}}:populationServedDescriptor}}\"\r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffSectionAssociationData for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':classroomPositionDescriptor', \"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n       \"schoolId\": \"{{known:schoolId12}}\",\r\n       \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n       \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n  },\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"classroomPositionDescriptor\":\"{{supplied:{{scenarioId}}:classroomPositionDescriptor}}\",\r\n  \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n}\r\n\r\n\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffSectionAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Student Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
											"}",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											"",
											"let enteredUSDate=new Date();",
											"enteredUSDate = enteredUSDate.addMonths(-20);",
											"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId12}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize StudentSectionAssociations Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':attemptStatusDescriptor',\"uri://ed-fi.org/AttemptStatusDescriptor#Audited\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n   \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n       \"schoolId\": \"{{known:schoolId12}}\",\r\n       \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n       \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"attemptStatusDescriptor\": \"{{supplied:{{scenarioId}}:attemptStatusDescriptor}}\",\r\n  \"endDate\":\"{{supplied:{{scenarioId}}:beginDate}}\"\r\n \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize StudentEducationOrganizationAssociation Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Physical\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor1', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor2', \"uri://ed-fi.org/AddressTypeDescriptor#Home\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor3', \"uri://ed-fi.org/AddressTypeDescriptor#Work\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#HI\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Austin\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode', \"70007\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName', \"Ranch Road\");",
											"pm.environment.set('supplied:'+scenarioId+':localeDescriptor', \"uri://ed-fi.org/LocaleDescriptor#City-Large\");",
											"pm.environment.set('supplied:'+scenarioId+':apartmentRoomSuiteNumber', \"15510\");",
											"",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_100012}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"studentReference\": {\r\n     \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor1}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor2}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    }\r\n    ,\r\n     {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor3}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    }\r\n  ],\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentEducationOrganizationAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource is constrained by a Profile with an exclusive collection value filter on a child collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with all addresses should have addressTypeDescriptor values of Physical\", () => {",
											"        ",
											"        let dataVerified = false;",
											"        let expectedAddressTypes=['uri://ed-fi.org/AddressTypeDescriptor#Physical']; ",
											"         const responseItem = pm.response.json();",
											"         const __ = require('lodash');",
											"           ",
											"            ",
											"         __.each(responseItem.students, student => {",
											"         \t    ",
											"         \t     if(student.educationOrganizations!==null)",
											"         \t     {",
											"         \t    \t__.each(student.educationOrganizations, educationOrganization => {",
											"         \t    \t ",
											"         \t    \t   if(educationOrganization.addresses!==null)",
											"         \t            {",
											"    ",
											"         \t                const actualAddressTypeDescriptors = __.map(educationOrganization.addresses, address => address.addressTypeDescriptor);",
											"                            pm.expect(actualAddressTypeDescriptors).to.have.members(expectedAddressTypes);",
											"                            dataVerified = true;",
											"         \t            }",
											"         \t    \t});",
											"         \t    }",
											"         ",
											"         \t});",
											"        pm.expect(Boolean(dataVerified),'educationOrganization.addresses is empty').to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_ExcludeAllAddrsExceptPhysical}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SectionEnrollments/{{known:{{scenarioId}}:sectionGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"SectionEnrollments",
										"{{known:{{scenarioId}}:sectionGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an exclusive collection value filter on a child collection\r\n    Given the caller is assigned the \"Test-StudentEducationOrganizationAssociation-Exclude-All-Addrs-Except-Physical\" profile\r\n    And the subject of the request is a Section with associated Staff and Students with address type code values of [Physical, Home, Mailing]\r\n    When a GET (by id) request is submitted to the test \"SectionEnrollment\" composite\r\n    Then the response model at path \"students[*]/educationOrganizations[*]/addresses[*]\" should have \"addressTypeDescriptor\" values of [uri://ed-fi.org/AddressTypeDescriptor#Physical]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Feature:Composites are constrained by multiple Profiles",
			"item": [
				{
					"name": "Composite resource contains School which is constrained by overlapping include-only and exclude-only Profiles",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100002');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId1}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200201');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBMS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:multipleprofile:schoolId1}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId1}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n   \"charterStatusDescriptor\":\"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n   \"titleIPartASchoolDesignationDescriptor\":\"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains School which is constrained by overlapping include-only and exclude-only Profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with  specific members [id, schoolId, localEducationAgencyReference, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"         pm.expect(properties).to.have.members(['id', 'schoolId', 'localEducationAgencyReference', 'nameOfInstitution', 'shortNameOfInstitution', 'webSite', 'operationalStatusDescriptor', 'type', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'administrativeFundingControlDescriptor', 'addresses', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'schoolCategories', 'gradeLevels']);",
											"         ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200001}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by overlapping include-only and exclude-only Profiles\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    And the caller is assigned the \"Test-Profile-Resource-ExcludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource contains School which is constrained by one profile that excludes a child collection and another that includes some properties of the child collection",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100002');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId2}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200201');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBMS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:multipleprofile:schoolId2}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId2}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n   \"charterStatusDescriptor\":\"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n   \"titleIPartASchoolDesignationDescriptor\":\"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains School which is constrained by one profile that excludes a child collection and another that includes some properties of the child collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with  specific members [id, schoolId, localEducationAgencyReference, shortNameOfInstitution, webSite, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, gradeLevels]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"         pm.expect(properties).to.have.members(['id', 'schoolId', 'localEducationAgencyReference', 'shortNameOfInstitution', 'webSite', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'addresses', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'gradeLevels']);",
											"         ",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Should the item return addresses[0] should only have the specific members [addressTypeDescriptor, city, stateAbbreviationDescriptor, postalCode, streetNumberName]\", () => {",
											"         const __ = require('lodash');",
											"         const responseItem = pm.response.json();",
											"         \t__.each(responseItem.addresses, address => {",
											"         \t      const properties = Object.keys(address); ",
											"                    pm.expect(properties).to.have.members(['addressTypeDescriptor', 'city', 'stateAbbreviationDescriptor', 'postalCode', 'streetNumberName']);",
											"         \t});",
											"         ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200002}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by one profile that excludes a child collection and another that includes some properties of the child collection\r\n    Given the caller is assigned the \"Test-Profile-Resource-BaseClass-Child-Collection-IncludeOnly\" profile\r\n    And the caller is assigned the \"Test-Profile-Resource-ExcludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference, shortNameOfInstitution, webSite, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, gradeLevels]\r\n    And the response model at path \"addresses[0]\" should only have the specific members [addressTypeDescriptor, city, stateAbbreviationDescriptor, postalCode, streetNumberName]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource contains child elements composing Staff and Student which are constrained by two different profiles",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100012');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId3}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Staff Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"pm.environment.set('supplied:'+scenarioId+':personalTitlePrefix', \"Mr\");",
											"pm.environment.set('supplied:'+scenarioId+':hispanicLatinoEthnicity', \"true\");",
											"pm.environment.set('supplied:'+scenarioId+':loginId',  newGuid());",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate', beginDate);",
											"pm.environment.set('supplied:'+scenarioId+':sexType', \"female\");",
											"",
											"",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"personalTitlePrefix\": \"{{supplied:{{scenarioId}}:personalTitlePrefix}}\",\r\n  \"birthDate\": \"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"hispanicLatinoEthnicity\": \"{{supplied:{{scenarioId}}:hispanicLatinoEthnicity}}\",\r\n  \"loginId\": \"{{supplied:{{scenarioId}}:loginId}}\",\r\n  \"sexType\":\"{{supplied:{{scenarioId}}:sexType}}\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    }",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:multipleprofile:localEducationAgencyId3}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:multipleprofile:schoolId3}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId3}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Course Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':courseDefinedByDescriptor',\"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\");",
											"pm.environment.set('supplied:'+scenarioId+':courseDescription',\"Algebra I\");",
											"pm.environment.set('supplied:'+scenarioId+':courseTitle',\"Algebra I\");",
											"pm.environment.set('supplied:'+scenarioId+':courseIdentificationSystemDescriptor',\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':assigningOrganizationIdentificationCode',\"CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':identificationCode',\"CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':courseCode',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"courseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"{{supplied:{{scenarioId}}:courseIdentificationSystemDescriptor}}\",\r\n      \"assigningOrganizationIdentificationCode\": \"{{supplied:{{scenarioId}}:assigningOrganizationIdentificationCode}}\",\r\n      \"identificationCode\": \"{{supplied:{{scenarioId}}:identificationCode}}\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"courseDefinedByDescriptor\": \"{{supplied:{{scenarioId}}:courseDefinedByDescriptor}}\",\r\n  \"courseDescription\": \"{{supplied:{{scenarioId}}:courseDescription}}\",\r\n  \"courseTitle\": \"{{supplied:{{scenarioId}}:courseTitle}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize session Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':schoolYear',2011);",
											"pm.environment.set('supplied:'+scenarioId+':termDescriptor',\"uri://ed-fi.org/TermDescriptor#Fall Semester\");",
											"pm.environment.set('supplied:'+scenarioId+':totalInstructionalDays',__.random(10));",
											"pm.environment.set('supplied:'+scenarioId+':sessionName', \"2010-2011 Fall Semester\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sessionName\":  \"{{supplied:{{scenarioId}}:sessionName}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"schoolYearTypeReference\": {\r\n    \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\"\r\n  },\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\",\r\n  \"termDescriptor\":\"{{supplied:{{scenarioId}}:termDescriptor}}\",\r\n  \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"totalInstructionalDays\": \"{{supplied:{{scenarioId}}:totalInstructionalDays}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize courseOfferings Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"localCourseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"courseReference\": {\r\n    \"courseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n    \"educationOrganizationId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"sessionReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n    \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n    \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"localCourseTitle\":\"{{supplied:{{scenarioId}}:sessionName}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courseOfferings",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"courseOfferings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Section Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':sectionGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':educationalEnvironmentDescriptor',\"uri://ed-fi.org/EducationalEnvironmentDescriptor#Classroom\");",
											"pm.environment.set('supplied:'+scenarioId+':mediumOfInstructionDescriptor',\"uri://ed-fi.org/MediumOfInstructionDescriptor#Correspondence instruction\");",
											"pm.environment.set('supplied:'+scenarioId+':populationServedDescriptor',\"uri://ed-fi.org/PopulationServedDescriptor#Regular Students\");",
											"pm.environment.set('supplied:'+scenarioId+':sectionIdentifier',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n  \"courseOfferingReference\": {\r\n    \"localCourseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n      \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n      \"sessionName\":\"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \r\n  \"locationSchoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"educationalEnvironmentDescriptor\": \"{{supplied:{{scenarioId}}:educationalEnvironmentDescriptor}}\",\r\n  \"mediumOfInstructionDescriptor\": \"{{supplied:{{scenarioId}}:mediumOfInstructionDescriptor}}\",\r\n   \"populationServedDescriptor\": \"{{supplied:{{scenarioId}}:populationServedDescriptor}}\",\r\n   \"sequenceOfCourse\": \"1\",\r\n   \"availableCredits\": \"1\",\r\n   \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\"\r\n   \r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffSectionAssociationData for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':classroomPositionDescriptor', \"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n       \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n       \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n       \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n  },\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"classroomPositionDescriptor\":\"{{supplied:{{scenarioId}}:classroomPositionDescriptor}}\",\r\n  \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n}\r\n\r\n\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffSectionAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Student Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
											"}",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											"",
											"let enteredUSDate=new Date();",
											"enteredUSDate = enteredUSDate.addMonths(-20);",
											"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:multipleprofile:schoolId3}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize StudentSectionAssociations Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':attemptStatusDescriptor',\"uri://ed-fi.org/AttemptStatusDescriptor#Audited\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n   \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n       \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n       \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n       \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"attemptStatusDescriptor\": \"{{supplied:{{scenarioId}}:attemptStatusDescriptor}}\",\r\n  \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"endDate\":\"{{supplied:{{scenarioId}}:beginDate}}\"\r\n \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize StudentEducationOrganizationAssociation Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Physical\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#HI\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Austin\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode', \"70007\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName', \"Ranch Road\");",
											"pm.environment.set('supplied:'+scenarioId+':localeDescriptor', \"uri://ed-fi.org/LocaleDescriptor#City-Large\");",
											"pm.environment.set('supplied:'+scenarioId+':apartmentRoomSuiteNumber', \"15510\");",
											"",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200003}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"studentReference\": {\r\n     \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    \r\n    }\r\n  ],\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentEducationOrganizationAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains child elements composing Staff and Student which are constrained by two different profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    const __ = require('lodash');",
											"        ",
											"    ",
											"    pm.test(\"Should the item return students[0]/educationOrganizations[0]/addresses[0] should only have the specific members [addressTypeDescriptor, city, postalCode, stateAbbreviationDescriptor, streetNumberName]\", () => {",
											"        ",
											"         let dataVerified = false;",
											"         const responseItem = pm.response.json();",
											"       ",
											"         __.each(responseItem.students, student => {",
											"         \t    ",
											"         \t     if(student.educationOrganizations!==null)",
											"         \t     {",
											"         \t    \t__.each(student.educationOrganizations, educationOrganization => {",
											"         \t    \t   ",
											"         \t    \t   if(educationOrganization.addresses!==null)",
											"         \t            {",
											"    \t                 ",
											"         \t    \t    \t__.each(educationOrganization.addresses, address => {",
											"         \t    \t    \t    ",
											"         \t    \t    \t    if(address!==null)",
											"                 \t            {",
											"                 \t                 const properties = Object.keys(address); ",
											"                                     pm.expect(properties).to.have.members(['addressTypeDescriptor', 'city', 'postalCode', 'stateAbbreviationDescriptor', 'streetNumberName']);",
											"                 \t            }",
											"         \t    \t    \t});",
											"         \t            }",
											"         \t    \t});",
											"         \t    }",
											"         ",
											"         \t});",
											"         \t",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Should the item return with  specific members [id, sectionIdentifier, sequenceOfCourse, educationalEnvironmentDescriptor, availableCredits, staff, students, academicSubjectDescriptor, sessionReference, classPeriods, courseOfferingReference, locationReference, locationSchoolReference]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"         pm.expect(properties).to.have.members(['id', 'sectionIdentifier', 'sequenceOfCourse', 'educationalEnvironmentDescriptor', 'availableCredits', 'staff', 'students', 'academicSubjectDescriptor', 'sessionReference', 'classPeriods', 'courseOfferingReference', 'locationReference', 'locationSchoolReference']);",
											"         ",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Should the item return staff[0] should not have the specific members [sexType, birthDate, hispanicLatinoEthnicity]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"           __.each(responseItem.staff, staff => {",
											"                    const properties = Object.keys(staff); ",
											"                    pm.expect(properties).to.not.include('sexType').and.not.include('birthDate').and.not.include('hispanicLatinoEthnicity');",
											"           });",
											"         ",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Should the item return students[0] should only have the specific members [id, studentSectionAssociation_id, studentUniqueId, firstName, lastSurname, educationOrganizations, schools]\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"           __.each(responseItem.students, student => {",
											"                        const properties = Object.keys(student); ",
											"                        pm.expect(properties).to.have.members(['id', 'studentSectionAssociation_id', 'studentUniqueId', 'firstName', 'lastSurname', 'educationOrganizations', 'schools']);",
											"           });",
											"         ",
											"    });",
											"}",
											"",
											"     "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_StudentRestrictedMultipleResources}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SectionEnrollments/{{known:{{scenarioId}}:sectionGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"SectionEnrollments",
										"{{known:{{scenarioId}}:sectionGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains child elements composing Staff and Student which are constrained by two different profiles\r\n    Given the caller is assigned the \"Student-Readable-Restricted\" profile\r\n    And the caller is assigned the \"Test-Profile-For-Composites-With-Multiple-Resources\" profile\r\n    And the subject of the request is a Section with associated Staff and Students with address type code values of [Physical, Home]\r\n    When a GET (by id) request is submitted to the test \"SectionEnrollment\" composite\r\n    Then the response model should have only the specific members [id, sectionIdentifier, sequenceOfCourse, educationalEnvironmentDescriptor, availableCredits, staff, students, academicSubjectDescriptor, sessionReference, classPeriods, courseOfferingReference, locationReference, locationSchoolReference]\r\n    # SexType is included by one profile, excluded by another, but should be included in the composite\r\n    And the response model at path \"staff[0]\" should not have the specific members [sexType, birthDate, hispanicLatinoEthnicity]\r\n    # Student's included properties are a combination of two \"Include Only\" profiles + LinkedCollections from the composite definition, which Profiles don't constrain\r\n    And the response model at path \"students[0]\" should only have the specific members [id, studentSectionAssociation_id, studentUniqueId, firstName, lastSurname, educationOrganizations, schools]\r\n    And the response model at path \"students[0]/educationOrganizations[0]/addresses[0]\" should only have the specific members [addressTypeDescriptor, city, postalCode, stateAbbreviationDescriptor, streetNumberName]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Composite resource contains child collection which have value filters applied by two different profiles",
					"item": [
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-100012');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId4}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Staff Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"pm.environment.set('supplied:'+scenarioId+':personalTitlePrefix', \"Mr\");",
											"pm.environment.set('supplied:'+scenarioId+':hispanicLatinoEthnicity', \"true\");",
											"pm.environment.set('supplied:'+scenarioId+':loginId',  newGuid());",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate', beginDate);",
											"",
											"",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"personalTitlePrefix\": \"{{supplied:{{scenarioId}}:personalTitlePrefix}}\",\r\n  \"birthDate\": \"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"hispanicLatinoEthnicity\": \"{{supplied:{{scenarioId}}:hispanicLatinoEthnicity}}\",\r\n  \"loginId\": \"{{supplied:{{scenarioId}}:loginId}}\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let hireDate=new Date();",
											"hireDate = hireDate.addMonths(-24);",
											"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
											"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:multipleprofile:localEducationAgencyId4}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StaffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"pm.environment.set('supplied:'+scenarioId+':administrativeFundingControlDescriptor', \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\");",
											"pm.environment.set('supplied:'+scenarioId+':operationalStatusDescriptor', \"uri://ed-fi.org/OperationalStatusDescriptor#Active\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");",
											"pm.environment.set('supplied:'+scenarioId+':webSite', \"http://www.GBISD.edu/GBHS/\");",
											"pm.environment.set('supplied:'+scenarioId+':charterStatusDescriptor', \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\");",
											"pm.environment.set('supplied:'+scenarioId+':titleIPartASchoolDesignationDescriptor', \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName',  \"P.O. Box 2035\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Grand Bend\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode',  \"73334-2035\");",
											"pm.environment.set('supplied:'+scenarioId+':nameOfCounty',  \"Williston\");",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:multipleprofile:schoolId4}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId4}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"administrativeFundingControlDescriptor\": \"{{supplied:{{scenarioId}}:administrativeFundingControlDescriptor}}\",\r\n  \"operationalStatusDescriptor\":  \"{{supplied:{{scenarioId}}:operationalStatusDescriptor}}\",\r\n   \"webSite\":\"{{supplied:{{scenarioId}}:webSite}}\",\r\n  \"charterStatusDescriptor\": \"{{supplied:{{scenarioId}}:charterStatusDescriptor}}\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"{{supplied:{{scenarioId}}:titleIPartASchoolDesignationDescriptor}}\",\r\n  \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"streetNumberName\": \"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"stateAbbreviationDescriptor\":  \"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"postalCode\": \"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"nameOfCounty\": \"{{supplied:{{scenarioId}}:nameOfCounty}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize Course Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':courseDefinedByDescriptor',\"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\");",
											"pm.environment.set('supplied:'+scenarioId+':courseDescription',\"Algebra I\");",
											"pm.environment.set('supplied:'+scenarioId+':courseTitle',\"Algebra I\");",
											"pm.environment.set('supplied:'+scenarioId+':courseIdentificationSystemDescriptor',\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':assigningOrganizationIdentificationCode',\"CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':identificationCode',\"CSSC course code\");",
											"pm.environment.set('supplied:'+scenarioId+':courseCode',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"courseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"{{supplied:{{scenarioId}}:courseIdentificationSystemDescriptor}}\",\r\n      \"assigningOrganizationIdentificationCode\": \"{{supplied:{{scenarioId}}:assigningOrganizationIdentificationCode}}\",\r\n      \"identificationCode\": \"{{supplied:{{scenarioId}}:identificationCode}}\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"courseDefinedByDescriptor\": \"{{supplied:{{scenarioId}}:courseDefinedByDescriptor}}\",\r\n  \"courseDescription\": \"{{supplied:{{scenarioId}}:courseDescription}}\",\r\n  \"courseTitle\": \"{{supplied:{{scenarioId}}:courseTitle}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize session Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':schoolYear',2011);",
											"pm.environment.set('supplied:'+scenarioId+':termDescriptor',\"uri://ed-fi.org/TermDescriptor#Fall Semester\");",
											"pm.environment.set('supplied:'+scenarioId+':totalInstructionalDays',__.random(10));",
											"pm.environment.set('supplied:'+scenarioId+':sessionName', \"2010-2011 Fall Semester\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sessionName\":  \"{{supplied:{{scenarioId}}:sessionName}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"schoolYearTypeReference\": {\r\n    \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\"\r\n  },\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\",\r\n  \"termDescriptor\":\"{{supplied:{{scenarioId}}:termDescriptor}}\",\r\n  \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"totalInstructionalDays\": \"{{supplied:{{scenarioId}}:totalInstructionalDays}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize courseOfferings Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"localCourseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"courseReference\": {\r\n    \"courseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n    \"educationOrganizationId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"sessionReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n    \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n    \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"localCourseTitle\":\"{{supplied:{{scenarioId}}:sessionName}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courseOfferings",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"courseOfferings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Section Data for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':sectionGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':educationalEnvironmentDescriptor',\"uri://ed-fi.org/EducationalEnvironmentDescriptor#Classroom\");",
											"pm.environment.set('supplied:'+scenarioId+':mediumOfInstructionDescriptor',\"uri://ed-fi.org/MediumOfInstructionDescriptor#Correspondence instruction\");",
											"pm.environment.set('supplied:'+scenarioId+':populationServedDescriptor',\"uri://ed-fi.org/PopulationServedDescriptor#Regular Students\");",
											"pm.environment.set('supplied:'+scenarioId+':sectionIdentifier',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n  \"courseOfferingReference\": {\r\n    \"localCourseCode\": \"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n      \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n      \"sessionName\":\"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \r\n  \"locationSchoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"educationalEnvironmentDescriptor\": \"{{supplied:{{scenarioId}}:educationalEnvironmentDescriptor}}\",\r\n  \"mediumOfInstructionDescriptor\": \"{{supplied:{{scenarioId}}:mediumOfInstructionDescriptor}}\",\r\n   \"populationServedDescriptor\": \"{{supplied:{{scenarioId}}:populationServedDescriptor}}\",\r\n   \"sequenceOfCourse\": \"1\",\r\n   \"availableCredits\": \"1\",\r\n   \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\"\r\n   \r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StaffSectionAssociationData for Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':classroomPositionDescriptor', \"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n       \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n       \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n       \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n  },\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"classroomPositionDescriptor\":\"{{supplied:{{scenarioId}}:classroomPositionDescriptor}}\",\r\n  \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n}\r\n\r\n\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffSectionAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Student Data for Post Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"    pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
											"}",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											"",
											"let enteredUSDate=new Date();",
											"enteredUSDate = enteredUSDate.addMonths(-20);",
											"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentSchoolAssociations Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:multipleprofile:schoolId4}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize StudentSectionAssociations Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':attemptStatusDescriptor',\"uri://ed-fi.org/AttemptStatusDescriptor#Audited\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n   \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{supplied:{{scenarioId}}:sectionIdentifier}}\",\r\n       \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n       \"schoolYear\": \"{{supplied:{{scenarioId}}:schoolYear}}\",\r\n       \"sessionName\": \"{{supplied:{{scenarioId}}:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"attemptStatusDescriptor\": \"{{supplied:{{scenarioId}}:attemptStatusDescriptor}}\",\r\n  \"academicSubjectDescriptor\": \"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\",\r\n  \"endDate\":\"{{supplied:{{scenarioId}}:beginDate}}\"\r\n \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize StudentEducationOrganizationAssociation Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
											"",
											"let  endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
											"",
											"",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor', \"uri://ed-fi.org/AddressTypeDescriptor#Physical\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor1', \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor2', \"uri://ed-fi.org/AddressTypeDescriptor#Home\");",
											"pm.environment.set('supplied:'+scenarioId+':addressTypeDescriptor3', \"uri://ed-fi.org/AddressTypeDescriptor#Work\");",
											"pm.environment.set('supplied:'+scenarioId+':stateAbbreviationDescriptor', \"uri://ed-fi.org/StateAbbreviationDescriptor#HI\");",
											"pm.environment.set('supplied:'+scenarioId+':city', \"Austin\");",
											"pm.environment.set('supplied:'+scenarioId+':postalCode', \"70007\");",
											"pm.environment.set('supplied:'+scenarioId+':streetNumberName', \"Ranch Road\");",
											"pm.environment.set('supplied:'+scenarioId+':localeDescriptor', \"uri://ed-fi.org/LocaleDescriptor#City-Large\");",
											"pm.environment.set('supplied:'+scenarioId+':apartmentRoomSuiteNumber', \"15510\");",
											"",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_200004}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"studentReference\": {\r\n     \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor1}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor2}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    }\r\n    ,\r\n     {\r\n      \"addressTypeDescriptor\": \"{{supplied:{{scenarioId}}:addressTypeDescriptor3}}\",\r\n      \"stateAbbreviationDescriptor\":\"{{supplied:{{scenarioId}}:stateAbbreviationDescriptor}}\",\r\n      \"city\": \"{{supplied:{{scenarioId}}:city}}\",\r\n      \"postalCode\":\"{{supplied:{{scenarioId}}:postalCode}}\",\r\n      \"streetNumberName\":\"{{supplied:{{scenarioId}}:streetNumberName}}\",\r\n      \"localeDescriptor\": \"{{supplied:{{scenarioId}}:localeDescriptor}}\",\r\n      \"apartmentRoomSuiteNumber\": \"{{supplied:{{scenarioId}}:apartmentRoomSuiteNumber}}\"\r\n    }\r\n  ],\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentEducationOrganizationAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Composite resource contains child collection which have value filters applied by two different profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563e90-19fd-491d-8173-443d23db5604",
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === 'true'){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    pm.test(\"Should the item return with all addresses should have addressTypeDescriptor values of either Physical or Home\", () => {",
											"        ",
											"        let dataVerified = false;",
											"        let expectedAddressTypes=['uri://ed-fi.org/AddressTypeDescriptor#Physical','uri://ed-fi.org/AddressTypeDescriptor#Home'];",
											"         const responseItem = pm.response.json();",
											"         const __ = require('lodash');",
											"           ",
											"            ",
											"         __.each(responseItem.students, student => {",
											"         \t    ",
											"         \t     if(student.educationOrganizations!==null)",
											"         \t     {",
											"         \t    \t__.each(student.educationOrganizations, educationOrganization => {",
											"         \t    \t ",
											"         \t    \t   if(educationOrganization.addresses!==null)",
											"         \t            {",
											"    ",
											"         \t                const actualAddressTypeDescriptors = __.map(educationOrganization.addresses, address => address.addressTypeDescriptor);",
											"                            pm.expect(actualAddressTypeDescriptors).to.have.members(expectedAddressTypes);",
											"                            dataVerified = true;",
											"         \t            }",
											"         \t    \t});",
											"         \t    }",
											"         ",
											"         \t});",
											"        pm.expect(Boolean(dataVerified),'educationOrganization.addresses is empty').to.eql(true); ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a51824d0-46be-411f-b24b-e8d3eeadd921",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_MultipleResourcesExceptPhysical}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SectionEnrollments/{{known:{{scenarioId}}:sectionGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"composites",
										"v1",
										"ed-fi",
										"test",
										"SectionEnrollments",
										"{{known:{{scenarioId}}:sectionGuid}}"
									]
								},
								"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
							},
							"response": []
						}
					],
					"description": "Scenario: Composite resource contains child collection which have value filters applied by two different profiles\r\n    Given the caller is assigned the \"Test-Profile-For-Composites-With-Multiple-Resources\" profile\r\n    And the caller is assigned the \"Test-StudentEducationOrganizationAssociation-Exclude-All-Addrs-Except-Physical\" profile\r\n    And the subject of the request is a Section with associated Staff and Students with address type code values of [Physical, Home, Mailing]\r\n    When a GET (by id) request is submitted to the test \"SectionEnrollment\" composite\r\n    Then the response model at path \"students[*]/educationOrganizations[*]/addresses[*]\" should have \"addressTypeDescriptor\" values of [uri://ed-fi.org/AddressTypeDescriptor#Physical, uri://ed-fi.org/AddressTypeDescriptor#Home]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "698df003-7822-47af-b0a3-fe5557867ddd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7fa4852-0bb9-4ffe-84b7-d267d83cd50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clean Up Test Data",
			"item": [
				{
					"name": "Clean up Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "112271e1-3ff0-4379-8cab-170739feb315",
								"exec": [
									"const __ = require('lodash');\r",
									"\r",
									"const keys = __.keys(pm.environment.toObject());\r",
									"console.log('Initial keys: ' + JSON.stringify(keys));\r",
									"\r",
									"const keysToRemove = __.filter(keys, x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'));\r",
									"\r",
									"__.each(keysToRemove, k => pm.environment.unset(k));\r",
									"\r",
									"const remainingKeys = __.keys(pm.environment.toObject());\r",
									"console.log('Remaining keys:' + JSON.stringify(remainingKeys));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1968cd71-f440-42fc-9a12-ae5ce85610f9",
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_MultipleResourcesExceptPhysical\",\"AccessToken_ProfileTest_MultipleResourcesExceptPhysical\",\"ApiKey_ProfileTest_MultipleResourcesExceptPhysical\",\"ApiSecret_ProfileTest_MultipleResourcesExceptPhysical\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_StudentRestrictedMultipleResources\",\"AccessToken_ProfileTest_StudentRestrictedMultipleResources\",\"ApiKey_ProfileTest_StudentRestrictedMultipleResources\",\"ApiSecret_ProfileTest_StudentRestrictedMultipleResources\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_ExcludeAllAddrsExceptPhysical\",\"AccessToken_ProfileTest_ExcludeAllAddrsExceptPhysical\",\"ApiKey_ProfileTest_ExcludeAllAddrsExceptPhysical\",\"ApiSecret_ProfileTest_ExcludeAllAddrsExceptPhysical\")",
					"",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_CompositesWithMultipleResources\",\"AccessToken_ProfileTest_CompositesWithMultipleResources\",\"ApiKey_ProfileTest_CompositesWithMultipleResources\",\"ApiSecret_ProfileTest_CompositesWithMultipleResources\")",
					"",
					"CreateAccessToken(\"TokenExpiry_255901\",\"AccessToken_255901\",\"ApiKey_255901\",\"ApiSecret_255901\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100001\",\"AccessToken_100001\",\"ApiKey_100001\",\"ApiSecret_100001\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100002\",\"AccessToken_100002\",\"ApiKey_100002\",\"ApiSecret_100002\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100003\",\"AccessToken_100003\",\"ApiKey_100003\",\"ApiSecret_100003\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100004\",\"AccessToken_100004\",\"ApiKey_100004\",\"ApiSecret_100004\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100005\",\"AccessToken_100005\",\"ApiKey_100005\",\"ApiSecret_100005\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100006\",\"AccessToken_100006\",\"ApiKey_100006\",\"ApiSecret_100006\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100007\",\"AccessToken_100007\",\"ApiKey_100007\",\"ApiSecret_100007\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100008\",\"AccessToken_100008\",\"ApiKey_100008\",\"ApiSecret_100008\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100009\",\"AccessToken_100009\",\"ApiKey_100009\",\"ApiSecret_100009\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100010\",\"AccessToken_100010\",\"ApiKey_100010\",\"ApiSecret_100010\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100011\",\"AccessToken_100011\",\"ApiKey_100011\",\"ApiSecret_100011\")",
					"",
					"CreateAccessToken(\"TokenExpiry_100012\",\"AccessToken_100012\",\"ApiKey_100012\",\"ApiSecret_100012\")",
					"",
					"CreateAccessToken(\"TokenExpiry_200001\",\"AccessToken_200001\",\"ApiKey_200001\",\"ApiSecret_200001\")",
					"",
					"CreateAccessToken(\"TokenExpiry_200002\",\"AccessToken_200002\",\"ApiKey_200002\",\"ApiSecret_200002\")",
					"",
					"CreateAccessToken(\"TokenExpiry_200003\",\"AccessToken_200003\",\"ApiKey_200003\",\"ApiSecret_200003\")",
					"",
					"CreateAccessToken(\"TokenExpiry_200004\",\"AccessToken_200004\",\"ApiKey_200004\",\"ApiSecret_200004\")",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry,AccessToken,ApiKey, ApiSecret)",
					"                  {",
					"let tokenExpiration = pm.environment.get(TokenExpiry);",
					"let currentToken = pm.environment.get(AccessToken);",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"   // console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/json\"",
					"        ],",
					"        body: {",
					"            mode: \"raw\",",
					"            raw: JSON.stringify({ Grant_type: grantType })",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(AccessToken, newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1db543c6-134e-4523-8eae-9a427147544b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}