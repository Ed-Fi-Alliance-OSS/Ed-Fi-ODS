{
	"info": {
		"_postman_id": "86a369cf-a102-4188-8261-89d86151c926",
		"name": "Ed-Fi ODS/API Composite Profile Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1213570"
	},
	"item": [
		{
			"name": "Test Suite Setup",
			"item": [
				{
					"name": "Initialize stateEducationAgency",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\",\r\n  \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#State Education Agency\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/stateEducationAgencies",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"stateEducationAgencies"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				}
			]
		},
		{
			"name": "Feature: Composites are constrained by Profiles",
			"item": [
				{
					"name": "Composite resource contains School which is constrained by an include-only Profile",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId1}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId1}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId1}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Get School (constrained by Test-Profile-Resource-IncludeOnly)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the item with only specific members [id, schoolId, nameOfInstitution, operationalStatusDescriptor, type, administrativeFundingControlDescriptor, addresses, schoolCategories]\",",
													"  () => {",
													"    const responseItem = pm.response.json();",
													"",
													"    pm.expect(responseItem).to.have.keys('id', 'schoolId', 'nameOfInstitution', 'operationalStatusDescriptor', 'type', 'administrativeFundingControlDescriptor', 'addresses', 'schoolCategories');",
													"  });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an include-only Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, nameOfInstitution, operationalStatusDescriptor, type, administrativeFundingControlDescriptor, addresses, schoolCategories]\r\n    ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource contains School which is constrained by an exclude-only Profile",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId2}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId2}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId2}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Get School (constrained by Test-Profile-Resource-ExcludeOnly)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the item with only specific members [id, schoolId, localEducationAgencyReference, shortNameOfInstitution, webSite, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, gradeLevels]\",",
													"  () => {",
													"    const responseItem = pm.response.json();",
													"",
													"    pm.expect(responseItem).to.have.keys(['id', 'schoolId', 'localEducationAgencyReference', 'shortNameOfInstitution', 'webSite', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'gradeLevels']);",
													"  });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an exclude-only Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-ExcludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference, shortNameOfInstitution, webSite, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, gradeLevels]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource contains School which is constrained by an include-only references Profile",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId3}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId3}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId3}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource contains School which is constrained by an include-only references Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with  specific members [id, schoolId, localEducationAgencyReference]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const properties = Object.keys(responseItem);",
													"    pm.expect(properties).to.have.members(['id', 'schoolId', 'localEducationAgencyReference']);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an include-only references Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-References-IncludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource contains School which is constrained by an exclude-only references Profile",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId4}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId4}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId4}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource contains School which is constrained by an exclude-only references Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with  specific members [id, schoolId, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const properties = Object.keys(responseItem);",
													"    pm.expect(properties).to.have.members(['id', 'schoolId', 'nameOfInstitution', 'shortNameOfInstitution', 'webSite', 'operationalStatusDescriptor', 'type', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'administrativeFundingControlDescriptor', 'addresses', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'schoolCategories', 'gradeLevels']);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100004}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an exclude-only references Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-References-ExcludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\r\n     ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource contains School which is constrained by an include-all Profile",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId5}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId5}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId5}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource contains School which is constrained by an include-all Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with  specific members [id, schoolId,localEducationAgencyReference, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const properties = Object.keys(responseItem);",
													"    pm.expect(properties).to.have.members(['id', 'schoolId', 'nameOfInstitution', 'shortNameOfInstitution', 'webSite', 'operationalStatusDescriptor', 'type', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'administrativeFundingControlDescriptor', 'addresses', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'schoolCategories', 'gradeLevels', 'localEducationAgencyReference']);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100005}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by an include-all Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\r\n     ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource contains Staff which is constrained by an include-all Profile",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100006}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId6}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:staff:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:staff:UniqueId', requestJson.staffUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\",\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\",\r\n  \"personalTitlePrefix\": \"{{$randomCompanySuffix}}\",\r\n  \"birthDate\": \"2010-05-05\",\r\n  \"hispanicLatinoEthnicity\": \"true\",\r\n  \"loginId\": \"S{{$randomInt}}{{$randomInt}}\"\r\n}\r\n\r\n "
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100006}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId6}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:staff:UniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\",\r\n   \"hireDate\":\"2000-06-06\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource contains Staff which is constrained by an include-all Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should the item return with  specific members [id, staffUniqueId, personalTitlePrefix, firstName, lastSurname, sexDescriptor, birthDate, hispanicLatinoEthnicity, loginId, addresses, electronicMails, identificationCodes, languages, races, telephones, classifications]\", () => {\r",
													"\r",
													"    const responseItem = pm.response.json();\r",
													"    const properties = Object.keys(responseItem);\r",
													"    pm.expect(properties).to.have.members(['id', 'staffUniqueId', 'personalTitlePrefix', 'firstName', 'lastSurname', 'sexDescriptor', 'birthDate', 'hispanicLatinoEthnicity', 'loginId', 'addresses', 'electronicMails', 'identificationCodes', 'languages', 'races', 'telephones', 'classifications']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100006}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/Staffs/{{known:staff:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"Staffs",
												"{{known:staff:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains Staff which is constrained by an include-all Profile\r\n    Given the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the subject of the request is a staff\r\n    When a GET (by id) request is submitted to the test \"Staff\" composite\r\n    Then the response model should have only the specific members [id, staffUniqueId, personalTitlePrefix, firstName, lastSurname, sexDescriptor, birthDate, hispanicLatinoEthnicity, loginId, addresses, electronicMails, identificationCodes, languages, races, telephones, classifications]\r\n    And the response model at path \"classifications[0]\" should only have the specific members [classification]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource's base resource is constrained by a write-only Profile",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId7}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId7}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId7}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource's base resource is constrained by a write-only Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", () => { // TODO: ODS-6143 - Change to 403",
													"  pm.expect(pm.response.code).to.equal(405); // TODO: ODS-6143 - Change to 403",
													"});",
													"",
													"pm.test(\"Should return a message indicating there is no Readable content type available to the caller for the requested resource\", () => {",
													"  const responseItem = pm.response.json();",
													"",
													"  pm.expect(responseItem.type).to.equal(\"urn:ed-fi:api:security:authorization:composite:not-readable\");",
													"  pm.expect(responseItem.title).to.equal(\"Composite Resource Not Readable\");",
													"  pm.expect(responseItem.detail).to.equal(\"The resource cannot be read due to a data policy.\");",
													"",
													"  pm.expect(responseItem.errors).to.contain(\"The composite's root resource 'School' is not readable because the API client has been assigned a Profile covering that resource which only supports writes.\");",
													"",
													"  pm.expect(responseItem.errors).to.contain(\"There is no readable content type available to the caller for the 'School' resource in the following profiles: 'Test-Profile-Resource-WriteOnly'.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100007}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource's base resource is constrained by a write-only Profile\r\n    Given the caller is assigned the \"Test-Profile-Resource-WriteOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"There is no Readable content type available to the caller for the requested resource.\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource is constrained by a Profile with an include all on a child collection",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId8}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId8}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId8}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource is constrained by a Profile with an include all on a child collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with addresses[0] should only have specific members [addressTypeDescriptor, streetNumberName, city, stateAbbreviationDescriptor, postalCode, nameOfCounty]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const __ = require('lodash');",
													"",
													"    __.each(responseItem.addresses, address => {",
													"        let properties = Object.keys(address);",
													"        pm.expect(properties).to.have.members(['addressTypeDescriptor', 'streetNumberName', 'city', 'stateAbbreviationDescriptor', 'postalCode', 'nameOfCounty']);",
													"",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100008}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an include all on a child collection\r\n    Given the caller is assigned the \"Test-Profile-Resource-Child-Collection-IncludeAll\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model at path \"addresses[0]\" should only have the specific members [addressTypeDescriptor, streetNumberName, city, stateAbbreviationDescriptor, postalCode, nameOfCounty]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource is constrained by a Profile with an include only on a child collection",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId9}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId9}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId9}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource is constrained by a Profile with an include only on a child collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with addresses[0] should only have specific members [addressTypeDescriptor, city, stateAbbreviationDescriptor, postalCode, streetNumberName]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const __ = require('lodash');",
													"",
													"    __.each(responseItem.addresses, address => {",
													"        let properties = Object.keys(address);",
													"        pm.expect(properties).to.have.members(['addressTypeDescriptor', 'city', 'stateAbbreviationDescriptor', 'postalCode', 'streetNumberName']);",
													"",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100009}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an include only on a child collection\r\n    Given the caller is assigned the \"Test-Profile-Resource-BaseClass-Child-Collection-IncludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the enrollment \"School\" composite\r\n    Then the response model at path \"addresses[0]\" should only have the specific members [addressTypeDescriptor, city, stateAbbreviationDescriptor, postalCode, streetNumberName]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource is constrained by a Profile with an exclude only on a child collection",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId10}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId10}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId10}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource is constrained by a Profile with an exclude only on a child collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with addresses[0] should only have specific members [addressTypeDescriptor, city, nameOfCounty, postalCode, stateAbbreviationDescriptor, streetNumberName]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const __ = require('lodash');",
													"",
													"    __.each(responseItem.addresses, address => {",
													"        let properties = Object.keys(address);",
													"        pm.expect(properties).to.have.members(['addressTypeDescriptor', 'city', 'nameOfCounty', 'postalCode', 'stateAbbreviationDescriptor', 'streetNumberName']);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100010}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an exclude only on a child collection\r\n    Given the caller is assigned the \"Test-Profile-Resource-BaseClass-Child-Collection-ExcludeOnly-2\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model at path \"addresses[0]\" should only have the specific members [addressTypeDescriptor, city, nameOfCounty, postalCode, stateAbbreviationDescriptor, streetNumberName]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource is constrained by a Profile with an inclusive collection value filter on a child collection",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId11}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:staff:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:staff:UniqueId', requestJson.staffUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\",\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\",\r\n  \"personalTitlePrefix\": \"{{$randomCompanySuffix}}\",\r\n  \"birthDate\": \"2010-08-05\",\r\n  \"hispanicLatinoEthnicity\": \"true\",\r\n  \"loginId\": \"S{{$randomInt}}{{$randomInt}}\"\r\n}\r\n\r\n ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId11}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:staff:UniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\",\r\n   \"hireDate\":\"2000-06-06\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId11}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId11}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:courseCode', requestJson.courseCode);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"courseCode\":\"S{{$randomInt}}{{$randomInt}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\",\r\n      \"assigningOrganizationIdentificationCode\": \"CSSC course code\",\r\n      \"identificationCode\": \"CSSC course code\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{known:schoolId11}}\"\r\n  },\r\n  \"courseDefinedByDescriptor\": \"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\",\r\n  \"courseDescription\": \"Algebra I\",\r\n  \"courseTitle\": \"Algebra I\",\r\n  \"numberOfParts\": \"3\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:sessionName', requestJson.sessionName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const __ = require('lodash');",
													"const moment = require('moment');",
													"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':beginDate', beginDate);",
													"",
													"let  endDate=new Date();",
													"endDate = endDate.addMonths(12);",
													"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':endDate', endDate);",
													"",
													"",
													"pm.environment.set('supplied:'+scenarioId+':schoolYear',2011);",
													"pm.environment.set('supplied:'+scenarioId+':termDescriptor',\"uri://ed-fi.org/TermDescriptor#Fall Semester\");",
													"pm.environment.set('supplied:'+scenarioId+':totalInstructionalDays',__.random(10));",
													" pm.environment.set('supplied:'+scenarioId+':sessionName', \"2010-2011 Fall Semester\");",
													"  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sessionName\":  \"S{{$randomInt}}{{$randomInt}} Fall Semester\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"schoolYearTypeReference\": {\r\n    \"schoolYear\": \"2011\"\r\n  },\r\n  \"beginDate\": \"2010-08-05\",\r\n  \"endDate\": \"2023-08-05\",\r\n  \"termDescriptor\":\"uri://ed-fi.org/TermDescriptor#Fall Semester\",\r\n  \"totalInstructionalDays\": \"5\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize courseOfferings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"localCourseCode\": \"{{known:courseCode}}\",\r\n  \"courseReference\": {\r\n    \"courseCode\": \"{{known:courseCode}}\",\r\n    \"educationOrganizationId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"sessionReference\": {\r\n    \"schoolId\": \"{{known:schoolId11}}\",\r\n    \"schoolYear\": \"2011\",\r\n    \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n \r\n  \"localCourseTitle\":\"{{known:sessionName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courseOfferings",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courseOfferings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:section:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:section:Identifier', requestJson.sectionIdentifier);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sectionIdentifier\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"courseOfferingReference\": {\r\n    \"localCourseCode\": \"{{known:courseCode}}\",\r\n      \"schoolId\": \"{{known:schoolId11}}\",\r\n      \"schoolYear\": \"2011\",\r\n      \"sessionName\":\"{{known:sessionName}}\"\r\n  },\r\n  \r\n  \"locationSchoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"educationalEnvironmentDescriptor\": \"uri://ed-fi.org/EducationalEnvironmentDescriptor#Classroom\",\r\n  \"mediumOfInstructionDescriptor\": \"uri://ed-fi.org/MediumOfInstructionDescriptor#Correspondence instruction\",\r\n   \"populationServedDescriptor\": \"uri://ed-fi.org/PopulationServedDescriptor#Regular Students\"\r\n  }"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffSectionAssociation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{known:courseCode}}\",\r\n      \"sectionIdentifier\":\"{{known:section:Identifier}}\",\r\n       \"schoolId\": \"{{known:schoolId11}}\",\r\n       \"schoolYear\": \"2011\",\r\n       \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:staff:UniqueId}}\"\r\n  },\r\n  \"beginDate\": \"2010-08-05\",\r\n  \"classroomPositionDescriptor\":\"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\",\r\n  \"endDate\": \"2023-08-05\"\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSectionAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:student:UniqueId', requestJson.studentUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"birthDate\":\"2010-08-05\",\r\n  \"dateEnteredUS\": \"2020-08-05\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId11}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n   },\r\n   \"entryDate\":\"2023-08-05\",\r\n   \"entryGradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StudentSectionAssociations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"beginDate\": \"2023-08-05\",\r\n   \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{known:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{known:section:Identifier}}\",\r\n       \"schoolId\": \"{{known:schoolId11}}\",\r\n       \"schoolYear\": \"2011\",\r\n       \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n  },\r\n  \"attemptStatusDescriptor\": \"uri://ed-fi.org/AttemptStatusDescriptor#Audited\",\r\n  \"endDate\":\"2023-12-10\"\r\n \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSectionAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StudentEducationOrganizationAssociation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100011}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:schoolId11}}\"\r\n  },\r\n  \"studentReference\": {\r\n     \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Home\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n    ,\r\n     {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Work\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentEducationOrganizationAssociations",
												""
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource is constrained by a Profile with an inclusive collection value filter on a child collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with all addresses should have addressTypeDescriptor values of either Physical or Home\", () => {",
													"",
													"    let dataVerified = false;",
													"    let expectedAddressTypes = ['uri://ed-fi.org/AddressTypeDescriptor#Physical', 'uri://ed-fi.org/AddressTypeDescriptor#Home'];",
													"    const responseItem = pm.response.json();",
													"    const __ = require('lodash');",
													"",
													"",
													"    __.each(responseItem.students, student => {",
													"",
													"        if (student.educationOrganizations !== null) {",
													"            __.each(student.educationOrganizations, educationOrganization => {",
													"",
													"                if (educationOrganization.addresses !== null) {",
													"",
													"                    const actualAddressTypeDescriptors = __.map(educationOrganization.addresses, address => address.addressTypeDescriptor);",
													"                    pm.expect(actualAddressTypeDescriptors).to.have.members(expectedAddressTypes);",
													"                    dataVerified = true;",
													"                }",
													"            });",
													"        }",
													"",
													"    });",
													"    pm.expect(Boolean(dataVerified), 'educationOrganization.addresses is empty').to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_ProfileTest_CompositesWithMultipleResources}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SectionEnrollments/{{known:section:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SectionEnrollments",
												"{{known:section:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an inclusive collection value filter on a child collection\r\n    Given the caller is assigned the \"Test-Profile-For-Composites-With-Multiple-Resources\" profile\r\n    And the subject of the request is a Section with associated Staff and Students with address type code values of [Physical, Home, Mailing]\r\n    When a GET (by id) request is submitted to the test \"SectionEnrollment\" composite\r\n    Then the response model at path \"students[*]/educationOrganizations[*]/addresses[*]\" should have \"addressTypeDescriptor\" values of [uri://ed-fi.org/AddressTypeDescriptor#Physical, uri://ed-fi.org/AddressTypeDescriptor#Home]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource is constrained by a Profile with an exclusive collection value filter on a child collection",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId12}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:staff:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:staff:UniqueId', requestJson.staffUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\",\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\",\r\n  \"personalTitlePrefix\": \"{{$randomCompanySuffix}}\",\r\n  \"birthDate\": \"2010-08-05\",\r\n  \"hispanicLatinoEthnicity\": \"true\",\r\n  \"loginId\": \"S{{$randomInt}}{{$randomInt}}\"\r\n}\r\n\r\n ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId12}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:staff:UniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\",\r\n   \"hireDate\":\"2000-06-06\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId12}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId12}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:courseCode', requestJson.courseCode);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"courseCode\":\"S{{$randomInt}}{{$randomInt}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\",\r\n      \"assigningOrganizationIdentificationCode\": \"CSSC course code\",\r\n      \"identificationCode\": \"CSSC course code\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{known:schoolId12}}\"\r\n  },\r\n  \"courseDefinedByDescriptor\": \"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\",\r\n  \"courseDescription\": \"Algebra I\",\r\n  \"courseTitle\": \"Algebra I\",\r\n  \"numberOfParts\": \"3\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:sessionName', requestJson.sessionName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sessionName\":  \"S{{$randomInt}}{{$randomInt}} Fall Semester\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"schoolYearTypeReference\": {\r\n    \"schoolYear\": \"2011\"\r\n  },\r\n  \"beginDate\": \"2010-08-05\",\r\n  \"endDate\": \"2023-08-05\",\r\n  \"termDescriptor\":\"uri://ed-fi.org/TermDescriptor#Fall Semester\",\r\n  \"totalInstructionalDays\": \"5\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize courseOfferings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"localCourseCode\": \"{{known:courseCode}}\",\r\n  \"courseReference\": {\r\n    \"courseCode\": \"{{known:courseCode}}\",\r\n    \"educationOrganizationId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"sessionReference\": {\r\n    \"schoolId\": \"{{known:schoolId12}}\",\r\n    \"schoolYear\": \"2011\",\r\n    \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n \r\n  \"localCourseTitle\":\"{{known:sessionName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courseOfferings",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courseOfferings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:section:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:section:Identifier', requestJson.sectionIdentifier);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sectionIdentifier\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"courseOfferingReference\": {\r\n    \"localCourseCode\": \"{{known:courseCode}}\",\r\n      \"schoolId\": \"{{known:schoolId12}}\",\r\n      \"schoolYear\": \"2011\",\r\n      \"sessionName\":\"{{known:sessionName}}\"\r\n  },\r\n  \r\n  \"locationSchoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"educationalEnvironmentDescriptor\": \"uri://ed-fi.org/EducationalEnvironmentDescriptor#Classroom\",\r\n  \"mediumOfInstructionDescriptor\": \"uri://ed-fi.org/MediumOfInstructionDescriptor#Correspondence instruction\",\r\n   \"populationServedDescriptor\": \"uri://ed-fi.org/PopulationServedDescriptor#Regular Students\"\r\n  }"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffSectionAssociation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{known:courseCode}}\",\r\n      \"sectionIdentifier\":\"{{known:section:Identifier}}\",\r\n       \"schoolId\": \"{{known:schoolId12}}\",\r\n       \"schoolYear\": \"2011\",\r\n       \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:staff:UniqueId}}\"\r\n  },\r\n  \"beginDate\": \"2010-08-05\",\r\n  \"classroomPositionDescriptor\":\"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\",\r\n  \"endDate\": \"2023-08-05\"\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSectionAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:student:UniqueId', requestJson.studentUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"birthDate\":\"2010-08-05\",\r\n  \"dateEnteredUS\": \"2020-08-05\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId12}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n   },\r\n   \"entryDate\":\"2023-08-05\",\r\n   \"entryGradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StudentSectionAssociations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"beginDate\": \"2023-08-05\",\r\n   \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{known:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{known:section:Identifier}}\",\r\n       \"schoolId\": \"{{known:schoolId12}}\",\r\n       \"schoolYear\": \"2011\",\r\n       \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n  },\r\n  \"attemptStatusDescriptor\": \"uri://ed-fi.org/AttemptStatusDescriptor#Audited\",\r\n  \"endDate\":\"2023-12-10\"\r\n \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSectionAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StudentEducationOrganizationAssociation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_100012}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:schoolId12}}\"\r\n  },\r\n  \"studentReference\": {\r\n     \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Home\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n    ,\r\n     {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Work\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentEducationOrganizationAssociations",
												""
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by assigned profile",
							"item": [
								{
									"name": "Composite resource is constrained by a Profile with an exclusive collection value filter on a child collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with all addresses should have addressTypeDescriptor values of Physical\", () => {",
													"",
													"    let dataVerified = false;",
													"    let expectedAddressTypes = ['uri://ed-fi.org/AddressTypeDescriptor#Physical'];",
													"    const responseItem = pm.response.json();",
													"    const __ = require('lodash');",
													"",
													"    __.each(responseItem.students, student => {",
													"",
													"        if (student.educationOrganizations !== null) {",
													"            __.each(student.educationOrganizations, educationOrganization => {",
													"",
													"                if (educationOrganization.addresses !== null) {",
													"",
													"                    const actualAddressTypeDescriptors = __.map(educationOrganization.addresses, address => address.addressTypeDescriptor);",
													"                    pm.expect(actualAddressTypeDescriptors).to.have.members(expectedAddressTypes);",
													"                    dataVerified = true;",
													"                }",
													"            });",
													"        }",
													"",
													"    });",
													"    pm.expect(Boolean(dataVerified), 'educationOrganization.addresses is empty').to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_ProfileTest_ExcludeAllAddrsExceptPhysical}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SectionEnrollments/{{known:section:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SectionEnrollments",
												"{{known:section:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource is constrained by a Profile with an exclusive collection value filter on a child collection\r\n    Given the caller is assigned the \"Test-StudentEducationOrganizationAssociation-Exclude-All-Addrs-Except-Physical\" profile\r\n    And the subject of the request is a Section with associated Staff and Students with address type code values of [Physical, Home, Mailing]\r\n    When a GET (by id) request is submitted to the test \"SectionEnrollment\" composite\r\n    Then the response model at path \"students[*]/educationOrganizations[*]/addresses[*]\" should have \"addressTypeDescriptor\" values of [uri://ed-fi.org/AddressTypeDescriptor#Physical]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Feature:Composites are constrained by multiple Profiles",
			"item": [
				{
					"name": "Composite resource contains School which is constrained by overlapping include-only and exclude-only Profiles",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId1}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:multipleprofile:schoolId1}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"webSite\":\"http://www.GBISD.edu/GBMS/\",\r\n  \"charterStatusDescriptor\":\"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",  \r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n   \"titleIPartASchoolDesignationDescriptor\":\"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",  \r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId1}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by multiple Profiles",
							"item": [
								{
									"name": "Composite resource contains School which is constrained by overlapping include-only and exclude-only Profiles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with  specific members [id, schoolId, localEducationAgencyReference, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const properties = Object.keys(responseItem);",
													"    pm.expect(properties).to.have.members(['id', 'schoolId', 'localEducationAgencyReference', 'nameOfInstitution', 'shortNameOfInstitution', 'webSite', 'operationalStatusDescriptor', 'type', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'administrativeFundingControlDescriptor', 'addresses', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'schoolCategories', 'gradeLevels']);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by overlapping include-only and exclude-only Profiles\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    And the caller is assigned the \"Test-Profile-Resource-ExcludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference, nameOfInstitution, shortNameOfInstitution, webSite, operationalStatusDescriptor, type, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, administrativeFundingControlDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, schoolCategories, gradeLevels]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource contains School which is constrained by one profile that excludes a child collection and another that includes some properties of the child collection",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId2}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:multipleprofile:schoolId2}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"webSite\":\"http://www.GBISD.edu/GBMS/\",\r\n  \"charterStatusDescriptor\":\"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",  \r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n   \"titleIPartASchoolDesignationDescriptor\":\"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",  \r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId2}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource is constrained by multiple Profiles",
							"item": [
								{
									"name": "Composite resource contains School which is constrained by one profile that excludes a child collection and another that includes some properties of the child collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with  specific members [id, schoolId, localEducationAgencyReference, shortNameOfInstitution, webSite, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, gradeLevels]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const properties = Object.keys(responseItem);",
													"    pm.expect(properties).to.have.members(['id', 'schoolId', 'localEducationAgencyReference', 'shortNameOfInstitution', 'webSite', 'charterStatusDescriptor', 'titleIPartASchoolDesignationDescriptor', 'addresses', 'educationOrganizationCategories', 'identificationCodes', 'institutionTelephones', 'internationalAddresses', 'gradeLevels']);",
													"",
													"});",
													"",
													"",
													"pm.test(\"Should the item return addresses[0] should only have the specific members [addressTypeDescriptor, city, stateAbbreviationDescriptor, postalCode, streetNumberName]\", () => {",
													"    const __ = require('lodash');",
													"    const responseItem = pm.response.json();",
													"    __.each(responseItem.addresses, address => {",
													"        const properties = Object.keys(address);",
													"        pm.expect(properties).to.have.members(['addressTypeDescriptor', 'city', 'stateAbbreviationDescriptor', 'postalCode', 'streetNumberName']);",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains School which is constrained by one profile that excludes a child collection and another that includes some properties of the child collection\r\n    Given the caller is assigned the \"Test-Profile-Resource-BaseClass-Child-Collection-IncludeOnly\" profile\r\n    And the caller is assigned the \"Test-Profile-Resource-ExcludeOnly\" profile\r\n    And the subject of the request is a school with a LocalEducationAgency\r\n    When a GET (by id) request is submitted to the test \"School\" composite\r\n    Then the response model should have only the specific members [id, schoolId, localEducationAgencyReference, shortNameOfInstitution, webSite, charterStatusDescriptor, titleIPartASchoolDesignationDescriptor, addresses, educationOrganizationCategories, identificationCodes, institutionTelephones, internationalAddresses, gradeLevels]\r\n    And the response model at path \"addresses[0]\" should only have the specific members [addressTypeDescriptor, city, stateAbbreviationDescriptor, postalCode, streetNumberName]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource contains child elements composing Staff and Student which are constrained by two different profiles",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId3}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:staff:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:staff:UniqueId', requestJson.staffUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\",\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\",\r\n  \"personalTitlePrefix\": \"{{$randomCompanySuffix}}\",\r\n  \"birthDate\": \"2010-08-05\",\r\n  \"hispanicLatinoEthnicity\": \"true\",\r\n  \"loginId\": \"S{{$randomInt}}{{$randomInt}}\"\r\n}\r\n\r\n ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:multipleprofile:localEducationAgencyId3}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:staff:UniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\",\r\n   \"hireDate\":\"2000-06-06\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId3}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:courseCode', requestJson.courseCode);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"courseCode\":\"S{{$randomInt}}{{$randomInt}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\",\r\n      \"assigningOrganizationIdentificationCode\": \"CSSC course code\",\r\n      \"identificationCode\": \"CSSC course code\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"courseDefinedByDescriptor\": \"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\",\r\n  \"courseDescription\": \"Algebra I\",\r\n  \"courseTitle\": \"Algebra I\",\r\n  \"numberOfParts\": \"3\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:sessionName', requestJson.sessionName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sessionName\":  \"S{{$randomInt}}{{$randomInt}} Fall Semester\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"schoolYearTypeReference\": {\r\n    \"schoolYear\": \"2011\"\r\n  },\r\n  \"beginDate\": \"2010-08-05\",\r\n  \"endDate\": \"2023-08-05\",\r\n  \"termDescriptor\":\"uri://ed-fi.org/TermDescriptor#Fall Semester\",\r\n  \"totalInstructionalDays\": \"5\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize courseOfferings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"localCourseCode\": \"{{known:courseCode}}\",\r\n  \"courseReference\": {\r\n    \"courseCode\": \"{{known:courseCode}}\",\r\n    \"educationOrganizationId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"sessionReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n    \"schoolYear\": \"2011\",\r\n    \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n \r\n  \"localCourseTitle\":\"{{known:sessionName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courseOfferings",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courseOfferings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:section:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:section:Identifier', requestJson.sectionIdentifier);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sectionIdentifier\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"courseOfferingReference\": {\r\n    \"localCourseCode\": \"{{known:courseCode}}\",\r\n      \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n      \"schoolYear\": \"2011\",\r\n      \"sessionName\":\"{{known:sessionName}}\"\r\n  },\r\n   \"sequenceOfCourse\": \"1\",\r\n   \"availableCredits\": \"1\",  \r\n  \"locationSchoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"educationalEnvironmentDescriptor\": \"uri://ed-fi.org/EducationalEnvironmentDescriptor#Classroom\",\r\n  \"mediumOfInstructionDescriptor\": \"uri://ed-fi.org/MediumOfInstructionDescriptor#Correspondence instruction\",\r\n   \"populationServedDescriptor\": \"uri://ed-fi.org/PopulationServedDescriptor#Regular Students\"\r\n  }"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffSectionAssociation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{known:courseCode}}\",\r\n      \"sectionIdentifier\":\"{{known:section:Identifier}}\",\r\n       \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n       \"schoolYear\": \"2011\",\r\n       \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:staff:UniqueId}}\"\r\n  },\r\n  \"beginDate\": \"2010-08-05\",\r\n  \"classroomPositionDescriptor\":\"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\",\r\n  \"endDate\": \"2023-08-05\"\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSectionAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:student:UniqueId', requestJson.studentUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"birthDate\":\"2010-08-05\",\r\n  \"dateEnteredUS\": \"2020-08-05\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:multipleprofile:schoolId3}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n   },\r\n   \"entryDate\":\"2023-08-05\",\r\n   \"entryGradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StudentSectionAssociations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"beginDate\": \"2023-08-05\",\r\n   \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{known:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{known:section:Identifier}}\",\r\n       \"schoolId\": \"{{known:multipleprofile:schoolId3}}\",\r\n       \"schoolYear\": \"2011\",\r\n       \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n  },\r\n  \"attemptStatusDescriptor\": \"uri://ed-fi.org/AttemptStatusDescriptor#Audited\",\r\n  \"endDate\":\"2023-12-10\"\r\n \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSectionAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StudentEducationOrganizationAssociation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:multipleprofile:schoolId3}}\"\r\n  },\r\n  \"studentReference\": {\r\n     \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Home\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n    ,\r\n     {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Work\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentEducationOrganizationAssociations",
												""
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource  are constrained by two different profiles",
							"item": [
								{
									"name": "Composite resource contains child elements composing Staff and Student which are constrained by two different profiles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const __ = require('lodash');",
													"",
													"pm.test(\"Should the item return students[0]/educationOrganizations[0]/addresses[0] should only have the specific members [addressTypeDescriptor, city, postalCode, stateAbbreviationDescriptor, streetNumberName]\", () => {",
													"",
													"    let dataVerified = false;",
													"    const responseItem = pm.response.json();",
													"",
													"    __.each(responseItem.students, student => {",
													"",
													"        if (student.educationOrganizations !== null) {",
													"            __.each(student.educationOrganizations, educationOrganization => {",
													"",
													"                if (educationOrganization.addresses !== null) {",
													"",
													"                    __.each(educationOrganization.addresses, address => {",
													"",
													"                        if (address !== null) {",
													"                            const properties = Object.keys(address);",
													"                            pm.expect(properties).to.have.members(['addressTypeDescriptor', 'city', 'postalCode', 'stateAbbreviationDescriptor', 'streetNumberName']);",
													"                        }",
													"                    });",
													"                }",
													"            });",
													"        }",
													"",
													"    });",
													"",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with  specific members [id, sectionIdentifier, sequenceOfCourse, educationalEnvironmentDescriptor, availableCredits, staff, students, academicSubjectDescriptor, sessionReference, classPeriods, courseOfferingReference, locationReference, locationSchoolReference]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    const properties = Object.keys(responseItem);",
													"    pm.expect(properties).to.have.members(['id', 'sectionIdentifier', 'sequenceOfCourse', 'educationalEnvironmentDescriptor', 'availableCredits', 'staff', 'students', 'sessionReference', 'classPeriods', 'courseOfferingReference', 'locationReference', 'locationSchoolReference']);",
													"",
													"});",
													"",
													"",
													"pm.test(\"Should the item return staff[0] should not have the specific members [sexType, birthDate, hispanicLatinoEthnicity]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    __.each(responseItem.staff, staff => {",
													"        const properties = Object.keys(staff);",
													"        pm.expect(properties).to.not.include('sexType').and.not.include('birthDate').and.not.include('hispanicLatinoEthnicity');",
													"    });",
													"",
													"});",
													"",
													"",
													"pm.test(\"Should the item return students[0] should only have the specific members [id, studentSectionAssociation_id, studentUniqueId, firstName, lastSurname, educationOrganizations, schools]\", () => {",
													"",
													"    const responseItem = pm.response.json();",
													"    __.each(responseItem.students, student => {",
													"        const properties = Object.keys(student);",
													"        pm.expect(properties).to.have.members(['id', 'studentSectionAssociation_id', 'studentUniqueId', 'firstName', 'lastSurname', 'educationOrganizations', 'schools']);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_ProfileTest_StudentRestrictedMultipleResources}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SectionEnrollments/{{known:section:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SectionEnrollments",
												"{{known:section:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains child elements composing Staff and Student which are constrained by two different profiles\r\n    Given the caller is assigned the \"Student-Readable-Restricted\" profile\r\n    And the caller is assigned the \"Test-Profile-For-Composites-With-Multiple-Resources\" profile\r\n    And the subject of the request is a Section with associated Staff and Students with address type code values of [Physical, Home]\r\n    When a GET (by id) request is submitted to the test \"SectionEnrollment\" composite\r\n    Then the response model should have only the specific members [id, sectionIdentifier, sequenceOfCourse, educationalEnvironmentDescriptor, availableCredits, staff, students, academicSubjectDescriptor, sessionReference, classPeriods, courseOfferingReference, locationReference, locationSchoolReference]\r\n    # SexType is included by one profile, excluded by another, but should be included in the composite\r\n    And the response model at path \"staff[0]\" should not have the specific members [sexType, birthDate, hispanicLatinoEthnicity]\r\n    # Student's included properties are a combination of two \"Include Only\" profiles + LinkedCollections from the composite definition, which Profiles don't constrain\r\n    And the response model at path \"students[0]\" should only have the specific members [id, studentSectionAssociation_id, studentUniqueId, firstName, lastSurname, educationOrganizations, schools]\r\n    And the response model at path \"students[0]/educationOrganizations[0]/addresses[0]\" should only have the specific members [addressTypeDescriptor, city, postalCode, stateAbbreviationDescriptor, streetNumberName]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Composite resource contains child collection which have value filters applied by two different profiles",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId4}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:staff:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:staff:UniqueId', requestJson.staffUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\",\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\",\r\n  \"personalTitlePrefix\": \"{{$randomCompanySuffix}}\",\r\n  \"birthDate\": \"2010-08-05\",\r\n  \"hispanicLatinoEthnicity\": \"true\",\r\n  \"loginId\": \"S{{$randomInt}}{{$randomInt}}\"\r\n}\r\n\r\n ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:multipleprofile:localEducationAgencyId4}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:staff:UniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\",\r\n   \"hireDate\":\"2000-06-06\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:multipleprofile:localEducationAgencyId4}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:courseCode', requestJson.courseCode);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"courseCode\":\"S{{$randomInt}}{{$randomInt}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\",\r\n      \"assigningOrganizationIdentificationCode\": \"CSSC course code\",\r\n      \"identificationCode\": \"CSSC course code\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"courseDefinedByDescriptor\": \"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\",\r\n  \"courseDescription\": \"Algebra I\",\r\n  \"courseTitle\": \"Algebra I\",\r\n  \"numberOfParts\": \"3\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:sessionName', requestJson.sessionName);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sessionName\":  \"S{{$randomInt}}{{$randomInt}} Fall Semester\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"schoolYearTypeReference\": {\r\n    \"schoolYear\": \"2011\"\r\n  },\r\n  \"beginDate\": \"2010-08-05\",\r\n  \"endDate\": \"2023-08-05\",\r\n  \"termDescriptor\":\"uri://ed-fi.org/TermDescriptor#Fall Semester\",\r\n  \"totalInstructionalDays\": \"5\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize courseOfferings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"localCourseCode\": \"{{known:courseCode}}\",\r\n  \"courseReference\": {\r\n    \"courseCode\": \"{{known:courseCode}}\",\r\n    \"educationOrganizationId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"sessionReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n    \"schoolYear\": \"2011\",\r\n    \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n \r\n  \"localCourseTitle\":\"{{known:sessionName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courseOfferings",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courseOfferings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:section:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:section:Identifier', requestJson.sectionIdentifier);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sectionIdentifier\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"courseOfferingReference\": {\r\n    \"localCourseCode\": \"{{known:courseCode}}\",\r\n      \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n      \"schoolYear\": \"2011\",\r\n      \"sessionName\":\"{{known:sessionName}}\"\r\n  },\r\n   \"sequenceOfCourse\": \"1\",\r\n   \"availableCredits\": \"1\",  \r\n  \"locationSchoolReference\": {\r\n    \"schoolId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"educationalEnvironmentDescriptor\": \"uri://ed-fi.org/EducationalEnvironmentDescriptor#Classroom\",\r\n  \"mediumOfInstructionDescriptor\": \"uri://ed-fi.org/MediumOfInstructionDescriptor#Correspondence instruction\",\r\n   \"populationServedDescriptor\": \"uri://ed-fi.org/PopulationServedDescriptor#Regular Students\"\r\n  }"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sections"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffSectionAssociation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{known:courseCode}}\",\r\n      \"sectionIdentifier\":\"{{known:section:Identifier}}\",\r\n       \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n       \"schoolYear\": \"2011\",\r\n       \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:staff:UniqueId}}\"\r\n  },\r\n  \"beginDate\": \"2010-08-05\",\r\n  \"classroomPositionDescriptor\":\"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\",\r\n  \"endDate\": \"2023-08-05\"\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSectionAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"var requestJson = JSON.parse(request.data);",
													"pm.environment.set('known:student:UniqueId', requestJson.studentUniqueId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n  \"birthDate\":\"2010-08-05\",\r\n  \"dateEnteredUS\": \"2020-08-05\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:multipleprofile:schoolId4}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n   },\r\n   \"entryDate\":\"2023-08-05\",\r\n   \"entryGradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StudentSectionAssociations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"beginDate\": \"2023-08-05\",\r\n   \"sectionReference\": {\r\n\t  \"localCourseCode\":\"{{known:courseCode}}\",\r\n      \"sectionIdentifier\": \"{{known:section:Identifier}}\",\r\n       \"schoolId\": \"{{known:multipleprofile:schoolId4}}\",\r\n       \"schoolYear\": \"2011\",\r\n       \"sessionName\": \"{{known:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n  },\r\n  \"attemptStatusDescriptor\": \"uri://ed-fi.org/AttemptStatusDescriptor#Audited\",\r\n  \"endDate\":\"2023-12-10\"\r\n \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSectionAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StudentEducationOrganizationAssociation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_200004}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:multipleprofile:schoolId4}}\"\r\n  },\r\n  \"studentReference\": {\r\n     \"studentUniqueId\":\"{{known:student:UniqueId}}\"\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Home\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n    ,\r\n     {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Work\",\r\n      \"stateAbbreviationDescriptor\":\"uri://ed-fi.org/StateAbbreviationDescriptor#HI\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"localeDescriptor\": \"uri://ed-fi.org/LocaleDescriptor#City-Large\",\r\n      \"apartmentRoomSuiteNumber\": \"{{$randomInt}}\",\r\n            \"_ext\": {\r\n        \"sample\": {\r\n          \"onBusRoute\": true,\r\n          \"schoolDistricts\": [\r\n            {\r\n              \"schoolDistrict\": \"Original School District\"\r\n            }\r\n          ],\r\n          \"terms\": [\r\n            {\r\n              \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"sexDescriptor\": \"uri://ed-fi.org/SexDescriptor#Female\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentEducationOrganizationAssociations",
												""
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Composite resource  are constrained by two different profiles",
							"item": [
								{
									"name": "Composite resource contains child collection which have value filters applied by two different profiles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should the item return with all addresses should have addressTypeDescriptor values of either Physical or Home\", () => {",
													"",
													"    let dataVerified = false;",
													"    let expectedAddressTypes = ['uri://ed-fi.org/AddressTypeDescriptor#Physical', 'uri://ed-fi.org/AddressTypeDescriptor#Home'];",
													"    const responseItem = pm.response.json();",
													"    const __ = require('lodash');",
													"",
													"",
													"    __.each(responseItem.students, student => {",
													"",
													"        if (student.educationOrganizations !== null) {",
													"            __.each(student.educationOrganizations, educationOrganization => {",
													"",
													"                if (educationOrganization.addresses !== null) {",
													"",
													"                    const actualAddressTypeDescriptors = __.map(educationOrganization.addresses, address => address.addressTypeDescriptor);",
													"                    pm.expect(actualAddressTypeDescriptors).to.have.members(expectedAddressTypes);",
													"                    dataVerified = true;",
													"                }",
													"            });",
													"        }",
													"",
													"    });",
													"    pm.expect(Boolean(dataVerified), 'educationOrganization.addresses is empty').to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_ProfileTest_MultipleResourcesExceptPhysical}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SectionEnrollments/{{known:section:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SectionEnrollments",
												"{{known:section:id}}"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: Composite resource contains child collection which have value filters applied by two different profiles\r\n    Given the caller is assigned the \"Test-Profile-For-Composites-With-Multiple-Resources\" profile\r\n    And the caller is assigned the \"Test-StudentEducationOrganizationAssociation-Exclude-All-Addrs-Except-Physical\" profile\r\n    And the subject of the request is a Section with associated Staff and Students with address type code values of [Physical, Home, Mailing]\r\n    When a GET (by id) request is submitted to the test \"SectionEnrollment\" composite\r\n    Then the response model at path \"students[*]/educationOrganizations[*]/addresses[*]\" should have \"addressTypeDescriptor\" values of [uri://ed-fi.org/AddressTypeDescriptor#Physical, uri://ed-fi.org/AddressTypeDescriptor#Home]\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Test Suite Teardown",
			"item": [
				{
					"name": "Clean up Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
									"  .each(k => pm.environment.unset(k)).value();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean up Access Tokens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remove all environment variables related to Access Tokens\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'AccessToken_') || _.startsWith(x, 'TokenExpiry_'))\r",
									"  .each(k => pm.environment.unset(k)).value();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"InitializeSharedEnvironmentVariables();",
					"",
					"CreateAccessTokens([",
					"  \"ProfileTest_MultipleResourcesExceptPhysical\",",
					"  \"ProfileTest_StudentRestrictedMultipleResources\",",
					"  \"ProfileTest_ExcludeAllAddrsExceptPhysical\",",
					"  \"ProfileTest_CompositesWithMultipleResources\",",
					"  \"255901\",",
					"  \"100001\",",
					"  \"100002\",",
					"  \"100003\",",
					"  \"100004\",",
					"  \"100005\",",
					"  \"100006\",",
					"  \"100007\",",
					"  \"100008\",",
					"  \"100009\",",
					"  \"100010\",",
					"  \"100011\",",
					"  \"100012\",",
					"  \"200001\",",
					"  \"200002\",",
					"  \"200003\",",
					"  \"200004\"",
					"]);",
					"",
					"function CreateAccessTokens(clientSuffixes) {",
					"  clientSuffixes.forEach(CreateAccessToken);",
					"}",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(clientSuffix) {",
					"  const apiKeyName = `ApiKey_${clientSuffix}`;",
					"  const apiSecretName = `ApiSecret_${clientSuffix}`;",
					"  const tokenExpiryName = `TokenExpiry_${clientSuffix}`;",
					"  const accessTokenName = `AccessToken_${clientSuffix}`;",
					"",
					"  let tokenExpiration = pm.environment.get(tokenExpiryName);",
					"  let currentToken = pm.environment.get(accessTokenName);",
					"  let getToken = true;",
					"  ",
					"  if (!tokenExpiration || !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"  } else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"  } else {",
					"    getToken = false;",
					"  }",
					"",
					"  if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(apiKeyName);",
					"    let clientSecret = pm.environment.get(apiSecretName);",
					"    let grantType = 'client_credentials';",
					"",
					"    let getTokenRequest = {",
					"      method: 'POST',",
					"      url: tokenUrl,",
					"      auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"          { key: \"username\", value: clientId },",
					"          { key: \"password\", value: clientSecret }",
					"        ]",
					"      },",
					"      header: [",
					"        \"content-type:application/x-www-form-urlencoded\"",
					"      ],",
					"      body: {",
					"        mode: \"urlencoded\",",
					"        urlencoded: [{ key: \"grant_type\", value: grantType }]",
					"      }",
					"    };",
					"",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"      let jsonResponse = response.json();",
					"      let newAccessToken = jsonResponse.access_token;",
					"",
					"      // console.log({ err, jsonResponse, newAccessToken })",
					"      console.log(`${accessTokenName} = ${newAccessToken}`);",
					"      pm.environment.set(accessTokenName, newAccessToken);",
					"",
					"      let expiryDate = new Date();",
					"      expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"      pm.environment.set(tokenExpiryName, expiryDate.getTime());",
					"    });",
					"  }",
					"}",
					"",
					"// Ensure shared environment variables are available with each request",
					"function InitializeSharedEnvironmentVariables() {",
					"  pm.environment.set('known:stateEducationAgencyId',31);",
					"",
					"  pm.environment.set('known:localEducationAgencyId1', 100001);",
					"  pm.environment.set('known:schoolId1',100001001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId2', 100002);",
					"  pm.environment.set('known:schoolId2',100002001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId3', 100003);",
					"  pm.environment.set('known:schoolId3',100003001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId4', 100004);",
					"  pm.environment.set('known:schoolId4',100004001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId5', 100005);",
					"  pm.environment.set('known:schoolId5',100005001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId6', 100006);",
					"  pm.environment.set('known:schoolId6',100006001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId7', 100007);",
					"  pm.environment.set('known:schoolId7',100007001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId8', 100008);",
					"  pm.environment.set('known:schoolId8',100008001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId9', 100009);",
					"  pm.environment.set('known:schoolId9',100009001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId10', 100010);",
					"  pm.environment.set('known:schoolId10',100010001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId11', 100011);",
					"  pm.environment.set('known:schoolId11',100011001);",
					"",
					"  pm.environment.set('known:localEducationAgencyId12', 100012);",
					"  pm.environment.set('known:schoolId12',100012001);",
					"",
					"  pm.environment.set('known:multipleprofile:localEducationAgencyId1', 200001);",
					"  pm.environment.set('known:multipleprofile:schoolId1',200001001);",
					"",
					"  pm.environment.set('known:multipleprofile:localEducationAgencyId2', 200002);",
					"  pm.environment.set('known:multipleprofile:schoolId2',200002001);",
					"",
					"  pm.environment.set('known:multipleprofile:localEducationAgencyId3', 200003);",
					"  pm.environment.set('known:multipleprofile:schoolId3',200003001);",
					"",
					"  pm.environment.set('known:multipleprofile:localEducationAgencyId4', 200004);",
					"  pm.environment.set('known:multipleprofile:schoolId4',200004001);",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}