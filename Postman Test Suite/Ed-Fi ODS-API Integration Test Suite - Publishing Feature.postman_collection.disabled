{
	"info": {
		"_postman_id": "e3dd3f38-58c6-415c-93c5-10cac67a5edb",
		"name": "Ed-Fi ODS/API Integration Test Suite - Publishing Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Snapshots",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "761a6bea-3b17-496f-a554-c4b68173f988",
						"exec": [
							"// Should return the known snapshots.\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"const responseItems = pm.response.json();\r",
							"\r",
							"pm.test(\"Should return 1 item\", () => {\r",
							"    pm.expect(responseItems.length).to.equal(1);\r",
							"});\r",
							"\r",
							"const id = responseItems[0].id;\r",
							"pm.environment.set('known:snapshot:id', id);\r",
							"\r",
							"//pm.response.headers.one('Location').value.split(\"/\").pop());\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"value": "IsIgnoredOnSnapshotRequests",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ApiDataUrl}}/publishing/snapshots",
					"host": [
						"{{ApiDataUrl}}"
					],
					"path": [
						"publishing",
						"snapshots"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Get All Snapshot By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ee85bac-5e8c-4b06-b595-99493c151a35",
						"exec": [
							"// Should return the known snapshots.\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"const responseItem = pm.response.json();\r",
							"\r",
							"pm.test(\"Should return the requested item\", () => {\r",
							"    pm.expect(responseItem.id).to.equal(pm.variables.get('id'));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4ec89d44-bfd9-4411-98d9-0fd5f0f06f29",
						"exec": [
							"pm.variables.set('id', pm.environment.get('known:snapshot:id'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "IsIgnoredOnSnapshotRequests"
					}
				],
				"url": {
					"raw": "{{ApiDataUrl}}/publishing/snapshots/{{id}}",
					"host": [
						"{{ApiDataUrl}}"
					],
					"path": [
						"publishing",
						"snapshots",
						"{{id}}"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Create a new Snapshot",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d77dc035-c262-452a-99a5-c7d43cfd537a",
						"exec": [
							"// Should return 405 Method Not Allowed\r",
							"pm.test(\"Status code is 405 Method Not Allowed\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be empty\", () =>  {\r",
							"    pm.expect(pm.response.text().length).to.equal(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "ABC",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"snapshotIdentifier\": \"NEW\",\r\n    \"snapshotDateTime\": \"2020-10-26T02:51:41.8833333Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ApiDataUrl}}/publishing/snapshots",
					"host": [
						"{{ApiDataUrl}}"
					],
					"path": [
						"publishing",
						"snapshots"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Update a Snapshot",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7bc769fb-78f9-4fd3-b84e-0902ca079730",
						"exec": [
							"pm.test(\"Status code is 405 Not Found\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be empty\", () =>  {\r",
							"    pm.expect(pm.response.text().length).to.equal(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f685b251-ba91-4be5-b037-1c11f13412ae",
						"exec": [
							"pm.variables.set('id', pm.environment.get('known:snapshot:id'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "ABC",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"snapshotIdentifier\": \"NEW\",\r\n    \"snapshotDateTime\": \"2020-10-26T02:51:41.8833333Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ApiDataUrl}}/publishing/snapshots/{{id}}",
					"host": [
						"{{ApiDataUrl}}"
					],
					"path": [
						"publishing",
						"snapshots",
						"{{id}}"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Delete a Snapshot",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b8e1391-7ae5-4d72-b575-53fe0965a4a7",
						"exec": [
							"pm.test(\"Status code is 405 Method Not Allowed\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be empty\", () =>  {\r",
							"    pm.expect(pm.response.text().length).to.equal(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f2a297cf-513d-44b9-8040-4c18d29cf4c4",
						"exec": [
							"pm.variables.set('id', pm.environment.get('known:snapshot:id'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "ABC",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{ApiDataUrl}}/publishing/snapshots/{{id}}",
					"host": [
						"{{ApiDataUrl}}"
					],
					"path": [
						"publishing",
						"snapshots",
						"{{id}}"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Get All Students (Live)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bd2a2279-d0f9-43f4-9692-68f29119f32f",
						"exec": [
							"const __ = require('lodash');\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"const responseItems = pm.response.json();\r",
							"\r",
							"var  studentsJson = __.map(responseItems, item => \r",
							"    {\r",
							"        return { \r",
							"            id: item.id, \r",
							"            studentUniqueId: item.studentUniqueId,\r",
							"            birthDate: item.birthDate,             \r",
							"           firstName:item.firstName,             \r",
							"           lastSurname:item.lastSurname,             \r",
							"           middleName:item.middleName,     \r",
							"        };\r",
							"    });\r",
							"\r",
							"\r",
							"pm.environment.set('known:student', responseItems[0]);\r",
							"pm.environment.set('known:studentsJson',studentsJson);\r",
							"console.log(JSON.stringify(studentsJson));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"value": "ABC",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students"
					],
					"query": [
						{
							"key": "totalCount",
							"value": "true",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "0",
							"disabled": true
						}
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Get All Students (Snapshot)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60ddd34b-ccf1-4142-bd6d-94f51d29efe8",
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"const __ = require('lodash');\r",
							"var responseItems = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Response should be identical to non-snapshot request\", () => {\r",
							"var  studentsJson=pm.environment.get('known:studentsJson');\r",
							"    __.each(responseItems, (responseItem) => {\r",
							"         __.each(studentsJson, (student) => {\r",
							"             if(responseItem.studentUniqueId==student.studentUniqueId)\r",
							"             {\r",
							"                pm.expect(responseItem.id).to.be.equal(student.id);\r",
							"                pm.expect(responseItem.birthDate).to.be.equal(student.birthDate);   \r",
							"                pm.expect(responseItem.firstName).to.be.equal(student.firstName);\r",
							"                pm.expect(responseItem.lastSurname).to.be.equal(student.lastSurname);\r",
							"                pm.expect(responseItem.middleName).to.be.equal(student.middleName);                 \r",
							"             }\r",
							"         });\r",
							"    });\r",
							"    //pm.expect(pm.environment.get('known:studentsJson')).to.be.equal(studentsJson);\r",
							"    pm.environment.unset('known:studentsJson');\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "ABC"
					}
				],
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Update a Student (Live)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9cd2e456-886d-421b-b3b0-09ed030866be",
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"/*\r",
							"pm.test(\"Response body should be empty\", () =>  {\r",
							"    pm.expect(pm.response.text().length).to.equal(0);\r",
							"});\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "24b22b10-2a2d-4bea-bce5-bfbd2c9a007a",
						"exec": [
							"pm.variables.set('studentUniqueId', pm.environment.get('known:student').studentUniqueId);\r",
							"pm.variables.set('birthDate', pm.environment.get('known:student').birthDate);\r",
							"pm.variables.set('firstName', pm.environment.get('known:student').firstName);\r",
							"pm.variables.set('lastSurname', pm.environment.get('known:student').lastSurname);\r",
							"pm.variables.set('middleName', pm.environment.get('known:student').middleName);\r",
							"pm.variables.set('personalTitlePrefix', pm.environment.get('known:student').personalTitlePrefix);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"studentUniqueId\": \"{{studentUniqueId}}\",\n        \"birthDate\": \"{{birthDate}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastSurname\": \"{{$randomLastName}}\",\n        \"middleName\": \"{{middleName}}\",\n        \"personalTitlePrefix\": \"{{personalTitlePrefix}}\",\n        \"identificationDocuments\": [],\n        \"otherNames\": [],\n        \"personalIdentificationDocuments\": [],\n        \"visas\": []\n    }"
				},
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Get a Student (Live)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db82d4d2-9c09-427c-b2c7-d59fee988f91",
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"const responseItems = pm.response.json();\r",
							"const newLastSurname = responseItems[0].lastSurname;\r",
							"\r",
							"pm.test(\"Should return new last name from live ODS\", () => {\r",
							"    pm.expect(newLastSurname).to.not.equal(pm.variables.get('originalLastSurname'));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1be8dfa6-72e2-4e75-a4d9-2c7c39db3666",
						"exec": [
							"pm.variables.set('studentUniqueId', pm.environment.get('known:student').studentUniqueId);\r",
							"pm.variables.set('originalLastSurname', pm.environment.get('known:student').lastSurname);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?studentUniqueId={{studentUniqueId}}",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students"
					],
					"query": [
						{
							"key": "studentUniqueId",
							"value": "{{studentUniqueId}}"
						}
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Get a Student (Snapshot)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af2a335b-bb4c-40e9-8187-88868248d3ad",
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"const responseItems = pm.response.json();\r",
							"const returnedLastSurname = responseItems[0].lastSurname;\r",
							"\r",
							"pm.test(\"Should return original last name from snapshot ODS\", () => {\r",
							"    pm.expect(returnedLastSurname).to.equal(pm.variables.get('originalLastSurname'));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "db6b0db0-051d-4883-b355-5e44850a2da4",
						"exec": [
							"pm.variables.set('studentUniqueId', pm.environment.get('known:student').studentUniqueId);\r",
							"pm.variables.set('originalLastSurname', pm.environment.get('known:student').lastSurname);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "ABC"
					}
				],
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?studentUniqueId={{studentUniqueId}}",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students"
					],
					"query": [
						{
							"key": "studentUniqueId",
							"value": "{{studentUniqueId}}"
						}
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Update a Student (Snapshot)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d96d269a-6f2a-4001-9bff-a4042b42d0c8",
						"exec": [
							"pm.test(\"Status code is 405 Method Not Allowed\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return message indicating that snapshots are read-only\", () => {\r",
							"    pm.expect(pm.response.json().message).to.be.equal(\"Snapshots are read-only.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e7961416-eee7-4055-93d4-c532a9e76ee3",
						"exec": [
							"pm.variables.set('studentUniqueId', pm.environment.get('known:student').studentUniqueId);\r",
							"pm.variables.set('birthDate', pm.environment.get('known:student').birthDate);\r",
							"pm.variables.set('firstName', pm.environment.get('known:student').firstName);\r",
							"pm.variables.set('lastSurname', pm.environment.get('known:student').lastSurname);\r",
							"pm.variables.set('middleName', pm.environment.get('known:student').middleName);\r",
							"pm.variables.set('personalTitlePrefix', pm.environment.get('known:student').personalTitlePrefix);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "ABC"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"studentUniqueId\": \"{{studentUniqueId}}\",\n        \"birthDate\": \"{{birthDate}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastSurname\": \"{{$randomLastName}}\",\n        \"middleName\": \"{{middleName}}\",\n        \"personalTitlePrefix\": \"{{personalTitlePrefix}}\",\n        \"identificationDocuments\": [],\n        \"otherNames\": [],\n        \"personalIdentificationDocuments\": [],\n        \"visas\": []\n    }",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Put a Student (Snapshot)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f99694ae-18bb-4521-a0ad-496b3db903ef",
						"exec": [
							"pm.test(\"Status code is 405 Method Not Allowed\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return message indicating that snapshots are read-only\", () => {\r",
							"    pm.expect(pm.response.json().message).to.be.equal(\"Snapshots are read-only.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9d501ebd-4b7a-4b03-adf1-87b33a40acb9",
						"exec": [
							"pm.variables.set('id', pm.environment.get('known:student').id);\r",
							"pm.variables.set('studentUniqueId', pm.environment.get('known:student').studentUniqueId);\r",
							"pm.variables.set('birthDate', pm.environment.get('known:student').birthDate);\r",
							"pm.variables.set('firstName', pm.environment.get('known:student').firstName);\r",
							"pm.variables.set('lastSurname', pm.environment.get('known:student').lastSurname);\r",
							"pm.variables.set('middleName', pm.environment.get('known:student').middleName);\r",
							"pm.variables.set('personalTitlePrefix', pm.environment.get('known:student').personalTitlePrefix);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "ABC"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"studentUniqueId\": \"{{studentUniqueId}}\",\n        \"birthDate\": \"{{birthDate}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastSurname\": \"{{$randomLastName}}\",\n        \"middleName\": \"{{middleName}}\",\n        \"personalTitlePrefix\": \"{{personalTitlePrefix}}\",\n        \"identificationDocuments\": [],\n        \"otherNames\": [],\n        \"personalIdentificationDocuments\": [],\n        \"visas\": []\n    }",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{id}}",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students",
						"{{id}}"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Delete a Student (Snapshot)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00af96da-e4b4-4f34-9d9a-99fe2ef0b77d",
						"exec": [
							"pm.test(\"Status code is 405 Method Not Allowed\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return message indicating that snapshots are read-only\", () => {\r",
							"    pm.expect(pm.response.json().message).to.be.equal(\"Snapshots are read-only.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e9a6b02b-cf56-48ba-8679-f72712df1429",
						"exec": [
							"pm.variables.set('id', pm.environment.get('known:student').id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "ABC"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"studentUniqueId\": \"604822\",\n        \"birthDate\": \"1997-09-13\",\n        \"firstName\": \"Jane\",\n        \"lastSurname\": \"Doe\",\n        \"middleName\": \"X\",\n        \"personalTitlePrefix\": \"Ms\",\n        \"identificationDocuments\": [],\n        \"otherNames\": [],\n        \"personalIdentificationDocuments\": [],\n        \"visas\": []\n    }",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{id}}",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students",
						"{{id}}"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Get All Students (Non-Existing Snapshot)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7bcacd4-90f5-4d75-8b1d-f25228fa0c55",
						"exec": [
							"pm.test(\"Status code is 410 Gone\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(410);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return message indicating that the snapshot is not available.\", () => {\r",
							"    pm.expect(pm.response.json().message).to.be.equal(\"Snapshot not available.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "XYZ"
					}
				],
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		},
		{
			"name": "Get All Students (Invalid Snapshot Identifier)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16706733-5cee-417c-b829-f0e911ecb8c4",
						"exec": [
							"pm.test(\"Status code is 400 Bad Request\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return message indicating that snapshot identifier value was invalid\", () => {\r",
							"    pm.expect(pm.response.json().message).to.be.equal(\"Invalid value for snapshot identifier.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Snapshot-Identifier",
						"type": "text",
						"value": "Non-Alph@numeric"
					}
				],
				"url": {
					"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
					"host": [
						"{{ApiBaseUrl}}"
					],
					"path": [
						"data",
						"v3",
						"ed-fi",
						"students"
					]
				},
				"description": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern)."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "32fabda6-e32d-4cd7-8f75-fd1424c1c59a",
				"type": "text/javascript",
				"exec": [
					"CreateAccessToken(\"TokenExpiry\",",
					"                  \"AccessToken\",",
					"                  \"ApiKey\", ",
					"                  \"ApiSecret\")",
					"                  ",
					"     ",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry,AccessToken,ApiKey, ApiSecret)",
					"                  {",
					"let tokenExpiration = pm.environment.get(TokenExpiry);",
					"let currentToken = pm.environment.get(AccessToken);",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/json\"",
					"        ],",
					"        body: {",
					"            mode: \"raw\",",
					"            raw: JSON.stringify({ Grant_type: grantType })",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(AccessToken, newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "439379f1-c12a-49f2-9c28-c0b6d3343193",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}