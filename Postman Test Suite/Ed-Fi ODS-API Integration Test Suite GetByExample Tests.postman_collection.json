{
	"info": {
		"_postman_id": "70bfc09f-5bc1-41c1-abb0-c63472f5f844",
		"name": "Ed-Fi ODS/API Integration Test Suite GetByExample Tests",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Shared Initialization",
			"item": [
				{
					"name": "Initialize Schools Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"const __ = require('lodash');",
									"const responseItems = pm.response.json();",
									"pm.environment.set('known:schoolId', __.first(responseItems).schoolId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?localEducationAgencyId=255901",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"schools"
							],
							"query": [
								{
									"key": "localEducationAgencyId",
									"value": "255901"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "StudentContactAssociation Tests",
			"item": [
				{
					"name": "Initialize Student Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"const scenarioId = pm.environment.get('scenarioId');",
									"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
									"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':StudentUniqueId'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
									"function createScenarioId() { return newGuid().substring(0,5); }",
									"pm.environment.set('scenarioId', createScenarioId());",
									"const scenarioId = pm.environment.get('scenarioId');",
									"pm.environment.set('supplied:'+scenarioId+':StudentUniqueId', newGuid());",
									"pm.environment.set('supplied:'+scenarioId+':LastSurname',newGuid());",
									"pm.environment.set('supplied:'+scenarioId+':FirstName',newGuid());",
									"",
									"const moment = require('moment');",
									"let birthDate=new Date();",
									"birthDate = birthDate.addYears(-20);",
									"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
									"pm.environment.set('supplied:'+scenarioId+':BirthDate',birthDate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:StudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:BirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize StudentSchoolAssociation Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const scenarioId = pm.environment.get('scenarioId');",
									"const moment = require('moment');",
									"let entryDate = new Date();",
									"entryDate = entryDate.addMonths(-10);",
									"entryDate = moment(entryDate).format(\"YYYY-MM-DD\");",
									"pm.variables.set('supplied:'+scenarioId+':entryDate', entryDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\": \"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\": \"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"StudentSchoolAssociations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize First Contact Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201) ",
									" });",
									"",
									" if (pm.response.code === 201 ) {",
									"    const scenarioId = pm.environment.get('scenarioId');",
									"    pm.environment.set('known:'+scenarioId+':parent1Guid',pm.response.headers.one('Location').value.split(\"/\").pop());",
									"    pm.environment.set('known:'+scenarioId+':parent1UniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
									" }",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid=require('uuid');",
									"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
									"const scenarioId = pm.environment.get('scenarioId');",
									"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
									"pm.environment.set('supplied:'+scenarioId+':LastSurname',newGuid());",
									"pm.environment.set('supplied:'+scenarioId+':FirstName',newGuid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"{{ParentOrContactUniqueIdPropertyName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{ParentOrContactCollectionName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize Second Contact Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201) ",
									" });",
									"",
									"if (pm.response.code === 201 ) {",
									"const scenarioId = pm.environment.get('scenarioId');",
									"pm.environment.set('known:'+scenarioId+':parent2Guid',pm.response.headers.one('Location').value.split(\"/\").pop());",
									"pm.environment.set('known:'+scenarioId+':parent2UniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
									"}",
									"",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
									"const scenarioId = pm.environment.get('scenarioId');",
									"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
									"pm.environment.set('supplied:'+scenarioId+':LastSurname',newGuid());",
									"pm.environment.set('supplied:'+scenarioId+':FirstName',newGuid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"{{ParentOrContactUniqueIdPropertyName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{ParentOrContactCollectionName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize First StudentContactAssociation Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201) ",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"{{ParentOrContactName}}Reference\": {\r\n    \"{{ParentOrContactUniqueIdPropertyName}}\": \"{{known:{{scenarioId}}:parent1UniqueId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"bedtimeReader\": true,\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{StudentParentOrContactAssociationCollectionName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize Second StudentContactAssociation Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  201\", () => {",
									"    pm.expect(pm.response.code).to.equal(201) ",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"{{ParentOrContactName}}Reference\": {\r\n    \"{{ParentOrContactUniqueIdPropertyName}}\": \"{{known:{{scenarioId}}:parent2UniqueId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"bedtimeReader\": true,\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{StudentParentOrContactAssociationCollectionName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "StudentContactAssociation by Invalid StudentUniqueId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200) ",
									" });",
									"",
									"if (pm.response.code === 200 ) {",
									"    pm.test(\"Should return no rows\", () => {",
									"        const responseItems = pm.response.json();",
									"        pm.expect(responseItems.length).to.equal(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}?studentUniqueId=InvalidStudentId",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{StudentParentOrContactAssociationCollectionName}}"
							],
							"query": [
								{
									"key": "studentUniqueId",
									"value": "InvalidStudentId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "StudentContactAssociation Has Additional Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200) ",
									" });",
									"",
									"if (pm.response.code === 201 ) {",
									"    pm.test(\"Should return more than just test data\", () => {",
									"        const responseItems = pm.response.json();",
									"        pm.expect(responseItems.length).to.be.greaterThan(2);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{StudentParentOrContactAssociationCollectionName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "StudentContacctAssociation by Valid StudentUniqueId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200) ",
									" });",
									"",
									"if (pm.response.code === 200 ) {",
									"    pm.test(\"Should return exactly two items\", () => {",
									"        const responseItems = pm.response.json();",
									"        pm.expect(responseItems.length).to.equal(2);",
									"    });",
									"",
									"    pm.test(\"Should return only items for the provided student unique id\", () => {",
									"        const scenarioId = pm.environment.get('scenarioId');",
									"        const studentUniqueId = pm.variables.get('known:'+scenarioId+':studentUniqueId');",
									"        const responseItems = pm.response.json();",
									"        responseItems.forEach(item => {",
									"            pm.expect(item.studentReference.studentUniqueId).to.equal(studentUniqueId);",
									"        })",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}?studentUniqueId={{known:{{scenarioId}}:studentUniqueId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{StudentParentOrContactAssociationCollectionName}}"
							],
							"query": [
								{
									"key": "studentUniqueId",
									"value": "{{known:{{scenarioId}}:studentUniqueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "StudentContactAssociation by Valid ContactUniqueId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200) ",
									" });",
									"",
									"if (pm.response.code === 200 ) {",
									"    pm.test(\"Should return exactly one item\", () => {",
									"        const responseItems = pm.response.json();",
									"        pm.expect(responseItems.length).to.equal(1);",
									"    });",
									"",
									"    pm.test(\"Should return only items for the provided contact unique id\", () => {",
									"        const scenarioId = pm.environment.get('scenarioId');",
									"        const parentUniqueId = pm.variables.get('known:'+scenarioId+':parent1UniqueId');",
									"        const responseItems = pm.response.json();",
									"        responseItems.forEach(item => {",
									"            if(pm.environment.get('ParentOrContactName') == 'parent') {",
									"                pm.expect(item.parentReference.parentUniqueId).to.equal(parentUniqueId);",
									"            }",
									"            else if(pm.environment.get('ParentOrContactName') == 'contact') {",
									"                pm.expect(item.contactReference.contactUniqueId).to.equal(parentUniqueId);",
									"            }",
									"        })",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}?{{ParentOrContactUniqueIdName}}={{known:{{scenarioId}}:parent1UniqueId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{StudentParentOrContactAssociationCollectionName}}"
							],
							"query": [
								{
									"key": "{{ParentOrContactUniqueIdName}}",
									"value": "{{known:{{scenarioId}}:parent1UniqueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "StudentContactAssociation by Valid StudentUniqueId and ContactUniqueId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is  200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200) ",
									" });",
									"",
									"if (pm.response.code === 200 ) {",
									"    pm.test(\"Should return exactly one item\", () => {",
									"        const responseItems = pm.response.json();",
									"        pm.expect(responseItems.length).to.equal(1);",
									"    });",
									"",
									"    pm.test(\"Should return only items for the provided student and contact unique id\", () => {",
									"        const scenarioId = pm.environment.get('scenarioId');",
									"        const studentUniqueId = pm.variables.get('known:'+scenarioId+':studentUniqueId');",
									"        const parentUniqueId = pm.variables.get('known:'+scenarioId+':parent1UniqueId');",
									"        const responseItems = pm.response.json();",
									"        responseItems.forEach(item => {",
									"            pm.expect(item.studentReference.studentUniqueId).to.equal(studentUniqueId);",
									"            if(pm.environment.get('ParentOrContactName') == 'parent') {",
									"                pm.expect(item.parentReference.parentUniqueId).to.equal(parentUniqueId);",
									"            }",
									"            else if(pm.environment.get('ParentOrContactName') == 'contact') {",
									"                pm.expect(item.contactReference.contactUniqueId).to.equal(parentUniqueId);",
									"            }",
									"        })",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}?studentUniqueId={{known:{{scenarioId}}:studentUniqueId}}&{{ParentOrContactUniqueIdName}}={{known:{{scenarioId}}:parent1UniqueId}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"{{StudentParentOrContactAssociationCollectionName}}"
							],
							"query": [
								{
									"key": "studentUniqueId",
									"value": "{{known:{{scenarioId}}:studentUniqueId}}"
								},
								{
									"key": "{{ParentOrContactUniqueIdName}}",
									"value": "{{known:{{scenarioId}}:parent1UniqueId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Descriptor Derived Resource Tests",
			"item": [
				{
					"name": "Initialize",
					"item": [
						{
							"name": "Initialize AcademicSubjectDescriptors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const __ = require('lodash');\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"// Get a valid id for the english descriptor\r",
											"englishDescriptor = __.find(responseItems, x => __.isEqual(x.codeValue, 'English'));\r",
											"pm.environment.set('known:english_id', englishDescriptor.id);\r",
											"\r",
											"const tpdm_namespace = pm.environment.get('supplied:tpdm_namespace');\r",
											"const science_codeValue = pm.environment.get('supplied:codeValue');\r",
											"const english_id = englishDescriptor.id;\r",
											"const lifeAndPhysicalSciences_description = pm.environment.get('supplied:description');\r",
											"const other_shortDescription = pm.environment.get('supplied:shortDescription');\r",
											"\r",
											"pm.environment.set('known:all_academicSubjectDescriptors', responseItems);\r",
											"pm.environment.set('known:tpdm_academicSubjectDescriptors', __.filter(responseItems, x => __.isEqual(x.namespace, tpdm_namespace)));\r",
											"pm.environment.set('known:science_descriptor', __.filter(responseItems, x => __.isEqual(x.codeValue, science_codeValue)));\r",
											"pm.environment.set('known:english_descriptor', __.filter(responseItems, x => __.isEqual(x.id, english_id)));\r",
											"pm.environment.set('known:lifeAndPhysicalSciences_descriptor', __.filter(responseItems, x => __.isEqual(x.description, lifeAndPhysicalSciences_description)));\r",
											"pm.environment.set('known:other_descriptor', __.filter(responseItems, x => __.isEqual(x.shortDescription, other_shortDescription)));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('supplied:edfi_namespace', 'uri://ed-fi.org/AcademicSubjectDescriptor');\r",
											"pm.environment.set('supplied:tpdm_namespace', 'uri://tpdm.ed-fi.org/AcademicSubjectDescriptor');\r",
											"pm.environment.set('supplied:codeValue', 'Science');\r",
											"pm.environment.set('supplied:description', 'Life and Physical Sciences');\r",
											"pm.environment.set('supplied:shortDescription', 'Other');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by namespace",
					"item": [
						{
							"name": "When filtering by an existing namespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return filtered descriptors\", () => {\r",
											"    const tpdm_academicSubjectDescriptors = pm.environment.get('known:tpdm_academicSubjectDescriptors');\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems).to.deep.equal(tpdm_academicSubjectDescriptors);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?namespace={{supplied:tpdm_namespace}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "namespace",
											"value": "{{supplied:tpdm_namespace}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent namespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?namespace=non-existent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "namespace",
											"value": "non-existent"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by codeValue",
					"item": [
						{
							"name": "When filtering by an existing codeValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return 'Science' descriptor\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"    const science_descriptor = pm.environment.get('known:science_descriptor');\r",
											"\r",
											"    pm.expect(responseItems).to.deep.equal(science_descriptor);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?codeValue={{supplied:codeValue}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "codeValue",
											"value": "{{supplied:codeValue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent codeValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?codeValue=non-existent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "codeValue",
											"value": "non-existent"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by id",
					"item": [
						{
							"name": "When  filtering by an existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return 'English' descriptor\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"    const english_descriptor = pm.environment.get('known:english_descriptor');\r",
											"\r",
											"    pm.expect(responseItems).to.deep.equal(english_descriptor);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?id={{known:english_id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "id",
											"value": "{{known:english_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When  filtering by a non-existent id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?id=b61860ad52da43fb98a6e4fda8747e00",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "id",
											"value": "b61860ad52da43fb98a6e4fda8747e00"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by description",
					"item": [
						{
							"name": "When  filtering by an existing description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return 'Life And Physical Sciences' descriptor\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"    const lifeAndPhysicalSciences_descriptor = pm.environment.get('known:lifeAndPhysicalSciences_descriptor');\r",
											"\r",
											"    pm.expect(responseItems).to.deep.equal(lifeAndPhysicalSciences_descriptor);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?description={{supplied:description}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "description",
											"value": "{{supplied:description}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When  filtering by a non-existent description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?description=non-existent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "description",
											"value": "non-existent"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by shortDescription",
					"item": [
						{
							"name": "When  filtering by an existing shortDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return 'Other' descriptor\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"    const other_descriptor = pm.environment.get('known:other_descriptor');\r",
											"\r",
											"    pm.expect(responseItems).to.deep.equal(other_descriptor);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?shortDescription={{supplied:shortDescription}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "shortDescription",
											"value": "{{supplied:shortDescription}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When  filtering by a non-existent shortDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicSubjectDescriptors?shortDescription=non-existent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicSubjectDescriptors"
									],
									"query": [
										{
											"key": "shortDescription",
											"value": "non-existent"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "EducationOrganization Derived Resource Tests",
			"item": [
				{
					"name": "Initialize",
					"item": [
						{
							"name": "Initialize Schools",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('supplied:schoolId', 255901001);\r",
											"pm.environment.set('supplied:identificationCode', \"255901001\");\r",
											"pm.environment.set('supplied:identificationCodeEducationOrganizationIdentificationSystemDescriptor', \"uri://ed-fi.org/EducationOrganizationIdentificationSystemDescriptor#SEA\");\r",
											"pm.environment.set('supplied:nameOfInstitution', 'Grand Bend Middle School');\r",
											"pm.environment.set('supplied:shortNameOfInstitution', 'GBES');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"const highSchool_schoolId = pm.environment.get('supplied:schoolId');\r",
											"const middleSchool_nameOfInstitution = pm.environment.get('supplied:nameOfInstitution');\r",
											"const elementarySchool_shortNameOfInstitution = pm.environment.get('supplied:shortNameOfInstitution');\r",
											"\r",
											"pm.environment.set('known:highSchool_id', __.find(responseItems, x => __.isEqual(x.schoolId, highSchool_schoolId)).id);\r",
											"pm.environment.set('known:middleSchool_id', __.find(responseItems, x => __.isEqual(x.nameOfInstitution, middleSchool_nameOfInstitution)).id);\r",
											"pm.environment.set('known:elementarySchool_id', __.find(responseItems, x => __.isEqual(x.shortNameOfInstitution, elementarySchool_shortNameOfInstitution)).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize PostSecondaryInstitutions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('supplied:operationalStatusDescriptor', 'uri://ed-fi.org/OperationalStatusDescriptor#Active');\r",
											"\r",
											"var encodedDescriptor = encodeURIComponent(pm.environment.get(\"supplied:operationalStatusDescriptor\"));\r",
											"\r",
											"pm.environment.set('supplied:encodedOperationalStatusDescriptor', encodedDescriptor);\r",
											"pm.environment.set('supplied:encodedNonExistentOperationalStatusDescriptor', encodeURIComponent('uri://ed-fi.org/OperationalStatusDescriptor#Non-existent'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"const postSecondary_operationalStatusDescriptor = pm.environment.get('supplied:operationalStatusDescriptor');\r",
											"\r",
											"pm.environment.set('known:postSecondary_id', __.find(responseItems, x => __.isEqual(x.operationalStatusDescriptor, postSecondary_operationalStatusDescriptor)).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/postSecondaryInstitutions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"postSecondaryInstitutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize LocalEducationAgencies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('supplied:webSite', 'http://www.GBISD.edu/');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"const lea_webSite = pm.environment.get('supplied:webSite');\r",
											"\r",
											"pm.environment.set('known:lea_id', __.find(responseItems, x => __.startsWith(x.webSite, lea_webSite)).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by SchoolId",
					"item": [
						{
							"name": "When filtering by an existing schoolId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"pm.test(\"Should return one expected resouce\", () => {\r",
											"    pm.expect(responseItems.count()).to.equal(1);\r",
											"    pm.expect(responseItems[0].id).to.equals(pm.environment.get('known:highSchool_id'));\r",
											"    pm.expect(responseItems[0].schoolId).to.equals(pm.environment.get('supplied:schoolId'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?schoolId={{supplied:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									],
									"query": [
										{
											"key": "schoolId",
											"value": "{{supplied:schoolId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent schoolId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?schoolId=999999999",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									],
									"query": [
										{
											"key": "schoolId",
											"value": "999999999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by NameOfInstitution",
					"item": [
						{
							"name": "When filtering by an existing nameOfInstitution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"pm.test(\"Should return one expected resouce\", () => {\r",
											"    pm.expect(responseItems.count()).to.equal(1);\r",
											"    pm.expect(responseItems[0].id).to.equals(pm.environment.get('known:middleSchool_id'));\r",
											"    pm.expect(responseItems[0].nameOfInstitution).to.equals(pm.environment.get('supplied:nameOfInstitution'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?nameOfInstitution={{supplied:nameOfInstitution}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									],
									"query": [
										{
											"key": "nameOfInstitution",
											"value": "{{supplied:nameOfInstitution}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent nameOfInstitution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?nameOfInstitution=non-existent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									],
									"query": [
										{
											"key": "nameOfInstitution",
											"value": "non-existent"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by OperationalStatusDescriptor",
					"item": [
						{
							"name": "When filtering by an existing operationalStatusDescriptor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"pm.test(\"Should return one expected resouce\", () => {\r",
											"    pm.expect(responseItems.count()).to.equal(1);\r",
											"    pm.expect(responseItems[0].id).to.equals(pm.environment.get('known:postSecondary_id'));\r",
											"    pm.expect(responseItems[0].operationalStatusDescriptor).to.equals(pm.environment.get('supplied:operationalStatusDescriptor'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/postSecondaryInstitutions?operationalStatusDescriptor={{supplied:encodedOperationalStatusDescriptor}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"postSecondaryInstitutions"
									],
									"query": [
										{
											"key": "operationalStatusDescriptor",
											"value": "{{supplied:encodedOperationalStatusDescriptor}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent operationalStatusDescriptor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/postSecondaryInstitutions?operationalStatusDescriptor={{supplied:encodedNonExistentOperationalStatusDescriptor}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"postSecondaryInstitutions"
									],
									"query": [
										{
											"key": "operationalStatusDescriptor",
											"value": "{{supplied:encodedNonExistentOperationalStatusDescriptor}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by ShortNameOfInstitution",
					"item": [
						{
							"name": "When filtering by an existing shortNameOfInstitution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"pm.test(\"Should return one expected resouce\", () => {\r",
											"    pm.expect(responseItems.count()).to.equal(1);\r",
											"    pm.expect(responseItems[0].id).to.equals(pm.environment.get('known:elementarySchool_id'));\r",
											"    pm.expect(responseItems[0].shortNameOfInstitution).to.equals(pm.environment.get('supplied:shortNameOfInstitution'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?shortNameOfInstitution={{supplied:shortNameOfInstitution}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									],
									"query": [
										{
											"key": "shortNameOfInstitution",
											"value": "{{supplied:shortNameOfInstitution}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent shortNameOfInstitution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?shortNameOfInstitution=non-existent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									],
									"query": [
										{
											"key": "shortNameOfInstitution",
											"value": "non-existent"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by WebSite",
					"item": [
						{
							"name": "When filtering by an existing webSite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"pm.test(\"Should return one expected resouce\", () => {\r",
											"    pm.expect(responseItems.count()).to.equal(1);\r",
											"    pm.expect(responseItems[0].id).to.equals(pm.environment.get('known:lea_id'));\r",
											"    pm.expect(responseItems[0].webSite).to.equals(pm.environment.get('supplied:webSite'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies?webSite={{supplied:webSite}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									],
									"query": [
										{
											"key": "webSite",
											"value": "{{supplied:webSite}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent webSite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies?webSite=non-existent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									],
									"query": [
										{
											"key": "webSite",
											"value": "non-existent"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by IdentificationCode",
					"item": [
						{
							"name": "When filtering by an existing identificationCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"pm.test(\"Should return one expected resouce\", () => {\r",
											"    pm.expect(responseItems.count()).to.equal(1);\r",
											"    pm.expect(responseItems[0].id).to.equals(pm.environment.get('known:lea_id'));\r",
											"    pm.expect(responseItems[0].webSite).to.equals(pm.environment.get('supplied:webSite'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies?identificaitonCode={{supplied:identificationCode}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									],
									"query": [
										{
											"key": "identificaitonCode",
											"value": "{{supplied:identificationCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent identificationCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies?identificationCode=non-existent",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									],
									"query": [
										{
											"key": "identificationCode",
											"value": "non-existent"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GeneralStudentProgramAssociation Derived Resource Tests",
			"item": [
				{
					"name": "Initialize",
					"item": [
						{
							"name": "Initialize StudentNeglectedOrDelinquentProgramAssociations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('supplied:endDate', '2021-09-30');\r",
											"pm.environment.set('supplied:reasonExitedDescriptor', 'uri://ed-fi.org/ReasonExitedDescriptor#Unknown reason');\r",
											"\r",
											"var encodedDescriptor = encodeURIComponent(pm.environment.get(\"supplied:reasonExitedDescriptor\"));\r",
											"\r",
											"pm.environment.set('supplied:encodedReasonExitedDescriptor', encodedDescriptor);\r",
											"pm.environment.set('supplied:encodedNonExistentReasonExitedDescriptor', encodeURIComponent('uri://ed-fi.org/ReasonExitedDescriptor#Non-existent'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"const __ = require('lodash');\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"const neglectedOrDelinquent_endDate = pm.environment.get('supplied:endDate');\r",
											"const neglectedOrDelinquent_reasonExitedDescriptor = pm.environment.get('supplied:reasonExitedDescriptor');\r",
											"\r",
											"pm.environment.set('known:neglectedOrDelinquent_endDate', __.filter(responseItems, x => __.startsWith(x.endDate, neglectedOrDelinquent_endDate)));\r",
											"pm.environment.set('known:neglectedOrDelinquent_reasonExitedDescriptor', __.filter(responseItems, x => __.startsWith(x.reasonExitedDescriptor, neglectedOrDelinquent_reasonExitedDescriptor)));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentNeglectedOrDelinquentProgramAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentNeglectedOrDelinquentProgramAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize StudentProgramAssociations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('supplied:servedOutsideOfRegularSession', 'true');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"const __ = require('lodash');\r",
											"const responseItems = pm.response.json();\r",
											"\r",
											"const studentProgramAssociation_servedOutsideOfRegularSession = pm.environment.get('supplied:servedOutsideOfRegularSession');\r",
											"\r",
											"pm.environment.set('known:studentProgramAssociation_servedOutsideOfRegularSession', __.filter(responseItems, x => __.startsWith(x.servedOutsideOfRegularSession, studentProgramAssociation_servedOutsideOfRegularSession)));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by ServedOutsideOfRegularSession",
					"item": [
						{
							"name": "When filtering by true servedOutsideOfRegularSession",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return expected Program Association\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"    const studentProgramAssociation = pm.environment.get('known:studentProgramAssociation_servedOutsideOfRegularSession');\r",
											"\r",
											"    pm.expect(responseItems).to.deep.equal(studentProgramAssociation);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations?servedOutsideOfRegularSession={{supplied:servedOutsideOfRegularSession}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations"
									],
									"query": [
										{
											"key": "servedOutsideOfRegularSession",
											"value": "{{supplied:servedOutsideOfRegularSession}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a false servedOutsideOfRegularSession",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return filtered programs\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.greaterThan(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations?servedOutsideOfRegularSession=false",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations"
									],
									"query": [
										{
											"key": "servedOutsideOfRegularSession",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by EndDate",
					"item": [
						{
							"name": "When filtering by an existing endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return expected Program Association\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"    const neglectedOrDelinquent = pm.environment.get('known:neglectedOrDelinquent_endDate');\r",
											"\r",
											"    pm.expect(responseItems).to.deep.equal(neglectedOrDelinquent);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentNeglectedOrDelinquentProgramAssociations?endDate={{supplied:endDate}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentNeglectedOrDelinquentProgramAssociations"
									],
									"query": [
										{
											"key": "endDate",
											"value": "{{supplied:endDate}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentNeglectedOrDelinquentProgramAssociations?endDate=1999-09-30",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentNeglectedOrDelinquentProgramAssociations"
									],
									"query": [
										{
											"key": "endDate",
											"value": "1999-09-30"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "When filtering by ReasonExitedDescriptor",
					"item": [
						{
							"name": "When filtering by an existing reasonExitedDescriptor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return expected Program Association\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"    const neglectedOrDelinquent = pm.environment.get('known:neglectedOrDelinquent_reasonExitedDescriptor');\r",
											"\r",
											"    pm.expect(responseItems).to.deep.equal(neglectedOrDelinquent);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentNeglectedOrDelinquentProgramAssociations?reasonExitedDescriptor={{supplied:encodedReasonExitedDescriptor}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentNeglectedOrDelinquentProgramAssociations"
									],
									"query": [
										{
											"key": "reasonExitedDescriptor",
											"value": "{{supplied:encodedReasonExitedDescriptor}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "When filtering by a non-existent reasonExitedDescriptor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return an empty response\", () => {\r",
											"    const responseItems = pm.response.json();\r",
											"\r",
											"    pm.expect(responseItems.count()).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentNeglectedOrDelinquentProgramAssociations?reasonExitedDescriptor={{supplied:encodedNonExistentReasonExitedDescriptor}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentNeglectedOrDelinquentProgramAssociations"
									],
									"query": [
										{
											"key": "reasonExitedDescriptor",
											"value": "{{supplied:encodedNonExistentReasonExitedDescriptor}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Clean Up Test Data",
			"item": [
				{
					"name": "Clean up Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');\r",
									"\r",
									"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
									"__.chain(__.keys(pm.environment.toObject()))\r",
									"  .filter(x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'))\r",
									"  .each(k => pm.environment.unset(k)).value();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Add a correlation id to the query string of every request and save it to the environment as well",
					"const correlationId = pm.variables.replaceIn(\"{{$randomMACAddress}}\").replace(/:/g, '');",
					"pm.request.addQueryParams(`correlationId=${correlationId}`);",
					"",
					"CreateAccessToken(\"255901\");",
					"",
					"// Set variables related to data standard specific contact/parent variablility ",
					"let ParentOrContactProperName = pm.environment.get(\"ParentOrContactProperName\");",
					"let StudentParentOrContactAssociationCollectionName = \"Student\" + ParentOrContactProperName + \"Associations\";",
					"let ParentOrContactUniqueIdPropertyName = ParentOrContactProperName[0].toLowerCase() + ParentOrContactProperName.substring(1) + \"UniqueId\";",
					"let ParentOrContactUniqueIdName = ParentOrContactProperName + \"UniqueId\";",
					"let ParentOrContactName =  ParentOrContactProperName.toLowerCase();",
					"let ParentOrContactCollectionName = ParentOrContactName + \"s\";",
					"",
					"pm.environment.set(\"StudentParentOrContactAssociationCollectionName\", StudentParentOrContactAssociationCollectionName);",
					"pm.environment.set(\"ParentOrContactUniqueIdName\", ParentOrContactUniqueIdName);",
					"pm.environment.set(\"ParentOrContactUniqueIdPropertyName\", ParentOrContactUniqueIdPropertyName);",
					"pm.environment.set(\"ParentOrContactName\", ParentOrContactName);",
					"pm.environment.set(\"ParentOrContactCollectionName\", ParentOrContactCollectionName);",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(clientSuffix) {",
					"  const apiKeyName = `ApiKey_${clientSuffix}`;",
					"  const apiSecretName = `ApiSecret_${clientSuffix}`;",
					"  const tokenExpiryName = `TokenExpiry_${clientSuffix}`;",
					"  const accessTokenName = `AccessToken_${clientSuffix}`;",
					"",
					"  let tokenExpiration = pm.environment.get(tokenExpiryName);",
					"  let currentToken = pm.environment.get(accessTokenName);",
					"  let getToken = true;",
					"  ",
					"  if (!tokenExpiration || !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"  } else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"  } else {",
					"    getToken = false;",
					"  }",
					"",
					"  if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(apiKeyName) ?? clientSuffix;",
					"    let clientSecret = pm.environment.get(apiSecretName) ?? clientSuffix;",
					"    let grantType = 'client_credentials';",
					"",
					"    let getTokenRequest = {",
					"      method: 'POST',",
					"      url: tokenUrl,",
					"      auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"          { key: \"username\", value: clientId },",
					"          { key: \"password\", value: clientSecret }",
					"        ]",
					"      },",
					"      header: [",
					"        \"content-type:application/x-www-form-urlencoded\"",
					"      ],",
					"      body: {",
					"        mode: \"urlencoded\",",
					"        urlencoded: [{ key: \"grant_type\", value: grantType }]",
					"      }",
					"    };",
					"",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"      let jsonResponse = response.json();",
					"      let newAccessToken = jsonResponse.access_token;",
					"",
					"      // console.log({ err, jsonResponse, newAccessToken })",
					"      pm.environment.set(accessTokenName, newAccessToken);",
					"",
					"      let expiryDate = new Date();",
					"      expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"      pm.environment.set(tokenExpiryName, expiryDate.getTime());",
					"    });",
					"  }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}