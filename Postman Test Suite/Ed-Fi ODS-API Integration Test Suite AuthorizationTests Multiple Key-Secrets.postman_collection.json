{
	"info": {
		"_postman_id": "f7e89a55-5e67-4a34-8161-8fa35ff69476",
		"name": "Ed-Fi ODS/API Integration Test Suite AuthorizationTests Multiple Key/Secrets",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization Tests",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Initialize Education Organization Ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5549a4a-d47f-4c58-a830-15edcf6ea87b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "686d3192-e19f-4260-b435-437d0d5b1acf",
										"exec": [
											"pm.environment.set('known:schoolId1',255901001);\r",
											"pm.environment.set('known:schoolId2',255901044);\r",
											"pm.environment.set('known:schoolId_2001_01',200101);\r",
											"pm.environment.set('known:schoolId_2002_01',200201);\r",
											"pm.environment.set('known:schoolId_2003_01',200301);\r",
											"\r",
											"pm.environment.set('known:localEducationAgencyId_2001', 2001);\r",
											"pm.environment.set('known:localEducationAgencyId_2002', 2002);\r",
											"pm.environment.set('known:localEducationAgencyId_2003', 2003);\r",
											"pm.environment.set('known:stateEducationAgencyId', 31);\r",
											"\r",
											"pm.environment.set('supplied:edfiNamespace', \"uri://ed-fi.org/\");\r",
											"pm.environment.set('supplied:otherNamespace', \"uri://other.org/\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize stateEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d55cfc52-44c1-4718-93d0-36d41afd7080",
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'State-31');\r",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#State Education Agency\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "68bea283-2281-4608-a929-26af823cb095",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"stateEducationAgencyId\":\"{{known:stateEducationAgencyId}}\",\r\n  \"nameOfInstitution\":\"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/stateEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"stateEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f68e6238-303d-4e44-b68c-089fc4f1dcd0",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-2001');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "877aff51-e518-4ccc-a7d0-53ac6c648d76",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2001}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1117453f-4dc0-438f-955c-fd9b31485a0c",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c4b946b-89e9-4c57-b70d-22246d2647de",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId_2001_01}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2001}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize localEducationAgency Data for Request -Second one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c8a4b2bd-f3da-4f44-8512-7ac8a6ed0e98",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-2002');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6be6d2a9-8b19-41c8-bdd5-a2efa6a853d5",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2002}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request -Second one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "212ecb56-c6ed-4035-bad8-d0ae7d420c38",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200201');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b071b97f-f703-48d7-be28-8d8a1b194705",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId_2002_01}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2002}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize localEducationAgency Data for Request -Third one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c9a89c4c-7bb4-4585-8d87-8e7859489cb5",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-2003');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "01fcf38a-1378-4a6f-9015-afe5ade31efe",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2003}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request -Third one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb32dce1-7535-4f08-b26c-38dc14935c34",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200301');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d8657696-44e6-4286-923e-0666539ba143",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId_2003_01}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2003}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "AssessmentAuthorizationTests",
					"item": [
						{
							"name": "When_getting_all_assessments_with_assessment_vendor_API_client",
							"item": [
								{
									"name": "Should_return_only_vendor_specific_assessments",
									"item": [
										{
											"name": "Create Assessment using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d8c858dd-89cb-4644-8ddc-e857e5312a2c",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9d345a99-74e2-4515-a618-800a74e60887",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:edfiNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:edfiAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d8620196-334c-4d05-a579-e58174d83960",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "048776b3-52bf-45c1-814e-5162bdc0250d",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentIdentifier', \"other\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:otherNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:otherAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:otherAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fed329d9-354d-4386-884d-e3fa24c1894b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Should return some data for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.be.at.least(1);",
															"});",
															"",
															"",
															"pm.test(\"Should only return items with other.org namespace\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.namespace).to.equal(pm.environment.get('supplied:otherNamespace'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "86963bec-b496-4d5d-9d5b-f029102e7c15",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_assessmentItems_with_assessment_vendor_API_client",
							"item": [
								{
									"name": "Should_return_only_vendor_specific_assessment_items",
									"item": [
										{
											"name": "Create Assessment using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5acdecb6-67a5-46cf-b7d7-3c8f3851658d",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d19a2afb-ed11-401a-a943-497b4218bea8",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:edfiNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:edfiAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create AssessmentItem using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a476477-04ea-424f-8854-6ce50b0e422f",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f68a9852-b801-4977-9c83-22bdedd00384",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':edfiIdentificationCode', \"edfi\"+ newGuid());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:edfiNamespace}}\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n\t\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessmentItems",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessmentItems"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "63b0583c-c374-4cdc-bb07-521f7fa9d52a",
														"exec": [
															"    pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "35c9b8e4-eb9d-4619-b317-6267669752a9",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentIdentifier', \"other\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:otherNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:otherAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:otherAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create AssessmentItem using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eb3fc413-0531-4435-b05b-9bcee1086a38",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3348dde3-b810-41ef-9460-3f098bf3a142",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':otherIdentificationCode', \"Other\"+ newGuid());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:otherNamespace}}\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:otherIdentificationCode}}\"\r\n\t\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessmentItems",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessmentItems"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get AssessmentItem using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0f8d3ff6-16bf-4d7d-9b81-90702274d09c",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Should return some data for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.be.at.least(1);",
															"});",
															"",
															"",
															"pm.test(\"Should only return items with other.org namespace\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.assessmentReference.namespace).to.equal(pm.environment.get('supplied:otherNamespace'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e61f73e0-0d30-4121-8f8f-fbb8661651b8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessmentItems",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessmentItems"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_objectiveAsesssments_with_vendor_API_client",
							"item": [
								{
									"name": "Should_return_only_vendor_specific_objectiveAssessments",
									"item": [
										{
											"name": "Create Assessment using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7d9f04b3-789e-43b0-a30d-27a48849f74f",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bd854ba4-3dad-4ee7-8f57-92c2bd6c0710",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:edfiNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:edfiAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create objectiveAssessments using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab41be25-3d6c-4f3e-82bb-36037af46cd8",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a7ad0c67-63d3-4c14-90ac-584010ff98a0",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':edfiIdentificationCode', \"TestAId\"+ newGuid());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:edfiNamespace}}\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n\t\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"objectiveAssessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b37d6d86-34ca-4f3d-91f2-785da92dd3b1",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "de605746-0165-48d2-ad95-abb34e9313c2",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentIdentifier', \"other\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:otherNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:otherAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:otherAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create objectiveAssessments using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "030a5908-e7c6-419c-96ba-52755d6f7f11",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ac5e4e7c-29d0-411c-bd98-13111daef6ce",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':otherIdentificationCode', \"Other\"+ newGuid());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:otherNamespace}}\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:otherIdentificationCode}}\"\r\n\t\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"objectiveAssessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ObjectiveAssessments using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a510330-738a-4f3e-9495-039dbbc02104",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Should return some data for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.be.at.least(1);",
															"});",
															"",
															"",
															"pm.test(\"Should only return items with other.org namespace\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.assessmentReference.namespace).to.equal(pm.environment.get('supplied:otherNamespace'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b259e30e-1b8b-42f7-8e2b-67096ab7d4f1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"objectiveAssessments"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_studentAssessments_with_vendor_API_client",
							"item": [
								{
									"name": "Should_return_only_vendor_specific_studentAssessments",
									"item": [
										{
											"name": "Create Assessment using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "78ec1554-3163-47dd-b643-ac583c7e6cd7",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4492b12d-3628-4b8a-9b43-8236d1940e2e",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:edfiNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:edfiAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Student using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1b9cbae9-3ff5-46fe-a094-e392beb551f7",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':edfistudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':edfiStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':edfiStudentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7cf483ce-0303-44fc-9001-c0203f5e5937",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':edfiStudentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiLastSurname',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiFirstName',newGuid());",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiBirthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:edfiBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:edfiFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:edfiLastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create studentAssessments using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "61d59a41-58e6-42a6-9d38-92457d079406",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ec2d4329-db36-4ba4-a33b-b84a489cc811",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':edfiStudentAssessmentIdentifier', \"Edfi\"+ newGuid());",
															"const moment = require('moment');",
															"let administrationDate=new Date();",
															"administrationDate = administrationDate.addYears(-20);",
															"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAdministrationDate',administrationDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:edfiNamespace}}\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\"\r\n\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:edfiAdministrationDate}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "732a4fe2-2cb2-4509-a7f0-2b13d5b8e426",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b12b64de-6385-4d12-8e70-fa4ee4233060",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentIdentifier', \"other\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:otherNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:otherAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:otherAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Student using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "109b113b-5745-489b-914b-d840259daa00",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':otherstudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':otherStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':otherStudentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "db0acbbd-35a2-4f3c-b05c-44a84852cc55",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':otherStudentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherLastSurname',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherFirstName',newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':otherBirthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:otherStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:otherBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:otherFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:otherLastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create studentAssessments using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f0ba9bf7-baf4-4ec1-91fd-5f7d09150ab9",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3c9c7a77-ad4d-451a-8509-99db48975b58",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':otherStudentAssessmentIdentifier', \"Other\"+ newGuid());",
															"const moment = require('moment');",
															"let administrationDate=new Date();",
															"administrationDate = administrationDate.addYears(-20);",
															"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAdministrationDate',administrationDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:otherNamespace}}\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:otherStudentUniqueId}}\"\r\n\t\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:otherAdministrationDate}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get StudentAssessments using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e27f372c-df5b-43f4-80c2-240794852bde",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Should return some data for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.be.at.least(1);",
															"});",
															"",
															"",
															"pm.test(\"Should return row match with other.org namespace\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.assessmentReference.namespace).to.equal(pm.environment.get('supplied:otherNamespace'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e40ce405-61a0-4bed-b58e-b68ebdd958e0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GetAllAuthorizationTests",
					"item": [
						{
							"name": "When_performing_a_get_all_request_against_a_resource_for_which_the_same_student_exists_in_multiple_records_with_different_schoolIds",
							"item": [
								{
									"name": "Create Student using First School",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53f4e6fc-dced-415e-94ab-37d4fda49d56",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cba66149-0b40-4dd8-9a7a-eeb61f0558ac",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname',newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName',newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create StudentSchoolAssociations Data using First School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f14b71e7-e844-4a16-b66f-2cebe8129915",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9ec7335e-8cff-49e9-bf85-65daee3ab7f8",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId1}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Create RestraintEvents using First School",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad4610fe-5ec9-4232-8da0-ae15faf74b58",
												"exec": [
													"    pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97411429-f132-4f5d-b724-ca541448436f",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"",
													"pm.environment.set('supplied:'+scenarioId+':restraintEventIdentifier',newGuid().substring(0,20));",
													"",
													"const moment = require('moment');",
													"let eventDate=new Date();",
													"eventDate = eventDate.addYears(-20);",
													"eventDate= moment(eventDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':eventDate',eventDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"schoolReference\":\r\n\t{\r\n\t\t\"schoolId\":\"{{known:schoolId1}}\"\r\n\t\r\n\t},\r\n\t\"studentReference\":\r\n\t{\r\n\t\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:studentUniqueId}}\"\r\n\t},\r\n\t\t\r\n\t\"restraintEventIdentifier\":\"{{supplied:{{scenarioId}}:restraintEventIdentifier}}\",\r\n\t \"eventDate\":\"{{supplied:{{scenarioId}}:eventDate}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/RestraintEvents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"RestraintEvents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create StudentSchoolAssociations Data using Second School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0a79cf06-0ea5-4968-bee2-417fa88bad93",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondSchoolEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondSchoolEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b92e8efa-c41d-4e82-84b1-3bba2f206142",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901044}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId2}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondSchoolEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondSchoolEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Create RestraintEvents using Second School",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e371233-3186-4b0d-b252-d74aabc53988",
												"exec": [
													"    pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "be1197fa-5caa-4b0f-9e8d-ba29d5519cd3",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondSchoolRestraintEventIdentifier',newGuid().substring(0,20));",
													"",
													"const moment = require('moment');",
													"let eventDate=new Date();",
													"eventDate = eventDate.addYears(-20);",
													"eventDate= moment(eventDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondSchoolEventDate',eventDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901044}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"schoolReference\":\r\n\t{\r\n\t\t\"schoolId\":\"{{known:schoolId2}}\"\r\n\t},\r\n\t\"studentReference\":\r\n\t{\r\n\t\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:studentUniqueId}}\"\r\n\t},\r\n\t\t\r\n\t\"restraintEventIdentifier\":\"{{supplied:{{scenarioId}}:secondSchoolRestraintEventIdentifier}}\",\r\n\t \"eventDate\":\"{{supplied:{{scenarioId}}:secondSchoolEventDate}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/RestraintEvents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"RestraintEvents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  RestraintEvents using First School",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "656604f1-a740-4288-851f-e81b10b31574",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return exactly 1 item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Should only return items related to the school associated with the API client\", () => {",
													"    const __ = require('lodash');",
													"     const responseItems = pm.response.json();",
													"     const scenarioId = pm.environment.get('scenarioId');",
													"      __.each(responseItems, (responseItem) => {",
													"        pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get('known:schoolId1'));",
													"      });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6c7fbe1-032c-416b-93fd-bb6a3e5ce3d8",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"",
													"pm.environment.set('supplied:'+scenarioId+':restraintEventIdentifier',newGuid().substring(0,20));",
													"",
													"const moment = require('moment');",
													"let eventDate=new Date();",
													"eventDate = eventDate.addYears(-20);",
													"eventDate= moment(eventDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':eventDate',eventDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/RestraintEvents?studentUniqueId={{supplied:{{scenarioId}}:studentUniqueId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"RestraintEvents"
											],
											"query": [
												{
													"key": "studentUniqueId",
													"value": "{{supplied:{{scenarioId}}:studentUniqueId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ParentAuthorizationTests",
					"item": [
						{
							"name": "When_updating_an_unassociated_parent_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cf6a1ef-3f50-4564-b1d5-102efb0b3978",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39d2b5e8-535a-46a1-8d95-a16ebb0a4ff5",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e4f0198-2ba4-46c0-bc6b-6e759e1260d2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ad9fae0b-8a82-45d4-be4b-c900158e12ea",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eede2ad6-265a-4113-819a-aa7dbc9506d1",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4cda4f51-bd11-4c92-bba2-34130236ec9b",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2aa88f9-52af-4aac-b3ed-30a3e5428ef0",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4eaf45e7-3280-49f7-8ebe-3888ab010ba7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_updating_an_unassociated_parent_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e03bc257-ab6b-4c94-924f-d2d8cd75309e",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "818a862c-6979-42a2-9f2e-8c5c43067847",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', \"gotmarried\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2002}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n }\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/{{known:{{scenarioId}}:parentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												"{{known:{{scenarioId}}:parentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_parents_should_return_only_authorized_parents",
							"item": [
								{
									"name": "Clean up Existing StudentParentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f72c80b8-fddc-426d-b9d1-08f0d397a051",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentParentAssociationsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"\r",
													"pm.test('Delete all StudentParentAssociations', () => {\r",
													"\r",
													"    pm.sendRequest(StudentParentAssociationsGetRequest, function (err, StudentParentAssociations) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            StudentParentAssociations.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentParentAssociationsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentParentAssociationsDeleteRequest, function (err, StudentParentAssociations) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "649b8461-4d5f-4f5a-8287-6b3bca4849f4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07077527-adac-4a86-80e8-74406ff18d34",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ab646a5b-923e-4df5-bed9-df7c633348ae",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f7011bd4-8663-4d63-a89f-e437c6382bba",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fd59853e-b22e-4617-90fd-ce44cb95986a",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29d75cba-7f6b-4be3-96f7-e2d3f63528ef",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedParentUniqueIds',[]);",
													"const authorizedParentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedParentUniqueIds');",
													"authorizedParentUniqueIds.push(pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':authorizedParentUniqueIds',authorizedParentUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7fc93755-60fe-4ba1-bb8b-f6ff51b5f55f",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df89bf2b-6d78-4e3f-94d7-6d0884785989",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c90b1503-395e-42c8-8951-9e689f6db1c7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acfffceb-2403-4e26-99d8-70fdc5ef3b65",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1e113bda-985a-42ed-b045-9b42b5711c02",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6fbe84d8-6b1c-4ba5-87d1-a73393345db9",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0d7b5d6d-d3b2-4103-89d7-31a1feeb1001",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b17230c-866b-4dac-b7cb-6db1635e66d3",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondparentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondParentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondParentUniqueId'));",
													"",
													"const authorizedParentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedParentUniqueIds');",
													"authorizedParentUniqueIds.push(pm.environment.get('supplied:'+scenarioId+':secondParentUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':authorizedParentUniqueIds',authorizedParentUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9836a733-5949-4cb7-b3d1-d192cbc84555",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondParentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentsexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:secondParentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:secondParentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:secondParentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondParentsexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33fd1ec3-f826-4998-b36b-4e81762fef5b",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e633505b-f805-4763-b329-92c8efa0a0b3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:secondParentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91f2860d-82e6-4f85-b0c6-30a4df6e0f33",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':thirdStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':thirdStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':thirdStudentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a20bb0a6-f105-431c-a347-b9ad30328a23",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:thirdStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:thirdBirthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:thirdFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:thirdLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations -Third one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "600e0f60-6f26-4f25-ba22-d01fe0aa5451",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':thirdEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7d5d9ae-db27-451c-acec-4ad5dbae3128",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2003_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:thirdStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:thirdEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:thirdEntryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4eac6ba6-8ac1-49af-bbef-3d51f98b963a",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':thirdParentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':thirdParentUniqueId',pm.environment.get('supplied:'+scenarioId+':thirdParentUniqueId'));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a8ee405-169b-4f3f-bdd1-0ed1df22ad2b",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdParentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdParentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdParentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdParentSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:thirdParentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:thirdParentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:thirdParentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:thirdParentSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7da9c1d3-8d39-4590-9634-8565578ddd65",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44223ac9-58cf-47d9-a300-6105a3be3f36",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:thirdParentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:thirdStudentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_all_parents_should_return_only_authorized_parents",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59af3823-f3a8-48fe-890b-5361cfa682a9",
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some data for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(2);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedParentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedParentUniqueIds');",
													"console.log(authorizedParentUniqueIds);",
													"",
													"pm.test(\"Should all rows match with authorizedParentUniqueIds\", () => {",
													"    const __ = require('lodash');",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, (responseItem) => {",
													"          ",
													"        pm.expect(authorizedParentUniqueIds.includes(responseItem.parentUniqueId)).to.equal(true);",
													"      });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "86464ed1-93f2-4256-aa58-0ac89f02103f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_parent_by_id_should_return_200_when_authorized",
							"item": [
								{
									"name": "Clean up Existing StudentParentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c674db6-fe22-478a-82bd-71878edfa8f0",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentParentAssociationsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all StudentParentAssociations', () => {\r",
													"\r",
													"    pm.sendRequest(StudentParentAssociationsGetRequest, function (err, StudentParentAssociations) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            StudentParentAssociations.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentParentAssociationsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentParentAssociationsDeleteRequest, function (err, StudentParentAssociations) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dadf9b34-9cb8-4205-8a60-63071a7b50b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37277495-680d-4a45-8217-01a5389c3474",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b036c64-6dad-4b73-b45b-eed9352c320a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "409fbb06-5ac3-41df-a126-edbcaf3a6a54",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "da978302-9592-4ea5-84f7-f44f38d0656b",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1111ddd2-4a99-450d-b881-4bc646c94ec8",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedParentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c14a7ed-b6c5-4832-9465-85155fac9e90",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7748e8f-ee02-4e3e-b767-0c9908351a5c",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f255381e-abf4-43a8-ac58-c7b7eb18d15a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07888ff3-3380-4624-ba8e-95dc79bb26b8",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44affd3a-2a76-4062-b127-6588b801d7d4",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ac4674e-6920-48e9-9312-e5fd0729592c",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9a8fec9b-01e5-4698-bbb1-b9e16424f6ea",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8719e6bf-90c5-4ebd-bfe0-49ce886bc47a",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondparentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondParentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondParentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':unauthorizedParentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1e93f2e8-b05a-4c77-ad2d-ec39c2eb650b",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondParentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentsexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:secondParentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:secondParentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:secondParentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondParentsexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac2dd80d-0d11-4b62-8201-fb68fcf2ead3",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5af97290-4acc-4d35-baa8-71530be41a80",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:secondParentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_parent_by_id_should_return_200_when_authorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76a2e295-d039-4ca6-b928-f2e526b85690",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "631c0633-5ba1-4d1f-bf65-aa93c2729813",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/{{known:{{scenarioId}}:authorizedParentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												"{{known:{{scenarioId}}:authorizedParentGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_parent_by_id_should_return_403_when_unauthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed7b550b-d525-4c07-bc25-e9f9d620a3ed",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "63516213-9786-4451-a3af-06b34a3589c8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/{{known:{{scenarioId}}:unauthorizedParentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												"{{known:{{scenarioId}}:unauthorizedParentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_parent_by_example_should_return_200_and_parent_when_authorized",
							"item": [
								{
									"name": "Clean up Existing StudentParentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59299b68-17e7-479d-8adc-3cf206896372",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentParentAssociationsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all StudentParentAssociations', () => {\r",
													"\r",
													"    pm.sendRequest(StudentParentAssociationsGetRequest, function (err, StudentParentAssociations) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"            StudentParentAssociations.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentParentAssociationsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentParentAssociationsDeleteRequest, function (err, StudentParentAssociations) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2a87d79f-7116-4944-8430-8b7cd9380268",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef0fe222-afb8-49ba-8bd1-6adbe7f4ce65",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c37ccdb8-eec3-4d56-acd9-7043208dc87f",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b1f38267-b341-4e9d-b6c7-36ab304c9a92",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "392e1f89-211c-45cd-bba1-3b7a1de3f726",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75621ac8-f5e2-4048-921b-cc99f7ec6a37",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "105fbd82-a1c6-433a-b58d-675613c2d6f1",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentLastSurname', 'LastName2001');",
													"pm.environment.set('supplied:'+scenarioId+':parentSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:parentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:parentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:parentSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fb6aec7-1da7-4f97-b68f-172f87257c3e",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ccf78c3-cfe8-40c2-afe8-4506806e455a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1629340-657e-4f00-84e4-35ead627f305",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e5183d21-dfec-442f-a112-41b739be996f",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "92bd2c8c-a5c0-498d-a386-c530f24718d6",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7e2c109-f06f-4a7b-8c50-8e5aafe651fd",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05a1d47d-d223-40de-9bf5-7f407399dffe",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondparentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondParentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondParentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "07960054-f0f8-41bf-bea0-e82da9ab246a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondParentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentLastSurname', 'LastName2002');",
													"pm.environment.set('supplied:'+scenarioId+':secondParentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentsexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:secondParentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:secondParentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:secondParentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondParentsexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fc292da-711f-4464-934e-c46b003d26fd",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce54ff45-7656-41b7-96ea-e2a5abad5d80",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:secondParentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Request - Parents using LastSurname for authorized item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80925ad3-cf4a-4bcc-aadd-15db15bcb4eb",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the authorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bfda579f-9f3e-478e-9985-7fdc6f1fdd96",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents?LastSurname=LastName2001",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "LastName2001"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Request - Parents using LastSurname for unauthorized item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bceb503c-a79a-4be6-a565-d405ab873f8a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8541fdc7-a318-483d-834a-ceb7208c5800",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents?LastSurname=LastName2002",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "LastName2002"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_deleting_data_for_unrelated_parent_should_fail_with_409_Conflict",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c701da35-2613-4ad0-98ce-d8b32bd8b191",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "43cb610e-65fd-48f6-88fb-f6fcf5421da0",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "587284c9-c748-45cd-83f1-825e370b8023",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6fb8ba12-7149-4d55-b4b8-d79c940bd5b3",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffa5c5ef-c925-493c-9691-2329eaa47e66",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d43473d-234c-4c36-a24f-3a208f146dc8",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:parentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:parentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:parentSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73a8f009-2764-48ed-9149-b029541d7c77",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88aa36b2-a2e4-4bf8-9306-3bce6564bc9c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_an_unassociated_parent_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e4a6056-9daa-4ea1-83f1-208768dac9a4",
												"exec": [
													"pm.test(\"Status code is 409\", () => {",
													"    pm.expect(pm.response.code).to.equal(409);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "40716643-f7e0-4dfc-802f-7795def4215b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/{{known:{{scenarioId}}:parentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												"{{known:{{scenarioId}}:parentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_associating_a_parent_not_related_to_vendors_leas_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68a0ae8c-c043-4345-9ea5-f24a99752cf7",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e185177a-4ed4-4399-8191-c09236a80e0f",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bea8e674-6fbb-4a8c-af76-12a77e6944a2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0e62dc54-9e19-4d9a-88bf-fb0d9ab8ec99",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76878996-b739-4301-a3e6-495a2aa2b1b2",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4fd4e859-b6e1-4c03-8378-d01729a03502",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:parentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:parentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:parentSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_associating_a_parent_not_related_to_vendors_leas_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d813f085-0506-4ce7-b212-d14515117e4c",
												"exec": [
													" pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54ddd298-895d-410f-bba4-db2757202bc7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ProgramGetAuthorizationTests",
					"item": [
						{
							"name": "When_getting_all_programs_should_return_only_authorized_programs",
							"item": [
								{
									"name": "Clean up Existing program records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4982f6cd-0b2b-4b80-b6a1-ce2ced8ffdaa",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let ProgramsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all programs', () => {\r",
													"\r",
													"    pm.sendRequest(ProgramsGetRequest, function (err, Programs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Programs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let ProgramsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(ProgramsDeleteRequest, function (err, programs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e5d1f015-95de-44d8-bd48-8d117afef473",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "971bbaee-a636-4327-b943-97dc6e67d56e",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':authorizedProgramIds', []);",
													"",
													"const authorizedProgramIds = pm.environment.get('known:'+scenarioId+':authorizedProgramIds');",
													"authorizedProgramIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedProgramIds', authorizedProgramIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "274d102d-3e0e-425a-add6-599ff10bc007",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4596dc6a-08d1-452c-a2b1-c78121dae209",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedProgramIds = pm.environment.get('known:'+scenarioId+':authorizedProgramIds');",
													"",
													"authorizedProgramIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedProgramIds', authorizedProgramIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "314cd4bb-6183-4c64-8ae8-30c924fbf680",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86db6442-b9f1-453a-87e3-a664bb2fb24a",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "36876cc1-7956-46ac-96b5-45e29949a2e4",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':thirdProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2003}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:thirdProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:thirdProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:thirdProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_all_programs_should_return_only_authorized_programs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9797863-794e-415e-8bbd-dd078c2115d1",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedProgramIds = pm.environment.get('known:'+scenarioId+':authorizedProgramIds');",
													"console.log(authorizedProgramIds);",
													"",
													"pm.test(\"Should return the same number of items as are known to be authorized programs\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(authorizedProgramIds.length);",
													"});",
													"",
													"pm.test(\"Should only return items in the set of programs known to be authorized\", () => {",
													"    const __ = require('lodash');",
													"    const responseItems = pm.response.json();",
													"     ",
													"    __.each(responseItems, (responseItem) => {",
													"        console.log(responseItem.id);",
													"        pm.expect(authorizedProgramIds.includes(responseItem.id)).to.equal(true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d596e9ae-2488-4458-aaa5-53ba75d4f76d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_program_by_example_should_return_200_and_program_when_authorized",
							"item": [
								{
									"name": "Clean up Existing program records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0500ac03-0db5-4213-82ad-a089a2461aa1",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let ProgramsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all programs', () => {\r",
													"\r",
													"    pm.sendRequest(ProgramsGetRequest, function (err, Programs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Programs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let ProgramsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(ProgramsDeleteRequest, function (err, programs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a6e59917-29c3-4986-acce-533e6414085b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caae8085-f0ac-4cb3-a5be-e64ed42366a0",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':authorizedProgram',pm.environment.get('supplied:'+scenarioId+':programName'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f4a07d09-9067-4dae-bc0d-8b99c97841ce",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "592bba59-0128-433b-867b-5a8aebcb5a4c",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':unauthorizedProgram',pm.environment.get('supplied:'+scenarioId+':secondProgramName'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "169eb04a-4b6b-438d-b023-f378e423ca98",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by Authorized ProgramName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93f71d73-09a9-41a7-b9ea-bb85e8dc73fe",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the authorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e688aa9f-05d7-4b1c-ac1a-19f384f2db56",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/?programName={{known:{{scenarioId}}:authorizedProgram}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												""
											],
											"query": [
												{
													"key": "programName",
													"value": "{{known:{{scenarioId}}:authorizedProgram}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by unAuthorized ProgramName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd0954d0-5900-4384-ad8b-4124c89804aa",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized program\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28083373-f695-4707-8c75-087c4cc144fe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/?programName={{known:{{scenarioId}}:unauthorizedProgram}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												""
											],
											"query": [
												{
													"key": "programName",
													"value": "{{known:{{scenarioId}}:unauthorizedProgram}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_program_by_id_should_return_200_for_authorized_resource",
							"item": [
								{
									"name": "Clean up Existing program records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0265f050-a449-47fe-a9e1-4983fed4c5ef",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let ProgramsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all programs', () => {\r",
													"\r",
													"    pm.sendRequest(ProgramsGetRequest, function (err, Programs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Programs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let ProgramsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(ProgramsDeleteRequest, function (err, programs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "81c3cbcb-85e7-4025-aba5-e125ef6653e7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79368b07-bc2d-4cae-ad9a-bf26eba5f60b",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':authorizedProgramGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7cc1ce46-d083-4916-ae2b-9da24f6ac98e",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07b846b5-7e36-40a7-8e34-31d38698ca53",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':UnauthorizedProgramGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26e4eeb3-443a-41a8-a9e3-bdac7d5378a1",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by Authorized ProgramGuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62989a2a-4e49-4d9f-85da-82f5229283c0",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9ae82c1c-0628-4ebc-ba3c-c74b7656b39b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:authorizedProgramGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												"{{known:{{scenarioId}}:authorizedProgramGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by unAuthorized ProgramGuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b1096eb-f7fa-43bd-8d95-ba61a46e2336",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "029dfe32-1bb4-4498-9227-bebb77dd2186",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:UnauthorizedProgramGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												"{{known:{{scenarioId}}:UnauthorizedProgramGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_program_by_key_should_return_200_for_authorized_resource",
							"item": [
								{
									"name": "Clean up Existing program records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88f8bb91-8a22-4872-bb15-cd7fb7e50c6a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let ProgramsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all programs', () => {\r",
													"\r",
													"    pm.sendRequest(ProgramsGetRequest, function (err, Programs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Programs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let ProgramsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(ProgramsDeleteRequest, function (err, programs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dfddc018-4f20-4b77-8ce1-4971a0a1360f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82664cbc-5f8c-454b-819d-97836a15f848",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':authorizedProgram',pm.environment.get('supplied:'+scenarioId+':programName'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b409e8d1-0ec4-4c92-b906-9a05e7b48d04",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6662a93f-c5e1-4b8a-bb99-228326827c07",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':unauthorizedProgram',pm.environment.get('supplied:'+scenarioId+':secondProgramName'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1db13c9-6bfe-43cd-a3a2-49acea20cfd3",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by Authorized EducationOrgranizationId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72f6bc8c-2d5f-4511-adf6-e1b90a7d3232",
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test(\"Should return exactly 1 item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "76f0c14b-76eb-4c6e-9263-51b9a4ef3513",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?EducationOrganizationId={{known:localEducationAgencyId_2001}}&Type=uri://ed-fi.org/ProgramTypeDescriptor&Name={{known:{{scenarioId}}:authorizedProgram}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "EducationOrganizationId",
													"value": "{{known:localEducationAgencyId_2001}}"
												},
												{
													"key": "Type",
													"value": "uri://ed-fi.org/ProgramTypeDescriptor"
												},
												{
													"key": "Name",
													"value": "{{known:{{scenarioId}}:authorizedProgram}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by Unauthorized EducationOrgranizationId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f94dc3d1-6d1e-43aa-9fb3-4791734bec6f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5bd5731e-c45d-421a-8727-4d9dbeec1a5b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?EducationOrganizationId={{known:localEducationAgencyId_2002}}&Type=uri://ed-fi.org/ProgramTypeDescriptor&Name={{known:{{scenarioId}}:unauthorizedProgram}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "EducationOrganizationId",
													"value": "{{known:localEducationAgencyId_2002}}"
												},
												{
													"key": "Type",
													"value": "uri://ed-fi.org/ProgramTypeDescriptor"
												},
												{
													"key": "Name",
													"value": "{{known:{{scenarioId}}:unauthorizedProgram}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "StaffAuthorizationTests",
					"item": [
						{
							"name": "When_associating_a_staff_not_related_to_vendors_leas_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "034cef78-a09a-48cf-b1bf-ec4afa982df2",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec73c1f0-8d5d-445b-8cec-ed58e4b5eaf1",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_associating_a_staff_not_related_to_vendors_leas_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "410a5cc5-d0d3-49d6-badc-7684d2966415",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3d318440-d7f6-46da-aefa-778b6cd703fc",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_updating_an_unassociated_staff_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e417d096-fef2-4d55-b402-a4c4319b3919",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "909af93a-5d79-4231-94e1-b9fb370c2d47",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9eb4428-d44e-4211-b15d-903fc30d999d",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75b56169-c538-49d3-bd3b-f4151b0632dd",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_updating_an_unassociated_staff_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39e9c801-fbbe-414e-997d-10877231e221",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "338fac87-d5a3-4391-ba26-49ab67996ae3",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':updatedLastSurname', \"gotmarried\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2002}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"lastSurname\":\"{{supplied:{{scenarioId}}:updatedLastSurname}}\"\r\n }\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:staffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:staffGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_staffs_should_return_only_authorized_staffs",
							"item": [
								{
									"name": "Clean up Existing StaffEducationOrganizationEmploymentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "165be72c-6a73-4755-91ca-66ddf13ba915",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StaffsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all staffs', () => {\r",
													"\r",
													"    pm.sendRequest(StaffsGetRequest, function (err, Staffs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Staffs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StaffsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StaffsDeleteRequest, function (err, Staffs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3d0a26d-b10d-45ab-b688-e3210300ab4d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4462250-ae5a-48bc-88bc-61407056c1e3",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedStaffUniqueIds',[]);",
													"const authorizedStaffUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedStaffUniqueIds');",
													"authorizedStaffUniqueIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedStaffUniqueIds',authorizedStaffUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "09624214-c1ff-4fb3-9940-3d357753df31",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2172415a-f84d-41a6-9591-ac8e08063cf3",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "91685dda-3b37-47f5-91c8-cbac8fad8332",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request-Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "733ba4be-69aa-4a1e-8751-019d8535f8ea",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStaffUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStaffUniqueId'));",
													"",
													"",
													"const authorizedStaffUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedStaffUniqueIds');",
													"authorizedStaffUniqueIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedStaffUniqueIds',authorizedStaffUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "efd13bf4-f7d0-40ce-88a0-88c0b566763b",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStaffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:secondStaffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3eb1cb83-bc22-44c7-b13a-b82bef3080b9",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8b407564-94b7-4157-8380-d96b8a240edc",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondHireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEmploymentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:secondStaffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:secondEmploymentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:secondHireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request-Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b54ac733-6e5d-4d1f-beaf-5c923b7315ce",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':thirdStaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':thirdStaffUniqueId',pm.environment.get('supplied:'+scenarioId+':thirdStaffUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "051973c7-8619-47e3-98c9-fd7fc41423fc",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdStaffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:thirdStaffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:thirdFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:thirdLastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:thirdSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61862519-db38-4180-bb47-47aeb2ab475e",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "64771534-6932-4e03-8e1c-5c3f8f56f1d9",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdHireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':thirdEmploymentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2003}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:thirdStaffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:thirdEmploymentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:thirdHireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_all_staffs_should_return_only_authorized_staffs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a54c744b-1aaa-49f1-a2ca-ba1b87652f74",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedStaffIds = pm.environment.get('known:'+scenarioId+':authorizedStaffUniqueIds');",
													"console.log(authorizedStaffIds);",
													"",
													"pm.test(\"Should return the same number of items as are known to be authorized staff\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(authorizedStaffIds.length);",
													"});",
													"",
													"pm.test(\"Should only return items in the set of staff known to be authorized\", () => {",
													"    const __ = require('lodash');",
													"    const responseItems = pm.response.json();",
													"     ",
													"    __.each(responseItems, (responseItem) => {",
													"        console.log(responseItem.id);",
													"        pm.expect(authorizedStaffIds.includes(responseItem.id)).to.equal(true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d1adbbaa-c089-4cf0-be5e-447328370126",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_staff_by_example_should_return_200_and_staff_when_authorized",
							"item": [
								{
									"name": "Clean up Existing StaffEducationOrganizationEmploymentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6b2c7af-1b4e-4d18-b9f6-fcf1c4ee94bd",
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"let StaffsGetRequest = {",
													"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations\",",
													"  method:'GET',",
													"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken_2001_2002_2003\"),",
													"  body: {",
													"  }",
													"};",
													"",
													"",
													"",
													"pm.test('Delete all staffs',  () => {",
													"    ",
													"    pm.sendRequest(StaffsGetRequest, function (err, Staffs) {",
													"    if (err) {",
													"        console.log(err);",
													"    } else {",
													"    ",
													"     Staffs.json().forEach(responseItem =>  {",
													"                                ",
													"                                console.log(responseItem.id);",
													"      ",
													"                              let StaffsDeleteRequest = {",
													"                                                        url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations/\"+responseItem.id,",
													"                                                        method:'DELETE',",
													"                                                        header:'Authorization:bearer '+pm.environment.get(\"AccessToken_2001_2002_2003\"),",
													"                                                    body: {",
													"                                                           }",
													"                              };  ",
													"                            ",
													"                            ",
													"                             pm.sendRequest(StaffsDeleteRequest, function (err, Staffs) {",
													"                                  if (err) {",
													"                                       console.log(err);",
													"                                    } else {",
													"                                }",
													"                                 ",
													"                             });",
													"    });",
													"",
													"      ",
													"",
													"    }",
													"    });",
													"    ",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "badfdf88-50bf-40c4-8e39-e01fe186c6eb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f5afe2b-3ef5-4548-ad54-4a86b8037edf",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedLastSurname',pm.environment.get('supplied:'+scenarioId+':lastSurname'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41bf5fae-3337-4292-89c7-af890acf593a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b14063a2-524e-4b24-b004-49547a6c76f3",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6daac1d4-4d19-4b2a-b277-34192f74c301",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request-Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42457618-2523-4064-bb79-2edfa6e1cc9a",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStaffUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStaffUniqueId'));",
													"",
													"",
													"pm.environment.set('known:'+scenarioId+':unauthorizedLastSurname',pm.environment.get('supplied:'+scenarioId+':secondLastSurname'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eec75fe5-2ac4-4299-9dd3-e1389684a5f1",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStaffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:secondStaffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d049955-294a-46fc-880d-02b590f900fc",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "905db208-9f8d-4ece-b74f-1cbd8d3a7455",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondHireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEmploymentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:secondStaffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:secondEmploymentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:secondHireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Staffs by Authorized Lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5807493-9e87-463f-b883-a244cadfb3a3",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the authorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c054a06c-bffa-4c6d-a617-c989a04aab05",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/?LastSurname={{known:{{scenarioId}}:authorizedLastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												""
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "{{known:{{scenarioId}}:authorizedLastSurname}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Staffs by Unauthorized Lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "954be8f5-73ba-424a-b496-516f6ea222c1",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a9744e5c-ef53-4ae8-85d0-bc081b283642",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/?LastSurname={{known:{{scenarioId}}:unauthorizedLastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												""
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "{{known:{{scenarioId}}:unauthorizedLastSurname}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_staff_by_id_should_return_200_when_authorized",
							"item": [
								{
									"name": "Clean up Existing StaffEducationOrganizationEmploymentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d43a4b51-a7b8-49c9-b9b6-70766fb8d823",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StaffsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all staffs', () => {\r",
													"\r",
													"    pm.sendRequest(StaffsGetRequest, function (err, Staffs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Staffs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StaffsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StaffsDeleteRequest, function (err, Staffs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "844acae8-5dca-4112-b2b3-5d3c3c50ba08",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa3ffb76-0fe4-46b8-b49e-6c95df1a4b06",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':authorizedstaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5be5f711-f004-42eb-a085-50c750cd5770",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8545c1aa-3087-4eae-a11f-b93f952118a6",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "885b610c-063f-42ed-9aaf-2d06bda2bfaf",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request-Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43661c5b-332d-4545-b5ce-17f05d5d8f82",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStaffUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStaffUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':unauthorizedstaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "09bba5f2-3f29-44c5-95b6-b85ac58646ae",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStaffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:secondStaffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24dc3ce3-69cb-48b3-bbc0-e5d8974867cf",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8032c258-f555-4834-9137-ee79a101cdb6",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondHireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEmploymentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:secondStaffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:secondEmploymentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:secondHireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Staffs by Authorized StaffGuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fd215d9-7d43-4a8a-b963-ee68fc2e4181",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b6a1309-a915-45f8-8e4c-264082b2b271",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:authorizedstaffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:authorizedstaffGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Staffs by Unauthorized StaffGuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04830573-5bce-4ade-a433-2fb35184dcb1",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e4fd5e26-18eb-4a2e-bab3-3c52900c2ab8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:unauthorizedstaffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:unauthorizedstaffGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "StudentAuthorizationTests",
					"item": [
						{
							"name": "When_deleting_unrelated_student_should_fail_with_409_Conflict",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a77281c-be7b-4f65-a5fa-08513463f74d",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3202ec24-8829-439f-9b78-618d07f71a5e",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Delete Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1eb3732b-557a-4eb7-a2bc-3fa5e8cd46a8",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eedc60a5-f19d-4f62-9b45-55ec00593012",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId1}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "When_deleting_unrelated_student_should_fail_with_409_Conflict",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "972a5ad7-fad5-4835-8678-7e08c1bd4dce",
												"exec": [
													"pm.test(\"Status code is 409\", () => {",
													"    pm.expect(pm.response.code).to.equal(409);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ffdaaf0b-411d-4d31-8527-da2b8e165600",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:{{scenarioId}}:studentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_updating_an_unassociated_student_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcb7a92b-c92d-4d11-bf37-408f2b55eca0",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78b82659-7d5e-4fa6-8f8d-d42359e3bb88",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Delete Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4dd71495-3353-4a17-8022-d495cd622da2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0afbf509-413a-429e-a0e8-e89adbc130a7",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId1}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "When_updating_an_unassociated_student_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "793606a7-d0e2-4889-950f-4286dd7e20e4",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a68b53a4-258d-4408-a885-b7dff7af4b09",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':updatedLastSurname', \"GotMarried\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:updatedLastSurname}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:{{scenarioId}}:studentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_students_should_return_only_authorized_students",
							"item": [
								{
									"name": "Clean up Existing studentsrecords",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73c8db2b-5bfc-49c4-8069-138446326e39",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all students', () => {\r",
													"\r",
													"    pm.sendRequest(StudentsGetRequest, function (err, Students) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Students.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentsDeleteRequest, function (err, students) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b20c2726-da63-46a8-a41f-3540c727bb42",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b89d93f-dd67-47e6-acdb-d01fa1df651f",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedStudentUniqueIds',[]);",
													"const authorizedStudentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedStudentUniqueIds');",
													"authorizedStudentUniqueIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedStudentUniqueIds',authorizedStudentUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f8119f53-063f-4b2a-9f22-2698bc3d731a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2de75c1d-e664-42c4-a5b5-b23b92a57a0c",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d726dc0a-b902-4b13-9309-ae2da350cadd",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e527396-9824-4d2c-9f05-e72308dd3480",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"",
													"const authorizedStudentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedStudentUniqueIds');",
													"authorizedStudentUniqueIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedStudentUniqueIds',authorizedStudentUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e0909155-7884-44a5-8276-53d9658118ed",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5d3b8ae8-7d34-430a-bb1d-e8a951c1addf",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2cf56a20-b75a-400e-b502-fea547178f58",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba7b1aa8-fb17-455f-8945-68a0e1ec4aac",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':thirdStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':thirdStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2cbb3c13-5e3e-4e52-871c-ea22c543e45d",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:thirdStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:thirdBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:thirdFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:thirdLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data -Third one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d1ae9f9e-2ceb-475b-818d-4afe2943ff32",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':thirdEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8b924904-b868-43e0-b6d4-cea9cc5ce709",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2003_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:thirdStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:thirdEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:thirdEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "When_getting_all_students_should_return_only_authorized_students",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "968b47ea-4038-4636-bda7-727f47dbb440",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d0955f20-f8dd-4ad8-a70e-7fd0c00fe0ec",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedStudentIds = pm.environment.get('known:'+scenarioId+':authorizedStudentUniqueIds');",
													"console.log(authorizedStudentIds);",
													"",
													"pm.test(\"Should return the same number of items as are in the set of known authorized items\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(authorizedStudentIds.length);",
													"});",
													"",
													"pm.test(\"Should only return items that are in the set of known authorized students\", () => {",
													"    const __ = require('lodash');",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, (responseItem) => {",
													"          console.log(responseItem.id);",
													"        pm.expect(authorizedStudentIds.includes(responseItem.id)).to.equal(true);",
													"      });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_student_by_example_should_return_200_and_student_when_authorized",
							"item": [
								{
									"name": "Clean up Existing studentsrecords",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cf8938c-febb-4588-9684-0ea06becf506",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all students', () => {\r",
													"\r",
													"    pm.sendRequest(StudentsGetRequest, function (err, Students) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Students.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentsDeleteRequest, function (err, students) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "43cca3c3-12cd-4bd7-8971-3c411de73537",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c8725b0-e034-44d0-b948-400f094ac6df",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':AuthorizedlastSurname',pm.environment.get('supplied:'+scenarioId+':lastSurname'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ebc730e9-29ba-4f67-b1dd-61193b8f6cfb",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "29c48480-c9ab-49df-8b70-80cb87811670",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b918b493-644b-488e-8150-af7c249b481f",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b672a48-9a3d-452c-a110-cdfaba888a5a",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':unauthorizedlastSurname',pm.environment.get('supplied:'+scenarioId+':secondLastSurname'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bd1915b1-a6ba-40c6-b7a5-843898e2d864",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b4ae82e-3abd-464b-9662-4ca632b9ab9e",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bbd1d7e1-0a3c-4cae-a16e-7e4da938344d",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get Students by Authorized Last Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6ff812e0-a1b4-4f6b-9bee-e65961fb3ec9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b341a095-28cb-4161-8d88-479d32b35515",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the authorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students?lastSurname={{known:{{scenarioId}}:AuthorizedlastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students"
											],
											"query": [
												{
													"key": "lastSurname",
													"value": "{{known:{{scenarioId}}:AuthorizedlastSurname}}"
												}
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get Students by Unauthorized Last Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "76c7416c-0a00-419c-9002-c9d790031517",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4122467a-74e2-4800-b230-8c02232e89d0",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students?lastSurname={{known:{{scenarioId}}:unauthorizedlastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students"
											],
											"query": [
												{
													"key": "lastSurname",
													"value": "{{known:{{scenarioId}}:unauthorizedlastSurname}}"
												}
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_student_by_id_should_return_200_when_authorized",
							"item": [
								{
									"name": "Clean up Existing studentsrecords",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77ff2721-cb0c-4a61-956c-0d2ede3e9e81",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all students', () => {\r",
													"\r",
													"    pm.sendRequest(StudentsGetRequest, function (err, Students) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Students.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentsDeleteRequest, function (err, students) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79731f2c-42ae-4a10-a376-ef962b5edd13",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6d3ff7f-7fac-4073-9ac0-130beea58c58",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':AuthorizedStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2fe6bdb1-fa74-4434-9f73-37d8d3747052",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0992f606-b9c2-4fea-9db7-b1808d250e92",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f8f7a388-496b-44b6-8941-5e8f939902c1",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12cfdd89-737e-4544-b306-cfda0e2d2bc5",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':unAuthorizedStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92587521-64aa-46aa-9764-e21762e0f7f3",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "01b31d41-d5cd-4067-863d-008053573128",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe4ffd42-aee4-4caa-80a2-d4ed54adad93",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get Students by Authorized Student Guid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "267c24dc-b624-4017-8978-ce28e9b562e1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3e1e87b4-3897-4dbc-ae9f-94f904ce19b8",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:AuthorizedStudentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students",
												"{{known:{{scenarioId}}:AuthorizedStudentGuid}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get Students by Unauthorized Student Guid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9e586ad0-b02d-4b2e-87cf-cd05b7593889",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e706bb18-7d5c-41f6-ae83-4405a901da8b",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:unAuthorizedStudentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students",
												"{{known:{{scenarioId}}:unAuthorizedStudentGuid}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up Test Data",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6be48dcc-26d4-4631-9f96-0b8696dd3757",
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"const keys = __.keys(pm.environment.toObject());\r",
											"console.log('Initial keys: ' + JSON.stringify(keys));\r",
											"\r",
											"const keysToRemove = __.filter(keys, x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'));\r",
											"\r",
											"__.each(keysToRemove, k => pm.environment.unset(k));\r",
											"\r",
											"const remainingKeys = __.keys(pm.environment.toObject());\r",
											"console.log('Remaining keys:' + JSON.stringify(remainingKeys));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f8398d6a-8488-47ef-a007-0a194466b26f",
				"type": "text/javascript",
				"exec": [
					"CreateAccessToken(\"TokenExpiry_255901\",",
					"                  \"AccessToken_255901\",",
					"                  \"ApiKey_255901\", ",
					"                  \"ApiSecret_255901\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_Other_Namespace\",",
					"                  \"AccessToken_Other_Namespace\",",
					"                  \"ApiKey_Other_Namespace\", ",
					"                  \"ApiSecret_Other_Namespace\")",
					"                  ",
					"",
					"CreateAccessToken(\"TokenExpiry_255901001\",",
					"                  \"AccessToken_255901001\",",
					"                  \"ApiKey_255901001\", ",
					"                  \"ApiSecret_255901001\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_255901044\",",
					"                  \"AccessToken_255901044\",",
					"                  \"ApiKey_255901044\", ",
					"                  \"ApiSecret_255901044\")",
					"",
					"CreateAccessToken(\"TokenExpiry_2001\",",
					"                  \"AccessToken_2001\",",
					"                  \"ApiKey_2001\", ",
					"                  \"ApiSecret_2001\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_2002\",",
					"                  \"AccessToken_2002\",",
					"                  \"ApiKey_2002\", ",
					"                  \"ApiSecret_2002\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_1\",",
					"                  \"AccessToken_1\",",
					"                  \"ApiKey_1\", ",
					"                  \"ApiSecret_1\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_2001_2002_2003\",",
					"                  \"AccessToken_2001_2002_2003\",",
					"                  \"ApiKey_2001_2002_2003\", ",
					"                  \"ApiSecret_2001_2002_2003\")",
					"CreateAccessToken(\"TokenExpiry_2001_2002\",",
					"                  \"AccessToken_2001_2002\",",
					"                  \"ApiKey_2001_2002\", ",
					"                  \"ApiSecret_2001_2002\")",
					"",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry,AccessToken,ApiKey, ApiSecret)",
					"                  {",
					"let tokenExpiration = pm.environment.get(TokenExpiry);",
					"let currentToken = pm.environment.get(AccessToken);",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(AccessToken, newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cf1d3e86-f004-4812-a998-68ed9ca0b7a5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}