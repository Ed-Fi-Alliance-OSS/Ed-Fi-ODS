{
	"info": {
		"_postman_id": "919fbd13-24f9-42a4-94f1-79fdb5ec3e94",
		"name": "Ed-Fi ODS/API Integration Test Suite AuthorizationTests Multiple Key/Secrets",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization Tests",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Initialize Education Organization Ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "112271e1-3ff0-4379-8cab-170739feb315",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "944aaba2-acfc-4474-9141-b367686109a6",
										"exec": [
											"pm.environment.set('known:schoolId1',255901001);\r",
											"pm.environment.set('known:schoolId2',255901044);\r",
											"pm.environment.set('known:schoolId_2001_01',200101);\r",
											"pm.environment.set('known:schoolId_2002_01',200201);\r",
											"pm.environment.set('known:schoolId_2003_01',200301);\r",
											"\r",
											"pm.environment.set('known:localEducationAgencyId_2001', 2001);\r",
											"pm.environment.set('known:localEducationAgencyId_2002', 2002);\r",
											"pm.environment.set('known:localEducationAgencyId_2003', 2003);\r",
											"pm.environment.set('known:stateEducationAgencyId', 31);\r",
											"\r",
											"pm.environment.set('supplied:edfiNamespace', \"uri://ed-fi.org/\");\r",
											"pm.environment.set('supplied:otherNamespace', \"uri://other.org/\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize stateEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId', createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'State-31');\r",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#State Education Agency\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"stateEducationAgencyId\":\"{{known:stateEducationAgencyId}}\",\r\n  \"nameOfInstitution\":\"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi//stateEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"",
										"stateEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize localEducationAgency Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-2001');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2001}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200101');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId_2001_01}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2001}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize localEducationAgency Data for Request -Second one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-2002');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2002}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request -Second one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200201');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId_2002_01}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2002}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize localEducationAgency Data for Request -Third one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'LEA-2003');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyCategoryDescriptor', \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2003}}\"\r\n  ,\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\":\"{{supplied:{{scenarioId}}:localEducationAgencyCategoryDescriptor}}\",\r\n  \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"shortNameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"localEducationAgencies"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initialize School Data for Request -Third one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-200301');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolCategoryDescriptor', \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{known:schoolId_2003_01}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId_2003}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"{{supplied:{{scenarioId}}:schoolCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\",\r\n  \"shortNameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\"\r\n\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "AssessmentAuthorizationTests",
					"item": [
						{
							"name": "When_getting_all_assessments_with_assessment_vendor_API_client",
							"item": [
								{
									"name": "Should_return_only_vendor_specific_assessments",
									"item": [
										{
											"name": "Create Assessment using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:edfiNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:edfiAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentIdentifier', \"other\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:otherNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:otherAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:otherAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Should return some data for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.be.at.least(1);",
															"});",
															"",
															"",
															"pm.test(\"Should only return items with other.org namespace\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.namespace).to.equal(pm.environment.get('supplied:otherNamespace'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_assessmentItems_with_assessment_vendor_API_client",
							"item": [
								{
									"name": "Should_return_only_vendor_specific_assessment_items",
									"item": [
										{
											"name": "Create Assessment using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:edfiNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:edfiAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create AssessmentItem using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':edfiIdentificationCode', \"edfi\"+ newGuid());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:edfiNamespace}}\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n\t\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessmentItems",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessmentItems"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"    pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentIdentifier', \"other\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:otherNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:otherAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:otherAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create AssessmentItem using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':otherIdentificationCode', \"Other\"+ newGuid());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:otherNamespace}}\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:otherIdentificationCode}}\"\r\n\t\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessmentItems",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessmentItems"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get AssessmentItem using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Should return some data for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.be.at.least(1);",
															"});",
															"",
															"",
															"pm.test(\"Should only return items with other.org namespace\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.assessmentReference.namespace).to.equal(pm.environment.get('supplied:otherNamespace'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessmentItems",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessmentItems"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_objectiveAsesssments_with_vendor_API_client",
							"item": [
								{
									"name": "Should_return_only_vendor_specific_objectiveAssessments",
									"item": [
										{
											"name": "Create Assessment using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:edfiNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:edfiAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create objectiveAssessments using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':edfiIdentificationCode', \"TestAId\"+ newGuid());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:edfiNamespace}}\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n\t\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"objectiveAssessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentIdentifier', \"other\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:otherNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:otherAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:otherAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create objectiveAssessments using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':otherIdentificationCode', \"Other\"+ newGuid());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:otherNamespace}}\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:otherIdentificationCode}}\"\r\n\t\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"objectiveAssessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ObjectiveAssessments using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Should return some data for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.be.at.least(1);",
															"});",
															"",
															"",
															"pm.test(\"Should only return items with other.org namespace\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.assessmentReference.namespace).to.equal(pm.environment.get('supplied:otherNamespace'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"objectiveAssessments"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_studentAssessments_with_vendor_API_client",
							"item": [
								{
									"name": "Should_return_only_vendor_specific_studentAssessments",
									"item": [
										{
											"name": "Create Assessment using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:edfiNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:edfiAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Student using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':edfistudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':edfiStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':edfiStudentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':edfiStudentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiLastSurname',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':edfiFirstName',newGuid());",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiBirthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:edfiBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:edfiFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:edfiLastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create studentAssessments using ed-fi.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':edfiStudentAssessmentIdentifier', \"Edfi\"+ newGuid());",
															"const moment = require('moment');",
															"let administrationDate=new Date();",
															"administrationDate = administrationDate.addYears(-20);",
															"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':edfiAdministrationDate',administrationDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:edfiNamespace}}\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\"\r\n\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:edfiAdministrationDate}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Assessment using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentIdentifier', \"other\" + newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherAcademicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAssessmentTitle', \"Assessment\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:otherNamespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:otherAssessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:otherAcademicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"assessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Student using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':otherstudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':otherStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':otherStudentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':otherStudentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherLastSurname',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':otherFirstName',newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':otherBirthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:otherStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:otherBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:otherFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:otherLastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create studentAssessments using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':otherStudentAssessmentIdentifier', \"Other\"+ newGuid());",
															"const moment = require('moment');",
															"let administrationDate=new Date();",
															"administrationDate = administrationDate.addYears(-20);",
															"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':otherAdministrationDate',administrationDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"{{supplied:otherNamespace}}\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:otherStudentUniqueId}}\"\r\n\t\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:otherStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:otherAdministrationDate}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get StudentAssessments using other.org namespace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"pm.test(\"Should return some data for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.be.at.least(1);",
															"});",
															"",
															"",
															"pm.test(\"Should return row match with other.org namespace\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.assessmentReference.namespace).to.equal(pm.environment.get('supplied:otherNamespace'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GetAllAuthorizationTests",
					"item": [
						{
							"name": "When_performing_a_get_all_request_against_a_resource_for_which_the_same_student_exists_in_multiple_records_with_different_schoolIds",
							"item": [
								{
									"name": "Create Student using First School",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname',newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName',newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create StudentSchoolAssociations Data using First School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId1}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Create RestraintEvents using First School",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"    pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"",
													"pm.environment.set('supplied:'+scenarioId+':restraintEventIdentifier',newGuid().substring(0,20));",
													"",
													"const moment = require('moment');",
													"let eventDate=new Date();",
													"eventDate = eventDate.addYears(-20);",
													"eventDate= moment(eventDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':eventDate',eventDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"schoolReference\":\r\n\t{\r\n\t\t\"schoolId\":\"{{known:schoolId1}}\"\r\n\t\r\n\t},\r\n\t\"studentReference\":\r\n\t{\r\n\t\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:studentUniqueId}}\"\r\n\t},\r\n\t\t\r\n\t\"restraintEventIdentifier\":\"{{supplied:{{scenarioId}}:restraintEventIdentifier}}\",\r\n\t \"eventDate\":\"{{supplied:{{scenarioId}}:eventDate}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/RestraintEvents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"RestraintEvents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create StudentSchoolAssociations Data using Second School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondSchoolEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondSchoolEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901044}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId2}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondSchoolEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondSchoolEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Create RestraintEvents using Second School",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"    pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondSchoolRestraintEventIdentifier',newGuid().substring(0,20));",
													"",
													"const moment = require('moment');",
													"let eventDate=new Date();",
													"eventDate = eventDate.addYears(-20);",
													"eventDate= moment(eventDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondSchoolEventDate',eventDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901044}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"schoolReference\":\r\n\t{\r\n\t\t\"schoolId\":\"{{known:schoolId2}}\"\r\n\t},\r\n\t\"studentReference\":\r\n\t{\r\n\t\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:studentUniqueId}}\"\r\n\t},\r\n\t\t\r\n\t\"restraintEventIdentifier\":\"{{supplied:{{scenarioId}}:secondSchoolRestraintEventIdentifier}}\",\r\n\t \"eventDate\":\"{{supplied:{{scenarioId}}:secondSchoolEventDate}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/RestraintEvents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"RestraintEvents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  RestraintEvents using First School",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return exactly 1 item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"Should only return items related to the school associated with the API client\", () => {",
													"    const __ = require('lodash');",
													"     const responseItems = pm.response.json();",
													"     const scenarioId = pm.environment.get('scenarioId');",
													"      __.each(responseItems, (responseItem) => {",
													"        pm.expect(responseItem.schoolReference.schoolId).to.equal(pm.environment.get('known:schoolId1'));",
													"      });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"",
													"pm.environment.set('supplied:'+scenarioId+':restraintEventIdentifier',newGuid().substring(0,20));",
													"",
													"const moment = require('moment');",
													"let eventDate=new Date();",
													"eventDate = eventDate.addYears(-20);",
													"eventDate= moment(eventDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':eventDate',eventDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/RestraintEvents?studentUniqueId={{supplied:{{scenarioId}}:studentUniqueId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"RestraintEvents"
											],
											"query": [
												{
													"key": "studentUniqueId",
													"value": "{{supplied:{{scenarioId}}:studentUniqueId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ParentAuthorizationTests",
					"item": [
						{
							"name": "When_updating_an_unassociated_parent_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_updating_an_unassociated_parent_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', \"gotmarried\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2002}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n }\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/{{known:{{scenarioId}}:parentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												"{{known:{{scenarioId}}:parentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_parents_should_return_only_authorized_parents",
							"item": [
								{
									"name": "Clean up Existing StudentParentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentParentAssociationsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"\r",
													"pm.test('Delete all StudentParentAssociations', () => {\r",
													"\r",
													"    pm.sendRequest(StudentParentAssociationsGetRequest, function (err, StudentParentAssociations) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            StudentParentAssociations.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentParentAssociationsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentParentAssociationsDeleteRequest, function (err, StudentParentAssociations) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedParentUniqueIds',[]);",
													"const authorizedParentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedParentUniqueIds');",
													"authorizedParentUniqueIds.push(pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':authorizedParentUniqueIds',authorizedParentUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondparentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondParentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondParentUniqueId'));",
													"",
													"const authorizedParentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedParentUniqueIds');",
													"authorizedParentUniqueIds.push(pm.environment.get('supplied:'+scenarioId+':secondParentUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':authorizedParentUniqueIds',authorizedParentUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondParentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentsexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:secondParentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:secondParentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:secondParentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondParentsexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:secondParentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':thirdStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':thirdStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':thirdStudentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:thirdStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:thirdBirthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:thirdFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:thirdLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations -Third one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':thirdEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2003_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:thirdStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:thirdEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:thirdEntryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':thirdParentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':thirdParentUniqueId',pm.environment.get('supplied:'+scenarioId+':thirdParentUniqueId'));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdParentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdParentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdParentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdParentSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:thirdParentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:thirdParentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:thirdParentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:thirdParentSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:thirdParentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:thirdStudentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_all_parents_should_return_only_authorized_parents",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some data for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(2);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedParentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedParentUniqueIds');",
													"console.log(authorizedParentUniqueIds);",
													"",
													"pm.test(\"Should all rows match with authorizedParentUniqueIds\", () => {",
													"    const __ = require('lodash');",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, (responseItem) => {",
													"          ",
													"        pm.expect(authorizedParentUniqueIds.includes(responseItem.parentUniqueId)).to.equal(true);",
													"      });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_parent_by_id_should_return_200_when_authorized",
							"item": [
								{
									"name": "Clean up Existing StudentParentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentParentAssociationsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all StudentParentAssociations', () => {\r",
													"\r",
													"    pm.sendRequest(StudentParentAssociationsGetRequest, function (err, StudentParentAssociations) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            StudentParentAssociations.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentParentAssociationsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentParentAssociationsDeleteRequest, function (err, StudentParentAssociations) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedParentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:firstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondparentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondParentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondParentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':unauthorizedParentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondParentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentsexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:secondParentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:secondParentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:secondParentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondParentsexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:secondParentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_parent_by_id_should_return_200_when_authorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/{{known:{{scenarioId}}:authorizedParentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												"{{known:{{scenarioId}}:authorizedParentGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_parent_by_id_should_return_403_when_unauthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/{{known:{{scenarioId}}:unauthorizedParentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												"{{known:{{scenarioId}}:unauthorizedParentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_parent_by_example_should_return_200_and_parent_when_authorized",
							"item": [
								{
									"name": "Clean up Existing StudentParentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentParentAssociationsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all StudentParentAssociations', () => {\r",
													"\r",
													"    pm.sendRequest(StudentParentAssociationsGetRequest, function (err, StudentParentAssociations) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"            StudentParentAssociations.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentParentAssociationsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentParentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentParentAssociationsDeleteRequest, function (err, StudentParentAssociations) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentLastSurname', 'LastName2001');",
													"pm.environment.set('supplied:'+scenarioId+':parentSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:parentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:parentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:parentSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondparentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondParentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondParentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondParentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentLastSurname', 'LastName2002');",
													"pm.environment.set('supplied:'+scenarioId+':secondParentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondParentsexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:secondParentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:secondParentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:secondParentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondParentsexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:secondParentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Request - Parents using LastSurname for authorized item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the authorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents?LastSurname=LastName2001",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "LastName2001"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Request - Parents using LastSurname for unauthorized item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents?LastSurname=LastName2002",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "LastName2002"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_deleting_data_for_unrelated_parent_should_fail_with_409_Conflict",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:parentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:parentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:parentSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentParentAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_an_unassociated_parent_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 409\", () => {",
													"    pm.expect(pm.response.code).to.equal(409);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents/{{known:{{scenarioId}}:parentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents",
												"{{known:{{scenarioId}}:parentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_associating_a_parent_not_related_to_vendors_leas_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Parent Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':parentSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"parentUniqueId\":\"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n   \"firstName\":\"{{supplied:{{scenarioId}}:parentFirstName}}\",\r\n   \"lastSurname\":\"{{supplied:{{scenarioId}}:parentLastSurname}}\",\r\n   \"sexDescriptor\":\"{{supplied:{{scenarioId}}:parentSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_associating_a_parent_not_related_to_vendors_leas_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													" pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \r\n   \"parentReference\":{ \r\n      \"parentUniqueId\":\"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   }\r\n}\r\n\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentParentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentParentAssociations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ProgramGetAuthorizationTests",
					"item": [
						{
							"name": "When_getting_all_programs_should_return_only_authorized_programs",
							"item": [
								{
									"name": "Clean up Existing program records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let ProgramsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all programs', () => {\r",
													"\r",
													"    pm.sendRequest(ProgramsGetRequest, function (err, Programs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Programs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let ProgramsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(ProgramsDeleteRequest, function (err, programs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':authorizedProgramIds', []);",
													"",
													"const authorizedProgramIds = pm.environment.get('known:'+scenarioId+':authorizedProgramIds');",
													"authorizedProgramIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedProgramIds', authorizedProgramIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedProgramIds = pm.environment.get('known:'+scenarioId+':authorizedProgramIds');",
													"",
													"authorizedProgramIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedProgramIds', authorizedProgramIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':thirdProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2003}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:thirdProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:thirdProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:thirdProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_all_programs_should_return_only_authorized_programs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedProgramIds = pm.environment.get('known:'+scenarioId+':authorizedProgramIds');",
													"console.log(authorizedProgramIds);",
													"",
													"pm.test(\"Should return the same number of items as are known to be authorized programs\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(authorizedProgramIds.length);",
													"});",
													"",
													"pm.test(\"Should only return items in the set of programs known to be authorized\", () => {",
													"    const __ = require('lodash');",
													"    const responseItems = pm.response.json();",
													"     ",
													"    __.each(responseItems, (responseItem) => {",
													"        console.log(responseItem.id);",
													"        pm.expect(authorizedProgramIds.includes(responseItem.id)).to.equal(true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_program_by_example_should_return_200_and_program_when_authorized",
							"item": [
								{
									"name": "Clean up Existing program records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let ProgramsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all programs', () => {\r",
													"\r",
													"    pm.sendRequest(ProgramsGetRequest, function (err, Programs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Programs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let ProgramsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(ProgramsDeleteRequest, function (err, programs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':authorizedProgram',pm.environment.get('supplied:'+scenarioId+':programName'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':unauthorizedProgram',pm.environment.get('supplied:'+scenarioId+':secondProgramName'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by Authorized ProgramName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the authorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/?programName={{known:{{scenarioId}}:authorizedProgram}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												""
											],
											"query": [
												{
													"key": "programName",
													"value": "{{known:{{scenarioId}}:authorizedProgram}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by unAuthorized ProgramName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized program\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/?programName={{known:{{scenarioId}}:unauthorizedProgram}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												""
											],
											"query": [
												{
													"key": "programName",
													"value": "{{known:{{scenarioId}}:unauthorizedProgram}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_program_by_id_should_return_200_for_authorized_resource",
							"item": [
								{
									"name": "Clean up Existing program records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let ProgramsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all programs', () => {\r",
													"\r",
													"    pm.sendRequest(ProgramsGetRequest, function (err, Programs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Programs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let ProgramsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(ProgramsDeleteRequest, function (err, programs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':authorizedProgramGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':UnauthorizedProgramGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by Authorized ProgramGuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:authorizedProgramGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												"{{known:{{scenarioId}}:authorizedProgramGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by unAuthorized ProgramGuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:UnauthorizedProgramGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												"{{known:{{scenarioId}}:UnauthorizedProgramGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_program_by_key_should_return_200_for_authorized_resource",
							"item": [
								{
									"name": "Clean up Existing program records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let ProgramsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all programs', () => {\r",
													"\r",
													"    pm.sendRequest(ProgramsGetRequest, function (err, Programs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Programs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let ProgramsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(ProgramsDeleteRequest, function (err, programs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':authorizedProgram',pm.environment.get('supplied:'+scenarioId+':programName'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':unauthorizedProgram',pm.environment.get('supplied:'+scenarioId+':secondProgramName'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by Authorized EducationOrgranizationId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test(\"Should return exactly 1 item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?EducationOrganizationId={{known:localEducationAgencyId_2001}}&Type=uri://ed-fi.org/ProgramTypeDescriptor&Name={{known:{{scenarioId}}:authorizedProgram}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "EducationOrganizationId",
													"value": "{{known:localEducationAgencyId_2001}}"
												},
												{
													"key": "Type",
													"value": "uri://ed-fi.org/ProgramTypeDescriptor"
												},
												{
													"key": "Name",
													"value": "{{known:{{scenarioId}}:authorizedProgram}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by Unauthorized EducationOrgranizationId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?EducationOrganizationId={{known:localEducationAgencyId_2002}}&Type=uri://ed-fi.org/ProgramTypeDescriptor&Name={{known:{{scenarioId}}:unauthorizedProgram}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "EducationOrganizationId",
													"value": "{{known:localEducationAgencyId_2002}}"
												},
												{
													"key": "Type",
													"value": "uri://ed-fi.org/ProgramTypeDescriptor"
												},
												{
													"key": "Name",
													"value": "{{known:{{scenarioId}}:unauthorizedProgram}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "StaffAuthorizationTests",
					"item": [
						{
							"name": "When_associating_a_staff_not_related_to_vendors_leas_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_associating_a_staff_not_related_to_vendors_leas_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_updating_an_unassociated_staff_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_updating_an_unassociated_staff_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':updatedLastSurname', \"gotmarried\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2002}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"lastSurname\":\"{{supplied:{{scenarioId}}:updatedLastSurname}}\"\r\n }\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:staffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:staffGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_staffs_should_return_only_authorized_staffs",
							"item": [
								{
									"name": "Clean up Existing StaffEducationOrganizationEmploymentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StaffsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all staffs', () => {\r",
													"\r",
													"    pm.sendRequest(StaffsGetRequest, function (err, Staffs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Staffs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StaffsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StaffsDeleteRequest, function (err, Staffs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedStaffUniqueIds',[]);",
													"const authorizedStaffUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedStaffUniqueIds');",
													"authorizedStaffUniqueIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedStaffUniqueIds',authorizedStaffUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request-Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStaffUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStaffUniqueId'));",
													"",
													"",
													"const authorizedStaffUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedStaffUniqueIds');",
													"authorizedStaffUniqueIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedStaffUniqueIds',authorizedStaffUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStaffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:secondStaffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondHireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEmploymentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:secondStaffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:secondEmploymentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:secondHireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request-Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':thirdStaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':thirdStaffUniqueId',pm.environment.get('supplied:'+scenarioId+':thirdStaffUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdStaffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:thirdStaffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:thirdFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:thirdLastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:thirdSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdHireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':thirdEmploymentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2003}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:thirdStaffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:thirdEmploymentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:thirdHireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_getting_all_staffs_should_return_only_authorized_staffs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedStaffIds = pm.environment.get('known:'+scenarioId+':authorizedStaffUniqueIds');",
													"console.log(authorizedStaffIds);",
													"",
													"pm.test(\"Should return the same number of items as are known to be authorized staff\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(authorizedStaffIds.length);",
													"});",
													"",
													"pm.test(\"Should only return items in the set of staff known to be authorized\", () => {",
													"    const __ = require('lodash');",
													"    const responseItems = pm.response.json();",
													"     ",
													"    __.each(responseItems, (responseItem) => {",
													"        console.log(responseItem.id);",
													"        pm.expect(authorizedStaffIds.includes(responseItem.id)).to.equal(true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_staff_by_example_should_return_200_and_staff_when_authorized",
							"item": [
								{
									"name": "Clean up Existing StaffEducationOrganizationEmploymentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"let StaffsGetRequest = {",
													"  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations\",",
													"  method:'GET',",
													"  header:'Authorization:bearer '+pm.environment.get(\"AccessToken_2001_2002_2003\"),",
													"  body: {",
													"  }",
													"};",
													"",
													"",
													"",
													"pm.test('Delete all staffs',  () => {",
													"    ",
													"    pm.sendRequest(StaffsGetRequest, function (err, Staffs) {",
													"    if (err) {",
													"        console.log(err);",
													"    } else {",
													"    ",
													"     Staffs.json().forEach(responseItem =>  {",
													"                                ",
													"                                console.log(responseItem.id);",
													"      ",
													"                              let StaffsDeleteRequest = {",
													"                                                        url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations/\"+responseItem.id,",
													"                                                        method:'DELETE',",
													"                                                        header:'Authorization:bearer '+pm.environment.get(\"AccessToken_2001_2002_2003\"),",
													"                                                    body: {",
													"                                                           }",
													"                              };  ",
													"                            ",
													"                            ",
													"                             pm.sendRequest(StaffsDeleteRequest, function (err, Staffs) {",
													"                                  if (err) {",
													"                                       console.log(err);",
													"                                    } else {",
													"                                }",
													"                                 ",
													"                             });",
													"    });",
													"",
													"      ",
													"",
													"    }",
													"    });",
													"    ",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedLastSurname',pm.environment.get('supplied:'+scenarioId+':lastSurname'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request-Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStaffUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStaffUniqueId'));",
													"",
													"",
													"pm.environment.set('known:'+scenarioId+':unauthorizedLastSurname',pm.environment.get('supplied:'+scenarioId+':secondLastSurname'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStaffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:secondStaffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondHireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEmploymentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:secondStaffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:secondEmploymentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:secondHireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Staffs by Authorized Lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the authorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/?LastSurname={{known:{{scenarioId}}:authorizedLastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												""
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "{{known:{{scenarioId}}:authorizedLastSurname}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Staffs by Unauthorized Lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/?LastSurname={{known:{{scenarioId}}:unauthorizedLastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												""
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "{{known:{{scenarioId}}:unauthorizedLastSurname}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_staff_by_id_should_return_200_when_authorized",
							"item": [
								{
									"name": "Clean up Existing StaffEducationOrganizationEmploymentAssociations records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StaffsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all staffs', () => {\r",
													"\r",
													"    pm.sendRequest(StaffsGetRequest, function (err, Staffs) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Staffs.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StaffsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StaffsDeleteRequest, function (err, Staffs) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':authorizedstaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:sexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2001}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Staff Data for Request-Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStaffUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStaffUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':unauthorizedstaffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStaffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondSexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:secondStaffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\",\r\n  \"sexDescriptor\":\"{{supplied:{{scenarioId}}:secondSexDescriptor}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducationOrganizationEmploymentAssociations Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondHireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEmploymentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId_2002}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:secondStaffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:secondEmploymentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:secondHireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Staffs by Authorized StaffGuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:authorizedstaffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:authorizedstaffGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Staffs by Unauthorized StaffGuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:unauthorizedstaffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:unauthorizedstaffGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "StudentAuthorizationTests",
					"item": [
						{
							"name": "When_deleting_unrelated_student_should_fail_with_409_Conflict",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Delete Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId1}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "When_deleting_unrelated_student_should_fail_with_409_Conflict",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 409\", () => {",
													"    pm.expect(pm.response.code).to.equal(409);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:{{scenarioId}}:studentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_updating_an_unassociated_student_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Delete Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId1}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "When_updating_an_unassociated_student_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':updatedLastSurname', \"GotMarried\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:updatedLastSurname}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:{{scenarioId}}:studentGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_all_students_should_return_only_authorized_students",
							"item": [
								{
									"name": "Clean up Existing studentsrecords",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all students', () => {\r",
													"\r",
													"    pm.sendRequest(StudentsGetRequest, function (err, Students) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Students.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentsDeleteRequest, function (err, students) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"pm.environment.set('known:'+scenarioId+':authorizedStudentUniqueIds',[]);",
													"const authorizedStudentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedStudentUniqueIds');",
													"authorizedStudentUniqueIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedStudentUniqueIds',authorizedStudentUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"",
													"const authorizedStudentUniqueIds=pm.environment.get('known:'+scenarioId+':authorizedStudentUniqueIds');",
													"authorizedStudentUniqueIds.push(pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':authorizedStudentUniqueIds',authorizedStudentUniqueIds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':thirdStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':thirdStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:thirdStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:thirdBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:thirdFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:thirdLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data -Third one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':thirdEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':thirdEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002_2003}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2003_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:thirdStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:thirdEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:thirdEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "When_getting_all_students_should_return_only_authorized_students",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const authorizedStudentIds = pm.environment.get('known:'+scenarioId+':authorizedStudentUniqueIds');",
													"console.log(authorizedStudentIds);",
													"",
													"pm.test(\"Should return the same number of items as are in the set of known authorized items\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(authorizedStudentIds.length);",
													"});",
													"",
													"pm.test(\"Should only return items that are in the set of known authorized students\", () => {",
													"    const __ = require('lodash');",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, (responseItem) => {",
													"          console.log(responseItem.id);",
													"        pm.expect(authorizedStudentIds.includes(responseItem.id)).to.equal(true);",
													"      });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_student_by_example_should_return_200_and_student_when_authorized",
							"item": [
								{
									"name": "Clean up Existing studentsrecords",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all students', () => {\r",
													"\r",
													"    pm.sendRequest(StudentsGetRequest, function (err, Students) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Students.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentsDeleteRequest, function (err, students) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':AuthorizedlastSurname',pm.environment.get('supplied:'+scenarioId+':lastSurname'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':unauthorizedlastSurname',pm.environment.get('supplied:'+scenarioId+':secondLastSurname'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get Students by Authorized Last Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the authorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students?lastSurname={{known:{{scenarioId}}:AuthorizedlastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students"
											],
											"query": [
												{
													"key": "lastSurname",
													"value": "{{known:{{scenarioId}}:AuthorizedlastSurname}}"
												}
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get Students by Unauthorized Last Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the unauthorized item\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students?lastSurname={{known:{{scenarioId}}:unauthorizedlastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students"
											],
											"query": [
												{
													"key": "lastSurname",
													"value": "{{known:{{scenarioId}}:unauthorizedlastSurname}}"
												}
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_getting_student_by_id_should_return_200_when_authorized",
							"item": [
								{
									"name": "Clean up Existing studentsrecords",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let StudentsGetRequest = {\r",
													"    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations\",\r",
													"    method: 'GET',\r",
													"    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"    body: {}\r",
													"};\r",
													"\r",
													"pm.test('Delete all students', () => {\r",
													"\r",
													"    pm.sendRequest(StudentsGetRequest, function (err, Students) {\r",
													"        if (err) {\r",
													"            console.log(err);\r",
													"        } else {\r",
													"\r",
													"            Students.json().forEach(responseItem => {\r",
													"\r",
													"                console.log(responseItem.id);\r",
													"\r",
													"                let StudentsDeleteRequest = {\r",
													"                    url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StudentSchoolAssociations/\" + responseItem.id,\r",
													"                    method: 'DELETE',\r",
													"                    header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_2001_2002_2003\"),\r",
													"                    body: {}\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(StudentsDeleteRequest, function (err, students) {\r",
													"                    if (err) {\r",
													"                        console.log(err);\r",
													"                    } else {}\r",
													"                });\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"pm.environment.set('known:'+scenarioId+':AuthorizedStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2001_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Student Data for Post Request -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':secondStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':secondStudentUniqueId',pm.environment.get('supplied:'+scenarioId+':secondStudentUniqueId'));",
													"",
													"pm.environment.set('known:'+scenarioId+':unAuthorizedStudentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':secondStudentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondLastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondFirstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondBirthDate',birthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:secondStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:secondBirthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:secondFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:secondLastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data -Second one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':secondEntryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001_2002}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId_2002_01}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:secondStudentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:secondEntryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:secondEntryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get Students by Authorized Student Guid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:AuthorizedStudentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students",
												"{{known:{{scenarioId}}:AuthorizedStudentGuid}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get Students by Unauthorized Student Guid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_2001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:unAuthorizedStudentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Students",
												"{{known:{{scenarioId}}:unAuthorizedStudentGuid}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up Test Data",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "112271e1-3ff0-4379-8cab-170739feb315",
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"const keys = __.keys(pm.environment.toObject());\r",
											"console.log('Initial keys: ' + JSON.stringify(keys));\r",
											"\r",
											"const keysToRemove = __.filter(keys, x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'));\r",
											"\r",
											"__.each(keysToRemove, k => pm.environment.unset(k));\r",
											"\r",
											"const remainingKeys = __.keys(pm.environment.toObject());\r",
											"console.log('Remaining keys:' + JSON.stringify(remainingKeys));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e60e7900-c8a0-41a8-82ab-d1a214cd87bf",
				"type": "text/javascript",
				"exec": [
					"CreateAccessToken(\"TokenExpiry_255901\",",
					"                  \"AccessToken_255901\",",
					"                  \"ApiKey_255901\", ",
					"                  \"ApiSecret_255901\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_Other_Namespace\",",
					"                  \"AccessToken_Other_Namespace\",",
					"                  \"ApiKey_Other_Namespace\", ",
					"                  \"ApiSecret_Other_Namespace\")",
					"                  ",
					"",
					"CreateAccessToken(\"TokenExpiry_255901001\",",
					"                  \"AccessToken_255901001\",",
					"                  \"ApiKey_255901001\", ",
					"                  \"ApiSecret_255901001\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_255901044\",",
					"                  \"AccessToken_255901044\",",
					"                  \"ApiKey_255901044\", ",
					"                  \"ApiSecret_255901044\")",
					"",
					"CreateAccessToken(\"TokenExpiry_2001\",",
					"                  \"AccessToken_2001\",",
					"                  \"ApiKey_2001\", ",
					"                  \"ApiSecret_2001\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_2002\",",
					"                  \"AccessToken_2002\",",
					"                  \"ApiKey_2002\", ",
					"                  \"ApiSecret_2002\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_1\",",
					"                  \"AccessToken_1\",",
					"                  \"ApiKey_1\", ",
					"                  \"ApiSecret_1\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_2001_2002_2003\",",
					"                  \"AccessToken_2001_2002_2003\",",
					"                  \"ApiKey_2001_2002_2003\", ",
					"                  \"ApiSecret_2001_2002_2003\")",
					"CreateAccessToken(\"TokenExpiry_2001_2002\",",
					"                  \"AccessToken_2001_2002\",",
					"                  \"ApiKey_2001_2002\", ",
					"                  \"ApiSecret_2001_2002\")",
					"",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry,AccessToken,ApiKey, ApiSecret)",
					"                  {",
					"let tokenExpiration = pm.environment.get(TokenExpiry);",
					"let currentToken = pm.environment.get(AccessToken);",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/json\"",
					"        ],",
					"        body: {",
					"            mode: \"raw\",",
					"            raw: JSON.stringify({ Grant_type: grantType })",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(AccessToken, newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a6356328-da92-4bfc-9373-1ceb77f5fb86",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}