{
	"info": {
		"_postman_id": "17588d9d-936f-4ddd-ad10-a65bda915841",
		"name": "Ed-Fi ODS/API Integration Test Suite AuthorizationTests",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26378282"
	},
	"item": [
		{
			"name": "Authorization Tests",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Initialize postSecondaryInstitution data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('supplied:unrelatedPostSecondaryInstitutionId', 80808080);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"categories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Post Secondary Institution\"\r\n        }\r\n    ],\r\n    \"postSecondaryInstitutionId\": \"{{supplied:unrelatedPostSecondaryInstitutionId}}\",\r\n    \"nameOfInstitution\": \"Some University\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/postSecondaryInstitutions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"postSecondaryInstitutions"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						}
					]
				},
				{
					"name": "StudentAuthorizationTests",
					"item": [
						{
							"name": "When_associating_a_student_not_related_to_vendors_leas_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId',createScenarioId());",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname',newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName',newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_associating_a_student_not_related_to_vendors_leas_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':schoolId',1);",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{supplied:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "When_associating_a_student_related_to_vendors_leas_should_return_201_created",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_associating_a_student_related_to_vendors_leas_should_return_201_created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "When_creating_a_student_Should_return_201_created",
							"item": [
								{
									"name": "When_creating_a_student_Should_return_201_created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_a_student_in_use_should_fail_with_409_Conflict",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Delete Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':schoolId',255901001);",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "When_deleting_a_student_in_use_should_fail_with_409_Conflict",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", () => {",
													"    pm.expect(pm.response.code).to.equal(409);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:{{scenarioId}}:studentGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_an_unused_student_should_return_204_nocontent",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_an_unused_student_should_return_204_nocontent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:{{scenarioId}}:studentGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_updating_a_associated_student_should_succeed",
							"item": [
								{
									"name": "Initialize Student Data for Put Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Put Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':schoolId',255901001);",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{supplied:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "When_updating_a_associated_student_should_succeed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', \"GotMarried\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n    \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:{{scenarioId}}:studentGuid}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "StaffAuthorizationTests",
					"item": [
						{
							"name": "When_associating_a_staff_related_to_vendors_leas_should_return_201_created",
							"item": [
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_associating_a_staff_related_to_vendors_leas_should_return_201_created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_creating_a_staff_should_return_201_created",
							"item": [
								{
									"name": "When_creating_a_staff_should_return_201_created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_a_staff_in_use_should_return_409_conflict",
							"item": [
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducation Organization Employment Association Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_a_staff_in_use_should_return_409_conflict",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", () => {",
													"    pm.expect(pm.response.code).to.equal(409);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:staffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:staffGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_an_unused_staff_should_return_204_nocontent",
							"item": [
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_an_unused_staff_should_return_204_nocontent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:staffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:staffGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_updating_an_associated_staff_should_succeed",
							"item": [
								{
									"name": "Initialize Staff Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId',pm.environment.get('supplied:'+scenarioId+':staffUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StaffEducation Organization Employment Association Data for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let hireDate=new Date();",
													"hireDate = hireDate.addMonths(-24);",
													"hireDate= moment(hireDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':hireDate', hireDate);",
													"pm.environment.set('supplied:'+scenarioId+':employmentStatusDescriptor', \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \r\n   \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"staffReference\":{ \r\n      \"staffUniqueId\":\"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n   },\r\n   \"employmentStatusDescriptor\":\"{{supplied:{{scenarioId}}:employmentStatusDescriptor}}\",\r\n   \"hireDate\":\"{{supplied:{{scenarioId}}:hireDate}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StaffEducationOrganizationEmploymentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StaffEducationOrganizationEmploymentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_updating_an_associated_staff_should_succeed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname',\"GotMarried\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n    \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\"\r\n  \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:{{scenarioId}}:staffGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs",
												"{{known:{{scenarioId}}:staffGuid}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ProgramAuthorizationTests",
					"item": [
						{
							"name": "When_creating_a_program_with_a_non_existing_education_organization_id",
							"item": [
								{
									"name": "When_creating_a_program_with_a_non_existing_education_organization_id_should_fail_with_403_not_authorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"pm.test(\"Authorization message should indicate problem with the EducationOrganizationId.\", () => {",
													"  const problemDetails = pm.response.json();",
													"",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'EducationOrganizationId' value./);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0, 20));",
													"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId', 1000);",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_creating_a_program_with_an_unrelated_education_organization",
							"item": [
								{
									"name": "When_creating_a_program_with_an_unrelated_education_organization_should_fail_with_403_not_authorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"pm.test(\"Authorization message should indicate problem with the EducationOrganizationId.\", () => {",
													"  const problemDetails = pm.response.json();",
													"",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'EducationOrganizationId' value./);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0, 20));",
													"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId', 1000);",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": \"{{supplied:unrelatedPostSecondaryInstitutionId}}\"\r\n    },\r\n    \"programName\": \"{{supplied:{{scenarioId}}:programName}}\",\r\n    \"programTypeDescriptor\": \"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n    \"programId\": \"{{supplied:{{scenarioId}}:programId}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_creating_a_program_Should_return_201_created",
							"item": [
								{
									"name": "When_creating_a_program_Should_return_201_created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\").substring(0, 20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_an_unused_program_should_return_204_nocontent",
							"item": [
								{
									"name": "Initialize Program Data for Delete Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('known:'+scenarioId+':programGuid', pm.response.headers.one('Location').value.split(\"/\").pop());",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\").substring(0, 20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_an_unused_program_should_return_204_nocontent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												"{{known:{{scenarioId}}:programGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_non_existant_program_should_fail_with_404_not_found",
							"item": [
								{
									"name": "Initialize Program Data for Delete Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"const __ = require('lodash');",
													"const responseItems = pm.response.json();",
													"pm.environment.set('known:'+scenarioId+':programGuid', __.first(responseItems)[\"id\"].replace(/[0-9]/g, \"a\"));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\").substring(0, 20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_non_existant_program_should_fail_with_404_not_found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", () => {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												"{{known:{{scenarioId}}:programGuid}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ProgramRoleNamedTests",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize stateEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\",\r\n  \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#State Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/stateEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"stateEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize localEducationAgency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{known:localEducationAgencyId1}}\",\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{known:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": \"{{known:schoolId1}}\",\r\n  \"nameOfInstitution\": \"{{$randomLastName}} ISD\",\r\n  \"shortNameOfInstitution\": \"{{$randomColor}} {{$randomCompanySuffix}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId1}}\"\r\n  },\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#Adult School\"\r\n    }\r\n  ],\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Public School\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Critical Reading\",\r\n  \"webSite\": \"http://www.GBISD.edu/GBHS/\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#Not a Charter School\",\r\n  \"titleIPartASchoolDesignationDescriptor\": \"uri://ed-fi.org/TitleIPartASchoolDesignationDescriptor#Not A Title I School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Mailing\",\r\n      \"streetNumberName\": \"{{$randomStreetAddress}}\",\r\n      \"city\": \"{{$randomLocale}}\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"postalCode\": \"{{$randomInt}}\",\r\n      \"nameOfCounty\": \"{{$randomLastName}}\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize StandardVersion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var response = pm.response.json();\r",
													"var standardVersion = response[\"dataModels\"].filter(dm => dm.name === 'Ed-Fi').map(dm => dm.version);\r",
													"pm.environment.set('known:standardVersion', standardVersion);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Authorized Client",
							"item": [
								{
									"name": "ProgramEvaluation",
									"item": [
										{
											"name": "GetAll ProgramEvaluations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Should return some items for verification\", () => {\r",
															"        const responseItems = pm.response.json();\r",
															"        pm.expect(responseItems.length).to.be.gte(0);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post ProgramEvaluation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 201\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(201);\r",
															"    });\r",
															"    \r",
															"pm.environment.set('known:programevaluation:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
															"\r",
															"var requestJson = JSON.parse(request.data);\r",
															"pm.environment.set('known:programEvaluationTitle', requestJson.programEvaluationTitle);\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n    \"programEvaluationTitle\": \"{{$randomCompanyName}}\",\r\n    \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ProgramEvaluation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"  pm.test(\"Should return some items for verification\", () => {\r",
															"        const responseItems = pm.response.json();\r",
															"        pm.expect(responseItems.programEvaluationTitle).to.equal(pm.environment.get('known:programEvaluationTitle'));\r",
															"    });\r",
															"\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluations/{{known:programevaluation:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluations",
														"{{known:programevaluation:id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ProgramEvaluationObjective",
									"item": [
										{
											"name": "GetAll ProgramEvaluationObjectives",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Should return some items for verification\", () => {\r",
															"        const responseItems = pm.response.json();\r",
															"        pm.expect(responseItems.length).to.be.gte(0);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationObjectives",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationObjectives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post ProgramEvaluationObjectives",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 201\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(201);\r",
															"    });\r",
															"    \r",
															"pm.environment.set('known:programEvaluationObjective:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
															"\r",
															"var requestJson = JSON.parse(request.data);\r",
															"pm.environment.set('known:programEvaluationObjectiveTitle', requestJson.programEvaluationObjectiveTitle);\r",
															"\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"programEvaluationReference\": {\r\n      \"programEducationOrganizationId\": 255901,\r\n      \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n      \"programEvaluationTitle\": \"{{known:programEvaluationTitle}}\",\r\n      \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\",\r\n      \"programName\": \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"programEvaluationObjectiveTitle\": \"{{$randomCompanyName}}\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationObjectives",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationObjectives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ProgramEvaluationObjectives",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"  pm.test(\"Should return some items for verification\", () => {\r",
															"        const responseItems = pm.response.json();\r",
															"        pm.expect(responseItems.programEvaluationObjectiveTitle).to.equal(pm.environment.get('known:programEvaluationObjectiveTitle'));\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationObjectives/{{known:programEvaluationObjective:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationObjectives",
														"{{known:programEvaluationObjective:id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ProgramEvaluationElement",
									"item": [
										{
											"name": "GetAll ProgramEvaluationElements",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Should return some items for verification\", () => {\r",
															"        const responseItems = pm.response.json();\r",
															"        pm.expect(responseItems.length).to.be.gte(0);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationElements",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationElements"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post ProgramEvaluationElement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 201\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(201);\r",
															"    });\r",
															"    \r",
															"pm.environment.set('known:programEvaluationElement:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
															"\r",
															"var requestJson = JSON.parse(request.data);\r",
															"pm.environment.set('known:programEvaluationElementTitle', requestJson.programEvaluationElementTitle);\r",
															"\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \r\n    \"programEvaluationObjectiveReference\": {\r\n      \"programEducationOrganizationId\": 255901,\r\n      \"programEvaluationObjectiveTitle\": \"{{known:programEvaluationObjectiveTitle}}\",\r\n      \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n      \"programEvaluationTitle\": \"{{known:programEvaluationTitle}}\",\r\n      \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\",\r\n      \"programName\": \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"programEvaluationReference\": {\r\n      \"programEducationOrganizationId\": 255901,\r\n      \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n      \"programEvaluationTitle\": \"{{known:programEvaluationTitle}}\",\r\n      \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\",\r\n      \"programName\": \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"programEvaluationElementTitle\": \"Question {{$randomInt}}\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationElements",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationElements"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ProgramEvaluationElements",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"  pm.test(\"Should return some items for verification\", () => {\r",
															"        const responseItems = pm.response.json();\r",
															"        pm.expect(responseItems.programEvaluationElementTitle).to.equal(pm.environment.get('known:programEvaluationElementTitle'));\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationElements/{{known:programEvaluationElement:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationElements",
														"{{known:programEvaluationElement:id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "EvaluationRubricDimension",
									"item": [
										{
											"name": "GetAll EvaluationRubricDimensions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Should return some items for verification\", () => {\r",
															"        const responseItems = pm.response.json();\r",
															"        pm.expect(responseItems.length).to.be.gte(0);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/evaluationRubricDimensions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"evaluationRubricDimensions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post EvaluationRubricDimension",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 201\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(201);\r",
															"    });\r",
															"\r",
															"pm.environment.set('known:evaluationRubricDimension:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
															"\r",
															"var requestJson = JSON.parse(request.data);\r",
															"pm.environment.set('known:evaluationRubricRating', requestJson.evaluationRubricRating);\r",
															"pm.environment.set('known:evaluationCriterionDescription', requestJson.evaluationCriterionDescription);\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n      \"programEvaluationElementReference\": {\r\n      \"programEducationOrganizationId\": 255901,\r\n      \"programEvaluationElementTitle\": \"{{known:programEvaluationElementTitle}}\",\r\n      \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n      \"programEvaluationTitle\": \"{{known:programEvaluationTitle}}\",\r\n      \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\",\r\n      \"programName\":  \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"evaluationRubricRating\": {{$randomInt}},\r\n    \"evaluationCriterionDescription\": \"{{$randomFullName}}\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/evaluationRubricDimensions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"evaluationRubricDimensions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get EvaluationRubricDimension",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Should return some items for verification\", () => {\r",
															"        const responseItems = pm.response.json();\r",
															"        pm.expect(responseItems.evaluationRubricRating).to.equal(pm.environment.get('known:evaluationRubricRating'));\r",
															"        pm.expect(responseItems.evaluationCriterionDescription).to.equal(pm.environment.get('known:evaluationCriterionDescription')); \r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/evaluationRubricDimensions/{{known:evaluationRubricDimension:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"evaluationRubricDimensions",
														"{{known:evaluationRubricDimension:id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete ProgramRoleNamedResources",
									"item": [
										{
											"name": "Delete EvaluationRubricDimension",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 204\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(204);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/evaluationRubricDimensions/{{known:evaluationRubricDimension:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"evaluationRubricDimensions",
														"{{known:evaluationRubricDimension:id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete ProgramEvaluationElements",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 204\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(204);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationElements/{{known:programEvaluationElement:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationElements",
														"{{known:programEvaluationElement:id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete ProgramEvaluationObjectives",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 204\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(204);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationObjectives/{{known:programEvaluationObjective:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationObjectives",
														"{{known:programEvaluationObjective:id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete ProgramEvaluation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 204\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(204);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluations/{{known:programevaluation:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluations",
														"{{known:programevaluation:id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Not Authorized Client",
							"item": [
								{
									"name": "ProgramEvaluation",
									"item": [
										{
											"name": "GetAll ProgramEvaluations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Response is empty\", function () {\r",
															"      const responseData = pm.response.json();\r",
															"      pm.expect(responseData).to.be.empty;\r",
															"});\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255902}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post ProgramEvaluation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"  pm.test(\"Status code is 403\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(403);\r",
															"  });\r",
															"\r",
															"  pm.test(\"Authorization message should indicate problem with the ProgramEducationOrganizationId.\", () => {\r",
															"    const problemDetails = pm.response.json();\r",
															"\r",
															"    pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
															"    pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
															"    pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ProgramEducationOrganizationId' value./);\r",
															"  });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255902}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n    \"programEvaluationTitle\": \"{{$randomCompanyName}}\",\r\n    \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluations"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ProgramEvaluationObjective",
									"item": [
										{
											"name": "GetAll ProgramEvaluationObjectives",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Response is empty\", function () {\r",
															"      const responseData = pm.response.json();\r",
															"      pm.expect(responseData).to.be.empty;\r",
															"});\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255902}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationObjectives",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationObjectives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post ProgramEvaluationObjectives",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"  pm.test(\"Status code is 403\", () => {\r",
															"    pm.response.to.have.status(403);\r",
															"  });\r",
															"\r",
															"  pm.environment.set('known:orgDeptId:001', ''); // Set a default value for known:orgDeptId:001\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255902}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"programEvaluationReference\": {\r\n      \"programEducationOrganizationId\": 255901,\r\n      \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n      \"programEvaluationTitle\": \"{{known:programEvaluationTitle}}\",\r\n      \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\",\r\n      \"programName\": \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"programEvaluationObjectiveTitle\": \"{{$randomCompanyName}}\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationObjectives",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationObjectives"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ProgramEvaluationElement",
									"item": [
										{
											"name": "GetAll ProgramEvaluationElements",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Response is empty\", function () {\r",
															"      const responseData = pm.response.json();\r",
															"      pm.expect(responseData).to.be.empty;\r",
															"});\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255902}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationElements",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationElements"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post ProgramEvaluationElement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 403\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(403);\r",
															"    });\r",
															"\r",
															"  pm.test(\"Authorization message should indicate problem with the ProgramEducationOrganizationId.\", () => {\r",
															"    const problemDetails = pm.response.json();\r",
															"\r",
															"    pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
															"    pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
															"    pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ProgramEducationOrganizationId' value./);\r",
															"  });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255902}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \r\n    \"programEvaluationObjectiveReference\": {\r\n      \"programEducationOrganizationId\": 255901,\r\n      \"programEvaluationObjectiveTitle\": \"{{known:programEvaluationObjectiveTitle}}\",\r\n      \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n      \"programEvaluationTitle\": \"{{known:programEvaluationTitle}}\",\r\n      \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\",\r\n      \"programName\": \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"programEvaluationReference\": {\r\n      \"programEducationOrganizationId\": 255901,\r\n      \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n      \"programEvaluationTitle\": \"{{known:programEvaluationTitle}}\",\r\n      \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\",\r\n      \"programName\": \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"programEvaluationElementTitle\": \"Question {{$randomInt}}\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programEvaluationElements",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programEvaluationElements"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "EvaluationRubricDimension",
									"item": [
										{
											"name": "GetAll EvaluationRubricDimensions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"    pm.test(\"Status code is 200\", () => {\r",
															"        pm.expect(pm.response.code).to.equal(200);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Response is empty\", function () {\r",
															"      const responseData = pm.response.json();\r",
															"      pm.expect(responseData).to.be.empty;\r",
															"});\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255902}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/evaluationRubricDimensions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"evaluationRubricDimensions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post EvaluationRubricDimension",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 4.0.0 does not include this resource\r",
															"if (pm.environment.get(\"known:standardVersion\")[0] != \"4.0.0\") {\r",
															"  pm.test(\"Status code is 403\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(403);\r",
															"  });\r",
															"\r",
															"  pm.test(\"Authorization message should indicate problem with the ProgramEducationOrganizationId.\", () => {\r",
															"    const problemDetails = pm.response.json();\r",
															"\r",
															"    pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
															"    pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
															"    pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ProgramEducationOrganizationId' value./);\r",
															"  });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255902}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n      \"programEvaluationElementReference\": {\r\n      \"programEducationOrganizationId\": 255901,\r\n      \"programEvaluationElementTitle\": \"{{known:programEvaluationElementTitle}}\",\r\n      \"programEvaluationPeriodDescriptor\": \"uri://ed-fi.org/ProgramEvaluationPeriodDescriptor#End of Year\",\r\n      \"programEvaluationTitle\": \"{{known:programEvaluationTitle}}\",\r\n      \"programEvaluationTypeDescriptor\": \"uri://ed-fi.org/ProgramEvaluationTypeDescriptor#Teacher survey\",\r\n      \"programName\":  \"21st CCLC\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Support\"\r\n    },\r\n    \"evaluationRubricRating\": {{$randomInt}},\r\n    \"evaluationCriterionDescription\": \"{{$randomFullName}}\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/evaluationRubricDimensions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"evaluationRubricDimensions"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Clean StandardVersion",
							"item": [
								{
									"name": "Clean Test Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset('known:standardVersion')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "AssessmentAuthorizationTests",
					"item": [
						{
							"name": "Should_fail_to_create_the_assessment",
							"item": [
								{
									"name": "Should_fail_to_create_the_assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':assessmentIdentifier', \"TestAId\" +uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"));",
													"pm.environment.set('supplied:'+scenarioId+':namespace', \"uri://www.FAIL.org/\");",
													"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
													"pm.environment.set('supplied:'+scenarioId+':assessmentTitle', \"Assessment\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:assessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:{{scenarioId}}:namespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:assessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should_successfully_create_the_assessment",
							"item": [
								{
									"name": "Should_successfully_create_the_assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':assessmentIdentifier', \"TestAId\" +uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"));",
													"pm.environment.set('supplied:'+scenarioId+':namespace', \"uri://ed-fi.org/\");",
													"pm.environment.set('supplied:'+scenarioId+':academicSubjectDescriptor', \"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\");",
													"pm.environment.set('supplied:'+scenarioId+':assessmentTitle', \"Assessment\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:assessmentIdentifier}}\",\r\n   \"namespace\":\"{{supplied:{{scenarioId}}:namespace}}\",\r\n   \"assessmentTitle\":\"{{supplied:{{scenarioId}}:assessmentTitle}}\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"{{supplied:{{scenarioId}}:academicSubjectDescriptor}}\"\r\n      }\r\n   ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "GetAllAuthorizationTests",
					"item": [
						{
							"name": "GetAll_Assessment_ShouldUseNHibernateFilters",
							"item": [
								{
									"name": "GetAll_Assessment_ShouldUseNHibernateFilters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some rows of assessment\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetAll_AssessmentItem_ShouldUseNHibernateFilters",
							"item": [
								{
									"name": "GetAll_AssessmentItem_ShouldUseNHibernateFilters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some rows of assessmentitems\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessmentitems",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessmentitems"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetAll_Descriptors_ShouldUseNHibernateFilters",
							"item": [
								{
									"name": "GetAll_Descriptors_ShouldUseNHibernateFilters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some rows of academicsubjectdescriptors\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicsubjectdescriptors",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"academicsubjectdescriptors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetAll_GradebookEntry_ShouldUseNHibernateFilters",
							"item": [
								{
									"name": "GetAll_GradebookEntry_ShouldUseNHibernateFilters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some rows of gradebookentries\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookentries",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"gradebookentries"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetAll_ObjectiveAssessment_ShouldUseNHibernateFilters",
							"item": [
								{
									"name": "GetAll_ObjectiveAssessment_ShouldUseNHibernateFilters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some rows of academicsubjectdescriptors\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveassessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"objectiveassessments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetAll_StudentAssessment_ShouldUseNHibernateFilters",
							"item": [
								{
									"name": "GetAll_StudentAssessment_ShouldUseNHibernateFilters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some rows of academicsubjectdescriptors\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentassessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentassessments"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ManagedResourceAuthorizationTests",
					"item": [
						{
							"name": "Create_Fail",
							"item": [
								{
									"name": "Create_Fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 403\", () => {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':namespace', \"uri://www.FAIL.org/AcademicSubjectDescriptor\");",
													"",
													"",
													"",
													"const moment = require('moment');",
													"let effectiveBeginDate=new Date();",
													"effectiveBeginDate= moment(effectiveBeginDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set(\"supplied:effectiveBeginDate\",effectiveBeginDate);",
													"pm.environment.set('supplied:'+scenarioId+':effectiveBeginDate', effectiveBeginDate);",
													"pm.environment.set('supplied:'+scenarioId+':description', \"German\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\r\n   \"codeValue\":\"{{supplied:{{scenarioId}}:description}}\",\r\n   \"description\":\"{{supplied:{{scenarioId}}:description}}\",\r\n   \"effectiveBeginDate\":\"{{supplied:{{scenarioId}}:effectiveBeginDate}}\",\r\n   \"namespace\":\"{{supplied:{{scenarioId}}:namespace}}\",\r\n   \"shortDescription\":\"{{supplied:{{scenarioId}}:description}}\"\r\n   \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/AcademicSubjectDescriptors",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"AcademicSubjectDescriptors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create_Success",
							"item": [
								{
									"name": "Create_Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':namespace', \"uri://ed-fi.org/AcademicSubjectDescriptor\");",
													"",
													"",
													"",
													"const moment = require('moment');",
													"let effectiveBeginDate=new Date();",
													"effectiveBeginDate= moment(effectiveBeginDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set(\"supplied:effectiveBeginDate\",effectiveBeginDate);",
													"pm.environment.set('supplied:'+scenarioId+':effectiveBeginDate', effectiveBeginDate);",
													"pm.environment.set('supplied:'+scenarioId+':description', \"German\" + createScenarioId());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\r\n   \"codeValue\":\"{{supplied:{{scenarioId}}:description}}\",\r\n   \"description\":\"{{supplied:{{scenarioId}}:description}}\",\r\n   \"effectiveBeginDate\":\"{{supplied:{{scenarioId}}:effectiveBeginDate}}\",\r\n   \"namespace\":\"{{supplied:{{scenarioId}}:namespace}}\",\r\n   \"shortDescription\":\"{{supplied:{{scenarioId}}:description}}\"\r\n   \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/AcademicSubjectDescriptors",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"AcademicSubjectDescriptors"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ContactAuthorizationTests",
					"item": [
						{
							"name": "When_updating_an_associated_contact_should_succeed",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Contact Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201) ",
													" });",
													"",
													"if (pm.response.code === 201 ) {",
													"    const scenarioId = pm.environment.get('scenarioId');",
													"    pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"    pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"}",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentContactAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201) ",
													" });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"{{ParentOrContactName}}Reference\": {\r\n    \"{{ParentOrContactUniqueIdName}}\": \"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"bedtimeReader\": true,\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{StudentParentOrContactAssociationCollectionName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_updating_an_associated_contact_should_succeed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204) ",
													" });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', \"gotmarried\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}/{{known:{{scenarioId}}:parentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}",
												"{{known:{{scenarioId}}:parentGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_associating_a_contact_related_to_vendors_leas_should_return_201_created",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\": \"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 0,\r\n        \"maximumWeight\": 10\r\n      }\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Contact Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201) ",
													" });",
													"",
													"if (pm.response.code === 201 ) {",
													"    const scenarioId = pm.environment.get('scenarioId');",
													"    pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"    pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"}",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_associating_a_contact_related_to_vendors_leas_should_return_201_created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201) ",
													" });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"{{ParentOrContactName}}Reference\": {\r\n    \"{{ParentOrContactUniqueIdName}}\": \"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"bedtimeReader\": true,\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{StudentParentOrContactAssociationCollectionName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_updating_an_associated_contact_should_succeed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204) ",
													" });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', \"gotmarried\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}/{{known:{{scenarioId}}:parentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}",
												"{{known:{{scenarioId}}:parentGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_a_contact_in_use_should_return_409_conflict",
							"item": [
								{
									"name": "Initialize Student Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
													"",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"",
													"",
													"const moment = require('moment');",
													"let birthDate=new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
													"",
													"let enteredUSDate=new Date();",
													"enteredUSDate = enteredUSDate.addMonths(-20);",
													"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\": \"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 0,\r\n        \"maximumWeight\": 10\r\n      }\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentSchoolAssociations Data for Post Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"const moment = require('moment');",
													"let entryDate=new Date();",
													"entryDate = entryDate.addMonths(-10);",
													"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
													"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Initialize Contact Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201) ",
													" });",
													"",
													"if (pm.response.code === 201 ) {",
													"    const scenarioId = pm.environment.get('scenarioId');",
													"    pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"    pm.environment.set('known:'+scenarioId+':parentUniqueId',pm.environment.get('supplied:'+scenarioId+':parentUniqueId'));",
													"}",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize StudentContactAssociations Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201) ",
													" });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"{{ParentOrContactName}}Reference\": {\r\n    \"{{ParentOrContactUniqueIdName}}\": \"{{known:{{scenarioId}}:parentUniqueId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"bedtimeReader\": true,\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{StudentParentOrContactAssociationCollectionName}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{StudentParentOrContactAssociationCollectionName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_an_associated_contact_should_return_409_conflict",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  409\", () => {",
													"    pm.expect(pm.response.code).to.equal(409) ",
													" });",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}/{{known:{{scenarioId}}:parentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}",
												"{{known:{{scenarioId}}:parentGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_an_unused_contact_should_return_204_nocontent",
							"item": [
								{
									"name": "Initialize Contact Data for Post Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201) ",
													" });",
													"",
													"if (pm.response.code === 201 ) {",
													"    const scenarioId = pm.environment.get('scenarioId');",
													"    pm.environment.set('known:'+scenarioId+':parentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
													"}",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_an_unused_contact_should_return_204_nocontent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204) ",
													" });",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}/{{known:{{scenarioId}}:parentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}",
												"{{known:{{scenarioId}}:parentGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_creating_a_contact_Should_return_201_created",
							"item": [
								{
									"name": "When_creating_a_contact_Should_return_201_created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is  201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201) ",
													" });",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':parentUniqueId', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"{{ParentOrContactUniqueIdName}}\": \"{{supplied:{{scenarioId}}:parentUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\": \"{{supplied:{{scenarioId}}:sexDescriptor}}\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"teacherConference\": {\r\n        \"dayOfWeek\": \"Monday\",\r\n        \"endTime\": \"12:00:00\",\r\n        \"startTime\": \"12:00:00\"\r\n      },\r\n      \"authors\": [],\r\n      \"favoriteBookTitles\": [\r\n        {\r\n          \"favoriteBookTitle\": \"Green Eggs and Ham\"\r\n        }\r\n      ],\r\n      \"isSportsFan\": false\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/{{ParentOrContactCollectionName}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"{{ParentOrContactCollectionName}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "OrganizationDepartment Authorization Tests",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create OrgDept in accessible School 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:orgDeptId:001', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"organizationDepartmentId\": 2559015,\r\n  \"nameOfInstitution\": \"Test Office - School 001\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OrgDept in accessible School 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:orgDeptId:044', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901044\r\n  },\r\n  \"organizationDepartmentId\": 2559016,\r\n  \"nameOfInstitution\": \"Test Office - School 044\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OrgDept in accessible LEA 255901",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:orgDeptId:255901', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  },\r\n  \"organizationDepartmentId\": 2559017,\r\n  \"nameOfInstitution\": \"Test Office - LEA 255901\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When creating OrgDepts",
							"item": [
								{
									"name": "Create OrgDept in inaccessible School 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization message should indicate client isn't associated with the ParentEducationOrganizationId.\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ParentEducationOrganizationId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901044\r\n  },\r\n  \"organizationDepartmentId\": 2559018,\r\n  \"nameOfInstitution\": \"Unauthorized Test Office - School 044\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When moving with POST requests",
							"item": [
								{
									"name": "Move accessible OrgDept to inaccessible School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization message should indicate client isn't associated with the ParentEducationOrganizationId.\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ParentEducationOrganizationId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901044\r\n  },\r\n  \"organizationDepartmentId\": 2559015,\r\n  \"nameOfInstitution\": \"Test Office - School 001\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move inaccessible OrgDept to accessible School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization message should indicate client isn't associated with the ParentEducationOrganizationId.\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ParentEducationOrganizationId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"organizationDepartmentId\": 2559016,\r\n  \"nameOfInstitution\": \"Test Office - School 044\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move inaccessible OrgDept to inaccessible School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization message should indicate client isn't associated with the ParentEducationOrganizationId.\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ParentEducationOrganizationId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  },\r\n  \"organizationDepartmentId\": 2559016,\r\n  \"nameOfInstitution\": \"Test Office - School 044\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move accessible OrgDept to accessible School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901044\r\n  },\r\n  \"organizationDepartmentId\": 2559015,\r\n  \"nameOfInstitution\": \"Test Office - School 001\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When moving with PUT requests",
							"item": [
								{
									"name": "Move accessible OrgDept to inaccessible School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization message should indicate client isn't associated with the ParentEducationOrganizationId.\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ParentEducationOrganizationId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901044}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"organizationDepartmentId\": 2559016,\r\n  \"nameOfInstitution\": \"Test Office - School 044\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:orgDeptId:044}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:orgDeptId:044}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move inaccessible OrgDept to accessible School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization message should indicate client isn't associated with the ParentEducationOrganizationId.\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ParentEducationOrganizationId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"organizationDepartmentId\": 2559016,\r\n  \"nameOfInstitution\": \"Test Office - School 044\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:orgDeptId:044}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:orgDeptId:044}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move inaccessible OrgDept to inaccessible School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization message should indicate client isn't associated with the ParentEducationOrganizationId.\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ParentEducationOrganizationId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  },\r\n  \"organizationDepartmentId\": 2559016,\r\n  \"nameOfInstitution\": \"Test Office - School 044\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:orgDeptId:044}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:orgDeptId:044}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move accessible OrgDept to accessible School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"organizationDepartmentId\": 2559016,\r\n  \"nameOfInstitution\": \"Test Office - School 044\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:orgDeptId:044}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:orgDeptId:044}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When deleting OrgDepts",
							"item": [
								{
									"name": "Delete inaccessible OrgDept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"const problemDetails = pm.response.json();\r",
													"\r",
													"pm.test(\"Should return a problem details result\", () => {\r",
													"  pm.expect(pm.response.code).equal(problemDetails.status);\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error should indicate that client doesn't have access to the ParentEducationOrganizationId\", () => {\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'ParentEducationOrganizationId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901044}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:orgDeptId:255901}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:orgDeptId:255901}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_deleting_organizationDepartment_with_noEdOrg_client_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "Initialize Organization Departments for Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:organizationDepartmentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ],\r\n  \"organizationDepartmentId\": 2559018,\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901044\r\n  },\r\n  \"nameOfInstitution\": \"Forbidden 403 - No EdOrg Organization Department\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								},
								{
									"name": "When_deleting_organizationDepartment_with_noEdOrg_client_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Message should indicate that client doesn't have access to any EdOrgs\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors[0]).to.equal(\"No relationships have been established between the caller's education organization id claims (none) and the resource item's 'ParentEducationOrganizationId' value.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_NoEdorg}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:organizationDepartmentGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:organizationDepartmentGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When_creating_organizationDepartment_with_noEdOrg_client_should_fail_with_403_forbidden",
							"item": [
								{
									"name": "When_creating_organizationDepartment_with_noEdOrg_client_should_fail_with_403_forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Message should indicate that client doesn't have access to any EdOrgs\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors[0]).to.equal(\"No relationships have been established between the caller's education organization id claims (none) and the resource item's 'ParentEducationOrganizationId' value.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_NoEdorg}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Organization Department\"\r\n    }\r\n  ],\r\n  \"organizationDepartmentId\": 2559018,\r\n  \"parentEducationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901044\r\n  },\r\n  \"nameOfInstitution\": \"Forbidden 403 - No EdOrg Organization Department\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete OrgDept for School 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:orgDeptId:001}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:orgDeptId:001}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OrgDept for School 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:orgDeptId:044}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:orgDeptId:044}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OrgDept for LEA 255901",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/organizationDepartments/{{known:orgDeptId:255901}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"organizationDepartments",
												"{{known:orgDeptId:255901}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up Envirnoment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "DisciplineAction",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Get StudentSchoolAssociations for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(200); \r",
													"});\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"pm.test(\"Check if responseItems array has at least one item\", function () {\r",
													"    pm.expect(responseItems.length).to.be.least(1);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:student:uniqueId:001', responseItems[0].studentReference.studentUniqueId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations?schoolId=255901001&limit=1&studentUniqueId=604822",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901001"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "studentUniqueId",
													"value": "604822"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get StudentSchoolAssociations for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"pm.test(\"Check if responseItems array has at least one item\", function () {\r",
													"    pm.expect(responseItems.length).to.be.least(1);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:student:uniqueId:044', responseItems[0].studentReference.studentUniqueId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations?schoolId=255901044&limit=1",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901044"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cross register student in 001 for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(201); \r",
													"});\r",
													"\r",
													"pm.environment.set('known:studentSchoolAssociation:001:044:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"schoolReference\": {\r\n        \"schoolId\": 255901044\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:001}}\"\r\n    },\r\n    \"entryDate\": \"2021-08-23\",\r\n    \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cross register student in 044 for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(201); \r",
													"});\r",
													"\r",
													"pm.environment.set('known:studentSchoolAssociation:044:001:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"schoolReference\": {\r\n        \"schoolId\": 255901001\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:044}}\"\r\n    },\r\n    \"entryDate\": \"2021-08-23\",\r\n    \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create disciplineIncident for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(201); \r",
													"});\r",
													"\r",
													"pm.environment.set('known:disciplineIncidents:001:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"schoolReference\": {\r\n        \"schoolId\": 255901001\r\n    },\r\n    \"incidentIdentifier\": \"1\",\r\n    \"incidentDate\": \"2022-02-09\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineIncidents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineIncidents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create studentDisciplineIncidentAssociation for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201 or 404\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,404])\r",
													" });\r",
													"\r",
													"if (pm.response.code === 201) {\r",
													"    pm.environment.set('known:sdia:001:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"disciplineIncidentReference\": {\r\n        \"incidentIdentifier\": \"1\",\r\n        \"schoolId\": 255901001\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:001}}\"\r\n    },\r\n    \"studentParticipationCodeDescriptor\": \"uri://ed-fi.org/StudentParticipationCodeDescriptor#Perpetrator\",\r\n    \"behaviors\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentDisciplineIncidentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentDisciplineIncidentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create disciplineIncident for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(201); \r",
													"});\r",
													"\r",
													"pm.environment.set('known:disciplineIncidents:044:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"schoolReference\": {\r\n        \"schoolId\": 255901044\r\n    },\r\n    \"incidentIdentifier\": \"1\",\r\n    \"incidentDate\": \"2022-02-09\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineIncidents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineIncidents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create studentDisciplineIncidentAssociation for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201 or 404\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,404])\r",
													" });\r",
													"\r",
													"if (pm.response.code === 201) {\r",
													"    pm.environment.set('known:sdia:044:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"disciplineIncidentReference\": {\r\n        \"incidentIdentifier\": \"1\",\r\n        \"schoolId\": 255901044\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:044}}\"\r\n    },\r\n    \"studentParticipationCodeDescriptor\": \"uri://ed-fi.org/StudentParticipationCodeDescriptor#Perpetrator\",\r\n    \"behaviors\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentDisciplineIncidentAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentDisciplineIncidentAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create DisciplineAction for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(201); \r",
													"});\r",
													"\r",
													"pm.environment.set('known:disciplineAction:001:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"responsibilitySchoolReference\": {\r\n        \"schoolId\": 255901001\r\n    },\r\n    \"assignmentSchoolReference\": {\r\n        \"schoolId\": 255901044\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:001}}\"\r\n    },\r\n    \"disciplineActionIdentifier\": \"TEST-001\",\r\n    \"disciplineDate\": \"2022-02-09\",\r\n    \"actualDisciplineActionLength\": 1.00,\r\n    \"disciplineActionLength\": 987.65,\r\n    \"disciplines\": [\r\n        {\r\n            \"disciplineDescriptor\": \"uri://ed-fi.org/DisciplineDescriptor#In School Suspension\"\r\n        }\r\n    ],\r\n    \"staffs\": [],\r\n    \"studentDisciplineIncidentAssociations\": [\r\n        {\r\n            \"studentDisciplineIncidentAssociationReference\": {\r\n                \"studentUniqueId\": \"{{known:student:uniqueId:001}}\",\r\n                \"incidentIdentifier\": \"1\",\r\n                \"schoolId\": 255901001\r\n            }\r\n        }\r\n    ],\r\n    \"studentDisciplineIncidentBehaviorAssociations\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create DisciplineAction for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(201); \r",
													"});\r",
													"\r",
													"pm.environment.set('known:disciplineAction:044:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"responsibilitySchoolReference\": {\r\n        \"schoolId\": 255901044\r\n    },\r\n    \"assignmentSchoolReference\": {\r\n        \"schoolId\": 255901001\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:044}}\"\r\n    },\r\n    \"disciplineActionIdentifier\": \"TEST-044\",\r\n    \"disciplineDate\": \"2022-02-09\",\r\n    \"actualDisciplineActionLength\": 1.00,\r\n    \"disciplineActionLength\": 987.65,\r\n    \"disciplines\": [\r\n        {\r\n            \"disciplineDescriptor\": \"uri://ed-fi.org/DisciplineDescriptor#In School Suspension\"\r\n        }\r\n    ],\r\n    \"staffs\": [],\r\n    \"studentDisciplineIncidentAssociations\": [\r\n        {\r\n            \"studentDisciplineIncidentAssociationReference\": {\r\n                \"studentUniqueId\": \"{{known:student:uniqueId:044}}\",\r\n                \"incidentIdentifier\": \"1\",\r\n                \"schoolId\": 255901044\r\n            }\r\n        }\r\n    ],\r\n    \"studentDisciplineIncidentBehaviorAssociations\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions"
											]
										}
									},
									"response": []
								}
							],
							"description": "The school-level clients (255901001 and 255901044) both have access to the selected students since they are cross-registered in both schools in the setup.\n\nThe discipline incidents are each setup so that the responsibility school id is associated with one of the clients."
						},
						{
							"name": "When getting discipline actions",
							"item": [
								{
									"name": "School 001 client",
									"item": [
										{
											"name": "Get DisciplineActions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"pm.test(\"Should only return one of the discipline actions (even though both students are accessible through the cross registrations)\", () => {\r",
															"    pm.expect(responseItems.length).equal(1);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return the discipline action for the associated responsibility school (001)\", () => {\r",
															"    pm.expect(responseItems[0].id).equal(pm.environment.get('known:disciplineAction:001:id'));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901001}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions?disciplineActionLength=987.65",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"disciplineActions"
													],
													"query": [
														{
															"key": "limit",
															"value": "1",
															"disabled": true
														},
														{
															"key": "disciplineActionLength",
															"value": "987.65"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Discipline Composite for 001 student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"// NOTE: Include this test if array vs. single object response behavior is changed for consistency with main API\r",
															"// pm.test(\"Should return the 001 student\", () => {\r",
															"//   pm.expect(responseItems.length).to.equal(1);\r",
															"// });\r",
															"\r",
															"const responseItem = responseItems; // NOTE: If behavior is changed for consistency with main API, change to --> responseItems[0];\r",
															"\r",
															"pm.test(\"Should only return one of the discipline actions\", () => {\r",
															"    pm.expect(responseItem.disciplineActions.length).to.equal(1);\r",
															"});\r",
															"\r",
															"pm.test(\"Should only return the discipline action with the client's associated school as the responsibility school\", () => {\r",
															"    pm.expect(responseItem.disciplineActions[0].responsibilitySchoolReference.schoolId).to.equal(255901001);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901001}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/DisciplinedStudents?studentUniqueId={{known:student:uniqueId:001}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"composites",
														"v1",
														"ed-fi",
														"test",
														"DisciplinedStudents"
													],
													"query": [
														{
															"key": "studentUniqueId",
															"value": "{{known:student:uniqueId:001}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Discipline Composite for 044 student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"// NOTE: Include this test if array vs. single object response behavior is changed for consistency with main API\r",
															"// pm.test(\"Should return the 001 student\", () => {\r",
															"//   pm.expect(responseItems.length).to.equal(1);\r",
															"// });\r",
															"\r",
															"const responseItem = responseItems; // NOTE: If behavior is changed for consistency with main API, change to --> responseItems[0];\r",
															"\r",
															"pm.test(\"Should not return any discipline actions (because the school of responsibility is not accessible)\", () => {\r",
															"    pm.expect(responseItem.disciplineActions.length).to.equal(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901001}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/DisciplinedStudents?studentUniqueId={{known:student:uniqueId:044}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"composites",
														"v1",
														"ed-fi",
														"test",
														"DisciplinedStudents"
													],
													"query": [
														{
															"key": "studentUniqueId",
															"value": "{{known:student:uniqueId:044}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "School 044 client",
									"item": [
										{
											"name": "Get DisciplineActions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"pm.test(\"Should only return one of the discipline actions (even though both students are accessible through the cross registrations)\", () => {\r",
															"    pm.expect(responseItems.length).equal(1);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return the discipline action for the associated responsibility school (044)\", () => {\r",
															"    pm.expect(responseItems[0].id).equal(pm.environment.get('known:disciplineAction:044:id'));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901044}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions?disciplineActionLength=987.65",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"disciplineActions"
													],
													"query": [
														{
															"key": "limit",
															"value": "1",
															"disabled": true
														},
														{
															"key": "disciplineActionLength",
															"value": "987.65"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Discipline Composite for 001 student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"// NOTE: Include this test if array vs. single object response behavior is changed for consistency with main API\r",
															"// pm.test(\"Should return the 001 student\", () => {\r",
															"//   pm.expect(responseItems.length).to.equal(1);\r",
															"// });\r",
															"\r",
															"const responseItem = responseItems; // NOTE: If behavior is changed for consistency with main API, change to --> responseItems[0];\r",
															"\r",
															"pm.test(\"Should not return any discipline actions (because the school of responsibility is not accessible)\", () => {\r",
															"    pm.expect(responseItem.disciplineActions.length).to.equal(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901044}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/DisciplinedStudents?studentUniqueId={{known:student:uniqueId:001}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"composites",
														"v1",
														"ed-fi",
														"test",
														"DisciplinedStudents"
													],
													"query": [
														{
															"key": "studentUniqueId",
															"value": "{{known:student:uniqueId:001}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Discipline Composite for 044 student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"// NOTE: Include this test if array vs. single object response behavior is changed for consistency with main API\r",
															"// pm.test(\"Should return the 001 student\", () => {\r",
															"//   pm.expect(responseItems.length).to.equal(1);\r",
															"// });\r",
															"\r",
															"const responseItem = responseItems; // NOTE: If behavior is changed for consistency with main API, change to --> responseItems[0];\r",
															"\r",
															"pm.test(\"Should only return one of the discipline actions\", () => {\r",
															"    pm.expect(responseItem.disciplineActions.length).to.equal(1);\r",
															"});\r",
															"\r",
															"pm.test(\"Should only return the discipline action with the client's associated school as the responsibility school\", () => {\r",
															"    pm.expect(responseItem.disciplineActions[0].responsibilitySchoolReference.schoolId).to.equal(255901044);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_255901044}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/DisciplinedStudents?studentUniqueId={{known:student:uniqueId:044}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"composites",
														"v1",
														"ed-fi",
														"test",
														"DisciplinedStudents"
													],
													"query": [
														{
															"key": "studentUniqueId",
															"value": "{{known:student:uniqueId:044}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "LEA client",
									"item": [
										{
											"name": "Get DisciplineActions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"pm.test(\"Should only return both of the discipline actions\", () => {\r",
															"    pm.expect(responseItems.length).equal(2);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return the discipline action for responsibility school 001\", () => {\r",
															"    const item = _.find(responseItems, i => { return i.id == pm.environment.get('known:disciplineAction:001:id') });\r",
															"    pm.expect(item).to.not.be.undefined;\r",
															"});\r",
															"\r",
															"pm.test(\"Should return the discipline action for responsibility school 044\", () => {\r",
															"    const item = _.find(responseItems, i => { return i.id == pm.environment.get('known:disciplineAction:044:id') });\r",
															"    pm.expect(item).to.not.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions?disciplineActionLength=987.65",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"disciplineActions"
													],
													"query": [
														{
															"key": "limit",
															"value": "1",
															"disabled": true
														},
														{
															"key": "disciplineActionLength",
															"value": "987.65"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Discipline Composite for 001 student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"// NOTE: Include this test if array vs. single object response behavior is changed for consistency with main API\r",
															"// pm.test(\"Should return the 001 student\", () => {\r",
															"//   pm.expect(responseItems.length).to.equal(1);\r",
															"// });\r",
															"\r",
															"const responseItem = responseItems; // NOTE: If behavior is changed for consistency with main API, change to --> responseItems[0];\r",
															"\r",
															"pm.test(\"Should only return one of the discipline actions\", () => {\r",
															"    pm.expect(responseItem.disciplineActions.length).to.equal(1);\r",
															"});\r",
															"\r",
															"pm.test(\"Should only return the discipline action with the client's associated school as the responsibility school\", () => {\r",
															"    pm.expect(responseItem.disciplineActions[0].responsibilitySchoolReference.schoolId).to.equal(255901001);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/DisciplinedStudents?studentUniqueId={{known:student:uniqueId:001}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"composites",
														"v1",
														"ed-fi",
														"test",
														"DisciplinedStudents"
													],
													"query": [
														{
															"key": "studentUniqueId",
															"value": "{{known:student:uniqueId:001}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Discipline Composite for 044 student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"   pm.expect(pm.response.code).to.equal(200); \r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"// NOTE: Include this test if array vs. single object response behavior is changed for consistency with main API\r",
															"// pm.test(\"Should return the 001 student\", () => {\r",
															"//   pm.expect(responseItems.length).to.equal(1);\r",
															"// });\r",
															"\r",
															"const responseItem = responseItems; // NOTE: If behavior is changed for consistency with main API, change to --> responseItems[0];\r",
															"\r",
															"pm.test(\"Should only return one of the discipline actions\", () => {\r",
															"    pm.expect(responseItem.disciplineActions.length).to.equal(1);\r",
															"});\r",
															"\r",
															"pm.test(\"Should only return the discipline action with the client's associated school as the responsibility school\", () => {\r",
															"    pm.expect(responseItem.disciplineActions[0].responsibilitySchoolReference.schoolId).to.equal(255901044);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/DisciplinedStudents?studentUniqueId={{known:student:uniqueId:044}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"composites",
														"v1",
														"ed-fi",
														"test",
														"DisciplinedStudents"
													],
													"query": [
														{
															"key": "studentUniqueId",
															"value": "{{known:student:uniqueId:044}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "When attempting updates without access to responsibility school id",
							"item": [
								{
									"name": "Update DisciplineAction responsibility to 107 (using 001 client)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 403 or 404\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([403, 404]) \r",
													" });\r",
													"\r",
													"const responseItem = pm.response.json();\r",
													"\r",
													"pm.test(\"Should indicate that the API client does not have the relationships to perform the operation\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and one or more of the following properties of the resource item: 'ResponsibilitySchoolId', 'StudentUniqueId'./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assignmentSchoolReference\": {\r\n        \"schoolId\": 255901044\r\n    },\r\n    \"responsibilitySchoolReference\": {\r\n        \"schoolId\": 255901107\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:001}}\"\r\n    },\r\n    \"disciplineActionIdentifier\": \"TEST-001\",\r\n    \"disciplineDate\": \"2022-02-09\",\r\n    \"actualDisciplineActionLength\": 1.00,\r\n    \"disciplineActionLength\": 987.65,\r\n    \"disciplines\": [\r\n        {\r\n            \"disciplineDescriptor\": \"uri://ed-fi.org/DisciplineDescriptor#In School Suspension\"\r\n        }\r\n    ],\r\n    \"staffs\": [],\r\n    \"studentDisciplineIncidentAssociations\": [\r\n        {\r\n            \"studentDisciplineIncidentAssociationReference\": {\r\n                \"studentUniqueId\": \"604822\",\r\n                \"incidentIdentifier\": \"1\",\r\n                \"schoolId\": 255901001\r\n            }\r\n        }\r\n    ],\r\n    \"studentDisciplineIncidentBehaviorAssociations\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions"
											],
											"query": [
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update DisciplineAction length (using 001 client)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 403\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(403); \r",
													"});\r",
													"\r",
													"const responseItem = pm.response.json();\r",
													"\r",
													"pm.test(\"Should indicate that the API client does not have the relationships to perform the operation\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and one or more of the following properties of the resource item: 'ResponsibilitySchoolId', 'StudentUniqueId'./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"responsibilitySchoolReference\": {\r\n        \"schoolId\": 255901044\r\n    },\r\n    \"assignmentSchoolReference\": {\r\n        \"schoolId\": 255901001\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:044}}\"\r\n    },\r\n    \"disciplineActionIdentifier\": \"TEST-044\",\r\n    \"disciplineDate\": \"2022-02-09\",\r\n    \"actualDisciplineActionLength\": 2.00,\r\n    \"disciplineActionLength\": 987.65,\r\n    \"disciplines\": [\r\n        {\r\n            \"disciplineDescriptor\": \"uri://ed-fi.org/DisciplineDescriptor#In School Suspension\"\r\n        }\r\n    ],\r\n    \"staffs\": [],\r\n    \"studentDisciplineIncidentAssociations\": [\r\n        {\r\n            \"studentDisciplineIncidentAssociationReference\": {\r\n                \"studentUniqueId\": \"{{known:student:uniqueId:044}}\",\r\n                \"incidentIdentifier\": \"1\",\r\n                \"schoolId\": 255901044\r\n            }\r\n        }\r\n    ],\r\n    \"studentDisciplineIncidentBehaviorAssociations\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions"
											],
											"query": [
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When attempting updates WITH access to responsibility school id Copy",
							"item": [
								{
									"name": "Update DisciplineAction assignment without restriction (using 001 client)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(200); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assignmentSchoolReference\": {\r\n        \"schoolId\": 255901107\r\n    },\r\n    \"responsibilitySchoolReference\": {\r\n        \"schoolId\": 255901001\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{known:student:uniqueId:001}}\"\r\n    },\r\n    \"disciplineActionIdentifier\": \"TEST-001\",\r\n    \"disciplineDate\": \"2022-02-09\",\r\n    \"actualDisciplineActionLength\": 2.00,\r\n    \"disciplineActionLength\": 987.65,\r\n    \"disciplines\": [\r\n        {\r\n            \"disciplineDescriptor\": \"uri://ed-fi.org/DisciplineDescriptor#In School Suspension\"\r\n        }\r\n    ],\r\n    \"staffs\": [],\r\n    \"studentDisciplineIncidentAssociations\": [\r\n        {\r\n            \"studentDisciplineIncidentAssociationReference\": {\r\n                \"studentUniqueId\": \"604822\",\r\n                \"incidentIdentifier\": \"1\",\r\n                \"schoolId\": 255901001\r\n            }\r\n        }\r\n    ],\r\n    \"studentDisciplineIncidentBehaviorAssociations\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions"
											],
											"query": [
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "When reading deleted discipline actions",
							"item": [
								{
									"name": "Get AvailableChangeVersions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"pm.environment.set('known:newestChangeVersion', responseItem.newestChangeVersion + 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');\r",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
													"function createScenarioId() { return newGuid().substring(0,5); }\r",
													"pm.environment.set('scenarioId', createScenarioId());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/availableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"availableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete DisciplineAction for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions/{{known:disciplineAction:044:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions",
												"{{known:disciplineAction:044:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete DisciplineAction for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204\", () => {\r",
													"   pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions/{{known:disciplineAction:001:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions",
												"{{known:disciplineAction:001:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get deleted discipline actions (001 client)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"pm.test(\"Should return the discipline incident associated with the API client's school\", () => {\r",
													"  pm.expect(responseItems.find(i => { return i.keyValues.disciplineActionIdentifier == \"TEST-001\" })).to.not.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Should not return the discipline incident associated with the other school\", () => {\r",
													"  pm.expect(responseItems.find(i => { return i.keyValues.disciplineActionIdentifier == \"TEST-044\" })).to.be.undefined;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions/deletes?minChangeVersion={{known:newestChangeVersion}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions",
												"deletes"
											],
											"query": [
												{
													"key": "minChangeVersion",
													"value": "{{known:newestChangeVersion}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get deleted discipline actions (044 client)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"pm.test(\"Should return the discipline incident associated with the API client's school\", () => {\r",
													"  pm.expect(responseItems.find(i => { return i.keyValues.disciplineActionIdentifier == \"TEST-044\" })).to.not.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Should not return the discipline incident associated with the other school\", () => {\r",
													"  pm.expect(responseItems.find(i => { return i.keyValues.disciplineActionIdentifier == \"TEST-001\" })).to.be.undefined;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901044}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions/deletes?minChangeVersion={{known:newestChangeVersion}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions",
												"deletes"
											],
											"query": [
												{
													"key": "minChangeVersion",
													"value": "{{known:newestChangeVersion}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get deleted discipline actions (LEA client)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"pm.test(\"Should return the discipline incident associated with the first school\", () => {\r",
													"  pm.expect(responseItems.find(i => { return i.keyValues.disciplineActionIdentifier == \"TEST-001\" })).to.not.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"Should return the discipline incident associated with the second school\", () => {\r",
													"  pm.expect(responseItems.find(i => { return i.keyValues.disciplineActionIdentifier == \"TEST-044\" })).to.not.be.undefined;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineActions/deletes?minChangeVersion={{known:newestChangeVersion}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineActions",
												"deletes"
											],
											"query": [
												{
													"key": "minChangeVersion",
													"value": "{{known:newestChangeVersion}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete studentDisciplineIncidentAssociation for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204 or 404\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([204, 404]) \r",
													" });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentDisciplineIncidentAssociations/{{known:sdia:044:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentDisciplineIncidentAssociations",
												"{{known:sdia:044:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete disciplineIncident for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineIncidents/{{known:disciplineIncidents:044:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineIncidents",
												"{{known:disciplineIncidents:044:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete studentDisciplineIncidentAssociation for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204 or 404\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([204, 404]) \r",
													" });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentDisciplineIncidentAssociations/{{known:sdia:001:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentDisciplineIncidentAssociations",
												"{{known:sdia:001:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete disciplineIncident for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/disciplineIncidents/{{known:disciplineIncidents:001:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"disciplineIncidents",
												"{{known:disciplineIncidents:001:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete cross register student in 044 for 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:044:001:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations",
												"{{known:studentSchoolAssociation:044:001:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete cross register student in 001 for 044",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:001:044:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations",
												"{{known:studentSchoolAssociation:001:044:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Namespace-Based",
					"item": [
						{
							"name": "Namespace with prefix (GradebookEntry)",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Get Section (for reference)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"  pm.expect(pm.response.code).equal(200);\r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"const responseItem = responseItems[0];\r",
															"\r",
															"const offering = responseItem.courseOfferingReference;\r",
															"\r",
															"pm.environment.set('known:sectionReference:localCourseCode', offering.localCourseCode);\r",
															"pm.environment.set('known:sectionReference:schoolId', offering.schoolId);\r",
															"pm.environment.set('known:sectionReference:schoolYear', offering.schoolYear);\r",
															"pm.environment.set('known:sectionReference:sessionName', offering.sessionName);\r",
															"pm.environment.set('known:sectionReference:sectionIdentifier', responseItem.sectionIdentifier);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections?limit=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"sections"
													],
													"query": [
														{
															"key": "limit",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "When working with a gradebook entry with namespace access",
									"item": [
										{
											"name": "Create Gradebook Entry (Other namespace client)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 201\", () => {\r",
															"  pm.expect(pm.response.code).equal(201);\r",
															"});\r",
															"\r",
															"pm.environment.set('known:gradebookEntry:id:otherNamespace', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gradebookEntryIdentifier\": \"Other-gradebookEntry\",\r\n  \"Namespace\": \"uri://other.org/PostmanTesting\",\r\n  \"dateAssigned\": \"2021-08-23\",\r\n  \"title\": \"Source System Namespace Authorization Testing\",\r\n  \"learningStandards\": [],\r\n  \"sourcesectionidentifier\": \"{{known:sectionReference:sectionIdentifier}}\",\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:sectionReference:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:sectionReference:schoolId}}\",\r\n    \"schoolYear\": \"{{known:sectionReference:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:sectionReference:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:sectionReference:sessionName}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Gradebook Entry (LEA client)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 201\", () => {\r",
															"  pm.expect(pm.response.code).equal(201);\r",
															"});\r",
															"\r",
															"pm.environment.set('known:gradebookEntry:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gradebookEntryIdentifier\": \"NS-with-prefix-test\",\r\n  \"Namespace\": \"uri://ed-fi.org/PostmanTesting\",\r\n  \"dateAssigned\": \"2021-08-23\",\r\n  \"title\": \"Source System Namespace Authorization Testing\",\r\n  \"learningStandards\": [],\r\n  \"sourcesectionidentifier\": \"{{known:sectionReference:sectionIdentifier}}\",  \r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:sectionReference:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:sectionReference:schoolId}}\",\r\n    \"schoolYear\": \"{{known:sectionReference:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:sectionReference:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:sectionReference:sessionName}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "When working with gradebook entry without namespace access",
									"item": [
										{
											"name": "Attempt to create gradebook entry",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 403\", () => {\r",
															"  pm.expect(pm.response.code).equal(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Should indicate the API client doesn't have access to the supplied namespace\", () => {\r",
															"  const problemDetails = pm.response.json();\r",
															"\r",
															"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
															"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
															"  pm.expect(problemDetails.errors[0]).to.match(/^Access to the resource item could not be authorized based on the caller's NamespacePrefix claims:/);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gradebookEntryIdentifier\": \"NS-with-prefix-test\",\r\n  \"Namespace\": \"uri://other.org/PostmanTesting\",\r\n  \"dateAssigned\": \"2021-08-23\",\r\n  \"title\": \"Source System Namespace Authorization Test\",\r\n  \"sourceSectionIdentifier\": \"{{$randomBankAccount}}\",\r\n  \"learningStandards\": [],\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:sectionReference:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:sectionReference:schoolId}}\",\r\n    \"schoolYear\": \"{{known:sectionReference:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:sectionReference:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:sectionReference:sessionName}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Attempt to update existing gradebook entry",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 403\", () => {\r",
															"  pm.expect(pm.response.code).equal(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Should indicate the API client doesn't have access to the supplied namespace\", () => {\r",
															"  const problemDetails = pm.response.json();\r",
															"\r",
															"  pm.expect(pm.response.code).equal(problemDetails.status);\r",
															"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
															"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
															"\r",
															"  pm.expect(problemDetails.errors).to.match(/^Access to the resource item could not be authorized based on the caller's NamespacePrefix claims:/);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"gradebookEntryIdentifier\": \"Other-gradebookEntry\",\r\n  \"Namespace\": \"uri://other.org/PostmanTesting\",\r\n  \"dateAssigned\": \"1900-01-01\",\r\n  \"title\": \"Wrong Namespace\",\r\n  \"learningStandards\": [],\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:sectionReference:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:sectionReference:schoolId}}\",\r\n    \"schoolYear\": \"{{known:sectionReference:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:sectionReference:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:sectionReference:sessionName}}\"\r\n  },\r\n  \"sourceSectionIdentifier\": \"{{$randomBankAccount}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Attempt to delete gradebook entry",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 403\", () => {\r",
															"  pm.expect(pm.response.code).equal(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Should indicate the API client doesn't have access to the supplied namespace\", () => {\r",
															"  const problemDetails = pm.response.json();\r",
															"\r",
															"  pm.expect(pm.response.code).equal(problemDetails.status);\r",
															"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
															"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
															"\r",
															"  pm.expect(problemDetails.errors).to.match(/^Access to the resource item could not be authorized based on the caller's NamespacePrefix claims:/);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries/{{known:gradebookEntry:id:otherNamespace}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries",
														"{{known:gradebookEntry:id:otherNamespace}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "When getting gradebook entries",
									"item": [
										{
											"name": "Other namespace client",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"  pm.expect(pm.response.code).equal(200);\r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"pm.test(\"Should return a single gradebook entry\", () => {\r",
															"  pm.expect(responseItems.length).equal(1);\r",
															"});\r",
															"\r",
															"const responseItem = responseItems[0];\r",
															"\r",
															"pm.test(\"Should return the gradebook entry with the other.org source system namespace value\", () => {\r",
															"  pm.expect(responseItem.namespace).equal('uri://other.org/PostmanTesting');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries?title=Source System Namespace Authorization Testing",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries"
													],
													"query": [
														{
															"key": "title",
															"value": "Source System Namespace Authorization Testing"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "LEA client (ed-fi.org)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 200\", () => {\r",
															"  pm.expect(pm.response.code).equal(200);\r",
															"});\r",
															"\r",
															"const responseItems = pm.response.json();\r",
															"\r",
															"pm.test(\"Should return a single gradebook entry\", () => {\r",
															"  pm.expect(responseItems.length).equal(1);\r",
															"});\r",
															"\r",
															"const responseItem = responseItems[0];\r",
															"\r",
															"pm.test(\"Should return the gradebook entry with the ed-fi.org source system namespace value\", () => {\r",
															"  pm.expect(responseItem.namespace).equal('uri://ed-fi.org/PostmanTesting');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries?title=Source System Namespace Authorization Testing",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries"
													],
													"query": [
														{
															"key": "title",
															"value": "Source System Namespace Authorization Testing"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Teardown",
									"item": [
										{
											"name": "Delete Gradebook Entry (Ed-Fi namespace)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 204\", () => {\r",
															"  pm.expect(pm.response.code).equal(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries/{{known:gradebookEntry:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries",
														"{{known:gradebookEntry:id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Gradebook Entry (Other namespace)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response is 204\", () => {\r",
															"  pm.expect(pm.response.code).equal(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_Other_Namespace}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/gradebookEntries/{{known:gradebookEntry:id:otherNamespace}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"gradebookEntries",
														"{{known:gradebookEntry:id:otherNamespace}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clean up Environment Variables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
															"_.chain(_.keys(pm.environment.toObject()))\r",
															"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
															"  .each(k => pm.environment.unset(k)).value();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}",
													"host": [
														"{{ApiBaseUrl}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Namespace alongside Namespace-suffixed properties",
							"item": [
								{
									"name": "DescriptorMapping (MappedNamespace)",
									"item": [
										{
											"name": "Setup",
											"item": []
										},
										{
											"name": "When creating mappings",
											"item": [
												{
													"name": "From authorized namespace to unauthorized namespace",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 201\", () => {\r",
																	"  pm.expect(pm.response.code).equal(201);\r",
																	"});\r",
																	"\r",
																	"pm.environment.set('known:descriptorMapping:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"mappedNamespace\": \"uri://other.org/SomeOtherDescriptor\",\r\n  \"mappedValue\": \"Mapped\",\r\n  \"namespace\": \"uri://ed-fi.org/SomeDescriptor\",\r\n  \"value\": \"Original\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/descriptorMappings",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"descriptorMappings"
															]
														}
													},
													"response": []
												},
												{
													"name": "From unauthorized namespace to authorized namespace",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 403\", () => {\r",
																	"  pm.expect(pm.response.code).equal(403);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message indicates the API client doesn't have namespace permissions\", () => {\r",
																	"  const problemDetails = pm.response.json();\r",
																	"\r",
																	"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
																	"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
																	"  pm.expect(problemDetails.errors[0]).to.match(/^Access to the resource item could not be authorized based on the caller's NamespacePrefix claims:/);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"namespace\": \"uri://mapped.org/SomeOtherDescriptor\",\r\n  \"value\": \"Mapped\",\r\n  \"mappedNamespace\": \"uri://ed-fi.org/SomeDescriptor\",\r\n  \"mappedValue\": \"Original\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/descriptorMappings",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"descriptorMappings"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "When getting mappings",
											"item": [
												{
													"name": "With LEA client",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 200\", () => {\r",
																	"  pm.expect(pm.response.code).equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItems = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Should return the mapping\", () => {\r",
																	"  pm.expect(responseItems.length).equal(1);\r",
																	"  pm.expect(responseItems[0].namespace).equal('uri://ed-fi.org/SomeDescriptor');\r",
																	"  pm.expect(responseItems[0].value).equal('Original');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/descriptorMappings?mappedNamespace=uri://other.org/SomeOtherDescriptor",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"descriptorMappings"
															],
															"query": [
																{
																	"key": "mappedNamespace",
																	"value": "uri://other.org/SomeOtherDescriptor"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "With Other namespace client",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 200\", () => {\r",
																	"  pm.expect(pm.response.code).equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItems = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Should not return the mapping\", () => {\r",
																	"  pm.expect(responseItems.length).equal(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_Other_Namespace}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/descriptorMappings?mappedNamespace=uri://other.org/SomeOtherDescriptor",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"descriptorMappings"
															],
															"query": [
																{
																	"key": "mappedNamespace",
																	"value": "uri://other.org/SomeOtherDescriptor"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Teardown",
											"item": [
												{
													"name": "Delete the descriptor mapping",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/descriptorMappings/{{known:descriptorMapping:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"descriptorMappings",
																"{{known:descriptorMapping:id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Clean up Environment Variables",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
																	"_.chain(_.keys(pm.environment.toObject()))\r",
																	"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
																	"  .each(k => pm.environment.unset(k)).value();\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}",
															"host": [
																"{{ApiBaseUrl}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "LearningObjective (ParentNamespace)",
									"item": [
										{
											"name": "Setup",
											"item": [
												{
													"name": "Create a LearningObjective with Other namespace",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.environment.set('supplied:learningObjectiveId:parent', pm.variables.replaceIn(\"{{$guid}}\"));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 201 or 404\", () => {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201,404])\r",
																	" });\r",
																	"\r",
																	"if (pm.response.code === 201) {\r",
																	"    pm.environment.set('known:learningObjective:id:parent', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
																	"} \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_Other_Namespace}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"learningObjectiveId\": \"{{supplied:learningObjectiveId:parent}}\",\r\n  \"namespace\": \"uri://other.org/LearningObjective/LearningObjective.xml\",\r\n  \"objective\": \"Provide a parent learning objective to reference\",\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Reading\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"\r\n    }\r\n  ],\r\n  \"learningStandards\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/learningObjectives",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"learningObjectives"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "When creating LearningObjectives",
											"item": [
												{
													"name": "Create a child LearningObjective with authorized namespace",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 201 or 404\", () => {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201,404])\r",
																	" });\r",
																	"\r",
																	"if (pm.response.code === 201) {\r",
																	"    pm.environment.set('known:learningObjective:id:child', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
																	"} \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"learningObjectiveId\": \"{{$guid}}\",\r\n  \"namespace\": \"uri://ed-fi.org/LearningObjective/LearningObjective.xml\",\r\n  \"objective\": \"Provide a parent learning objective to reference\",\r\n  \"parentLearningObjectiveReference\": {\r\n    \"namespace\": \"uri://other.org/LearningObjective/LearningObjective.xml\",\r\n    \"learningObjectiveId\": \"{{supplied:learningObjectiveId:parent}}\"\r\n  },\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Reading\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"\r\n    }\r\n  ],\r\n  \"learningStandards\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/learningObjectives",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"learningObjectives"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a child LearningObjective with unauthorized namespace",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.environment.set('supplied:learningObjectiveId:child', pm.variables.replaceIn(\"{{$guid}}\"));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 403 or 404\", () => {\r",
																	"  pm.expect(pm.response.code).to.be.oneOf([403, 404])\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code === 403) {\r",
																	"  pm.test(\"Error message indicates the API client doesn't have namespace permissions\", () => {\r",
																	"    const problemDetails = pm.response.json();\r",
																	"\r",
																	"    pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
																	"    pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
																	"    pm.expect(problemDetails.errors[0]).to.match(/^Access to the resource item could not be authorized based on the caller's NamespacePrefix claims:/);\r",
																	"  })\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"learningObjectiveId\": \"{{$guid}}\",\r\n  \"namespace\": \"uri://other.org/LearningObjective/LearningObjective.xml\",\r\n  \"objective\": \"Provide a parent learning objective to reference\",\r\n  \"parentLearningObjectiveReference\": {\r\n    \"namespace\": \"uri://other.org/LearningObjective/LearningObjective.xml\",\r\n    \"learningObjectiveId\": \"{{supplied:learningObjectiveId:parent}}\"\r\n  },\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Reading\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"\r\n    }\r\n  ],\r\n  \"learningStandards\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/learningObjectives",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"learningObjectives"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Teardown",
											"item": [
												{
													"name": "Delete the child LearningObjective",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204 or 404\", () => {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([204, 404]) \r",
																	" });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/learningObjectives/{{known:learningObjective:id:child}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"learningObjectives",
																"{{known:learningObjective:id:child}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete the parent LearningObjective",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204 or 404\", () => {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([204, 404]) \r",
																	" });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_Other_Namespace}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/learningObjectives/{{known:learningObjective:id:parent}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"learningObjectives",
																"{{known:learningObjective:id:parent}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Clean up Environment Variables",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
																	"_.chain(_.keys(pm.environment.toObject()))\r",
																	"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
																	"  .each(k => pm.environment.unset(k)).value();\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}",
															"host": [
																"{{ApiBaseUrl}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "RelationshipsWithEdOrgsAndPeopleInverted Authorization Strategy Reference data",
					"item": [
						{
							"name": "When Creating At District",
							"item": [
								{
									"name": "Can Read But Not Write At School",
									"item": [
										{
											"name": "Course",
											"item": [
												{
													"name": "Create Course At District",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901);\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseTitle',\"Algebra I\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseIdentificationSystemDescriptor',\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':assigningOrganizationIdentificationCode',\"CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':identificationCode',\"CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseCode',newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':numberOfParts',1);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':courseGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"courseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"{{supplied:{{scenarioId}}:courseIdentificationSystemDescriptor}}\",\r\n      \"assigningOrganizationIdentificationCode\": \"{{supplied:{{scenarioId}}:assigningOrganizationIdentificationCode}}\",\r\n      \"identificationCode\": \"{{supplied:{{scenarioId}}:identificationCode}}\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n  },\r\n  \"courseTitle\": \"{{supplied:{{scenarioId}}:courseTitle}}\",\r\n  \"numberOfParts\": \"{{supplied:{{scenarioId}}:numberOfParts}}\"\r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Course At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.test(\"Should return the supplied courseCode\", () => {\r",
																	"  pm.expect(responseItem.courseCode).to.be.equals(pm.environment.get('supplied:'+scenarioId+':courseCode'));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:{{scenarioId}}:courseGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses",
																"{{known:{{scenarioId}}:courseGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Course At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(403);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:{{scenarioId}}:courseGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses",
																"{{known:{{scenarioId}}:courseGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Course At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:{{scenarioId}}:courseGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses",
																"{{known:{{scenarioId}}:courseGuid}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Program",
											"item": [
												{
													"name": "Create Program At District",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901);\r",
																	"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':programGuid', pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\"\r\n  \r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Program At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.test(\"Should return the supplied programName\", () => {\r",
																	"  pm.expect(responseItem.programName).to.be.equals(pm.environment.get('supplied:'+scenarioId+':programName'));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs",
																"{{known:{{scenarioId}}:programGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Program At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 403\", () => {\r",
																	"  pm.expect(pm.response.code).equal(403);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs",
																"{{known:{{scenarioId}}:programGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Program At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs",
																"{{known:{{scenarioId}}:programGuid}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ChartOfAccount",
											"item": [
												{
													"name": "Create ChartOfAccount At District",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901);\r",
																	"pm.environment.set('supplied:'+scenarioId+':accountIdentifier', newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':accountTypeDescriptor', \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':chartOfAccountGuid', pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"accountIdentifier\": \"{{supplied:{{scenarioId}}:accountIdentifier}}\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n  },\r\n  \"accountTypeDescriptor\": \"{{supplied:{{scenarioId}}:accountTypeDescriptor}}\"\r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get ChartOfAccount At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.test(\"Should return the supplied accountIdentifier\", () => {\r",
																	"  pm.expect(responseItem.accountIdentifier).to.be.equals(pm.environment.get('supplied:'+scenarioId+':accountIdentifier'));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:{{scenarioId}}:chartOfAccountGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts",
																"{{known:{{scenarioId}}:chartOfAccountGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete ChartOfAccount At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 403\", () => {\r",
																	"  pm.expect(pm.response.code).equal(403);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:{{scenarioId}}:chartOfAccountGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts",
																"{{known:{{scenarioId}}:chartOfAccountGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete ChartOfAccount At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:{{scenarioId}}:chartOfAccountGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts",
																"{{known:{{scenarioId}}:chartOfAccountGuid}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "When Creating At School",
							"item": [
								{
									"name": "Can Read And Write At District",
									"item": [
										{
											"name": "Course",
											"item": [
												{
													"name": "Create Course At School",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901001);\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseTitle',\"Algebra I\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseIdentificationSystemDescriptor',\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':assigningOrganizationIdentificationCode',\"CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':identificationCode',\"CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseCode',newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':numberOfParts',1);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':courseGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"courseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"{{supplied:{{scenarioId}}:courseIdentificationSystemDescriptor}}\",\r\n      \"assigningOrganizationIdentificationCode\": \"{{supplied:{{scenarioId}}:assigningOrganizationIdentificationCode}}\",\r\n      \"identificationCode\": \"{{supplied:{{scenarioId}}:identificationCode}}\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n  },\r\n  \"courseTitle\": \"{{supplied:{{scenarioId}}:courseTitle}}\",\r\n  \"numberOfParts\": \"{{supplied:{{scenarioId}}:numberOfParts}}\"\r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Course At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.test(\"Should return the supplied courseCode\", () => {\r",
																	"  pm.expect(responseItem.courseCode).to.be.equals(pm.environment.get('supplied:'+scenarioId+':courseCode'));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:{{scenarioId}}:courseGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses",
																"{{known:{{scenarioId}}:courseGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Course At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:{{scenarioId}}:courseGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses",
																"{{known:{{scenarioId}}:courseGuid}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Program",
											"item": [
												{
													"name": "Create Program At School",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901001);\r",
																	"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':programGuid', pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\"\r\n  \r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Program At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.test(\"Should return the supplied programName\", () => {\r",
																	"  pm.expect(responseItem.programName).to.be.equals(pm.environment.get('supplied:'+scenarioId+':programName'));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs",
																"{{known:{{scenarioId}}:programGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Program At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs",
																"{{known:{{scenarioId}}:programGuid}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ChartOfAccount",
											"item": [
												{
													"name": "Create ChartOfAccount At School",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901001);\r",
																	"pm.environment.set('supplied:'+scenarioId+':accountIdentifier', newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':accountTypeDescriptor', \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':chartOfAccountGuid', pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"accountIdentifier\": \"{{supplied:{{scenarioId}}:accountIdentifier}}\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n  },\r\n  \"accountTypeDescriptor\": \"{{supplied:{{scenarioId}}:accountTypeDescriptor}}\"\r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get ChartOfAccount At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.test(\"Should return the supplied accountIdentifier\", () => {\r",
																	"  pm.expect(responseItem.accountIdentifier).to.be.equals(pm.environment.get('supplied:'+scenarioId+':accountIdentifier'));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:{{scenarioId}}:chartOfAccountGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts",
																"{{known:{{scenarioId}}:chartOfAccountGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete ChartOfAccount At District",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:{{scenarioId}}:chartOfAccountGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts",
																"{{known:{{scenarioId}}:chartOfAccountGuid}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Cannot Read At Another School",
									"item": [
										{
											"name": "Course",
											"item": [
												{
													"name": "Create Course At School",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901001);\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseTitle',\"Algebra I\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseIdentificationSystemDescriptor',\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':assigningOrganizationIdentificationCode',\"CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':identificationCode',\"CSSC course code\");\r",
																	"pm.environment.set('supplied:'+scenarioId+':courseCode',newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':numberOfParts',1);\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':courseGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"courseCode\":\"{{supplied:{{scenarioId}}:courseCode}}\",\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\":\"{{supplied:{{scenarioId}}:courseIdentificationSystemDescriptor}}\",\r\n      \"assigningOrganizationIdentificationCode\": \"{{supplied:{{scenarioId}}:assigningOrganizationIdentificationCode}}\",\r\n      \"identificationCode\": \"{{supplied:{{scenarioId}}:identificationCode}}\"\r\n    }\r\n  ],\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\":\"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n  },\r\n  \"courseTitle\": \"{{supplied:{{scenarioId}}:courseTitle}}\",\r\n  \"numberOfParts\": \"{{supplied:{{scenarioId}}:numberOfParts}}\"\r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Course At Other School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(403);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901044}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:{{scenarioId}}:courseGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses",
																"{{known:{{scenarioId}}:courseGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Course At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:{{scenarioId}}:courseGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses",
																"{{known:{{scenarioId}}:courseGuid}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Program",
											"item": [
												{
													"name": "Create Program At School",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901001);\r",
																	"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':programGuid', pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\"\r\n  \r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Program At Other School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(403);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901044}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs",
																"{{known:{{scenarioId}}:programGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Program At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"programs",
																"{{known:{{scenarioId}}:programGuid}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ChartOfAccount",
											"item": [
												{
													"name": "Create ChartOfAccount At School",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const uuid = require('uuid');\r",
																	"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
																	"function createScenarioId() { return newGuid().substring(0,5); }\r",
																	"pm.environment.set('scenarioId', createScenarioId());\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"\r",
																	"pm.environment.set('supplied:'+scenarioId+':educationOrganizationId',255901001);\r",
																	"pm.environment.set('supplied:'+scenarioId+':accountIdentifier', newGuid());\r",
																	"pm.environment.set('supplied:'+scenarioId+':accountTypeDescriptor', \"uri://ed-fi.org/AccountTypeDescriptor#Expenditure\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(201);\r",
																	"});\r",
																	"const scenarioId = pm.environment.get('scenarioId');\r",
																	"pm.environment.set('known:'+scenarioId+':chartOfAccountGuid', pm.response.headers.one('Location').value.split(\"/\").pop());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"accountIdentifier\": \"{{supplied:{{scenarioId}}:accountIdentifier}}\",\r\n  \"fiscalYear\": 2022,\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{supplied:{{scenarioId}}:educationOrganizationId}}\"\r\n  },\r\n  \"accountTypeDescriptor\": \"{{supplied:{{scenarioId}}:accountTypeDescriptor}}\"\r\n}"
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get ChartOfAccount At Other School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(403);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901044}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:{{scenarioId}}:chartOfAccountGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts",
																"{{known:{{scenarioId}}:chartOfAccountGuid}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete ChartOfAccount At School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response is 204\", () => {\r",
																	"  pm.expect(pm.response.code).equal(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AccessToken_255901001}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/chartOfAccounts/{{known:{{scenarioId}}:chartOfAccountGuid}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"chartOfAccounts",
																"{{known:{{scenarioId}}:chartOfAccountGuid}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "StudentSpecialEducationProgramEligibilityAssociation",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Probe for StudentSpecialEducationProgramEligibilityAssociation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 404) {\r",
													"  pm.environment.set('known:eligibilitySupported', false);\r",
													"} else {\r",
													"  pm.environment.set('known:eligibilitySupported', true);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Identify High School (HS) Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"pm.environment.set('known:studentUniqueId:HS', responseItems[0].studentReference.studentUniqueId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations?limit=1&schoolId=255901001",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "schoolId",
													"value": "255901001",
													"description": "High School"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Identify Middle School (MS) Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"pm.environment.set('known:studentUniqueId:MS', responseItems[0].studentReference.studentUniqueId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations?limit=1&schoolId=255901044",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "schoolId",
													"value": "255901044",
													"description": "Middle School"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Identify Elementary School (ES) Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"pm.environment.set('known:studentUniqueId:ES', responseItems[0].studentReference.studentUniqueId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations?limit=1&schoolId=255901107",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "schoolId",
													"value": "255901107",
													"description": "Elementary School"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create MS student responsiblity association with HS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:responsibility:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:studentUniqueId:MS}}\"\r\n  },\r\n  \"beginDate\": \"2021-08-23\",\r\n  \"responsibilityDescriptor\": \"uri://ed-fi.org/ResponsibilityDescriptor#Residency\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationResponsibilityAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentEducationOrganizationResponsibilityAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HS Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 200 or 201\", () => {\r",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:program:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901044\r\n  },\r\n  \"programName\": \"Bilingual\",\r\n  \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\",\r\n  \"programId\": \"1\",\r\n  \"characteristics\": [],\r\n  \"learningStandards\": [],\r\n  \"sponsors\": [\r\n    {\r\n      \"programSponsorDescriptor\": \"uri://ed-fi.org/ProgramSponsorDescriptor#Local Education Agency\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HS StudentSpecialEducationProgramEligibilityAssociation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 201\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"  });\r",
													"\r",
													"  pm.environment.set('known:eligibility:id:HS', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"consentToEvaluationReceivedDate\": \"2023-07-08\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"programReference\": {\r\n    \"educationOrganizationId\": 255901001,\r\n    \"programName\": \"Bilingual\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:studentUniqueId:HS}}\"\r\n  },\r\n  \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part C\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create MS StudentSpecialEducationProgramEligibilityAssociation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 201\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"  });\r",
													"\r",
													"  pm.environment.set('known:eligibility:id:MS', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"consentToEvaluationReceivedDate\": \"2023-07-08\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901044\r\n  },\r\n  \"programReference\": {\r\n    \"educationOrganizationId\": 255901044,\r\n    \"programName\": \"Bilingual\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:studentUniqueId:MS}}\"\r\n  },\r\n  \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part C\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ES StudentSpecialEducationProgramEligibilityAssociation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 201\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"  });\r",
													"\r",
													"  pm.environment.set('known:eligibility:id:ES', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"consentToEvaluationReceivedDate\": \"2023-07-08\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"programReference\": {\r\n    \"educationOrganizationId\": 255901001,\r\n    \"programName\": \"Bilingual\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{known:studentUniqueId:ES}}\"\r\n  },\r\n  \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part C\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations"
											],
											"query": [
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Authorized through Enrollment",
							"item": [
								{
									"name": "Get the HS student eligibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"  });\r",
													"\r",
													"  const responseItem = pm.response.json();\r",
													"\r",
													"  pm.test(\"Should contain the high school student\", () => {\r",
													"    pm.expect(responseItem.studentReference.studentUniqueId).to.equal(pm.environment.get(\"known:studentUniqueId:HS\"));\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:eligibility:id:HS}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations",
												"{{known:eligibility:id:HS}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Authorized through Responsibility",
							"item": [
								{
									"name": "Get the MS student eligibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"  });\r",
													"\r",
													"  const responseItem = pm.response.json();\r",
													"\r",
													"  pm.test(\"Should contain the middle school student\", () => {\r",
													"    pm.expect(responseItem.studentReference.studentUniqueId).to.equal(pm.environment.get(\"known:studentUniqueId:MS\"));\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:eligibility:id:MS}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations",
												"{{known:eligibility:id:MS}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Not Authorized (through either Enrollment or Responsibility)",
							"item": [
								{
									"name": "Get the ES student eligibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 403\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(403);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:eligibility:id:ES}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations",
												"{{known:eligibility:id:ES}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete the HS student eligibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:eligibility:id:HS}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations",
												"{{known:eligibility:id:HS}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the MS student eligibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:eligibility:id:MS}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations",
												"{{known:eligibility:id:MS}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the ES student eligibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const eligibilitySupported = pm.environment.get('known:eligibilitySupported');\r",
													"\r",
													"if (eligibilitySupported) {\r",
													"  pm.test(\"Response is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"  });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:eligibility:id:ES}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramEligibilityAssociations",
												"{{known:eligibility:id:ES}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the HS Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:program:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs",
												"{{known:program:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the MS responsibility association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationResponsibilityAssociations/{{known:responsibility:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentEducationOrganizationResponsibilityAssociations",
												"{{known:responsibility:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Clean Up Test Data",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "KeyChanges",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create Session",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set('known:session:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"schoolReference\": {\r\n        \"schoolId\": 255901001\r\n    },\r\n    \"schoolYearTypeReference\": {\r\n        \"schoolYear\": 2022\r\n    },\r\n    \"sessionName\": \"SESSION ONE\",\r\n    \"beginDate\": \"2021-08-23\",\r\n    \"endDate\": \"2021-12-17\",\r\n    \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\",\r\n    \"totalInstructionalDays\": 81,\r\n    \"academicWeeks\": [],\r\n    \"gradingPeriods\": [\r\n        {\r\n            \"gradingPeriodReference\": {\r\n                \"schoolId\": 255901001,\r\n                \"schoolYear\": 2022,\r\n                \"gradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\",\r\n                \"gradingPeriodName\": \"2021-2022 Fall Semester Exam 1\",\r\n                \"PeriodSequence\":1\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Key to Unauthorized Target",
							"item": [
								{
									"name": "Change Session Key to unauthorized SchoolId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(403);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Message should indicate that no relationships have been established between the caller and the SchoolId\", () => {\r",
													"  const problemDetails = pm.response.json();\r",
													"\r",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");\r",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized.\");\r",
													"  pm.expect(problemDetails.errors).to.match(/No relationships have been established between the caller's education organization id claim(s)? \\(([\\d\\s,]+)\\) and the resource item's 'SchoolId' value./);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"schoolReference\": {\r\n        \"schoolId\": 255901044\r\n    },\r\n    \"schoolYearTypeReference\": {\r\n        \"schoolYear\": 2022\r\n    },\r\n    \"sessionName\": \"SESSION ONE\",\r\n    \"beginDate\": \"2021-08-23\",\r\n    \"endDate\": \"2021-12-17\",\r\n    \"termDescriptor\": \"uri://ed-fi.org/TermDescriptor#Fall Semester\",\r\n    \"totalInstructionalDays\": 81,\r\n    \"academicWeeks\": [],\r\n    \"gradingPeriods\": [\r\n        {\r\n            \"gradingPeriodReference\": {\r\n                \"schoolId\": 255901044,\r\n                \"schoolYear\": 2022,\r\n                \"gradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\",\r\n                \"gradingPeriodName\": \"2021-2022 Fall Semester Exam 1\",\r\n                \"PeriodSequence\":1\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions/{{known:session:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions",
												"{{known:session:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Session By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const item = pm.response.json();\r",
													"\r",
													"pm.test(\"Resource key was not changed\", () => {\r",
													"  pm.expect(item.schoolReference.schoolId).to.equal(255901001);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions/{{known:session:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions",
												"{{known:session:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Session",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions/{{known:session:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions",
												"{{known:session:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Add a correlation id to the query string of every request and save it to the environment as well",
					"const correlationId = pm.variables.replaceIn(\"{{$randomMACAddress}}\").replace(/:/g, '');",
					"pm.request.addQueryParams(`correlationId=${correlationId}`);",
					"",
					"pm.environment.set('known:stateEducationAgencyId',32);",
					"pm.environment.set('known:localEducationAgencyId1', 255902);",
					"pm.environment.set('known:schoolId1',100001099);",
					"pm.environment.set('known:localEducationAgencyId', 255901);",
					"pm.environment.set('known:schoolId', 255901001);",
					"",
					"CreateAccessToken(\"TokenExpiry\", \"AccessToken\", \"ApiKey_255901\", \"ApiSecret_255901\")",
					"CreateAccessToken(\"TokenExpiry_255902\", \"AccessToken_255902\", \"ApiKey_255902\", \"ApiSecret_255902\")",
					"CreateAccessToken(\"TokenExpiry_255901001\", \"AccessToken_255901001\", \"ApiKey_255901001\", \"ApiSecret_255901001\")",
					"",
					"CreateAccessToken(\"TokenExpiry_255901044\", \"AccessToken_255901044\", \"ApiKey_255901044\", \"ApiSecret_255901044\")",
					"",
					"CreateAccessToken(\"TokenExpiry_Other_Namespace\", \"AccessToken_Other_Namespace\", \"ApiKey_Other_Namespace\", \"ApiSecret_Other_Namespace\")",
					"",
					"CreateAccessToken(\"TokenExpiry_NoEdorg\", \"AccessToken_NoEdorg\", \"ApiKey_NoEdorg\", \"ApiSecret_NoEdorg\")",
					"",
					"// Set variables related to data standard specific contact/parent variablility ",
					"let ParentOrContactProperName = pm.environment.get(\"ParentOrContactProperName\");",
					"let StudentParentOrContactAssociationCollectionName = \"Student\" + ParentOrContactProperName + \"Associations\";",
					"let ParentOrContactUniqueIdName = ParentOrContactProperName + \"UniqueId\";",
					"let ParentOrContactName =  ParentOrContactProperName.toLowerCase();",
					"let ParentOrContactCollectionName = ParentOrContactName + \"s\";",
					"",
					"pm.environment.set(\"StudentParentOrContactAssociationCollectionName\", StudentParentOrContactAssociationCollectionName);",
					"pm.environment.set(\"ParentOrContactUniqueIdName\", ParentOrContactUniqueIdName);",
					"pm.environment.set(\"ParentOrContactName\", ParentOrContactName);",
					"pm.environment.set(\"ParentOrContactCollectionName\", ParentOrContactCollectionName);",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry, AccessToken, ApiKey, ApiSecret) {",
					"  let tokenExpiration = pm.environment.get(TokenExpiry);",
					"  let currentToken = pm.environment.get(AccessToken);",
					"  let getToken = true;",
					"  if (!tokenExpiration ||",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"  } else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"  } else {",
					"    getToken = false;",
					"  }",
					"  if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"",
					"    let getTokenRequest = {",
					"      method: 'POST',",
					"      url: tokenUrl,",
					"      auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"          { key: \"username\", value: clientId },",
					"          { key: \"password\", value: clientSecret }",
					"        ]",
					"      },",
					"      header: [",
					"        \"content-type:application/json\"",
					"      ],",
					"      body: {",
					"        mode: \"raw\",",
					"        raw: JSON.stringify({ Grant_type: grantType })",
					"      }",
					"    };",
					"",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"      let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"      // console.log({ err, jsonResponse, newAccessToken })",
					"",
					"      pm.environment.set(AccessToken, newAccessToken);",
					"",
					"      let expiryDate = new Date();",
					"      expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"      pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"  }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}