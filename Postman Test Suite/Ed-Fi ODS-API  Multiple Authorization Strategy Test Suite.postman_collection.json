{
	"info": {
		"_postman_id": "ceecda93-b832-4ed0-abba-b8aa1de4dd5f",
		"name": "Ed-Fi ODS/API  Multiple Authorization Strategy Test Suite",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Multiple Authorization Strategy",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Initialize Education Organization Ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('known:localEducationAgencyId',255901);\r",
											"pm.environment.set('known:schoolId',255901001);\r",
											"pm.environment.set('known:schoolId2',255901044);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-A}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Joe Registered",
					"item": [
						{
							"name": "Create Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"pm.environment.set('known:studentJoeRegisteredGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':StudentUniqueId', 'AAAAAA');",
											"pm.environment.set('known:StudentUniqueIdOne', pm.environment.get('supplied:'+scenarioId+':StudentUniqueId'));",
											"pm.environment.set('supplied:'+scenarioId+':LastSurname','Joe');",
											"pm.environment.set('supplied:'+scenarioId+':FirstName','Registered');",
											"pm.environment.set('supplied:'+scenarioId+':BirthDate','2022-02-22');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:StudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:BirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\"\r\n  }\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student School Association",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate','2022-02-22');",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:StudentUniqueIdOne}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initial Section Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });   ",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"",
											"let sectionsRecord = __.first(responseItems);",
											"pm.environment.set('known:sectionsRecord.localCourseCode',sectionsRecord.courseOfferingReference.localCourseCode);",
											"pm.environment.set('known:sectionsRecord.schoolId',sectionsRecord.courseOfferingReference.schoolId);",
											"pm.environment.set('known:sectionsRecord.schoolYear',sectionsRecord.courseOfferingReference.schoolYear);",
											"pm.environment.set('known:sectionsRecord.sectionIdentifier',sectionsRecord.sectionIdentifier);",
											"pm.environment.set('known:sectionsRecord.sessionName',sectionsRecord.courseOfferingReference.sessionName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections?schoolId={{known:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sections"
									],
									"query": [
										{
											"key": "schoolId",
											"value": "{{known:schoolId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  StudentSectionAssociation Ownership",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"const moment = require('moment');\r",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":beginDate\",'2022-01-01');\r",
											"\r",
											"let endDate=new Date();\r",
											"endDate = endDate.addMonths(12);\r",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":endDate\",endDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"",
											"pm.environment.set('known:studentSectionAssociation1:studentSectionAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-C}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sectionReference\": {\r\n      \"localCourseCode\": \"{{known:sectionsRecord.localCourseCode}}\",\r\n      \"schoolId\": \"{{known:sectionsRecord.schoolId}}\",\r\n      \"schoolYear\": \"{{known:sectionsRecord.schoolYear}}\",\r\n      \"sectionIdentifier\": \"{{known:sectionsRecord.sectionIdentifier}}\",\r\n      \"sessionName\": \"{{known:sectionsRecord.sessionName}}\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"{{known:StudentUniqueIdOne}}\"\r\n    },\r\n    \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n    \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create  StudentSectionAssociation without Ownership",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"const moment = require('moment');\r",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":beginDate\",'2022-01-02');\r",
											"\r",
											"let endDate=new Date();\r",
											"endDate = endDate.addMonths(8);\r",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":endDate\",beginDate);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"",
											"pm.environment.set('known:studentSectionAssociation2:studentSectionAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sectionReference\": {\r\n      \"localCourseCode\": \"{{known:sectionsRecord.localCourseCode}}\",\r\n      \"schoolId\": \"{{known:sectionsRecord.schoolId}}\",\r\n      \"schoolYear\": \"{{known:sectionsRecord.schoolYear}}\",\r\n      \"sectionIdentifier\": \"{{known:sectionsRecord.sectionIdentifier}}\",\r\n      \"sessionName\": \"{{known:sectionsRecord.sessionName}}\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"{{known:StudentUniqueIdOne}}\"\r\n    },\r\n    \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n    \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						}
					]
				},
				{
					"name": "Joe Responsibility",
					"item": [
						{
							"name": "Create Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"pm.environment.set('known:studentJoeResponsibilityGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':StudentUniqueId', 'BBBBBB');",
											"pm.environment.set('known:StudentUniqueIdTwo', pm.environment.get('supplied:'+scenarioId+':StudentUniqueId'));",
											"pm.environment.set('supplied:'+scenarioId+':LastSurname','Joe');",
											"pm.environment.set('supplied:'+scenarioId+':FirstName','Responsiblity');",
											"pm.environment.set('supplied:'+scenarioId+':BirthDate','2022-02-22');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:StudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:BirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:FirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:LastSurname}}\"\r\n  }\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student School Association",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate','2022-02-22');",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"pm.environment.set('known:StudentSchoolAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:StudentUniqueIdTwo}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create Student EdOrg ResponsibilityAssociation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"pm.environment.set('supplied:'+scenarioId+':responsibilityDescriptor',\"uri://ed-fi.org/ResponsibilityDescriptor#Residency\");",
											"",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set(\"supplied:\"+scenarioId+\":beginDate\",'2022-02-22');",
											"",
											"let endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set(\"supplied:\"+scenarioId+\":endDate\",endDate);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"pm.environment.set('known:StudentEducationOrganizationResponsibilityAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n   \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\",\r\n   \"responsibilityDescriptor\": \"{{supplied:{{scenarioId}}:responsibilityDescriptor}}\",\r\n  \"educationOrganizationReference\": {\r\n   \"educationOrganizationId\": \"{{known:schoolId2}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:StudentUniqueIdTwo}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentEducationOrganizationResponsibilityAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentEducationOrganizationResponsibilityAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Initial Section Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });   ",
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"",
											"let sectionsRecord = __.first(responseItems);",
											"pm.environment.set('known:sectionsRecord.localCourseCode',sectionsRecord.courseOfferingReference.localCourseCode);",
											"pm.environment.set('known:sectionsRecord.schoolId',sectionsRecord.courseOfferingReference.schoolId);",
											"pm.environment.set('known:sectionsRecord.schoolYear',sectionsRecord.courseOfferingReference.schoolYear);",
											"pm.environment.set('known:sectionsRecord.sectionIdentifier',sectionsRecord.sectionIdentifier);",
											"pm.environment.set('known:sectionsRecord.sessionName',sectionsRecord.courseOfferingReference.sessionName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections?schoolId={{known:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sections"
									],
									"query": [
										{
											"key": "schoolId",
											"value": "{{known:schoolId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  StudentSectionAssociation Ownership",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"const moment = require('moment');\r",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":beginDate\",'2022-02-01');\r",
											"\r",
											"let endDate=new Date();\r",
											"endDate = endDate.addMonths(12);\r",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":endDate\",endDate);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"",
											"pm.environment.set('known:studentSectionAssociation3:studentSectionAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-C}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sectionReference\": {\r\n      \"localCourseCode\": \"{{known:sectionsRecord.localCourseCode}}\",\r\n      \"schoolId\": \"{{known:sectionsRecord.schoolId}}\",\r\n      \"schoolYear\": \"{{known:sectionsRecord.schoolYear}}\",\r\n      \"sectionIdentifier\": \"{{known:sectionsRecord.sectionIdentifier}}\",\r\n      \"sessionName\": \"{{known:sectionsRecord.sessionName}}\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"{{known:StudentUniqueIdTwo}}\"\r\n    },\r\n    \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n    \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create  StudentSectionAssociation without Ownership",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"const moment = require('moment');\r",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":beginDate\",'2022-02-02');\r",
											"\r",
											"let endDate=new Date();\r",
											"endDate = endDate.addMonths(8);\r",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":endDate\",beginDate);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });   ",
											"",
											"pm.environment.set('known:studentSectionAssociation4:studentSectionAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sectionReference\": {\r\n      \"localCourseCode\": \"{{known:sectionsRecord.localCourseCode}}\",\r\n      \"schoolId\": \"{{known:sectionsRecord.schoolId}}\",\r\n      \"schoolYear\": \"{{known:sectionsRecord.schoolYear}}\",\r\n      \"sectionIdentifier\": \"{{known:sectionsRecord.sectionIdentifier}}\",\r\n      \"sessionName\": \"{{known:sectionsRecord.sessionName}}\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"{{known:StudentUniqueIdTwo}}\"\r\n    },\r\n    \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n    \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						}
					]
				},
				{
					"name": "Multiple Authorization Strategy Verification",
					"item": [
						{
							"name": "Get StudentSectionAssociations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"const __ = require('lodash');",
											"pm.test(\"Should only return AAAAAA and BBBBBB Student \", () => {",
											"    ",
											"    __.each(responseItems, responseItem => {",
											"",
											"        if(responseItem.studentReference.studentUniqueId==\"AAAAAA\")",
											"        {",
											"            pm.expect(responseItem.beginDate).to.equal(\"2022-01-01\");",
											"            pm.expect(responseItem.studentReference.studentUniqueId).to.equal(\"AAAAAA\");",
											"        }",
											"        else if(responseItem.studentReference.studentUniqueId==\"BBBBBB\")",
											"        {",
											"            pm.expect(responseItem.beginDate).to.equal(\"2022-02-01\");",
											"            pm.expect(responseItem.studentReference.studentUniqueId).to.equal(\"BBBBBB\");",
											"        }",
											"        else",
											"        {",
											"            // if any other record then it's failure use case",
											"            pm.expect(true).to.be.equals(false);",
											"        }                 ",
											"",
											"    });  ",
											"});",
											"",
											"pm.test(\"Should return some items for verification\", () => {",
											"",
											"     pm.expect(responseItems.length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-C}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get studentSectionAttendanceEvents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-C}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAttendanceEvents/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAttendanceEvents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Student EdOrg ResponsibilityAssociation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"pm.environment.set('supplied:'+scenarioId+':responsibilityDescriptor',\"uri://ed-fi.org/ResponsibilityDescriptor#Residency\");",
											"",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set(\"supplied:\"+scenarioId+\":beginDate\",'2022-02-22');",
											"",
											"let endDate=new Date();",
											"endDate = endDate.addMonths(12);",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set(\"supplied:\"+scenarioId+\":endDate\",endDate);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n   \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\",\r\n   \"responsibilityDescriptor\": \"{{supplied:{{scenarioId}}:responsibilityDescriptor}}\",\r\n  \"educationOrganizationReference\": {\r\n   \"educationOrganizationId\": \"{{known:schoolId2}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\":\"{{known:StudentUniqueIdTwo}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentEducationOrganizationResponsibilityAssociations/{{known:StudentEducationOrganizationResponsibilityAssociationGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentEducationOrganizationResponsibilityAssociations",
										"{{known:StudentEducationOrganizationResponsibilityAssociationGuid}}"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Delete Student School Association BBBBB",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let entryDate=new Date();",
											"entryDate = entryDate.addMonths(-10);",
											"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':entryDate','2022-02-22');",
											"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:StudentUniqueIdTwo}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations/{{known:StudentSchoolAssociationGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations",
										"{{known:StudentSchoolAssociationGuid}}"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get StudentSectionAssociations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"const __ = require('lodash');",
											"pm.test(\"Should only return AAAAAA Student \", () => {",
											"    __.each(responseItems, responseItem => {",
											"            pm.expect(responseItem.beginDate).to.equal(\"2022-01-01\");",
											"            pm.expect(responseItem.studentReference.studentUniqueId).to.equal(\"AAAAAA\");",
											"            pm.expect(responseItem.beginDate).to.not.equal(\"2022-02-01\");",
											"            pm.expect(responseItem.studentReference.studentUniqueId).to.not.equal(\"BBBBBB\");",
											"    });  ",
											"});",
											"",
											"pm.test(\"Should return some items for verification\", () => {",
											"     pm.expect(responseItems.length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-C}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete  StudentSectionAssociation AAAAA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"const moment = require('moment');\r",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":beginDate\",'2022-01-01');\r",
											"\r",
											"let endDate=new Date();\r",
											"endDate = endDate.addMonths(12);\r",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");\r",
											"pm.environment.set(\"supplied:\"+scenarioId+\":endDate\",endDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-C}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sectionReference\": {\r\n      \"localCourseCode\": \"{{known:sectionsRecord.localCourseCode}}\",\r\n      \"schoolId\": \"{{known:sectionsRecord.schoolId}}\",\r\n      \"schoolYear\": \"{{known:sectionsRecord.schoolYear}}\",\r\n      \"sectionIdentifier\": \"{{known:sectionsRecord.sectionIdentifier}}\",\r\n      \"sessionName\": \"{{known:sectionsRecord.sessionName}}\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"{{known:StudentUniqueIdOne}}\"\r\n    },\r\n    \"beginDate\": \"{{supplied:{{scenarioId}}:beginDate}}\",\r\n    \"endDate\": \"{{supplied:{{scenarioId}}:endDate}}\"\r\n  }"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation1:studentSectionAssociationGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										"{{known:studentSectionAssociation1:studentSectionAssociationGuid}}"
									],
									"query": [
										{
											"key": "studentUniqueId",
											"value": "AAAAAA",
											"disabled": true
										}
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get StudentSectionAssociations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Should return zero item for verification\", () => {",
											"     const responseItems = pm.response.json();",
											"     pm.expect(responseItems.length).to.be.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-C}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean Up Test Data",
					"item": [
						{
							"name": "Clean up studentSectionAssociations One",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"",
											"pm.test('Delete studentSectionAssociations with school Id 255901001', () => {",
											"",
											"           responseItems.forEach(responseItem => {",
											"            ",
											"            if(isNaN(responseItem.id))",
											"            {",
											"                let StudentSectionAssociationDeleteRequest = {",
											"                        url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/studentSectionAssociations/\" + responseItem.id,",
											"                        method: 'DELETE',",
											"                        header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_255901\"),",
											"                        body: {}",
											"                };",
											"    ",
											"                pm.sendRequest(StudentSectionAssociationDeleteRequest, function (err, StudentSectionAssociationDelete) {",
											"                        if (err) {",
											"                            console.log(err);",
											"                        } else {}",
											"                    });",
											"           }",
											"        });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/?schoolid={{known:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										""
									],
									"query": [
										{
											"key": "schoolid",
											"value": "{{known:schoolId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up studentSectionAssociations Two",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"",
											"pm.test('Delete studentSectionAssociations with school Id 255901001', () => {",
											"",
											"           responseItems.forEach(responseItem => {",
											"            ",
											"            if(isNaN(responseItem.id))",
											"            {",
											"                let StudentSectionAssociationDeleteRequest = {",
											"                        url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/studentSectionAssociations/\" + responseItem.id,",
											"                        method: 'DELETE',",
											"                        header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_255901-C\"),",
											"                        body: {}",
											"                };",
											"    ",
											"                pm.sendRequest(StudentSectionAssociationDeleteRequest, function (err, StudentSectionAssociationDelete) {",
											"                        if (err) {",
											"                            console.log(err);",
											"                        } else {}",
											"                    });",
											"           }",
											"        });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901-C}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/?schoolid={{known:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										""
									],
									"query": [
										{
											"key": "schoolid",
											"value": "{{known:schoolId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up StudentSchoolAssociation One",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"",
											"pm.test('Delete studentschoolassociations with school 255901001', () => {",
											"",
											"           responseItems.forEach(responseItem => {",
											"            ",
											"            if(isNaN(responseItem.id))",
											"            {",
											"                let ProgramDeleteRequest = {",
											"                        url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/studentschoolassociations/\" + responseItem.id,",
											"                        method: 'DELETE',",
											"                        header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_255901\"),",
											"                        body: {}",
											"                };",
											"    ",
											"                pm.sendRequest(ProgramDeleteRequest, function (err, ProgramDelete) {",
											"                        if (err) {",
											"                            console.log(err);",
											"                        } else {}",
											"                    });",
											"           }",
											"        });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentschoolassociations/?schoolid={{known:schoolId}}&studentUniqueId={{known:StudentUniqueIdOne}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentschoolassociations",
										""
									],
									"query": [
										{
											"key": "schoolid",
											"value": "{{known:schoolId}}"
										},
										{
											"key": "studentUniqueId",
											"value": "{{known:StudentUniqueIdOne}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up StudentSchoolAssociation Two",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"",
											"pm.test('Delete studentschoolassociations with school 255901001', () => {",
											"",
											"           responseItems.forEach(responseItem => {",
											"            ",
											"            if(isNaN(responseItem.id))",
											"            {",
											"                let ProgramDeleteRequest = {",
											"                        url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/studentschoolassociations/\" + responseItem.id,",
											"                        method: 'DELETE',",
											"                        header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_255901\"),",
											"                        body: {}",
											"                };",
											"    ",
											"                pm.sendRequest(ProgramDeleteRequest, function (err, ProgramDelete) {",
											"                        if (err) {",
											"                            console.log(err);",
											"                        } else {}",
											"                    });",
											"           }",
											"        });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentschoolassociations/?schoolid={{known:schoolId}}&studentUniqueId={{known:StudentUniqueIdTwo}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentschoolassociations",
										""
									],
									"query": [
										{
											"key": "schoolid",
											"value": "{{known:schoolId}}"
										},
										{
											"key": "studentUniqueId",
											"value": "{{known:StudentUniqueIdTwo}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"const keys = __.keys(pm.environment.toObject());\r",
											"console.log('Initial keys: ' + JSON.stringify(keys));\r",
											"\r",
											"const keysToRemove = __.filter(keys, x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'));\r",
											"\r",
											"__.each(keysToRemove, k => pm.environment.unset(k));\r",
											"\r",
											"const remainingKeys = __.keys(pm.environment.toObject());\r",
											"console.log('Remaining keys:' + JSON.stringify(remainingKeys));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/*Prepare Sandbox environment by running the SQL Server script below against the populated sandbox ODS -- which performs the following activities:",
							" * Create an ownership token in EdFi_Admin database.",
							" * Add the ownership token to the collection of ownership tokens associated with the Populated sandbox API client.",
							" * INSERT two students (Joe Registered, and Joe Responsibility)",
							" * INSERT a StudentSchoolAssociation record for Joe Registered.",
							" * INSERT a StudentEdOrgResponsibilityAssociation record for Joe Responsibility.",
							" * INSERT two StudentSectionAssociations for each student – one matching the ownership token, and one _not_ matching the ownership token.",
							" */"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"CreateAccessToken(\"TokenExpiry_255901\",",
					"                  \"AccessToken_255901\",",
					"                  \"ApiKey_255901\", ",
					"                  \"ApiSecret_255901\")",
					"                  ",
					"CreateAccessToken(\"TokenExpiry_255901-C\",",
					"                  \"AccessToken_255901-C\",",
					"                  \"ApiKey_255901-C\", ",
					"                  \"ApiSecret_255901-C\")",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry,AccessToken,ApiKey, ApiSecret)",
					"                  {",
					"let tokenExpiration = pm.environment.get(TokenExpiry);",
					"let currentToken = pm.environment.get(AccessToken);",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(AccessToken, newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/*Prepare Sandbox environment by running the SQL Server script below against the populated sandbox ODS -- which performs the following activities:",
					" * Create an ownership token in EdFi_Admin database.",
					" * Add the ownership token to the collection of ownership tokens associated with the Populated sandbox API client.",
					" * INSERT two students (Joe Registered, and Joe Responsibility)",
					" * INSERT a StudentSchoolAssociation record for Joe Registered.",
					" * INSERT a StudentEdOrgResponsibilityAssociation record for Joe Responsibility.",
					" * INSERT two StudentSectionAssociations for each student – one matching the ownership token, and one _not_ matching the ownership token.",
					" */"
				]
			}
		}
	]
}