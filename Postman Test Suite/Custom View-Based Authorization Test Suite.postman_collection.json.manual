{
	"info": {
		"_postman_id": "ca822f55-c7f6-4d9c-9cd2-80efbe0ab5db",
		"name": "Custom View-Based Authorization Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1213570"
	},
	"item": [
		{
			"name": "Test-Suite Setup",
			"item": [
				{
					"name": "Create Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"pm.environment.set('test-suite:known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"studentUniqueId\": \"ABC123\",\r\n    \"birthDate\": \"2022-10-29\",\r\n    \"firstName\": \"John\",\r\n    \"lastSurname\": \"Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students"
							]
						},
						"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Simple View-based Authorization",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create School",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": 255901\r\n  },\r\n  \"schoolId\": 255901555,\r\n  \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create StudentSchoolAssociation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:studentSchoolAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entryDate\": \"2022-10-29\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901555\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"ABC123\"\r\n  },\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "Student Program Association Lifecycle",
					"item": [
						{
							"name": "Create StudentProgramAssociation (not CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"Gifted and Talented\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Gifted and Talented\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"beginDate\": \"2021-08-30\",\r\n    \"programParticipationStatuses\": [],\r\n    \"services\": []\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll student in a CTE course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:studentSectionAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"PHOTJOUR\",\r\n    \"schoolId\": 255901001,\r\n    \"schoolYear\": 2022,\r\n    \"sectionIdentifier\": \"25590100101Trad124PHOTJOUR1201\",\r\n    \"sessionName\": \"2021-2022 Fall Semester\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"ABC123\"\r\n  },\r\n  \"beginDate\": \"2021-08-23\",\r\n  \"endDate\": \"2021-12-17\",\r\n  \"homeroomIndicator\": false,\r\n  \"programs\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create StudentProgramAssociation (CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:studentProgramAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"Gifted and Talented\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Gifted and Talented\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"beginDate\": \"2021-08-30\",\r\n    \"programParticipationStatuses\": [],\r\n    \"services\": []\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Student Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations/{{known:studentProgramAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations",
										"{{known:studentProgramAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get StudentProgramAssociations by UniqueId (CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const items = pm.response.json();\r",
											"\r",
											"pm.test(\"Results should contain a single item\", () => {\r",
											"  pm.expect(items.length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations?StudentUniqueId=ABC123",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations"
									],
									"query": [
										{
											"key": "StudentUniqueId",
											"value": "ABC123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Unenroll student in from CTE course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"// pm.environment.unset('known:studentSectionAssociation:id');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										"{{known:studentSectionAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get StudentProgramAssociation by Id (not CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations/{{known:studentProgramAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations",
										"{{known:studentProgramAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get StudentProgramAssociations by UniqueId (not CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"const items = pm.response.json();\r",
											"\r",
											"pm.test(\"Results should be empty\", () => {\r",
											"  pm.expect(items.length).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations?StudentUniqueId=ABC123",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations"
									],
									"query": [
										{
											"key": "StudentUniqueId",
											"value": "ABC123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete StudentProgramAssociation by Id (not CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations/{{known:studentProgramAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations",
										"{{known:studentProgramAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll student in a CTE course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:studentSectionAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"PHOTJOUR\",\r\n    \"schoolId\": 255901001,\r\n    \"schoolYear\": 2022,\r\n    \"sectionIdentifier\": \"25590100101Trad124PHOTJOUR1201\",\r\n    \"sessionName\": \"2021-2022 Fall Semester\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"ABC123\"\r\n  },\r\n  \"beginDate\": \"2021-08-23\",\r\n  \"endDate\": \"2021-12-17\",\r\n  \"homeroomIndicator\": false,\r\n  \"programs\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete StudentProgramAssociation by Id (CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentProgramAssociations/{{known:studentProgramAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentProgramAssociations",
										"{{known:studentProgramAssociation:id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Unenroll student in from CTE course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"// pm.environment.unset('known:studentSectionAssociation:id');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										"{{known:studentSectionAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete StudentSchoolAssociation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations",
										"{{known:studentSchoolAssociation:id}}"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						},
						{
							"name": "Delete School",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"  pm.expect(pm.response.code).to.equal(204);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:school:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Multiple Relationship-based with Custom view-based authorization",
			"item": [
				{
					"name": "Setup",
					"item": []
				},
				{
					"name": "Student Special Ed Program Eligibility Lifecycle",
					"item": [
						{
							"name": "Create Special Ed Program Eligibility (without CTE enrollment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"consentToEvaluationReceivedDate\": \"2024-08-02\",\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"Bilingual\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part B\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramEligibilityAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create StudentSchoolAssociation (for test data setup)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:studentSchoolAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entryDate\": \"2022-10-29\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"ABC123\"\r\n  },\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						},
						{
							"name": "Create Student Responsibility (use for relationship-based auth)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:studentEducationOrganizationResponsibilityAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"beginDate\": \"2024-08-02\",\r\n    \"responsibilityDescriptor\": \"uri://ed-fi.org/ResponsibilityDescriptor#Attendance\",\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"endDate\": \"2024-08-02\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationResponsibilityAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentEducationOrganizationResponsibilityAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll student in a CTE course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:studentSectionAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"PHOTJOUR\",\r\n    \"schoolId\": 255901001,\r\n    \"schoolYear\": 2022,\r\n    \"sectionIdentifier\": \"25590100101Trad124PHOTJOUR1201\",\r\n    \"sessionName\": \"2021-2022 Fall Semester\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"ABC123\"\r\n  },\r\n  \"beginDate\": \"2021-08-23\",\r\n  \"endDate\": \"2021-12-17\",\r\n  \"homeroomIndicator\": false,\r\n  \"programs\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete StudentSchoolAssociation (not used for relationship-based auth)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations",
										"{{known:studentSchoolAssociation:id}}"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						},
						{
							"name": "Create Special Ed Program Eligibility",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:studentSpecialEducationProgramEligibilityAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"consentToEvaluationReceivedDate\": \"2024-08-02\",\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"Bilingual\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part B\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramEligibilityAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Special Ed Program Eligibility By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"consentToEvaluationReceivedDate\": \"2024-08-02\",\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"Bilingual\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part B\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:studentSpecialEducationProgramEligibilityAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramEligibilityAssociations",
										"{{known:studentSpecialEducationProgramEligibilityAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Special Ed Program Eligibilities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain a single item array\", () => {\r",
											"  pm.expect(pm.response.json().length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"consentToEvaluationReceivedDate\": \"2024-08-02\",\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"Bilingual\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part B\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramEligibilityAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create StudentSchoolAssociation (for test data manipulation)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:studentSchoolAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entryDate\": \"2022-10-29\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"ABC123\"\r\n  },\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						},
						{
							"name": "Unenroll student from CTE course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"// pm.environment.unset('known:studentSectionAssociation:id');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										"{{known:studentSectionAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete StudentSchoolAssociation (for test data manipulation)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations",
										"{{known:studentSchoolAssociation:id}}"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						},
						{
							"name": "Get Special Ed Program Eligibility By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Detail should indicate authorization failure.\", () => {\r",
											"  pm.expect(response.detail).to.contain(\"Access to the requested data could not be authorized.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Detail should include hints for the two applied relationship-based authorization strategies.\", () => {\r",
											"  pm.expect(response.detail).to.contain(\"You may need to create a corresponding 'StudentSchoolAssociation' item.\");\r",
											"  pm.expect(response.detail).to.contain(\"You may need to create a corresponding 'StudentEducationOrganizationResponsibilityAssociation' item.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Errors should indicate a problem with the StudentUniqueId for authorization.\", () => {\r",
											"  pm.expect(response.errors).to.contain(\"The caller is not authorized to perform the requested operation on the item based on the existing value of the 'StudentUniqueId' property of the item.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"consentToEvaluationReceivedDate\": \"2024-08-02\",\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"Bilingual\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part B\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:studentSpecialEducationProgramEligibilityAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramEligibilityAssociations",
										"{{known:studentSpecialEducationProgramEligibilityAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Special Ed Program Eligibilities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain an empty array\", () => {\r",
											"  pm.expect(pm.response.json().length).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"consentToEvaluationReceivedDate\": \"2024-08-02\",\r\n    \"educationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n      \"educationOrganizationId\": 255901,\r\n      \"programName\": \"Bilingual\",\r\n      \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\"\r\n    },\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"ideaPartDescriptor\": \"uri://ed-fi.org/IDEAPartDescriptor#IDEA Part B\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramEligibilityAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Special Ed Program Eligibility (not CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:studentSpecialEducationProgramEligibilityAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramEligibilityAssociations",
										"{{known:studentSpecialEducationProgramEligibilityAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create StudentSchoolAssociation (for test data manipulation)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:studentSchoolAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entryDate\": \"2022-10-29\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"ABC123\"\r\n  },\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						},
						{
							"name": "Enroll student in a CTE course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:studentSectionAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"PHOTJOUR\",\r\n    \"schoolId\": 255901001,\r\n    \"schoolYear\": 2022,\r\n    \"sectionIdentifier\": \"25590100101Trad124PHOTJOUR1201\",\r\n    \"sessionName\": \"2021-2022 Fall Semester\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"ABC123\"\r\n  },\r\n  \"beginDate\": \"2021-08-23\",\r\n  \"endDate\": \"2021-12-17\",\r\n  \"homeroomIndicator\": false,\r\n  \"programs\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Special Ed Program Eligibility (CTE enrolled)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{{known:studentSpecialEducationProgramEligibilityAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramEligibilityAssociations",
										"{{known:studentSpecialEducationProgramEligibilityAssociation:id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Unenroll student from CTE course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"// pm.environment.unset('known:studentSectionAssociation:id');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations",
										"{{known:studentSectionAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Responsibility Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationResponsibilityAssociations/{{known:studentEducationOrganizationResponsibilityAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentEducationOrganizationResponsibilityAssociations",
										"{{known:studentEducationOrganizationResponsibilityAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete StudentSchoolAssociation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations",
										"{{known:studentSchoolAssociation:id}}"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						},
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Composite Key View-based Authorization",
			"item": [
				{
					"name": "Create Student Assessment (unaffiliated SchoolId, non ACT assessment)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Detail indicates basic authorization message.\", () => {\r",
									"  pm.expect(pm.response.json().detail).to.equal(\"Access to the requested data could not be authorized.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"reportedSchoolReference\": {\r\n      \"schoolId\": 5\r\n    },\r\n    \"assessmentReference\": {\r\n      \"assessmentIdentifier\": \"01774fa3-06f1-47fe-8801-c8b1e65057f2\",\r\n      \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"schoolYearTypeReference\": {\r\n      \"schoolYear\": 2022\r\n    },\r\n    \"studentAssessmentIdentifier\": \"/Qhqqe/gI4p3RguP68ZEDArGHM64FKnCg/RLHG8c\",\r\n    \"administrationDate\": \"2021-09-28T15:00:00Z\",\r\n    \"administrationEnvironmentDescriptor\": \"uri://ed-fi.org/AdministrationEnvironmentDescriptor#Testing Center\",\r\n    \"administrationLanguageDescriptor\": \"uri://ed-fi.org/LanguageDescriptor#eng\",\r\n    \"retestIndicatorDescriptor\": \"uri://ed-fi.org/RetestIndicatorDescriptor#Primary Administration\",\r\n    \"whenAssessedGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Third grade\",\r\n    \"accommodations\": [],\r\n    \"items\": [\r\n      {\r\n        \"assessmentItemReference\": {\r\n          \"assessmentIdentifier\": \"01774fa3-06f1-47fe-8801-c8b1e65057f2\",\r\n          \"identificationCode\": \"0\",\r\n          \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\",\r\n          \"link\": {\r\n            \"rel\": \"AssessmentItem\",\r\n            \"href\": \"/ed-fi/assessmentItems/776f505ee30d4574976d51a581595ff6\"\r\n          }\r\n        },\r\n        \"assessmentItemResultDescriptor\": \"uri://ed-fi.org/AssessmentItemResultDescriptor#Correct\",\r\n        \"assessmentResponse\": \"A\",\r\n        \"responseIndicatorDescriptor\": \"uri://ed-fi.org/ResponseIndicatorDescriptor#Nonscorable response\"\r\n      }\r\n    ],\r\n    \"performanceLevels\": [],\r\n    \"scoreResults\": [\r\n      {\r\n        \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Raw score\",\r\n        \"result\": \"3\",\r\n        \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer\"\r\n      }\r\n    ],\r\n    \"studentObjectiveAssessments\": []\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentAssessments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Student Assessment (affiliated SchoolId, non ACT assessment)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Detail indicates basic authorization message.\", () => {\r",
									"  pm.expect(pm.response.json().detail).to.equal(\"Access to the requested data could not be authorized.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"reportedSchoolReference\": {\r\n      \"schoolId\": 255901001\r\n    },\r\n    \"assessmentReference\": {\r\n      \"assessmentIdentifier\": \"01774fa3-06f1-47fe-8801-c8b1e65057f2\",\r\n      \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"schoolYearTypeReference\": {\r\n      \"schoolYear\": 2022\r\n    },\r\n    \"studentAssessmentIdentifier\": \"/Qhqqe/gI4p3RguP68ZEDArGHM64FKnCg/RLHG8c\",\r\n    \"administrationDate\": \"2021-09-28T15:00:00Z\",\r\n    \"administrationEnvironmentDescriptor\": \"uri://ed-fi.org/AdministrationEnvironmentDescriptor#Testing Center\",\r\n    \"administrationLanguageDescriptor\": \"uri://ed-fi.org/LanguageDescriptor#eng\",\r\n    \"retestIndicatorDescriptor\": \"uri://ed-fi.org/RetestIndicatorDescriptor#Primary Administration\",\r\n    \"whenAssessedGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Third grade\",\r\n    \"accommodations\": [],\r\n    \"items\": [\r\n      {\r\n        \"assessmentItemReference\": {\r\n          \"assessmentIdentifier\": \"01774fa3-06f1-47fe-8801-c8b1e65057f2\",\r\n          \"identificationCode\": \"0\",\r\n          \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\",\r\n          \"link\": {\r\n            \"rel\": \"AssessmentItem\",\r\n            \"href\": \"/ed-fi/assessmentItems/776f505ee30d4574976d51a581595ff6\"\r\n          }\r\n        },\r\n        \"assessmentItemResultDescriptor\": \"uri://ed-fi.org/AssessmentItemResultDescriptor#Correct\",\r\n        \"assessmentResponse\": \"A\",\r\n        \"responseIndicatorDescriptor\": \"uri://ed-fi.org/ResponseIndicatorDescriptor#Nonscorable response\"\r\n      }\r\n    ],\r\n    \"performanceLevels\": [],\r\n    \"scoreResults\": [\r\n      {\r\n        \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Raw score\",\r\n        \"result\": \"3\",\r\n        \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer\"\r\n      }\r\n    ],\r\n    \"studentObjectiveAssessments\": []\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentAssessments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Student Assessments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const items = pm.response.json();\r",
									"\r",
									"pm.test(\"Should return no items.\", () => {\r",
									"  pm.expect(items.length).to.equal(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments?Limit=500",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentAssessments"
							],
							"query": [
								{
									"key": "Limit",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Student Assessment (affiliated SchoolId, ACT assessment)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.environment.set('known:studentAssessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"ABC123\"\r\n    },\r\n    \"reportedSchoolReference\": {\r\n      \"schoolId\": 255901001\r\n    },\r\n    \"assessmentReference\": {\r\n      \"assessmentIdentifier\": \"ACT English\",\r\n      \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"schoolYearTypeReference\": {\r\n      \"schoolYear\": 2022\r\n    },\r\n    \"studentAssessmentIdentifier\": \"/Qhqqe/gI4p3RguP68ZEDArGHM64FKnCg/RLHG8c\",\r\n    \"administrationDate\": \"2021-09-28T15:00:00Z\",\r\n    \"administrationEnvironmentDescriptor\": \"uri://ed-fi.org/AdministrationEnvironmentDescriptor#Testing Center\",\r\n    \"administrationLanguageDescriptor\": \"uri://ed-fi.org/LanguageDescriptor#eng\",\r\n    \"retestIndicatorDescriptor\": \"uri://ed-fi.org/RetestIndicatorDescriptor#Primary Administration\",\r\n    \"whenAssessedGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Third grade\",\r\n    \"accommodations\": [],\r\n    \"items\": [],\r\n    \"performanceLevels\": [],\r\n    \"scoreResults\": [\r\n      {\r\n        \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#Raw score\",\r\n        \"result\": \"3\",\r\n        \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer\"\r\n      }\r\n    ],\r\n    \"studentObjectiveAssessments\": []\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentAssessments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Student Assessments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const items = pm.response.json();\r",
									"\r",
									"pm.test(\"At least 1 item was returned.\", () => {\r",
									"  pm.expect(items.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"All items have identifiers starting with ACT.\", () => {\r",
									"    // Iterate through all items to check the assessmentIdentifier\r",
									"    const allStartWithACT = items.every(item => {\r",
									"        return item.assessmentReference && \r",
									"               item.assessmentReference.assessmentIdentifier &&\r",
									"               item.assessmentReference.assessmentIdentifier.startsWith(\"ACT\");\r",
									"    });\r",
									"    \r",
									"    // Assert that all items pass the condition\r",
									"    pm.expect(allStartWithACT).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments?Limit=500",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentAssessments"
							],
							"query": [
								{
									"key": "Limit",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Student Assessment By id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentAssessments",
								"{{known:studentAssessment:id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Student Assessment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentAssessments",
								"{{known:studentAssessment:id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean up Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
									"  .each(k => pm.environment.unset(k)).value();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Custom View-based on Optional Property",
			"item": [
				{
					"name": "Get Student Transportations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const items = pm.response.json();\r",
									"\r",
									"pm.test(\"Should return at least 1 item.\", () => {\r",
									"  pm.expect(items.length).to.be.greaterThan(0);\r",
									"})\r",
									"\r",
									"pm.test(\"All items have transportation types containing the term 'Bus'.\", () => {\r",
									"    // Iterate through all items to check the assessmentIdentifier\r",
									"    const allContainBus = items.every(item => {\r",
									"        return item.transportationTypeDescriptor.indexOf(\"Bus\") >= 0;\r",
									"    });\r",
									"    \r",
									"    // Assert that all items pass the condition\r",
									"    pm.expect(allContainBus).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTransportations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTransportations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Student Transportations (with inaccesible transportation type)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Detail indicates basic authorization message.\", () => {\r",
									"  pm.expect(pm.response.json().detail).to.match(/^Access to the requested data could not be authorized./);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"604822\"\r\n    },\r\n    \"transportationEducationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"specialAccomodationRequirements\": \"Wheelchair Accessibility\",\r\n    \"transportationPublicExpenseEligibilityTypeDescriptor\": \"uri://ed-fi.org/TransportationPublicExpenseEligibilityTypeDescriptor#Eligible - Disability\",\r\n    \"transportationTypeDescriptor\": \"uri://ed-fi.org/TransportationTypeDescriptor#General Public Transportation\",\r\n    \"studentBusDetails\": {\r\n      \"busNumber\": \"Bus 101\",\r\n      \"busRouteDescriptor\": \"uri://gbisd.edu/BusRouteDescriptor#101\",\r\n      \"mileage\": 7.20,\r\n      \"travelDayofWeeks\": [\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Wednesday\"\r\n        },\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Monday\"\r\n        },\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Friday\"\r\n        }\r\n      ],\r\n      \"travelDirections\": [\r\n        {\r\n          \"travelDirectionDescriptor\": \"uri://ed-fi.org/TravelDirectionDescriptor#To and From School\"\r\n        }\r\n      ]\r\n    }\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTransportations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTransportations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Student Transportations (with null transportation type)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Detail indicates basic authorization message.\", () => {\r",
									"  pm.expect(pm.response.json().detail).to.equal(\"Access to the requested data could not be authorized. The 'TransportationTypeDescriptor' value is required for authorization purposes.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Type indicates an element is required.\", () => {\r",
									"  pm.expect(pm.response.json().type).to.equal(\"urn:ed-fi:api:security:authorization:custom-view:access-denied:element-required\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"604822\"\r\n    },\r\n    \"transportationEducationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"specialAccomodationRequirements\": \"Wheelchair Accessibility\",\r\n    \"transportationPublicExpenseEligibilityTypeDescriptor\": \"uri://ed-fi.org/TransportationPublicExpenseEligibilityTypeDescriptor#Eligible - Disability\",\r\n    \"studentBusDetails\": {\r\n      \"busNumber\": \"Bus 101\",\r\n      \"busRouteDescriptor\": \"uri://gbisd.edu/BusRouteDescriptor#101\",\r\n      \"mileage\": 7.20,\r\n      \"travelDayofWeeks\": [\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Wednesday\"\r\n        },\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Monday\"\r\n        },\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Friday\"\r\n        }\r\n      ],\r\n      \"travelDirections\": [\r\n        {\r\n          \"travelDirectionDescriptor\": \"uri://ed-fi.org/TravelDirectionDescriptor#To and From School\"\r\n        }\r\n      ]\r\n    }\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTransportations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTransportations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Student Transportations (with accesible transportation type)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('known:studentTransportation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"studentReference\": {\r\n      \"studentUniqueId\": \"604822\"\r\n    },\r\n    \"transportationEducationOrganizationReference\": {\r\n      \"educationOrganizationId\": 255901\r\n    },\r\n    \"specialAccomodationRequirements\": \"Wheelchair Accessibility\",\r\n    \"transportationPublicExpenseEligibilityTypeDescriptor\": \"uri://ed-fi.org/TransportationPublicExpenseEligibilityTypeDescriptor#Eligible - Disability\",\r\n    \"transportationTypeDescriptor\": \"uri://ed-fi.org/TransportationTypeDescriptor#Special Needs Bus\",\r\n    \"studentBusDetails\": {\r\n      \"busNumber\": \"Bus 101\",\r\n      \"busRouteDescriptor\": \"uri://gbisd.edu/BusRouteDescriptor#101\",\r\n      \"mileage\": 7.20,\r\n      \"travelDayofWeeks\": [\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Wednesday\"\r\n        },\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Monday\"\r\n        },\r\n        {\r\n          \"travelDayofWeekDescriptor\": \"uri://ed-fi.org/TravelDayofWeekDescriptor#Friday\"\r\n        }\r\n      ],\r\n      \"travelDirections\": [\r\n        {\r\n          \"travelDirectionDescriptor\": \"uri://ed-fi.org/TravelDirectionDescriptor#To and From School\"\r\n        }\r\n      ]\r\n    }\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTransportations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTransportations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Student Transportation By id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"const item = pm.response.json();\r",
									"\r",
									"pm.test(\"Item returned should reflect changed transportationTypeDescriptor.\", () => {\r",
									"  pm.expect(item.transportationTypeDescriptor).to.contain(\"Special Needs Bus\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentTransportations/{{known:studentTransportation:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentTransportations",
								"{{known:studentTransportation:id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test-Suite Teardown",
			"item": [
				{
					"name": "Delete Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{test-suite:known:student:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students",
								"{{test-suite:known:student:id}}"
							]
						},
						"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
					},
					"response": []
				},
				{
					"name": "Clean up Access Tokens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remove all environment variables related to Access Tokens\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'AccessToken_') || _.startsWith(x, 'TokenExpiry_'))\r",
									"  .each(k => pm.environment.unset(k)).value();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Add a correlation id to the query string of every request and save it to the environment as well\r",
					"const correlationId = pm.variables.replaceIn(\"{{$randomMACAddress}}\").replace(/:/g, '');\r",
					"pm.request.addQueryParams(`correlationId=${correlationId}`);\r",
					"pm.environment.set('correlationId', correlationId);\r",
					"\r",
					"// Allow use of the same key/secret if not defined\r",
					"const useDefaults = true;\r",
					"const defaultKey = pm.environment.get('ApiKey');\r",
					"const defaultSecret = pm.environment.get('ApiSecret')\r",
					"\r",
					"CreateAccessToken(\"255901\");\r",
					"\r",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman\r",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret\r",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)\r",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early\r",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token\r",
					"function CreateAccessToken(clientSuffix) {\r",
					"  const apiKeyName = `ApiKey_${clientSuffix}`;\r",
					"  const apiSecretName = `ApiSecret_${clientSuffix}`;\r",
					"  const tokenExpiryName = `TokenExpiry_${clientSuffix}`;\r",
					"  const accessTokenName = `AccessToken_${clientSuffix}`;\r",
					"\r",
					"  let tokenExpiration = pm.environment.get(tokenExpiryName);\r",
					"  let currentToken = pm.environment.get(accessTokenName);\r",
					"  let getToken = true;\r",
					"  \r",
					"  if (!tokenExpiration || !currentToken) {\r",
					"    console.log('Token or expiry date are missing, retrieving new token')\r",
					"  } else if (tokenExpiration <= (new Date()).getTime()) {\r",
					"    console.log('Token is expired, retrieving new token')\r",
					"  } else {\r",
					"    getToken = false;\r",
					"  }\r",
					"\r",
					"  if (getToken === true) {\r",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';\r",
					"    let clientId = pm.environment.get(apiKeyName);\r",
					"    let clientSecret = pm.environment.get(apiSecretName);\r",
					"\r",
					"    if (!(clientId || clientSecret) && useDefaults) {\r",
					"      clientId = defaultKey;\r",
					"      clientSecret = defaultSecret;\r",
					"    }\r",
					"\r",
					"    let grantType = 'client_credentials';\r",
					"\r",
					"    let getTokenRequest = {\r",
					"      method: 'POST',\r",
					"      url: tokenUrl,\r",
					"      auth: {\r",
					"        type: \"basic\",\r",
					"        basic: [\r",
					"          { key: \"username\", value: clientId },\r",
					"          { key: \"password\", value: clientSecret }\r",
					"        ]\r",
					"      },\r",
					"      header: [\r",
					"        \"content-type:application/x-www-form-urlencoded\"\r",
					"      ],\r",
					"      body: {\r",
					"        mode: \"urlencoded\",\r",
					"        urlencoded: [{ key: \"grant_type\", value: grantType }]\r",
					"      }\r",
					"    };\r",
					"\r",
					"    pm.sendRequest(getTokenRequest, (err, response) => {\r",
					"      let jsonResponse = response.json();\r",
					"      let newAccessToken = jsonResponse.access_token;\r",
					"\r",
					"      // console.log({ err, jsonResponse, newAccessToken })\r",
					"      console.log(`${accessTokenName} = ${newAccessToken}`);\r",
					"      pm.environment.set(accessTokenName, newAccessToken);\r",
					"\r",
					"      let expiryDate = new Date();\r",
					"      expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);\r",
					"      pm.environment.set(tokenExpiryName, expiryDate.getTime());\r",
					"    });\r",
					"  }\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}