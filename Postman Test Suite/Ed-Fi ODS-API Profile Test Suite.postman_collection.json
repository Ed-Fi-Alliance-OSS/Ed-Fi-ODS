{
	"info": {
		"_postman_id": "7cb234f7-8ee4-4d00-b45b-35a6cf653730",
		"name": "Ed-Fi ODS/API Profile Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Suite Setup",
			"item": [
				{
					"name": "Create Test Descriptor Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const __ = require(\"lodash\");",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// const codeValues = ['A1', 'A2', 'A3', 'A4'];",
									"// const descriptorName = 'AddressTypeDescriptor';",
									"// const descriptorCollectionName = 'addressTypeDescriptors';",
									"",
									"const allDescriptorData = [",
									"  { descriptorName: 'AddressTypeDescriptor', descriptorCollectionName: 'addressTypeDescriptors', codeValues: ['A1', 'A2', 'A3', 'A4'] },",
									"  { descriptorName: 'AssessmentReportingMethodDescriptor', descriptorCollectionName: 'assessmentReportingMethodDescriptors', codeValues: ['A1', 'A2', 'A3', 'A4'] },",
									"  { descriptorName: 'StateAbbreviationDescriptor', descriptorCollectionName: 'stateAbbreviationDescriptors', codeValues: ['S1', 'S2', 'S3', 'S4'] },",
									"  { descriptorName: 'SchoolCategoryDescriptor', descriptorCollectionName: 'schoolCategoryDescriptors', codeValues: ['S1', 'S2', 'S3', 'S4'] },",
									"  { descriptorName: 'GradeLevelDescriptor', descriptorCollectionName: 'gradeLevelDescriptors', codeValues: ['G1', 'G2', 'G3', 'G4'] },",
									"  { descriptorName: 'CountryDescriptor', descriptorCollectionName: 'countryDescriptors', codeValues: ['C1', 'C2', 'C3', 'C4'] },",
									"  { descriptorName: 'PerformanceLevelDescriptor', descriptorCollectionName: 'performanceLevelDescriptors', codeValues: ['P1', 'P2', 'P3', 'P4'] },",
									"  { descriptorName: 'ResultDatatypeTypeDescriptor', descriptorCollectionName: 'resultDatatypeTypeDescriptors', codeValues: ['A1', 'A2', 'A3', 'A4'] },",
									"];",
									"",
									"_.each(allDescriptorData, descriptorData => {",
									"  const codeValues = descriptorData.codeValues;",
									"  const descriptorName = descriptorData.descriptorName;",
									"  const descriptorCollectionName = descriptorData.descriptorCollectionName;",
									"",
									"  _.each(codeValues, codeValue => {",
									"",
									"    let payload = {",
									"      codeValue: codeValue,",
									"      description: codeValue,",
									"      namespace: `uri://ed-fi.org/${descriptorName}`,",
									"      shortDescription: codeValue",
									"    };",
									"",
									"    let descriptorPostRequest = {",
									"      url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/${descriptorCollectionName}`,",
									"      method: 'POST',",
									"      header: {",
									"        \"Authorization\": 'bearer ' + pm.environment.get(\"AccessToken_255901\"),",
									"        \"Content-Type\": \"application/json\"",
									"      },",
									"      body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(payload)",
									"      }",
									"    };",
									"",
									"    pm.sendRequest(descriptorPostRequest, function (err, response) {",
									"      if (err) {",
									"        console.log(err);",
									"      }",
									"    });",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Readable-only and writable-only profiles",
			"item": [
				{
					"name": "Items cannot be retrieved using a Writable-Only profile",
					"item": [
						{
							"name": "Get Schools",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", () => {",
											"    pm.expect(pm.response.code).to.equal(405);",
											"});",
											"",
											"pm.test(\"Response should indicate that the allowed methods for this resource with the 'test-profile-resource-writeonly' profile are PUT, POST, DELETE and OPTIONS.\", () => {",
											"    const responseItem = pm.response.json();",
											"    pm.expect(responseItem.message).to.include(\"The allowed methods for this resource with the 'test-profile-resource-writeonly' profile are PUT, POST, DELETE and OPTIONS.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "Scenario: A GET request is made with a write only profile\r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are PUT, POST, DELETE and OPTIONS.\""
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a write only profile\r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are PUT, POST, DELETE and OPTIONS.\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Items can be created using Writable-Only profiles",
					"item": [
						{
							"name": "Create a School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": \"255901\"\r\n    },\r\n    \"schoolId\": \"{{$randomInt}}{{$randomInt}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								},
								"description": "Scenario: A POST request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: A POST request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Items can be updated using a Writable-Only Profile",
					"item": [
						{
							"name": "Update the School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:school:id}}"
									]
								},
								"description": "Scenario: A PUT request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: A PUT request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Items can be retrieved using Readable-Only profile",
					"item": [
						{
							"name": "Get Schools",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-readonly.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						},
						{
							"name": "Get the School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-readonly.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:school:id}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Items cannot be updated using a Readable-Only profile",
					"item": [
						{
							"name": "Update the School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", () => {",
											"    pm.expect(pm.response.code).to.equal(405);",
											"});",
											"",
											"pm.test(\"Response should indicate that the allowed methods for this resource with the 'Test-Profile-Resource-ReadOnly' profile are GET, DELETE and OPTIONS. string\", () => {",
											"    const responseItem = pm.response.json();",
											"    pm.expect(responseItem.message).to.include(\"The allowed methods for this resource with the 'test-profile-resource-readonly' profile are GET, DELETE and OPTIONS.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-readonly.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:school:id}}"
									]
								},
								"description": "Scenario: A PUT request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: A PUT request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Items cannot be created using a Readable-OnlyProfile",
					"item": [
						{
							"name": "Attempt to create a School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", () => {",
											"    pm.expect(pm.response.code).to.equal(405);",
											"});",
											"",
											"pm.test(\"Response should indicate that the allowed methods for this resource with the 'test-profile-resource-readonly' profile are GET, DELETE and OPTIONS. string\", () => {",
											"    const responseItem = pm.response.json();",
											"    pm.expect(responseItem.message).to.include(\"The allowed methods for this resource with the 'test-profile-resource-readonly' profile are GET, DELETE and OPTIONS.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-readonly.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"255901\"\r\n    },\r\n    \"schoolId\": \"{{$randomInt}}{{$randomInt}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n    \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n      }\r\n    ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "Scenario: A POST request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\""
							},
							"response": []
						}
					],
					"description": "Scenario: A POST request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete the School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.writable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:school:id}}"
									]
								},
								"description": "Scenario: A POST request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						},
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Use of profile-specific content types",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Identify Test Subject (Student)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"const responseItem = responseItems[0];",
											"",
											"pm.environment.set('known:student:id', responseItem.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Read Requests",
					"item": [
						{
							"name": "Profile includes requested resource",
							"item": [
								{
									"name": "Get Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json",
												"description": "test-profile-studentonly-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: GET Request contains an accept header with a content type using a profile that includes the targeted resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
									},
									"response": []
								}
							],
							"description": "Scenario: GET Request contains an accept header with a content type using a profile that includes the targeted resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Profile does not include requested resource",
							"item": [
								{
									"name": "Get Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'resource is not accessible through the 'test-profile-staffonly-resource-includeall' profile specified by the content type\",",
													"    () => {",
													"        const responseItem = pm.response.json();",
													"        ",
													"        pm.expect(responseItem.message).to.include(\"resource is not accessible through the \\'test-profile-staffonly-resource-includeall\\' profile specified by the content type\");",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-staffonly-resource-includeall.readable+json",
												"description": "test-profile-staffonly-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: GET Request contains an accept header with a content type using a profile that does not include the targeted resource\r\n    Given the caller is using the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							],
							"description": "Scenario: GET Request contains an accept header with a content type using a profile that does not include the targeted resource\r\n    Given the caller is using the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Resource in content type doesn't match requested resource",
							"item": [
								{
									"name": "Get Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'The resource in the profile-based content type does not match the resource targeted by the request'.\",",
													"    () => {",
													"        const responseItem = pm.response.json();",
													"",
													"        pm.expect(responseItem.message).to.equal(\"The resource in the profile-based content type does not match the resource targeted by the request.\");",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.readable+json",
												"description": "test-profile-studentonly-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: GET Request contains a content type header with a resource that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							],
							"description": "Scenario: GET Request contains a content type header with a resource that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Writable content type used",
							"item": [
								{
									"name": "Get Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'A profile-based content type that is writable cannot be used with GET requests.\",",
													"    () => {",
													"        const responseItem = pm.response.json();",
													"",
													"        pm.expect(responseItem.message).to.equal(\"A profile-based content type that is writable cannot be used with GET requests.\");",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json",
												"description": "test-profile-studentonly-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: GET Request contains a content type header with a read/write content that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							],
							"description": "Scenario: GET Request contains a content type header with a read/write content that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Invalid content type usage option",
							"item": [
								{
									"name": "Get Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'The profile usage segment in the profile-based 'Accept' header was not recognized.\",",
													"  () => {",
													"    const responseItem = pm.response.json();",
													"",
													"    pm.expect(responseItem.message).to.equal(\"The profile usage segment in the profile-based 'Accept' header was not recognized.\");",
													"  });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.wrong+json",
												"description": "test-profile-studentonly-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: GET Request contains a content type header with a read/write content that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid content type format",
							"item": [
								{
									"name": "Get Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message indicating that the format of the Accept header was invalid.\", () => {",
													"  const responseItem = pm.response.json();",
													"  pm.expect(responseItem.message).to.equal(\"The format of the profile-based 'Accept' header was invalid.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.ed-fi.invalid+json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: GET Request contains a content type header with a read/write content that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Write Requests",
					"item": [
						{
							"name": "Profile includes requested resource",
							"item": [
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n    \"birthDate\": \"2010-05-05\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										},
										"description": "Scenario: POST Request contains a content type header using a profile that includes the targeted resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
									},
									"response": []
								}
							],
							"description": "Scenario: POST Request contains a content type header using a profile that includes the targeted resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Profile does not include requested resource",
							"item": [
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'The 'Student' resource is not accessible through the 'test-profile-staffonly-resource-includeall' profile specified by the content type\",",
													"    () => {",
													"        const responseItem = pm.response.json();",
													"",
													"        pm.expect(responseItem.message).to.include(\"The 'Student' resource is not accessible through the 'test-profile-staffonly-resource-includeall' profile specified by the content type\");",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-staffonly-resource-includeall.writable+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n    \"birthDate\": \"2010-05-05\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										},
										"description": "Scenario: POST Request contains a content type header using a profile that does not include the targeted resource\r\n    Given the caller is using the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							],
							"description": "Scenario: POST Request contains a content type header using a profile that does not include the targeted resource\r\n    Given the caller is using the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Resource in content type doesn't match requested resource",
							"item": [
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'The resource in the profile-based content type does not match the resource targeted by the request.'\",",
													"    () => {",
													"        const responseItem = pm.response.json();",
													"",
													"        pm.expect(responseItem.message).to.contain(\"The resource in the profile-based content type does not match the resource targeted by the request.\");",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.writable+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n    \"birthDate\": \"2010-05-05\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										},
										"description": "Scenario: POST Request contains a content type header with a resource that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							],
							"description": "Scenario: POST Request contains a content type header with a resource that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Readable content type used",
							"item": [
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'A profile-based content type that is readable cannot be used with PUT or POST requests.'\",",
													"    () => {",
													"        const responseItem = pm.response.json();",
													"",
													"        pm.expect(responseItem.message).to.include(\"A profile-based content type that is readable cannot be used with PUT or POST requests.\");",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json",
												"description": "test-profile-studentonly-resource-includeall"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n    \"birthDate\": \"2010-05-05\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										},
										"description": "Scenario: POST\t Request contains a content type header with a read/write content that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								},
								{
									"name": "Update Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'A profile-based content type that is readable cannot be used with PUT or POST requests.'\",",
													"    () => {",
													"        const responseItem = pm.response.json();",
													"",
													"        pm.expect(responseItem.message).to.include(\"A profile-based content type that is readable cannot be used with PUT or POST requests.\");",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json",
												"description": "test-profile-studentonly-resource-includeall"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"very\": \"invalid\" }"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: POST\t Request contains a content type header with a read/write content that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							],
							"description": "Scenario: POST\t Request contains a content type header with a read/write content that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Invalid content type usage option",
							"item": [
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message 'The profile usage segment in the profile-based 'Content-Type' header was not recognized.'\",",
													"  () => {",
													"    const responseItem = pm.response.json();",
													"",
													"    pm.expect(responseItem.message).to.equal(\"The profile usage segment in the profile-based 'Content-Type' header was not recognized.\");",
													"  });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.wrong+json",
												"description": "test-profile-studentonly-resource-includeall"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n    \"birthDate\": \"2010-05-05\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										},
										"description": "Scenario: POST\t Request contains a content type header with a read/write content that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid content type format",
							"item": [
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"  pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return error message indicating that the format of the Accept header was invalid.\", () => {",
													"  const responseItem = pm.response.json();",
													"",
													"  pm.expect(responseItem.message).to.equal(\"The format of the profile-based 'Content-Type' header was invalid.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.invalid+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"S{{$randomInt}}{{$randomInt}}\",\r\n    \"birthDate\": \"2010-05-05\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										},
										"description": "Scenario: POST\t Request contains a content type header with a read/write content that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Use of undefined profiles",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create School",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('supplied:school:schoolId', pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    pm.environment.set('known:school:id',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"charterApprovalSchoolYearTypeReference\": {\r\n        \"schoolYear\": \"2001\"\r\n    },\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": {{supplied:school:schoolId}},\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Read Requests",
					"item": [
						{
							"name": "Get School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 406\", () => {",
											"  pm.expect(pm.response.code).to.equal(406);",
											"});",
											"",
											"pm.test(\"Should return error message the profile specified by the content type is not supported by this host\",",
											"  () => {",
											"    const responseItem = pm.response.json();",
											"",
											"    pm.expect(responseItem.message).to.equal(\"The profile specified by the content type in the 'Accept' header is not supported by this host.\");",
											"  });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.non-existing.readable+json",
										"description": "non-existing"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:school:id}}"
									]
								},
								"description": "Scenario: The caller attempts to read a resource using a non-existing profile\r\n    Given the caller is using the \"Non-Existing\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 406 Not Acceptable failure indicating that \"the profile specified by the content type is not supported by this host\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller attempts to read a resource using a non-existing profile\r\n    Given the caller is using the \"Non-Existing\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 406 Not Acceptable failure indicating that \"the profile specified by the content type is not supported by this host\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Write Requests",
					"item": [
						{
							"name": "Update School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", () => {",
											"  pm.expect(pm.response.code).to.equal(415);",
											"});",
											"",
											"pm.test(\"Should return error message the profile specified by the content type is not supported by this host\",",
											"  () => {",
											"    const responseItem = pm.response.json();",
											"",
											"    pm.expect(responseItem.message).to.equal(\"The profile specified by the content type in the 'Content-Type' header is not supported by this host.\");",
											"  });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.non-existing.writable+json",
										"description": "non-existing"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"charterApprovalSchoolYearTypeReference\": {\r\n        \"schoolYear\": \"2001\"\r\n    },\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "Scenario: The caller attempts to update a resource using a non-existing profile\r\n    Given the caller is using the \"Non-Existing\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 415 Unsupported Media Type failure indicating that \"the profile specified by the content type is not supported by this host\""
							},
							"response": []
						}
					],
					"description": "Scenario: The caller attempts to update a resource using a non-existing profile\r\n    Given the caller is using the \"Non-Existing\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 415 Unsupported Media Type failure indicating that \"the profile specified by the content type is not supported by this host\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete School",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:school:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Response content types",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Identify Test Subject (Student)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"const responseItem = responseItems[0];",
											"",
											"pm.environment.set('known:student:id', responseItem.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Read Requests",
					"item": [
						{
							"name": "Get Students",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const __ = require(\"lodash\");",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Response Content-Type is profile-specific\", () => {",
											"    const responseContentType = __.trim(__.split(pm.response.headers.get('Content-Type'), ';')[0]);",
											"",
											"    pm.expect(responseContentType).to.equal(\"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json",
										"type": "text",
										"description": "test-profile-studentonly-resource-includeall"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								},
								"description": "Scenario: The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						},
						{
							"name": "Get Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const __ = require(\"lodash\");",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Response Content-Type is profile-specific\", () => {",
											"    const responseContentType = __.trim(__.split(pm.response.headers.get('Content-Type'), ';')[0]);",
											"",
											"    pm.expect(responseContentType).to.equal(\"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json",
										"type": "text",
										"description": "test-profile-studentonly-resource-includeall"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										"{{known:student:id}}"
									]
								},
								"description": "Scenario: The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Embedded objects included and excluded",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Identify Test Subject (Assessment)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const items = pm.response.json();",
											"const item = items[0];",
											"",
											"pm.environment.set('known:assessment:id', item.id);",
											"pm.environment.set('known:assessment:contentStandard:title', item.contentStandard.title);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Read Content Type",
					"item": [
						{
							"name": "Exclude Embedded Object",
							"item": [
								{
									"name": "Embedded object should NOT be present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not include the embedded object (contentStandard)\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem).to.not.include.any.keys('contentStandard');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.ed-fi.assessment.assessment-readable-excludes-embedded-object.readable+json",
												"description": "assessment-readable-excludes-embedded-object"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
									},
									"response": []
								}
							]
						},
						{
							"name": "Include Embedded Object",
							"item": [
								{
									"name": "Embedded object should be present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should include the embedded object (contentStandard)\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem).to.include.all.keys('contentStandard');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.ed-fi.assessment.assessment-readable-includes-embedded-object.readable+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Write Content Type",
					"item": [
						{
							"name": "Exclude Embedded Object",
							"item": [
								{
									"name": "Update title on embedded contentStandard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:assessment:contentStandard:title', pm.variables.replaceIn('{{$guid}}'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.assessment.assessment-writable-excludes-embedded-object.writable+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assessmentTitle\": \"4th Grade Reading 1st Six Weeks 2012-2013\",\r\n    \"contentStandard\": {\r\n        \"title\": \"{{supplied:assessment:contentStandard:title}}\"\r\n    },\r\n    \"academicSubjects\": [\r\n        {\r\n            \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Write content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Excludes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should not be changed"
									},
									"response": []
								},
								{
									"name": "Embedded object should be unchanged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not have updated the embedded object (contentStandard)\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.contentStandard.title).to.equal(pm.environment.get('known:assessment:contentStandard:title'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Include Embedded Object",
							"item": [
								{
									"name": "Update title on embedded contentStandard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status code is 204 (body=${pm.response.body})`, () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:assessment:contentStandard:title', pm.variables.replaceIn(\"1234{{$randomAdjective}}\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.assessment.assessment-writable-includes-embedded-object.writable+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"assessmentTitle\": \"3rd Grade Reading 1st Six Weeks 2012-2013\",\r\n  \"contentStandard\": {\r\n    \"title\": \"{{supplied:assessment:contentStandard:title}}\"\r\n  },\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
									},
									"response": []
								},
								{
									"name": "Embedded object should be updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should have updated the embedded object (contentStandard)\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.contentStandard.title).to.equal(pm.environment.get('supplied:assessment:contentStandard:title'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: The Write content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Excludes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should not be changed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Collection item filtering",
			"item": [
				{
					"name": "Child collection item filtering based on Descriptor values",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create School with child collections",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:school:schoolId', pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"internationalAddresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n        }\r\n    ],\r\n    \"schoolCategories\": [\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Read content type",
							"item": [
								{
									"name": "Includes child collection items",
									"item": [
										{
											"name": "Get the School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const __ = require('lodash');\r",
															"\r",
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"// Based on profile definition\r",
															"const expectedAddressTypeDescriptors = [\r",
															"    'uri://ed-fi.org/AddressTypeDescriptor#A4',\r",
															"    'uri://ed-fi.org/AddressTypeDescriptor#A2'];\r",
															"const expectedCountryDescriptors = [\r",
															"    'uri://ed-fi.org/CountryDescriptor#C2',\r",
															"    'uri://ed-fi.org/CountryDescriptor#C4'];\r",
															"const expectedSchoolCategoryDescriptors = [\r",
															"    'uri://ed-fi.org/SchoolCategoryDescriptor#S2',\r",
															"    'uri://ed-fi.org/SchoolCategoryDescriptor#S4'];\r",
															"const expectedGradeLevelDescriptors = [\r",
															"    'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
															"    'uri://ed-fi.org/GradeLevelDescriptor#G4'];\r",
															"\r",
															"pm.test(\"Should return exactly the items in set of ['uri://ed-fi.org/AddressTypeDescriptor#A2','uri://ed-fi.org/AddressTypeDescriptor#A4'] for address.addressTypeDescriptor from addresses collection \", () => {\r",
															"\r",
															"    const actualAddressTypeDescriptors = __.map(responseItem.addresses, address => address.addressTypeDescriptor);\r",
															"    pm.expect(actualAddressTypeDescriptors).to.have.length(expectedAddressTypeDescriptors.length);\r",
															"    pm.expect(actualAddressTypeDescriptors).to.have.members(expectedAddressTypeDescriptors);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return exactly the items in set of  ['uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C4'] for countryDescriptor from internationalAddresses collection  \", () => {\r",
															"    const actualCountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
															"    pm.expect(actualCountryDescriptors).to.have.length(expectedCountryDescriptors.length);\r",
															"    pm.expect(actualCountryDescriptors).to.have.members(expectedCountryDescriptors);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return exactly the items in set of ['uri://ed-fi.org/SchoolCategoryDescriptor#S2','uri://ed-fi.org/SchoolCategoryDescriptor#S4'] for schoolCategoryDescriptor from schoolCategories collection  \", () => {\r",
															"    const actualSchoolCategoryDescriptors = __.map(responseItem.schoolCategories, schoolCategory => schoolCategory.schoolCategoryDescriptor);\r",
															"    pm.expect(actualSchoolCategoryDescriptors).to.have.length(expectedSchoolCategoryDescriptors.length);\r",
															"    pm.expect(actualSchoolCategoryDescriptors).to.have.members(expectedSchoolCategoryDescriptors);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return exactly the items in set of ['uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G4'] for gradeLevelDescriptor from gradeLevels collection  \", () => {\r",
															"    const actualGradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
															"    pm.expect(actualGradeLevelDescriptors).to.have.length(expectedGradeLevelDescriptors.length);\r",
															"    pm.expect(actualGradeLevelDescriptors).to.have.members(expectedGradeLevelDescriptors);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors.readable+json",
														"description": "test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												},
												"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Excludes child collection items",
									"item": [
										{
											"name": "Get the School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const __ = require('lodash');",
															"",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"const excludedAddressTypeDescriptors = [",
															"    'uri://ed-fi.org/AddressTypeDescriptor#A1',",
															"    'uri://ed-fi.org/AddressTypeDescriptor#A3'];",
															"",
															"const excludedCountryDescriptors = [",
															"    'uri://ed-fi.org/CountryDescriptor#C1',",
															"    'uri://ed-fi.org/CountryDescriptor#C3'];",
															"",
															"const excludedSchoolCategoryDescriptors = [",
															"    'uri://ed-fi.org/SchoolCategoryDescriptor#S1',",
															"    'uri://ed-fi.org/SchoolCategoryDescriptor#S3'];",
															"",
															"const excludedGradeLevelDescriptors = [",
															"    'uri://ed-fi.org/GradeLevelDescriptor#G1',",
															"    'uri://ed-fi.org/GradeLevelDescriptor#G3'];",
															"",
															"pm.test(\"Should not return the addresses with excluded address type descriptors ['uri://ed-fi.org/AddressTypeDescriptor#A1','uri://ed-fi.org/AddressTypeDescriptor#A3']\", () => {",
															"    const actualAddressTypeDescriptors = __.map(responseItem.addresses, address => address.addressTypeDescriptor);",
															"    pm.expect(actualAddressTypeDescriptors).to.have.length(2);",
															"    pm.expect(actualAddressTypeDescriptors).to.not.have.members(excludedAddressTypeDescriptors);",
															"});",
															"",
															"pm.test(\"Should not return the international addresses with excluded country descriptors ['uri://ed-fi.org/CountryDescriptor#C1','uri://ed-fi.org/CountryDescriptor#C3']\", () => {",
															"    const actualCountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);",
															"    pm.expect(actualCountryDescriptors).to.have.length(2);",
															"    pm.expect(actualCountryDescriptors).to.not.have.members(excludedCountryDescriptors);",
															"});",
															"",
															"pm.test(\"Should not return the school categories with excluded school category descriptors ['uri://ed-fi.org/SchoolCategoryDescriptor#S1','uri://ed-fi.org/SchoolCategoryDescriptor#S3']\", () => {",
															"    const actualSchoolCategoryDescriptors = __.map(responseItem.schoolCategories, schoolCategory => schoolCategory.schoolCategoryDescriptor);",
															"    pm.expect(actualSchoolCategoryDescriptors).to.have.length(2);",
															"    pm.expect(actualSchoolCategoryDescriptors).to.not.have.members(excludedSchoolCategoryDescriptors);",
															"});",
															"",
															"pm.test(\"Should not return the grade levels with excluded grade level descriptors ['uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G3']\", () => {",
															"    const actualGradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);",
															"    pm.expect(actualGradeLevelDescriptors).to.have.length(2);",
															"    pm.expect(actualGradeLevelDescriptors).to.not.have.members(excludedGradeLevelDescriptors);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-excludeonly-specific-descriptors.readable+json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												},
												"description": "Scenario: The Read content type filters a child collection to only exclude certain Descriptor values\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response model's collection items should not contain items matching the excluded Descriptor values"
											},
											"response": []
										}
									]
								}
							],
							"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Write content type",
							"item": [
								{
									"name": "Includes child collection items",
									"item": [
										{
											"name": "Conforming Values",
											"item": [
												{
													"name": "Update School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", () => {",
																	"    pm.expect(pm.response.code).to.equal(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors.writable+json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": 255901\r\n  },\r\n  \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n  \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n      \"city\": \"Grand Bend Updated\",\r\n      \"postalCode\": \"73334-9376\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"streetNumberName\": \"P.O. Box 9376\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n      \"city\": \"Grand Bend Updated\",\r\n      \"postalCode\": \"73334-9376\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"streetNumberName\": \"P.O. Box 9376\"\r\n    }\r\n  ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n    }\r\n  ],\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n    },\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												},
												{
													"name": "Get full School (no Profile)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const __ = require('lodash');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"\r",
																	"const expectedCountryDescriptors = [\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C1',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C2',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C3',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C4'\r",
																	"];\r",
																	"\r",
																	"pm.test(\"Should return all the internationalAddresses with country descriptors ['uri://ed-fi.org/CountryDescriptor#C1','uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C3','uri://ed-fi.org/CountryDescriptor#C4']\", () => {\r",
																	"    const actualCountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
																	"    pm.expect(actualCountryDescriptors).to.have.members(expectedCountryDescriptors);\r",
																	"});\r",
																	"\r",
																	"const expectedGradeLevelDescriptors = [\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G1',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G3',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G4'\r",
																	"];\r",
																	"\r",
																	"pm.test(\"Should return all the grade level items ['uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G3','uri://ed-fi.org/GradeLevelDescriptor#G4']\", () => {\r",
																	"    const actualGradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
																	"    pm.expect(actualGradeLevelDescriptors).to.have.members(expectedGradeLevelDescriptors);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										},
										{
											"name": "Non-Conforming Values",
											"item": [
												{
													"name": "Update School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", () => {",
																	"  pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"pm.test(\"Should return a message indicating that an item of the collection does not conform with the filter values defined by the profile\", () => {",
																	"  const responseItem = pm.response.json();",
																	"",
																	"  pm.expect(responseItem.message).to.contain(\"A supplied 'SchoolCategory' has a descriptor value that does not conform with the filter values defined by profile 'test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors'.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors.writable+json",
																"description": "test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": 255901\r\n  },\r\n  \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n  \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n  \"addresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n      \"city\": \"Grand Bend\",\r\n      \"postalCode\": \"73334-9376\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"streetNumberName\": \"P.O. Box 9376\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n      \"city\": \"Grand Bend\",\r\n      \"postalCode\": \"73334-9376\",\r\n      \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n      \"streetNumberName\": \"P.O. Box 9376\"\r\n    }\r\n  ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n    }\r\n  ],\r\n  \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n    }\r\n  ],\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n    },\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a child collection to only include certain Descriptor values and non-conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only non-conforming included Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the value of {suppliedValue} supplied for the {property} of the {entity} does not conform with the filter values defined by profile {profileName}\"\r\n"
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Excludes child collection items",
									"item": [
										{
											"name": "Conforming Values",
											"item": [
												{
													"name": "Update School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", () => {",
																	"    pm.expect(pm.response.code).to.equal(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.school.Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors.writable+json",
																"description": "Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"internationalAddresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"addressLine1\": \"X-String-34\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n        }\r\n    ],\r\n    \"schoolCategories\": [\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the School\r\n    And the pre-existing Descriptor values should be intact on the School"
													},
													"response": []
												},
												{
													"name": "Get full School (no Profile)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const __ = require('lodash');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"\r",
																	"const expectedCountryDescriptors = [\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C1',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C2',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C3',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C4'\r",
																	"];\r",
																	"\r",
																	"const expectedgradeLevelDescriptor = [\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G1',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G3',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G4'\r",
																	"];\r",
																	"\r",
																	"pm.test(\"Should return internationalAddress items with countryDescriptors in ['uri://ed-fi.org/CountryDescriptor#C1','uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C4']\", () => {\r",
																	"\r",
																	"    const actualcountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
																	"    pm.expect(actualcountryDescriptors).to.have.members(expectedCountryDescriptors);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Should return gradeLevels with gradeLevelDescriptors in ['uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G3','uri://ed-fi.org/GradeLevelDescriptor#G4'] for gradeLevelDescriptor\", () => {\r",
																	"\r",
																	"    const actualgradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
																	"    pm.expect(actualgradeLevelDescriptors).to.have.members(expectedgradeLevelDescriptor);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										},
										{
											"name": "Non-Conforming Values",
											"item": [
												{
													"name": "Update School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", () => {",
																	"  pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"pm.test(\"Should return a message indicating that an item of the collection does not conform with the filter values defined by the profile\", () => {",
																	"  const responseItem = pm.response.json();",
																	"",
																	"  pm.expect(responseItem.message).to.contain(\"A supplied 'SchoolCategory' has a descriptor value that does not conform with the filter values defined by profile 'test-profile-resource-child-collection-filtered-to-excludeonly-specific-descriptors'.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-excludeonly-specific-descriptors.writable+json",
																"description": "test-profile-resource-child-collection-filtered-to-excludeonly-specific-descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"internationalAddresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n        }\r\n    ],\r\n    \"schoolCategories\": [\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the School\r\n    And the pre-existing Descriptor values should be intact on the School"
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete the School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.writable+json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "Scenario: A POST request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Nested child collection item filtering based on Descriptor values",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create Assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:assessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:assessment:assessmentIdentifier', \"edfi\" + pm.variables.replaceIn(\"{{$guid}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:assessment:assessmentIdentifier}}\",\r\n   \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\",\r\n   \"assessmentTitle\":\"Assessment\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\"\r\n      }\r\n   ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ObjectiveAssessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:objectiveAssessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:objectiveAssessment:identificationCode', \"ObjAssmnt-\" + pm.variables.replaceIn(\"{{$guid}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\",\r\n    \"performanceLevels\": [\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n            \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n            \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n            \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n            \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n        }\r\n    ],\r\n    \"scoreResults\": [\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n            \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n            \"result\": \"result2\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n            \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n            \"result\": \"result2\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n            \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n            \"result\": \"result2\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n            \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n            \"result\": \"result2\"\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"objectiveAssessments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:student:studentUniqueId', pm.variables.replaceIn(\"{{$guid}}\").substring(0, 8));",
													"",
													"const moment = require('moment');",
													"let birthDate = new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate = moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:student:birthDate', birthDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\",\r\n    \"birthDate\": \"{{supplied:student:birthDate}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create StudentAssessment (with nested collections)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:studentAssessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set('supplied:studentAssessment:studentAssessmentIdentifier', \"StuAssmnt\" + pm.variables.replaceIn(\"{{$guid}}\"));",
													"",
													"const moment = require('moment');",
													"let administrationDate = new Date();",
													"administrationDate = administrationDate.addMonths(-2);",
													"administrationDate = moment(administrationDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:studentAssessment:administrationDate', administrationDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentAssessments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Read Content Type",
							"item": [
								{
									"name": "Includes Nested Child Collection Items",
									"item": [
										{
											"name": "Get Student Assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const __ = require('lodash');\r",
															"\r",
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"const expectedAssessmentReportingMethodDescriptors = [\r",
															"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
															"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
															"\r",
															"const expectedPerformanceLevelDescriptors = [\r",
															"    'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
															"    'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
															"\r",
															"pm.test(\"Should return the included performanceLevels items (nested collection) with reporting method descriptors in ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2', 'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4']\",\r",
															"    () => {\r",
															"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
															"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.assessmentReportingMethodDescriptor);\r",
															"            pm.expect(actualDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptors);\r",
															"        });\r",
															"    });\r",
															"\r",
															"pm.test(\"Should return the included performanceLevel items (nested collection) with performance level descriptors in ['uri://ed-fi.org/PerformanceLevelDescriptor#P2', 'uri://ed-fi.org/PerformanceLevelDescriptor#P4']\",\r",
															"    () => {\r",
															"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
															"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
															"            pm.expect(actualDescriptors).to.have.members(expectedPerformanceLevelDescriptors);\r",
															"        });\r",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.readable+json",
														"description": "test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments",
														"{{known:studentAssessment:id}}"
													]
												},
												"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Excludes Nested Child Collection Items",
									"item": [
										{
											"name": "Get Student Assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const __ = require('lodash');\r",
															"\r",
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"const excludedAssessmentReportingMethodDescriptors = [\r",
															"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
															"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
															"\r",
															"const excludedPerformanceLevelDescriptors = [\r",
															"    'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
															"    'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
															"\r",
															"pm.test(\"Should not return the excluded performanceLevel items (nested collection) with assessment reporting descriptors in ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4']\",\r",
															"    () => {\r",
															"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
															"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.assessmentReportingMethodDescriptor);\r",
															"\r",
															"            pm.expect(actualDescriptors).to.not.have.members(excludedAssessmentReportingMethodDescriptors);\r",
															"        });\r",
															"    });\r",
															"\r",
															"pm.test(\"Should not return the excluded performanceLevel items (nested collection) with performance level descriptors in ['uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P4']\",\r",
															"    () => {\r",
															"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
															"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
															"\r",
															"            pm.expect(actualDescriptors).to.not.have.members(excludedPerformanceLevelDescriptors);\r",
															"        });\r",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.readable+json",
														"description": "test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments",
														"{{known:studentAssessment:id}}"
													]
												},
												"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Write Content Type",
							"item": [
								{
									"name": "Includes Nested Child Collection Items",
									"item": [
										{
											"name": "Conforming Values",
											"item": [
												{
													"name": "Update StudentAssessment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", () => {",
																	"    pm.expect(pm.response.code).to.equal(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.writable+json",
																"description": "test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												},
												{
													"name": "Get StudentAssessments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const __ = require('lodash');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"\r",
																	"const expectedAssessmentReportingMethodDescriptors = [\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
																	"\r",
																	"const expectedPerformanceLevelDescriptors = [\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P1',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P3',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
																	"\r",
																	"pm.test(\"Should return all the scoreResults items (nested collection) with reporting method descriptors in ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4']\",\r",
																	"    () => {\r",
																	"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
																	"            const actualDescriptors = __.map(objectiveAssessment.scoreResults, scoreResult => scoreResult.assessmentReportingMethodDescriptor);\r",
																	"            pm.expect(actualDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptors);\r",
																	"        });\r",
																	"    });\r",
																	"\r",
																	"pm.test(\"Should return all the performanceLevel items (nested collection) with performance level descriptors in ['uri://ed-fi.org/PerformanceLevelDescriptor#P1','uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P3','uri://ed-fi.org/PerformanceLevelDescriptor#P4']\",\r",
																	"    () => {\r",
																	"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
																	"\r",
																	"            const actualperformanceLevelDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
																	"            pm.expect(actualperformanceLevelDescriptors).to.have.members(expectedPerformanceLevelDescriptors);\r",
																	"\r",
																	"        });\r",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										},
										{
											"name": "Non-Conforming Values",
											"item": [
												{
													"name": "Update StudentAssessment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", () => {",
																	"  pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"pm.test(\"Should return a message indicating that an item of the collection does not conform with the filter values defined by the profile\", () => {",
																	"  const responseItem = pm.response.json();",
																	"",
																	"  pm.expect(responseItem.message).to.contain(\"A supplied 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel' has a descriptor value that does not conform with the filter values defined by profile 'test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors'.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.writable+json",
																"description": "test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-escriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Excludes Nested Child Collection Items",
									"item": [
										{
											"name": "Conforming Values",
											"item": [
												{
													"name": "Update Student Assessment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", () => {",
																	"    pm.expect(pm.response.code).to.equal(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.writable+json",
																"type": "text",
																"description": "test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to studentAssessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the StudentAssessment\r\n    And the pre-existing Descriptor values should be intact on the StudentAssessment\r\n"
													},
													"response": []
												},
												{
													"name": "Get StudentAssessments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const __ = require('lodash');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"\r",
																	"const expectedAssessmentReportingMethodDescriptors = [\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
																	"\r",
																	"const expectedPerformanceLevelDescriptors = [\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P1',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P3',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
																	"\r",
																	"pm.test(\"Should return all scoreResult items (nested collection) with reporting method descriptors in set of ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4']\",\r",
																	"    () => {\r",
																	"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
																	"            const actualDescriptors = __.map(objectiveAssessment.scoreResults, scoreResult => scoreResult.assessmentReportingMethodDescriptor);\r",
																	"            pm.expect(actualDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptors);\r",
																	"        });\r",
																	"    });\r",
																	"\r",
																	"pm.test(\"Should return all performanceLevel items (nested collection) with performance level descriptors in set of ['uri://ed-fi.org/PerformanceLevelDescriptor#P1','uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P3','uri://ed-fi.org/PerformanceLevelDescriptor#P4']\",\r",
																	"    () => {\r",
																	"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
																	"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
																	"            pm.expect(actualDescriptors).to.have.members(expectedPerformanceLevelDescriptors);\r",
																	"        });\r",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										},
										{
											"name": "Non-Conforming Values",
											"item": [
												{
													"name": "Update Student Assessment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", () => {",
																	"  pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"pm.test(\"Should return a message indicating that an item of the collection does not conform with the filter values defined by the profile\", () => {",
																	"  const responseItem = pm.response.json();",
																	"",
																	"  pm.expect(responseItem.message).to.contain(\"A supplied 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel' has a descriptor value that does not conform with the filter values defined by profile 'test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors'.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.writable+json",
																"description": "test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and non-conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    When a PUT request with a collection containing only non-conforming excluded Descriptor values is submitted to studentAssessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the value of {suppliedValue} supplied for the {property} of the {entity} does not conform with the filter values defined by profile {profileName}\"\r\n"
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Extensions",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:staff:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"supplied:staffUniqueId\", pm.variables.replaceIn(\"{{$randomBankAccount}}\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstOwnedPetDate\": \"2000-01-01\",\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": false\r\n        }\r\n      ],\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 20,\r\n        \"maximumWeight\": 35\r\n      }\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Staff School Assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:staffEmployment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"employmentStatusDescriptor\": \"uri://ed-fi.org/EmploymentStatusDescriptor#Tenured or permanent\",\r\n  \"hireDate\": \"2021-01-01\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901001\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{supplied:staffUniqueId}}\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffEducationOrganizationEmploymentAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffEducationOrganizationEmploymentAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"supplied:studentUniqueId\", pm.variables.replaceIn(\"{{$randomBankAccount}}\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:studentUniqueId}}\",\r\n  \"firstName\": \"Johnny\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"birthDate\": \"2010-10-10\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstOwnedPetDate\": \"2000-01-01\",\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Fido\",\r\n          \"isFixed\": true\r\n        }\r\n      ],\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 5,\r\n        \"maximumWeight\": 15\r\n      },\r\n      \"favoriteBooks\": [\r\n        {\r\n          \"favoriteBookCategoryDescriptor\": \"uri://ed-fi.org/FavoriteBookCategoryDescriptor#Non-Fiction\",\r\n          \"bookTitle\": \"Green Eggs and Ham\",\r\n          \"artMedia\": [\r\n            {\r\n              \"artMediumDescriptor\": \"uri://ed-fi.org/ArtMediumDescriptor#Art Medium\",\r\n              \"artPieces\": 7\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student School Assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:studentSchoolAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{supplied:studentUniqueId}}\"\r\n  },\r\n  \"entryDate\": \"2020-08-23\",\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\",\r\n  \"alternativeGraduationPlans\": [],\r\n  \"educationPlans\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"supplied:schoolId\", pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schoolId\": {{supplied:schoolId}},\r\n  \"nameOfInstitution\": \"Extension Test Community College\",\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://tpdm.ed-fi.org/EducationOrganizationCategoryDescriptor#University\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Postsecondary\"\r\n    }\r\n  ],\r\n  \"_ext\": {\r\n    \"TPDM\": {\r\n      \"postSecondaryInstitutionReference\": {\r\n        \"postSecondaryInstitutionId\": 6000203\r\n      }\r\n    },\r\n    \"Sample\": {\r\n      \"isExemplary\": false\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Readable",
					"item": [
						{
							"name": "Staff",
							"item": [
								{
									"name": "Extension Not Included",
									"item": [
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"    pm.expect(responseItem).to.not.include.any.keys('_ext');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-not-Included.readable+json",
														"description": "sample-staff-extension-not-Included"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension Excluded",
									"item": [
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"    pm.expect(responseItem).to.not.include.any.keys('_ext');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-excluded.readable+json",
														"description": "sample-staff-extension-excluded"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Include-Only-Deeply",
									"item": [
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"petPreference\": {",
															"        \"minimumWeight\": 20",
															"      },",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Rex\"",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-include-only-deeply.readable+json",
														"description": "sample-staff-extension-include-only-deeply"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Exclude-Only-Deeply",
									"item": [
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"petPreference\": {",
															"        \"maximumWeight\": 35",
															"      },",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Rex\"",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-exclude-only-deeply.readable+json",
														"description": "sample-staff-extension-exclude-only-deeply"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Exclude-Everything",
									"item": [
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({ \"Sample\": {} });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-exclude-everything.readable+json",
														"description": "sample-staff-extension-exclude-everything"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Student",
							"item": [
								{
									"name": "Extension-Include-Only-Deeply",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"petPreference\": {",
															"        \"minimumWeight\": 5",
															"      },",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Fido\"",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.student.sample-student-extension-include-only-deeply.readable+json",
														"description": "sample-student-extension-include-only-deeply"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Exclude-Only-Deeply",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"petPreference\": {",
															"        \"maximumWeight\": 15",
															"      },",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Fido\"",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.student.sample-student-extension-exclude-only-deeply.readable+json",
														"description": "sample-student-extension-exclude-only-deeply"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Exclude-Everything",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({ \"Sample\": {} });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.student.sample-student-extension-exclude-everything.readable+json",
														"description": "sample-student-extension-exclude-everything"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Multi-level-IncludeOnly",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"favoriteBooks\": [",
															"        {",
															"          \"favoriteBookCategoryDescriptor\": \"uri://ed-fi.org/FavoriteBookCategoryDescriptor#Non-Fiction\",",
															"          \"artMedia\": [",
															"            {",
															"              \"artMediumDescriptor\": \"uri://ed-fi.org/ArtMediumDescriptor#Art Medium\",",
															"              \"artPieces\": 7",
															"            }",
															"          ]",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.student.sample-student-extension-multi-level-includeonly.readable+json",
														"description": "sample-student-extension-multi-level-includeonly"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Multi-level-ExcludeOnly",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not include the extension metadata property\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"favoriteBooks\": [",
															"        {",
															"          \"favoriteBookCategoryDescriptor\": \"uri://ed-fi.org/FavoriteBookCategoryDescriptor#Non-Fiction\",",
															"          \"artMedia\": [",
															"            {",
															"              \"artMediumDescriptor\": \"uri://ed-fi.org/ArtMediumDescriptor#Art Medium\",",
															"              \"artPieces\": 7",
															"            }",
															"          ]",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.student.sample-student-extension-multi-level-excludeonly.readable+json",
														"description": "sample-student-extension-multi-level-excludeonly"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "School",
							"item": [
								{
									"name": "Multiple Extensions (with no Profile)",
									"item": [
										{
											"name": "Get School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"pm.test(\"Should have multiple extensions present with no Profile supplied\", () => {\r",
															"  pm.expect(responseItem._ext).to.have.all.keys([\"Sample\", \"TPDM\"]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Multiple-Extensions-IncludeOnly",
									"item": [
										{
											"name": "Get School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"pm.test(\"Should only have the included extension present\", () => {\r",
															"  pm.expect(responseItem._ext).to.deep.equal({\r",
															"    \"Sample\": {\r",
															"      \"isExemplary\": false,\r",
															"      \"directlyOwnedBuses\": []\r",
															"    }\r",
															"  });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.ed-fi.school.sample-school-multiple-extensions-includeonly.readable+json",
														"description": "sample-school-multiple-extensions-includeonly",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Multiple-Extensions-ExcludeOnly",
									"item": [
										{
											"name": "Get School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"pm.test(\"Should not have the excluded extension present\", () => {\r",
															"  pm.expect(responseItem._ext).to.contain.all.keys([\"TPDM\"]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.ed-fi.school.sample-school-multiple-extensions-excludeonly.readable+json",
														"description": "sample-school-multiple-extensions-excludeonly",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Writable",
					"item": [
						{
							"name": "Staff",
							"item": [
								{
									"name": "Extension Not Included",
									"item": [
										{
											"name": "Update Staff (to baseline)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstPetOwnedDate\": \"2000-01-01\",\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": false\r\n        }\r\n      ],\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 20,\r\n        \"maximumWeight\": 35\r\n      }\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Update Staff (with Sample extension)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-not-included.writable+json",
														"description": "sample-staff-extension-not-included"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"petPreference\": {\r\n        \"maximumWeight\": 200,\r\n        \"minimumWeight\": 100\r\n      },\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": true\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not have updated the extension data\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"firstPetOwnedDate\": \"2000-01-01\",",
															"      \"petPreference\": {",
															"        \"maximumWeight\": 35,",
															"        \"minimumWeight\": 20",
															"      },",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Rex\",",
															"          \"isFixed\": false",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension Excluded",
									"item": [
										{
											"name": "Update Staff (to baseline)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstPetOwnedDate\": \"2000-01-01\",\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": false\r\n        }\r\n      ],\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 20,\r\n        \"maximumWeight\": 35\r\n      }\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Update Staff (with Sample extension)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-excluded.writable+json",
														"description": "sample-staff-extension-excluded"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"petPreference\": {\r\n        \"maximumWeight\": 135,\r\n        \"minimumWeight\": 120\r\n      },\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": true\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not have updated the extension data\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"firstPetOwnedDate\": \"2000-01-01\",",
															"      \"petPreference\": {",
															"        \"maximumWeight\": 35,",
															"        \"minimumWeight\": 20",
															"      },",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Rex\",",
															"          \"isFixed\": false",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Include-Only-Deeply",
									"item": [
										{
											"name": "Update Staff (to baseline)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstPetOwnedDate\": \"2000-01-01\",\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": false\r\n        }\r\n      ],\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 20,\r\n        \"maximumWeight\": 35\r\n      }\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Update Staff (with Sample extension)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-include-only-deeply.writable+json",
														"description": "sample-staff-extension-include-only-deeply"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstPetOwnedDate\": \"2020-02-02\",\r\n      \"petPreference\": {\r\n        \"maximumWeight\": 200,\r\n        \"minimumWeight\": 100\r\n      },\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": true\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not have only updated the included extension elements\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"firstPetOwnedDate\": \"2020-02-02\",",
															"      \"petPreference\": {",
															"        \"maximumWeight\": 35,",
															"        \"minimumWeight\": 100",
															"      },",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Rex\",",
															"          \"isFixed\": false",
															"        }",
															"      ]",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Exclude-Only-Deeply",
									"item": [
										{
											"name": "Update Staff (to baseline)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstPetOwnedDate\": \"2000-01-01\",\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": false\r\n        }\r\n      ],\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 20,\r\n        \"maximumWeight\": 35\r\n      }\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Update Staff (with Sample extension)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-exclude-only-deeply.writable+json",
														"description": "sample-staff-extension-exclude-only-deeply"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstPetOwnedDate\": \"2020-02-02\",\r\n      \"petPreference\": {\r\n        \"maximumWeight\": 200,\r\n        \"minimumWeight\": 100\r\n      },\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": true\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not have only updated the included extension elements\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"firstPetOwnedDate\": \"2000-01-01\",",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Rex\",",
															"          \"isFixed\": false",
															"        }",
															"      ],",
															"      \"petPreference\": {",
															"        \"minimumWeight\": 20,",
															"        \"maximumWeight\": 200",
															"      }",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Extension-Exclude-Everything",
									"item": [
										{
											"name": "Update Staff (to baseline)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstPetOwnedDate\": \"2000-01-01\",\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": false\r\n        }\r\n      ],\r\n      \"petPreference\": {\r\n        \"minimumWeight\": 20,\r\n        \"maximumWeight\": 35\r\n      }\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Update Staff (with Sample extension)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.ed-fi.staff.sample-staff-extension-exclude-everything.writable+json",
														"description": "sample-staff-extension-exclude-everything"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"staffUniqueId\": \"{{supplied:staffUniqueId}}\",\r\n  \"firstName\": \"John\",\r\n  \"lastSurname\": \"Doe\",\r\n  \"_ext\": {\r\n    \"Sample\": {\r\n      \"firstPetOwnedDate\": \"2020-02-02\",\r\n      \"petPreference\": {\r\n        \"maximumWeight\": 200,\r\n        \"minimumWeight\": 100\r\n      },\r\n      \"pets\": [\r\n        {\r\n          \"petName\": \"Rex\",\r\n          \"isFixed\": true\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										},
										{
											"name": "Get Staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"pm.test(\"Should not have only updated the included extension elements\", () => {",
															"  pm.expect(responseItem._ext).to.deep.equal({",
															"    \"Sample\": {",
															"      \"firstPetOwnedDate\": \"2000-01-01\",",
															"      \"pets\": [",
															"        {",
															"          \"petName\": \"Rex\",",
															"          \"isFixed\": false",
															"        }",
															"      ],",
															"      \"petPreference\": {",
															"        \"minimumWeight\": 20,",
															"        \"maximumWeight\": 35",
															"      }",
															"    }",
															"  });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs",
														"{{known:staff:id}}"
													]
												},
												"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete Staff School Employment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffEducationOrganizationEmploymentAssociations/{{known:staffEmployment:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffEducationOrganizationEmploymentAssociations",
										"{{known:staffEmployment:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs/{{known:staff:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"staffs",
										"{{known:staff:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Student School Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSchoolAssociations",
										"{{known:studentSchoolAssociation:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										"{{known:student:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:school:id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Assigned profiles",
			"item": [
				{
					"name": "Assigned profiles must be used for covered resources",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:school:schoolId', pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": {{supplied:school:schoolId}},\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:student:studentUniqueId', pm.variables.replaceIn(\"S{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\",\r\n    \"birthDate\": \"2022-10-29\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										},
										"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
									},
									"response": []
								},
								{
									"name": "Create StudentSchoolAssociation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:studentSchoolAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entryDate\": \"2022-10-29\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n  },\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											]
										},
										"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Read Requests",
							"item": [
								{
									"name": "Covered resource with assigned Profile's content type",
									"item": [
										{
											"name": "Get School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_IncludeOnly}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.school.test-profile-resource-includeonly.readable+json",
														"description": "test-profile-resource-includeonly"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												},
												"description": "Scenario: The caller is assigned a profile and requests a covered resource using the correct content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    And the caller is using the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller is assigned a profile and requests a covered resource using the correct content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    And the caller is using the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with different Profile's content type",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {",
															"  pm.expect(pm.response.code).to.equal(403);",
															"});",
															"",
															"pm.test(\"Should return error message indicating which profiles can be used with the request.\",",
															"  () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Based on profile assignments, one of the following profile-specific content types is required when requesting this resource: \\'application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\\'\");",
															"  });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_StudentOnlyResourceIncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.student.test-profile-studentonly2-resource-includeall.readable+json",
														"description": "test-profile-studentonly2-resource-includeall"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The caller is assigned a profile and requests a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\"\r\n"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller is assigned a profile and requests a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\"\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with standard content type specified for API client with one assigned profile",
									"item": [
										{
											"name": "Get School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Response Content-Type indicates profile was applied to the response.\", () => {",
															"    pm.expect(pm.response.headers.one('Content-Type').value).to.match(/^application\\/vnd.ed-fi.school.test-profile-resource-includeall.readable\\+json/);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_IncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												},
												"description": "Scenario: The caller is assigned a profile and requests a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\""
											},
											"response": []
										}
									],
									"description": "Scenario: The caller is assigned a profile and requests a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\"",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with standard content type specified for API client with multiple assigned profiles",
									"item": [
										{
											"name": "Get School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {",
															"    pm.expect(pm.response.code).to.equal(403);",
															"});",
															"",
															"pm.test(\"Should return error message indicating which profiles can be used with the request.\",",
															"    () => {",
															"        const responseItem = pm.response.json();",
															"",
															"        pm.expect(responseItem.message).to.equal(\"Based on profile assignments, one of the following profile-specific content types is required when requesting this resource: \\'application/vnd.ed-fi.school.test-profile-resource-child-collection-includeall.readable+json\\', \\'application/vnd.ed-fi.school.test-profile-resource-includeall.readable+json'\");",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_MultipleProfileAssignedSchoolResource}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												},
												"description": "Scenario: The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with one of several assigned profiles",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_StaffOnlyStudentOnlyIncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json",
														"type": "text",
														"description": "test-profile-studentonly-resource-includeall"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with different Profile's content type for API client with several assigned profiles",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {",
															"    pm.expect(pm.response.code).to.equal(403);",
															"});",
															"",
															"pm.test(\"Should return error message indicating which profiles can be used with the request.\",",
															"    () => {",
															"        const responseItem = pm.response.json();",
															"",
															"        pm.expect(responseItem.message).to.equal(\"Based on profile assignments, one of the following profile-specific content types is required when requesting this resource: \\'application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\\'\");",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_StaffOnlyStudentOnlyIncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.ed-fi.student.Test-Profile-StudentOnly2-Resource-IncludeAll.readable+json",
														"type": "text",
														"description": "Test-Profile-StudentOnly2-Resource-IncludeAll"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Write Requests",
							"item": [
								{
									"name": "Covered resource with assigned Profile's content type",
									"item": [
										{
											"name": "Update School",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_IncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.ed-fi.school.test-profile-resource-includeall.writable+json",
														"type": "text",
														"description": "test-profile-resource-includeall"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": {{supplied:school:schoolId}},\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools"
													]
												},
												"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the correct content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the correct content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with different Profile's content type",
									"item": [
										{
											"name": "Update Student",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {",
															"    pm.expect(pm.response.code).to.equal(403);",
															"});",
															"",
															"pm.test(\"Should return error message indicating which profiles can be used with the request.\", () => {",
															"",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Based on profile assignments, one of the following profile-specific content types is required when updating this resource: \\'application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json\\'\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_StudentOnlyResourceIncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.ed-fi.student.test-profile-studentonly2-resource-includeall.writable+json",
														"type": "text",
														"description": "test-profile-studentonly2-resource-includeall"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\",\r\n    \"birthDate\": \"2022-10-29\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												},
												"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with standard content type specified for API client with one assigned profile",
									"item": [
										{
											"name": "Update School",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_IncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools"
													]
												},
												"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with standard content type specified for API client with several assigned profiles",
									"item": [
										{
											"name": "Update School",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {",
															"    pm.expect(pm.response.code).to.equal(403);",
															"});",
															"",
															"pm.test(\"Should return error message indicating which profiles can be used with the request.\",",
															"    () => {",
															"        const responseItem = pm.response.json();",
															"",
															"        pm.expect(responseItem.message).to.equal(\"Based on profile assignments, one of the following profile-specific content types is required when updating this resource: \\'application/vnd.ed-fi.school.test-profile-resource-child-collection-includeall.writable+json\\', \\'application/vnd.ed-fi.school.test-profile-resource-includeall.writable+json'\");",
															"    });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_MultipleProfileAssignedSchoolResource}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools"
													]
												},
												"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with one of several assigned profiles",
									"item": [
										{
											"name": "Update School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_MultipleProfileAssignedSchoolResource}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.ed-fi.school.test-profile-resource-includeall.writable+json",
														"type": "text",
														"description": "Test-Profile-Resource-IncludeAll"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": {{supplied:school:schoolId}},\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools"
													]
												},
												"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Covered resource with different Profile's content type for API client with several assigned profiles",
									"item": [
										{
											"name": "Update School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", () => {",
															"    pm.expect(pm.response.code).to.equal(403);",
															"});",
															"",
															"pm.test(\"Should return error message indicating which profiles can be used with the request.\",",
															"    () => {",
															"        const responseItem = pm.response.json();",
															"",
															"        pm.expect(responseItem.message).to.equal(\"Based on profile assignments, one of the following profile-specific content types is required when updating this resource: \\'application/vnd.ed-fi.school.test-profile-resource-child-collection-includeall.writable+json\\', \\'application/vnd.ed-fi.school.test-profile-resource-includeall.writable+json'\");",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_MultipleProfileAssignedSchoolResource}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.ed-fi.school.Test-Profile-Resource-WriteOnly.writable+json",
														"type": "text",
														"description": "Test-Profile-Resource-IncludeAll"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": {{supplied:school:schoolId}},\r\n    \"nameOfInstitution\": \"{{$randomCompanyName}}\",\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools"
													]
												},
												"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:school:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete StudentSchoolAssociation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly2-resource-includeall.writable+json",
												"type": "text",
												"description": "test-profile-studentonly2-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations",
												"{{known:studentSchoolAssociation:id}}"
											]
										},
										"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
									},
									"response": []
								},
								{
									"name": "Delete Student",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly2-resource-includeall.writable+json",
												"type": "text",
												"description": "test-profile-studentonly2-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Resources not covered by an assigned profile",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:student:studentUniqueId', pm.variables.replaceIn(\"S{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\",\r\n    \"birthDate\": \"2022-10-29\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										},
										"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
									},
									"response": []
								},
								{
									"name": "Create StudentSchoolAssociation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:studentSchoolAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entryDate\": \"2022-10-29\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n  },\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Second grade\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations"
											]
										},
										"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Read Requests",
							"item": [
								{
									"name": "Using the standard content type",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_IncludeAll_StaffOnlyIncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The caller requests a resource not covered by any of their assigned profiles using the standard content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/json\"\r\n    Then the response should indicate success"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller requests a resource not covered by any of their assigned profiles using the standard content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/json\"\r\n    Then the response should indicate success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Using an unassigned profile",
									"item": [
										{
											"name": "Get Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_IncludeAll_StaffOnlyIncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json",
														"type": "text",
														"description": "test-profile-studentonly-resource-includeall"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:student:id}}"
													]
												},
												"description": "Scenario: The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Write Requests",
							"item": [
								{
									"name": "Using the standard content type",
									"item": [
										{
											"name": "Update Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_IncludeAll_StaffOnlyIncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\",\r\n  \"birthDate\": \"2010-05-05\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastSurname\": \"{{$randomLastName}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												},
												"description": "Scenario: The caller requests a resource not covered by any of their assigned profiles using the standard content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/json\"\r\n    Then the response should indicate success"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using the standard content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/json\"\r\n    Then the response should indicate success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Using unassigned profile",
									"item": [
										{
											"name": "Update Student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken_ProfileTest_IncludeAll_StaffOnlyIncludeAll}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json",
														"type": "text",
														"description": "test-profile-studentonly-resource-includeall"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\",\r\n    \"birthDate\": \"2010-05-05\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												},
												"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n"
											},
											"response": []
										}
									],
									"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete StudentSchoolAssociation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly2-resource-includeall.writable+json",
												"type": "text",
												"description": "test-profile-studentonly2-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSchoolAssociations",
												"{{known:studentSchoolAssociation:id}}"
											]
										},
										"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
									},
									"response": []
								},
								{
									"name": "Delete Student",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.ed-fi.student.test-profile-studentonly2-resource-includeall.writable+json",
												"type": "text",
												"description": "test-profile-studentonly2-resource-includeall"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students",
												"{{known:student:id}}"
											]
										},
										"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Profile definitions can include all members of a resource or collection",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Get Primary Key properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"known:school:PrimaryKeys\", getPrimaryKeys(\"edFi_school\"));\r",
											"pm.environment.set(\"known:studentSpecialEducationProgramAssociations:PrimaryKeys\", getPrimaryKeys(\"edFi_studentSpecialEducationProgramAssociation\")\r",
											"    .concat(\"educationOrganizationReference\",\"programReference\",\"studentReference\"));\r",
											"\r",
											"function getPrimaryKeys(resource) {\r",
											"    const resourceProperties = pm.response.json().definitions[resource].properties;\r",
											"    return Object.keys(resourceProperties).filter(v => resourceProperties[v]['x-Ed-Fi-isIdentity'] === true).concat('id', '_ext');\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/metadata/data/v3/resources/swagger.json",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"metadata",
										"data",
										"v3",
										"resources",
										"swagger.json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"known:schoolId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
											"\r",
											"// Fetch a copy of the created school payload\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/schools/${pm.environment.get(\"known:schoolId\")}`,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"Authorization\": 'bearer ' + pm.environment.get(\"AccessToken_255901\"),\r",
											"        \"Content-Type\": \"application/json\",\r",
											"    }\r",
											"    }, function (err, response) {\r",
											"      pm.environment.set('known:school', response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"supplied:schoolId\", pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schoolId\": {{supplied:schoolId}},\r\n  \"nameOfInstitution\": \"School 1\",\r\n  \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n        \"city\": \"Austin\",\r\n        \"postalCode\": \"78712\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"1912 Speedway Stop D5000\",\r\n        \"nameOfCounty\": \"Travis\"\r\n      }\r\n    ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://tpdm.ed-fi.org/EducationOrganizationCategoryDescriptor#University\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Postsecondary\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create School With International Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"known:intlSchoolId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
											"\r",
											"// Fetch a copy of the created school payload\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/schools/${pm.environment.get(\"known:intlSchoolId\")}`,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
											"        \"Content-Type\": \"application/json\",\r",
											"    }\r",
											"    }, function (err, response) {\r",
											"      pm.environment.set('known:intlSchool', response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"supplied:intlSchoolId\", pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schoolId\": {{supplied:intlSchoolId}},\r\n  \"nameOfInstitution\": \"Intl School\",\r\n  \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n        \"city\": \"Austin\",\r\n        \"postalCode\": \"78712\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"1912 Speedway Stop D5000\",\r\n        \"nameOfCounty\": \"Travis\"\r\n      }\r\n    ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://tpdm.ed-fi.org/EducationOrganizationCategoryDescriptor#University\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Postsecondary\"\r\n    }\r\n  ],\r\n  \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Other\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#MY\",\r\n      \"addressLine1\": \"address\",\r\n      \"addressLine2\": \"City\",\r\n      \"addressLine3\": \"Postal Code\",\r\n      \"addressLine4\": \"Street\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student Special Education Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"known:studentSpecialEducationProgramAssociationId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
											"\r",
											"// Fetch a copy of the created school payload\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/${pm.environment.get(\"known:studentSpecialEducationProgramAssociationId\")}`,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
											"        \"Content-Type\": \"application/json\",\r",
											"    }\r",
											"    }, function (err, response) {\r",
											"      pm.environment.set('known:studentSpecialEducationProgramAssociation', response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"supplied:studentSpecialEducationProgramAssociations:beginDate\", \"2021-09-08\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n        \"educationOrganizationId\": 255901,\r\n        \"programName\": \"Special Education\",\r\n        \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Special Education\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"604872\"\r\n    },\r\n    \"beginDate\": \"{{supplied:studentSpecialEducationProgramAssociations:beginDate}}\",\r\n    \"ideaEligibility\": true,\r\n    \"iepBeginDate\": \"2021-09-01\",\r\n    \"iepReviewDate\": \"2021-08-27\",\r\n    \"lastEvaluationDate\": \"2021-08-23\",\r\n    \"schoolHoursPerWeek\": 10.00,\r\n    \"specialEducationHoursPerWeek\": 25.00,\r\n    \"specialEducationSettingDescriptor\": \"uri://ed-fi.org/SpecialEducationSettingDescriptor#Inside regular class less than 40% of the day\",\r\n    \"disabilities\": [\r\n        {\r\n            \"disabilityDescriptor\": \"uri://ed-fi.org/DisabilityDescriptor#Autism Spectrum Disorders\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramAssociations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Read Requests",
					"item": [
						{
							"name": "The Read content type includes all properties of a resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response model should contain all of the resource model's properties.\",\r",
											"    () => {\r",
											"        const originalEntity = pm.environment.get(\"known:school\");\r",
											"        const profileEntity = pm.response.json();\r",
											"\r",
											"        // Created entity should contain the profile filtered entity\r",
											"        pm.expect(originalEntity).to.deep.equal(profileEntity);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.ed-fi.school.test-profile-resource-includeall.readable+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:schoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "The Read content type includes all properties of a child collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response model should contain all of the resource model's properties.\",\r",
											"    () => {\r",
											"        const originalEntity = pm.environment.get(\"known:school\");\r",
											"        const profileEntity = pm.response.json();\r",
											"\r",
											"        // Created entity should contain the profile filtered entity\r",
											"        pm.expect(originalEntity).to.deep.include(profileEntity);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-includeall.readable+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:schoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "The Read content type includes all properties of a derived association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response model should contain all of the resource model's properties.\",\r",
											"    () => {\r",
											"        const originalEntity = pm.environment.get(\"known:studentSpecialEducationProgramAssociation\");\r",
											"        const profileEntity = pm.response.json();\r",
											"\r",
											"        // Created entity should contain the profile filtered entity\r",
											"        pm.expect(originalEntity).to.deep.equal(profileEntity);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-includeall.readable+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramAssociations",
										"{{known:studentSpecialEducationProgramAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Write Requests",
					"item": [
						{
							"name": "The Write content type includes all properties of a resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should indicate success\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"// Made it a function, to avoid async issues\r",
											"function getKnownSchool (callback) {\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/schools/` + pm.environment.get(\"known:intlSchoolId\"),\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"Accept\": \"application/vnd.ed-fi.school.test-profile-resource-includeall.readable+json\"\r",
											"        }\r",
											"    }, callback);\r",
											"}\r",
											"\r",
											"getKnownSchool((error, response) => {\r",
											"    Validate(response.json());\r",
											"});\r",
											"\r",
											"function Validate(jsonResponse) {\r",
											"    const originalEntity = pm.environment.get(\"known:intlSchool\");\r",
											"    const updatedEntity = jsonResponse;\r",
											"    const keys = pm.environment.get(\"known:school:PrimaryKeys\");\r",
											"\r",
											"    pm.test(\"The persisted entity model should have unmodified primary key values\",\r",
											"        () => {\r",
											"            _.each(keys, (key) => {\r",
											"                pm.expect(originalEntity[key], key).to.deep.equals(updatedEntity[key]);\r",
											"            })\r",
											"    });\r",
											"\r",
											"    pm.test(\"Every non-primary key value on the entity should be changed\",\r",
											"    () => {\r",
											"        // Traverse all properties that are not pripary keys\r",
											"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys)) {\r",
											"            \r",
											"            // If property is not an array, make a deep comparison\r",
											"            if (!Array.isArray(originalEntity[key])) {\r",
											"                pm.expect(originalEntity[key], key).to.not.deep.equal(updatedEntity[key]);\r",
											"            }\r",
											"            // if property is an array, exclude empty arrays\r",
											"            else if (originalEntity[key].length !== 0 && updatedEntity[key].length !== 0){\r",
											"                pm.expect(originalEntity[key], key).to.not.deep.equal(updatedEntity[key]);\r",
											"            }\r",
											"        }  \r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.ed-fi.school.test-profile-resource-includeall.writable+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nameOfInstitution\": \"Modified\",\r\n  \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Other\",\r\n        \"city\": \"Modified\",\r\n        \"postalCode\": \"78713\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#AA\",\r\n        \"streetNumberName\": \"Modified\",\r\n        \"nameOfCounty\": \"Modified\"\r\n      }\r\n    ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Other\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Other\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:intlSchoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:intlSchoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "The Write content type includes all properties of a child collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should indicate success\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"// Made it a function, to avoid async issues\r",
											"function getKnownSchool (callback) {\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/schools/` + pm.environment.get(\"known:intlSchoolId\"),\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
											"            \"Content-Type\": \"application/json\",\r",
											"        }\r",
											"    }, callback);\r",
											"}\r",
											"\r",
											"getKnownSchool((error, response) => {\r",
											"    Validate(response.json());\r",
											"});\r",
											"\r",
											"function Validate(jsonResponse) {\r",
											"    const originalEntity = pm.environment.get(\"known:intlSchool\");\r",
											"    const updatedEntity = jsonResponse;\r",
											"\r",
											"    pm.test(\"Every non-primary key value on the entity should be changed\",\r",
											"    () => {\r",
											"        // Profile only allos writing the internationalAddresses element, so that is what will be validated only\r",
											"        for (const [key, value] of Object.entries(originalEntity['internationalAddresses'][0])) {\r",
											"            pm.expect(originalEntity['internationalAddresses'][0][key]).to.not.equal(updatedEntity['internationalAddresses'][0][key]);\r",
											"        }        \r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-includeall.writable+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"internationalAddresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n        \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#Mx\",\r\n        \"addressLine1\": \"line 1\",\r\n        \"addressLine2\": \"line 2\",\r\n        \"addressLine3\": \"line 3\",\r\n        \"addressLine4\": \"line 4\"\r\n      }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:intlSchoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:intlSchoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "The Write content type includes all properties of a  derived association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should indicate success\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"// Made it a function, to avoid async issues\r",
											"function getKnownSchool (callback) {\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/studentSpecialEducationProgramAssociations/` + pm.environment.get(\"known:studentSpecialEducationProgramAssociationId\"),\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
											"            \"Content-Type\": \"application/json\",\r",
											"            \"Accept\": \"application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-includeall.readable+json\"\r",
											"        }\r",
											"    }, callback);\r",
											"}\r",
											"\r",
											"getKnownSchool((error, response) => {\r",
											"    Validate(response.json());\r",
											"});\r",
											"\r",
											"function Validate(jsonResponse) {\r",
											"    const originalEntity = pm.environment.get(\"known:studentSpecialEducationProgramAssociation\");\r",
											"    const updatedEntity = jsonResponse;\r",
											"    const keys = pm.environment.get(\"known:studentSpecialEducationProgramAssociations:PrimaryKeys\");\r",
											"\r",
											"    pm.test(\"The persisted entity model should have unmodified primary key values\",\r",
											"        () => {\r",
											"            _.each(keys, (key) => {\r",
											"                pm.expect(originalEntity[key], key).to.deep.equals(updatedEntity[key]);\r",
											"            })\r",
											"    });\r",
											"\r",
											"    pm.test(\"Every non-primary key value on the entity should be changed\",\r",
											"    () => {\r",
											"        // Traverse all properties that are not pripary keys\r",
											"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys)) {\r",
											"            \r",
											"            // If property is not an array, make a deep comparison\r",
											"            if (!Array.isArray(originalEntity[key])) {\r",
											"                pm.expect(originalEntity[key], key).to.not.deep.equal(updatedEntity[key]);\r",
											"            }\r",
											"            // if property is an array, exclude empty arrays\r",
											"            else if (originalEntity[key].length !== 0 && updatedEntity[key].length !== 0){\r",
											"                pm.expect(originalEntity[key], key).to.not.deep.equal(updatedEntity[key]);\r",
											"            }\r",
											"        }  \r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-includeall.writable+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ideaEligibility\": false,\r\n    \"iepBeginDate\": \"2021-09-02\",\r\n    \"iepReviewDate\": \"2021-08-28\",\r\n    \"lastEvaluationDate\": \"2021-08-25\",\r\n    \"schoolHoursPerWeek\": 5.00,\r\n    \"specialEducationHoursPerWeek\": 5.00,\r\n    \"specialEducationSettingDescriptor\": \"uri://ed-fi.org/SpecialEducationSettingDescriptor#Home\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramAssociations",
										"{{known:studentSpecialEducationProgramAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:schoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete School With International Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:intlSchoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:intlSchoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Student Special Education Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSpecialEducationProgramAssociations",
										"{{known:studentSpecialEducationProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Profile definitions can include and exclude certain properties on resources",
			"item": [
				{
					"name": "Include",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Get Primary Key properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.environment.set(\"known:school:PrimaryKeys\", getPrimaryKeys(\"edFi_school\"));\r",
													"pm.environment.set(\"known:studentSpecialEducationProgramAssociations:PrimaryKeys\", getPrimaryKeys(\"edFi_studentSpecialEducationProgramAssociation\")\r",
													"    .concat(\"educationOrganizationReference\",\"programReference\",\"studentReference\"));\r",
													"\r",
													"function getPrimaryKeys(resource) {\r",
													"    const resourceProperties = pm.response.json().definitions[resource].properties;\r",
													"    return Object.keys(resourceProperties).filter(v => resourceProperties[v]['x-Ed-Fi-isIdentity'] === true).concat('id');\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/metadata/data/v3/resources/swagger.json",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"metadata",
												"data",
												"v3",
												"resources",
												"swagger.json"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"known:schoolId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
													"\r",
													"// Fetch a copy of the created school payload\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/schools/${pm.environment.get(\"known:schoolId\")}`,\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"Authorization\": 'bearer ' + pm.environment.get(\"AccessToken_255901\"),\r",
													"        \"Content-Type\": \"application/json\",\r",
													"    }\r",
													"    }, function (err, response) {\r",
													"      pm.environment.set('known:school', response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"supplied:schoolId\", pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": {{supplied:schoolId}},\r\n  \"nameOfInstitution\": \"School 1\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Other\",\r\n  \"charterApprovalSchoolYearTypeReference\": {\r\n      \"schoolYear\": 2022\r\n  },\r\n  \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n        \"city\": \"Austin\",\r\n        \"postalCode\": \"78712\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"1912 Speedway Stop D5000\",\r\n        \"nameOfCounty\": \"Travis\"\r\n      }\r\n    ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://tpdm.ed-fi.org/EducationOrganizationCategoryDescriptor#University\"\r\n    }\r\n  ],\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#High School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Postsecondary\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create School With International Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"known:intlSchoolId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
													"\r",
													"// Fetch a copy of the created school payload\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/schools/${pm.environment.get(\"known:intlSchoolId\")}`,\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
													"        \"Content-Type\": \"application/json\",\r",
													"    }\r",
													"    }, function (err, response) {\r",
													"      pm.environment.set('known:intlSchool', response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"supplied:intlSchoolId\", pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": {{supplied:intlSchoolId}},\r\n  \"nameOfInstitution\": \"Intl School\",\r\n  \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n        \"city\": \"Austin\",\r\n        \"postalCode\": \"78712\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"1912 Speedway Stop D5000\",\r\n        \"nameOfCounty\": \"Travis\"\r\n      }\r\n    ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://tpdm.ed-fi.org/EducationOrganizationCategoryDescriptor#University\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Postsecondary\"\r\n    }\r\n  ],\r\n  \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Other\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#MY\",\r\n      \"addressLine1\": \"address\",\r\n      \"addressLine2\": \"City\",\r\n      \"addressLine3\": \"Postal Code\",\r\n      \"addressLine4\": \"Street\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Student Special Education Program Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"known:studentSpecialEducationProgramAssociationId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
													"\r",
													"// Fetch a copy of the created school payload\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/${pm.environment.get(\"known:studentSpecialEducationProgramAssociationId\")}`,\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
													"        \"Content-Type\": \"application/json\",\r",
													"    }\r",
													"    }, function (err, response) {\r",
													"      pm.environment.set('known:studentSpecialEducationProgramAssociation', response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"supplied:studentSpecialEducationProgramAssociations:beginDate\", \"2021-09-07\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n        \"educationOrganizationId\": 255901,\r\n        \"programName\": \"Special Education\",\r\n        \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Special Education\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"604872\"\r\n    },\r\n    \"beginDate\": \"{{supplied:studentSpecialEducationProgramAssociations:beginDate}}\",\r\n    \"ideaEligibility\": true,\r\n    \"iepBeginDate\": \"2021-09-01\",\r\n    \"iepReviewDate\": \"2021-08-27\",\r\n    \"lastEvaluationDate\": \"2021-08-23\",\r\n    \"schoolHoursPerWeek\": 10.00,\r\n    \"specialEducationHoursPerWeek\": 25.00,\r\n    \"specialEducationSettingDescriptor\": \"uri://ed-fi.org/SpecialEducationSettingDescriptor#Inside regular class less than 40% of the day\",\r\n    \"reasonExitedDescriptor\": \"uri://ed-fi.org/ReasonExitedDescriptor#Reached maximum age\",\r\n    \"disabilities\": [\r\n        {\r\n            \"disabilityDescriptor\": \"uri://ed-fi.org/DisabilityDescriptor#Autism Spectrum Disorders\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Read Requests",
							"item": [
								{
									"name": "The Read content type only includes certain properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const originalEntity = pm.environment.get(\"known:school\");\r",
													"const profileEntity = pm.response.json();\r",
													"const keys = pm.environment.get(\"known:school:PrimaryKeys\").concat(\"_etag\", \"_lastModifiedDate\");\r",
													"const profileIncludeKeys = [\r",
													"    \"nameOfInstitution\",\r",
													"    \"operationalStatusDescriptor\",\r",
													"    \"charterApprovalSchoolYearTypeReference\",\r",
													"    \"schoolTypeDescriptor\",\r",
													"    \"administrativeFundingControlDescriptor\",\r",
													"    \"addresses\",\r",
													"    \"schoolCategories\"\r",
													"];\r",
													"\r",
													"pm.test(\"The response model should contain the id and the primary key properties\",\r",
													"    () => {\r",
													"        _.each(keys, (key) => {\r",
													"            pm.expect(originalEntity[key], key).to.deep.equals(profileEntity[key]);\r",
													"        })\r",
													"});\r",
													"\r",
													"pm.test(\"The response model should contain the explicitly included properties\",\r",
													"    () => {\r",
													"        // Traverse all properties that are not pripary keys\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys)) \r",
													"        {     \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                if(profileIncludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(profileEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"                else {\r",
													"                    pm.expect(profileEntity[key], key).to.be.undefined;\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0){\r",
													"                if(profileIncludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(profileEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"});\r",
													"\r",
													"pm.test(\"the number of properties on the response model should reflect the number of included properties plus the primary key properties\",\r",
													"    () => {\r",
													"        pm.expect(Object.entries(profileEntity).length).to.equal(profileIncludeKeys.length + keys.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.ed-fi.school.test-profile-resource-includeonly.readable+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:schoolId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:schoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "The Read content only includes certain properties from derived association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const originalEntity = pm.environment.get(\"known:studentSpecialEducationProgramAssociation\");\r",
													"const profileEntity = pm.response.json();\r",
													"const keys = pm.environment.get(\"known:studentSpecialEducationProgramAssociations:PrimaryKeys\").concat(\"_etag\", \"_lastModifiedDate\");\r",
													"const profileIncludeKeys = [\r",
													"    \"specialEducationSettingDescriptor\",\r",
													"    \"specialEducationHoursPerWeek\",\r",
													"    \"reasonExitedDescriptor\"\r",
													"];\r",
													"\r",
													"pm.test(\"The response model should contain the id and the primary key properties\",\r",
													"    () => {\r",
													"        _.each(keys, (key) => {\r",
													"            pm.expect(originalEntity[key], key).to.deep.equals(profileEntity[key]);\r",
													"        })\r",
													"});\r",
													"\r",
													"pm.test(\"The response model should contain the explicitly included properties\",\r",
													"    () => {        \r",
													"        // Traverse all properties that are not pripary keys\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys)) \r",
													"        {     \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                if(profileIncludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(profileEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"                else {\r",
													"                    pm.expect(profileEntity[key], key).to.be.undefined;\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0){\r",
													"                if(profileIncludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(profileEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"});\r",
													"\r",
													"pm.test(\"the number of properties on the response model should reflect the number of included properties plus the primary key properties\",\r",
													"    () => {\r",
													"        pm.expect(Object.entries(profileEntity).length).to.equal(profileIncludeKeys.length + keys.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-includeonly.readable+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations",
												"{{known:studentSpecialEducationProgramAssociationId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Write Requests",
							"item": [
								{
									"name": "The Write content type only includes certain properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The response should indicate success\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													"\r",
													"// Made it a function, to avoid async issues\r",
													"function getKnownSchool (callback) {\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/schools/` + pm.environment.get(\"known:intlSchoolId\"),\r",
													"        method: \"GET\",\r",
													"        header: {\r",
													"            \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
													"            \"Content-Type\": \"application/json\",\r",
													"            \"Accept\": \"application/vnd.ed-fi.school.test-profile-resource-includeall.readable+json\"\r",
													"        }\r",
													"    }, callback);\r",
													"}\r",
													"\r",
													"getKnownSchool((error, response) => {\r",
													"    Validate(response.json());\r",
													"});\r",
													"\r",
													"function Validate(jsonResponse) {\r",
													"    const originalEntity = pm.environment.get(\"known:intlSchool\");\r",
													"    const updatedEntity = jsonResponse;\r",
													"    const keys = pm.environment.get(\"known:school:PrimaryKeys\");\r",
													"    const profileIncludeKeys = [\r",
													"        \"shortNameOfInstitution\",\r",
													"        \"operationalStatusDescriptor\",\r",
													"        \"webSite\",\r",
													"        \"charterStatusDescriptor\",\r",
													"        \"administrativeFundingControlDescriptor\",\r",
													"        \"internationalAddresses\",\r",
													"        \"gradeLevels\",\r",
													"        \"_lastModifiedDate\",\r",
													"        \"_etag\"\r",
													"    ]\r",
													"\r",
													"    pm.test(\"The persisted entity model should have unmodified primary key values\",\r",
													"        () => {\r",
													"            _.each(keys, (key) => {\r",
													"                pm.expect(originalEntity[key], key).to.deep.equals(updatedEntity[key]);\r",
													"            })\r",
													"    });\r",
													"\r",
													"    pm.test(\"the only values changed should be the explicitly included values\",\r",
													"    () => {\r",
													"        // Traverse all properties that are not pripary keys\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys)) {\r",
													"     \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                if(profileIncludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(originalEntity[key], key).to.not.deep.equal(updatedEntity[key]);\r",
													"                }\r",
													"                else {0\r",
													"                    pm.expect(originalEntity[key], key).to.deep.equal(updatedEntity[key]);\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0 && updatedEntity[key].length !== 0){\r",
													"                if(profileIncludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(originalEntity[key], key).to.not.deep.equal(updatedEntity[key]);\r",
													"                }\r",
													"                else {\r",
													"                    pm.expect(originalEntity[key], key).to.deep.equal(updatedEntity[key]);\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.ed-fi.school.test-profile-resource-includeonly.writable+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"shortNameOfInstitution\": \"Modified\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Changed\",\r\n  \"website\": \"Modified\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#School Charter\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Private School\",\r\n  \"internationalAddresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Other\",\r\n        \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#MY\",\r\n        \"addressLine1\": \"Modified\",\r\n        \"addressLine2\": \"Modified\",\r\n        \"addressLine3\": \"Modified\",\r\n        \"addressLine4\": \"Modified\"\r\n      }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Kindergarten\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:intlSchoolId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:intlSchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "The Write content type only includes certain properties from derived association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The response should indicate success\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													"\r",
													"// Made it a function, to avoid async issues\r",
													"function getKnownSchool (callback) {\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/studentSpecialEducationProgramAssociations/` + pm.environment.get(\"known:studentSpecialEducationProgramAssociationId\"),\r",
													"        method: \"GET\",\r",
													"        header: {\r",
													"            \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
													"            \"Content-Type\": \"application/json\",\r",
													"            \"Accept\": \"application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-includeall.readable+json\"\r",
													"        }\r",
													"    }, callback);\r",
													"}\r",
													"\r",
													"getKnownSchool((error, response) => {\r",
													"    Validate(response.json());\r",
													"});\r",
													"\r",
													"function Validate(jsonResponse) {\r",
													"    const originalEntity = pm.environment.get(\"known:studentSpecialEducationProgramAssociation\");\r",
													"    const updatedEntity = jsonResponse;\r",
													"    const keys = pm.environment.get(\"known:studentSpecialEducationProgramAssociations:PrimaryKeys\");\r",
													"    const profileIncludeKeys = [\r",
													"        \"specialEducationHoursPerWeek\"\r",
													"    ]\r",
													"\r",
													"    pm.test(\"The persisted entity model should have unmodified primary key values\",\r",
													"        () => {\r",
													"            _.each(keys, (key) => {\r",
													"                pm.expect(originalEntity[key], key).to.deep.equals(updatedEntity[key]);\r",
													"            })\r",
													"    });\r",
													"\r",
													"    pm.test(\"the only values changed should be the explicitly included values\",\r",
													"    () => {\r",
													"        // Traverse all properties that are not pripary keys or audit fields\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys.concat(\"_lastModifiedDate\", \"_etag\"))) {            \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                if(profileIncludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.not.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"                else {\r",
													"                    pm.expect(updatedEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0 && updatedEntity[key].length !== 0){\r",
													"                if(profileIncludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.not.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"                else {\r",
													"                    pm.expect(updatedEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-includeonly.writable+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ideaEligibility\": false,\r\n    \"iepBeginDate\": \"2021-04-02\",\r\n    \"iepReviewDate\": \"2021-04-28\",\r\n    \"lastEvaluationDate\": \"2021-04-25\",\r\n    \"endDate\": \"2021-10-25\",\r\n    \"schoolHoursPerWeek\": 7.00,\r\n    \"specialEducationHoursPerWeek\": 7.00,\r\n    \"specialEducationSettingDescriptor\": \"uri://ed-fi.org/SpecialEducationSettingDescriptor#Separate class\",\r\n    \"reasonExitedDescriptor\": \"uri://ed-fi.org/ReasonExitedDescriptor#Moved out of state\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations",
												"{{known:studentSpecialEducationProgramAssociationId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:schoolId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:schoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete School With International Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:intlSchoolId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:intlSchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Student Special Education Program Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations",
												"{{known:studentSpecialEducationProgramAssociationId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Exclude",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Get Primary Key properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.environment.set(\"known:school:PrimaryKeys\", getPrimaryKeys(\"edFi_school\"));\r",
													"pm.environment.set(\"known:studentSpecialEducationProgramAssociations:PrimaryKeys\", getPrimaryKeys(\"edFi_studentSpecialEducationProgramAssociation\")\r",
													"    .concat(\"educationOrganizationReference\",\"programReference\",\"studentReference\"));\r",
													"\r",
													"function getPrimaryKeys(resource) {\r",
													"    const resourceProperties = pm.response.json().definitions[resource].properties;\r",
													"    return Object.keys(resourceProperties).filter(v => resourceProperties[v]['x-Ed-Fi-isIdentity'] === true).concat('id');\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/metadata/data/v3/resources/swagger.json",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"metadata",
												"data",
												"v3",
												"resources",
												"swagger.json"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"known:schoolId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
													"\r",
													"// Fetch a copy of the created school payload\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/schools/${pm.environment.get(\"known:schoolId\")}`,\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"Authorization\": 'bearer ' + pm.environment.get(\"AccessToken_255901\"),\r",
													"        \"Content-Type\": \"application/json\",\r",
													"    }\r",
													"    }, function (err, response) {\r",
													"      pm.environment.set('known:school', response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"supplied:schoolId\", pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": {{supplied:schoolId}},\r\n  \"nameOfInstitution\": \"School 1\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Active\",\r\n  \"schoolTypeDescriptor\": \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Other\",\r\n  \"charterApprovalSchoolYearTypeReference\": {\r\n      \"schoolYear\": 2022\r\n  },\r\n  \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n        \"city\": \"Austin\",\r\n        \"postalCode\": \"78712\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"1912 Speedway Stop D5000\",\r\n        \"nameOfCounty\": \"Travis\"\r\n      }\r\n    ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://tpdm.ed-fi.org/EducationOrganizationCategoryDescriptor#University\"\r\n    }\r\n  ],\r\n  \"schoolCategories\": [\r\n    {\r\n      \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#High School\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Postsecondary\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create School With International Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"known:intlSchoolId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
													"\r",
													"// Fetch a copy of the created school payload\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/schools/${pm.environment.get(\"known:intlSchoolId\")}`,\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
													"        \"Content-Type\": \"application/json\",\r",
													"    }\r",
													"    }, function (err, response) {\r",
													"      pm.environment.set('known:intlSchool', response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"supplied:intlSchoolId\", pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolId\": {{supplied:intlSchoolId}},\r\n  \"nameOfInstitution\": \"Intl School\",\r\n  \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\",\r\n        \"city\": \"Austin\",\r\n        \"postalCode\": \"78712\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"1912 Speedway Stop D5000\",\r\n        \"nameOfCounty\": \"Travis\"\r\n      }\r\n    ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://tpdm.ed-fi.org/EducationOrganizationCategoryDescriptor#University\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Postsecondary\"\r\n    }\r\n  ],\r\n  \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Other\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#MY\",\r\n      \"addressLine1\": \"address\",\r\n      \"addressLine2\": \"City\",\r\n      \"addressLine3\": \"Postal Code\",\r\n      \"addressLine4\": \"Street\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Student Special Education Program Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"known:studentSpecialEducationProgramAssociationId\", pm.response.headers.one(\"Location\").value.split(\"/\").pop());\r",
													"\r",
													"// Fetch a copy of the created school payload\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get(\"ApiBaseUrl\")}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/${pm.environment.get(\"known:studentSpecialEducationProgramAssociationId\")}`,\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
													"        \"Content-Type\": \"application/json\",\r",
													"    }\r",
													"    }, function (err, response) {\r",
													"      pm.environment.set('known:studentSpecialEducationProgramAssociation', response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"supplied:studentSpecialEducationProgramAssociations:beginDate\", \"2021-09-07\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programReference\": {\r\n        \"educationOrganizationId\": 255901,\r\n        \"programName\": \"Special Education\",\r\n        \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Special Education\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"604872\"\r\n    },\r\n    \"beginDate\": \"{{supplied:studentSpecialEducationProgramAssociations:beginDate}}\",\r\n    \"ideaEligibility\": true,\r\n    \"iepBeginDate\": \"2021-09-01\",\r\n    \"iepReviewDate\": \"2021-08-27\",\r\n    \"lastEvaluationDate\": \"2021-08-23\",\r\n    \"schoolHoursPerWeek\": 10.00,\r\n    \"specialEducationHoursPerWeek\": 25.00,\r\n    \"specialEducationSettingDescriptor\": \"uri://ed-fi.org/SpecialEducationSettingDescriptor#Inside regular class less than 40% of the day\",\r\n    \"reasonExitedDescriptor\": \"uri://ed-fi.org/ReasonExitedDescriptor#Reached maximum age\",\r\n    \"disabilities\": [\r\n        {\r\n            \"disabilityDescriptor\": \"uri://ed-fi.org/DisabilityDescriptor#Autism Spectrum Disorders\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Read Requests",
							"item": [
								{
									"name": "The Read content type only excludes certain properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const originalEntity = pm.environment.get(\"known:school\");\r",
													"const profileEntity = pm.response.json();\r",
													"const keys = pm.environment.get(\"known:school:PrimaryKeys\").concat(\"_etag\", \"_lastModifiedDate\");\r",
													"const profileExcludeKeys = [\r",
													"    \"nameOfInstitution\",\r",
													"    \"operationalStatusDescriptor\",\r",
													"    \"charterApprovalSchoolYearTypeReference\",\r",
													"    \"schoolTypeDescriptor\",\r",
													"    \"administrativeFundingControlDescriptor\",\r",
													"    \"addresses\",\r",
													"    \"schoolCategories\"\r",
													"];\r",
													"\r",
													"pm.test(\"The response model should contain the id and the primary key properties\",\r",
													"    () => {\r",
													"        _.each(keys, (key) => {\r",
													"            pm.expect(originalEntity[key], key).to.deep.equals(profileEntity[key]);\r",
													"        })\r",
													"});\r",
													"\r",
													"pm.test(\"The response model should not contain the explicitly excluded properties\",\r",
													"    () => {        \r",
													"        // Traverse all properties that are not pripary keys\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys)) \r",
													"        {     \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                if(profileExcludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(profileEntity[key], key).to.be.undefined;\r",
													"                }\r",
													"                else {\r",
													"                    pm.expect(profileEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0){\r",
													"                if(profileExcludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(profileEntity[key], key).to.be.undefined;\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"});\r",
													"\r",
													"pm.test(\"the number of properties on the response model should reflect the number of properties on the full School resource model less the explicitly excluded ones\",\r",
													"    () => {\r",
													"        pm.expect(Object.keys(profileEntity).length).to.equal(Object.keys(originalEntity).length - profileExcludeKeys.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.ed-fi.school.test-profile-resource-excludeonly.readable+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:schoolId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:schoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "The Read content type only excludes certain properties from derived association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"const originalEntity = pm.environment.get(\"known:studentSpecialEducationProgramAssociation\");\r",
													"const profileEntity = pm.response.json();\r",
													"const keys = pm.environment.get(\"known:studentSpecialEducationProgramAssociations:PrimaryKeys\").concat(\"_etag\", \"_lastModifiedDate\");\r",
													"const profileExcludeKeys = [\r",
													"    \"specialEducationSettingDescriptor\",\r",
													"    \"specialEducationHoursPerWeek\",\r",
													"    \"reasonExitedDescriptor\"\r",
													"];\r",
													"\r",
													"pm.test(\"The response model should contain the id and the primary key properties\",\r",
													"    () => {\r",
													"        _.each(keys, (key) => {\r",
													"            pm.expect(originalEntity[key], key).to.deep.equals(profileEntity[key]);\r",
													"        })\r",
													"});\r",
													"\r",
													"pm.test(\"The response model should not contain the explicitly excluded properties\",\r",
													"    () => {        \r",
													"        // Traverse all properties that are not pripary keys\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys)) \r",
													"        {     \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                if(profileExcludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(profileEntity[key], key).to.be.undefined;\r",
													"                }\r",
													"                else {\r",
													"                    pm.expect(profileEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0){\r",
													"                if(profileExcludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(profileEntity[key], key).to.be.undefined;\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"});\r",
													"\r",
													"pm.test(\"the number of properties on the response model should reflect the number of properties on the full School resource model less the explicitly excluded ones\",\r",
													"    () => {\r",
													"        pm.expect(Object.keys(profileEntity).length).to.equal(Object.keys(originalEntity).length - profileExcludeKeys.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-excludeonly.readable+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations",
												"{{known:studentSpecialEducationProgramAssociationId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Write Requests",
							"item": [
								{
									"name": "The Write content type only excludes certain properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The response should indicate success\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													"\r",
													"// Made it a function, to avoid async issues\r",
													"function getKnownSchool (callback) {\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/schools/` + pm.environment.get(\"known:intlSchoolId\"),\r",
													"        method: \"GET\",\r",
													"        header: {\r",
													"            \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
													"            \"Content-Type\": \"application/json\",\r",
													"            \"Accept\": \"application/vnd.ed-fi.school.test-profile-resource-includeall.readable+json\"\r",
													"        }\r",
													"    }, callback);\r",
													"}\r",
													"\r",
													"getKnownSchool((error, response) => {\r",
													"    Validate(response.json());\r",
													"});\r",
													"\r",
													"function Validate(jsonResponse) {\r",
													"    const originalEntity = pm.environment.get(\"known:intlSchool\");\r",
													"    const updatedEntity = jsonResponse;\r",
													"    const keys = pm.environment.get(\"known:school:PrimaryKeys\").concat(\"_ext\");\r",
													"    const profileExcludeKeys = [\r",
													"        \"shortNameOfInstitution\",\r",
													"        \"operationalStatusDescriptor\",\r",
													"        \"webSite\",\r",
													"        \"charterStatusDescriptor\",\r",
													"        \"administrativeFundingControlDescriptor\",\r",
													"        \"internationalAddresses\",\r",
													"        \"gradeLevels\"\r",
													"    ]\r",
													"\r",
													"    pm.test(\"The persisted entity model should have unmodified primary key values\",\r",
													"        () => {\r",
													"            _.each(keys, (key) => {\r",
													"                pm.expect(originalEntity[key], key).to.deep.equals(updatedEntity[key]);\r",
													"            })\r",
													"    });\r",
													"    \r",
													"    pm.test(\"the persisted entity model should not have the new values assigned to the explicitly excluded properties\",\r",
													"    () => {\r",
													"        // Traverse all properties that are not pripary keys or audit fields\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys.concat(\"_lastModifiedDate\", \"_etag\"))) {   \r",
													"            \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                // excluded properties should be modified from the original\r",
													"                if(profileExcludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0 && updatedEntity[key].length !== 0){\r",
													"                if(profileExcludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"    });\r",
													"\r",
													"    pm.test(\"the only values not changed should be the explicitly excluded values, the id, and the primary key values\",\r",
													"    () => {\r",
													"        // Traverse all properties that are not pripary keys or audit fields\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys.concat(\"_lastModifiedDate\", \"_etag\"))) {                   \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                if(profileExcludeKeys.indexOf(key) === -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.not.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0 && updatedEntity[key].length !== 0){\r",
													"                if(profileExcludeKeys.indexOf(key) === -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.not.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.ed-fi.school.test-profile-resource-excludeonly.writable+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nameOfInstitution\": \"Modified\",\r\n  \"shortNameOfInstitution\": \"Modified\",\r\n  \"operationalStatusDescriptor\": \"uri://ed-fi.org/OperationalStatusDescriptor#Changed\",\r\n  \"website\": \"Modified\",\r\n  \"charterStatusDescriptor\": \"uri://ed-fi.org/CharterStatusDescriptor#School Charter\",\r\n  \"administrativeFundingControlDescriptor\": \"uri://ed-fi.org/AdministrativeFundingControlDescriptor#Private School\",\r\n  \"internationalAddresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Other\",\r\n        \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#MY\",\r\n        \"addressLine1\": \"Modified\",\r\n        \"addressLine2\": \"Modified\",\r\n        \"addressLine3\": \"Modified\",\r\n        \"addressLine4\": \"Modified\"\r\n      }\r\n  ],\r\n  \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Other\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Kindergarten\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:intlSchoolId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:intlSchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "The Write content type only excludes certain properties from derived association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The response should indicate success\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													"\r",
													"// Made it a function, to avoid async issues\r",
													"function getKnownSchool (callback) {\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/studentSpecialEducationProgramAssociations/` + pm.environment.get(\"known:studentSpecialEducationProgramAssociationId\"),\r",
													"        method: \"GET\",\r",
													"        header: {\r",
													"            \"Authorization\": \"bearer \" + pm.environment.get(\"AccessToken_255901\"),\r",
													"            \"Content-Type\": \"application/json\",\r",
													"            \"Accept\": \"application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-includeall.readable+json\"\r",
													"        }\r",
													"    }, callback);\r",
													"}\r",
													"\r",
													"getKnownSchool((error, response) => {\r",
													"    Validate(response.json());\r",
													"});\r",
													"\r",
													"function Validate(jsonResponse) {\r",
													"    const originalEntity = pm.environment.get(\"known:studentSpecialEducationProgramAssociation\");\r",
													"    const updatedEntity = jsonResponse;\r",
													"    const keys = pm.environment.get(\"known:studentSpecialEducationProgramAssociations:PrimaryKeys\");\r",
													"    const profileExcludeKeys = [\r",
													"        \"specialEducationHoursPerWeek\"\r",
													"    ]\r",
													"\r",
													"    pm.test(\"The persisted entity model should have unmodified primary key values\",\r",
													"        () => {\r",
													"            _.each(keys, (key) => {\r",
													"                pm.expect(originalEntity[key], key).to.deep.equals(updatedEntity[key]);\r",
													"            })\r",
													"    });\r",
													"\r",
													"   pm.test(\"the persisted entity model should not have the new values assigned to the explicitly excluded properties\",\r",
													"    () => {\r",
													"        // Traverse all properties that are not pripary keys or audit fields\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys.concat(\"_lastModifiedDate\", \"_etag\"))) {   \r",
													"            \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                // excluded properties should be modified from the original\r",
													"                if(profileExcludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0 && updatedEntity[key].length !== 0){\r",
													"                if(profileExcludeKeys.indexOf(key) > -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"    });\r",
													"\r",
													"    pm.test(\"the only values not changed should be the explicitly excluded values, the id, and the primary key values\",\r",
													"    () => {\r",
													"        // Traverse all properties that are not pripary keys or audit fields\r",
													"        for (const [key, value] of Object.entries(originalEntity).filter(function (e) { return this.indexOf(e[0]) < 0; }, keys.concat(\"_lastModifiedDate\", \"_etag\"))) {                   \r",
													"            // If property is not an array, make a deep comparison\r",
													"            if (!Array.isArray(originalEntity[key])) {\r",
													"                if(profileExcludeKeys.indexOf(key) === -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.not.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"            // if property is an array, exclude empty arrays\r",
													"            else if (originalEntity[key].length !== 0 && updatedEntity[key].length !== 0){\r",
													"                if(profileExcludeKeys.indexOf(key) === -1){\r",
													"                    pm.expect(updatedEntity[key], key).to.not.deep.equal(originalEntity[key]);\r",
													"                }\r",
													"            }\r",
													"        }  \r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.ed-fi.studentspecialeducationprogramassociation.studentspecialeducationprogramassociation-derived-association-excludeonly.writable+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ideaEligibility\": false,\r\n    \"iepBeginDate\": \"2021-04-02\",\r\n    \"iepReviewDate\": \"2021-04-28\",\r\n    \"lastEvaluationDate\": \"2021-04-25\",\r\n    \"endDate\": \"2021-10-25\",\r\n    \"schoolHoursPerWeek\": 7.00,\r\n    \"specialEducationHoursPerWeek\": 7.00,\r\n    \"specialEducationSettingDescriptor\": \"uri://ed-fi.org/SpecialEducationSettingDescriptor#Separate class\",\r\n    \"reasonExitedDescriptor\": \"uri://ed-fi.org/ReasonExitedDescriptor#Moved out of state\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations",
												"{{known:studentSpecialEducationProgramAssociationId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:schoolId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:schoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete School With International Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:intlSchoolId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:intlSchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Student Special Education Program Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSpecialEducationProgramAssociations/{{known:studentSpecialEducationProgramAssociationId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSpecialEducationProgramAssociations",
												"{{known:studentSpecialEducationProgramAssociationId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Test Suite Teardown",
			"item": [
				{
					"name": "Clean up Access Tokens",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remove all environment variables related to Access Tokens\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'AccessToken_') || _.startsWith(x, 'TokenExpiry_'))\r",
									"  .each(k => pm.environment.unset(k)).value();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"CreateAccessToken(\"255901\");",
					"",
					"// Used for Assigned Profiles tests (maybe could be reduced further with additional analysis)",
					"// Assigned profiles must be used for covered resources",
					"CreateAccessToken(\"ProfileTest_IncludeOnly\");",
					"CreateAccessToken(\"ProfileTest_IncludeAll\");",
					"CreateAccessToken(\"ProfileTest_StudentOnlyResourceIncludeAll\");",
					"CreateAccessToken(\"ProfileTest_MultipleProfileAssignedSchoolResource\");",
					"// Resources not covered by an assigned profile",
					"CreateAccessToken(\"ProfileTest_IncludeAll_StaffOnlyIncludeAll\");",
					"CreateAccessToken(\"ProfileTest_StaffOnlyStudentOnlyIncludeAll\");",
					"",
					"//  API client has no assigned API key",
					"CreateAccessToken(\"NoEdorg\");",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(clientSuffix) {",
					"  const apiKeyName = `ApiKey_${clientSuffix}`;",
					"  const apiSecretName = `ApiSecret_${clientSuffix}`;",
					"  const tokenExpiryName = `TokenExpiry_${clientSuffix}`;",
					"  const accessTokenName = `AccessToken_${clientSuffix}`;",
					"",
					"  let tokenExpiration = pm.environment.get(tokenExpiryName);",
					"  let currentToken = pm.environment.get(accessTokenName);",
					"  let getToken = true;",
					"  ",
					"  if (!tokenExpiration || !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"  } else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"  } else {",
					"    getToken = false;",
					"  }",
					"",
					"  if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(apiKeyName);",
					"    let clientSecret = pm.environment.get(apiSecretName);",
					"    let grantType = 'client_credentials';",
					"",
					"    let getTokenRequest = {",
					"      method: 'POST',",
					"      url: tokenUrl,",
					"      auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"          { key: \"username\", value: clientId },",
					"          { key: \"password\", value: clientSecret }",
					"        ]",
					"      },",
					"      header: [",
					"        \"content-type:application/x-www-form-urlencoded\"",
					"      ],",
					"      body: {",
					"        mode: \"urlencoded\",",
					"        urlencoded: [{ key: \"grant_type\", value: grantType }]",
					"      }",
					"    };",
					"",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"      let jsonResponse = response.json();",
					"      let newAccessToken = jsonResponse.access_token;",
					"",
					"      // console.log({ err, jsonResponse, newAccessToken })",
					"      console.log(`${accessTokenName} = ${newAccessToken}`);",
					"      pm.environment.set(accessTokenName, newAccessToken);",
					"",
					"      let expiryDate = new Date();",
					"      expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"      pm.environment.set(tokenExpiryName, expiryDate.getTime());",
					"    });",
					"  }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}