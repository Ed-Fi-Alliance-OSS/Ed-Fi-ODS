{
	"info": {
		"_postman_id": "94085c82-8a53-4cef-bc7b-7a1351f688a1",
		"name": "Ed-Fi ODS/API Profile Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Load Descriptor Data",
			"item": [
				{
					"name": "Initiailze   addressTypeDescriptors List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === true){",
									"    pm.test(\"Status code is 200\", () => {",
									"        pm.expect(pm.response.code).to.equal(200);",
									"    });",
									"    ",
									"    const descriptorList=['A1','A2','A3','A4'];",
									"    const __ = require('lodash');",
									"     ",
									"        \t__.each(descriptorList, eachDescriptor => {",
									"        \t    ",
									"            \t    let payload = { ",
									"                    codeValue: eachDescriptor ,",
									"                    description: eachDescriptor ,",
									"                    namespace: 'uri://ed-fi.org/AddressTypeDescriptor' ,",
									"                    shortDescription: eachDescriptor",
									"                };",
									"    ",
									"                let  descriptorPostRequest = {",
									"                  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/addressTypeDescriptors\",",
									"                  method:'POST',",
									"                  header: {",
									"                        \"Authorization\":'bearer '+pm.environment.get(\"AccessToken_255901\"),",
									"                        \"Content-Type\": \"application/json\"",
									"                    },",
									"                  body: {",
									"                        mode: 'raw',",
									"                        raw: JSON.stringify(payload)",
									"                    }",
									"                };",
									"    ",
									"        ",
									"                 pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"                        if (err) {",
									"                            console.log(err);",
									"                        } else {",
									"                            console.log(descriptor);",
									"                        }",
									"                });",
									"        ",
									"        ",
									"         \t});",
									"",
									"}  \t"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/addressTypeDescriptors",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"addressTypeDescriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiailze   AssessmentReportingMethodDescriptors  List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === true){",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const __ = require('lodash');",
									"const descriptorList=['A1','A2','A3','A4'];",
									"",
									"",
									"    \t__.each(descriptorList, eachDescriptor => {",
									"    \t    ",
									"        \t    let payload = { ",
									"                codeValue: eachDescriptor ,",
									"                description: eachDescriptor ,",
									"                namespace: 'uri://ed-fi.org/AssessmentReportingMethodDescriptor' ,",
									"                shortDescription: eachDescriptor",
									"            };",
									"",
									"            let  descriptorPostRequest = {",
									"              url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/assessmentReportingMethodDescriptors\",",
									"              method:'POST',",
									"              header: {",
									"                    \"Authorization\":'bearer '+pm.environment.get(\"AccessToken_255901\"),",
									"                    \"Content-Type\": \"application/json\"",
									"                },",
									"              body: {",
									"                    mode: 'raw',",
									"                    raw: JSON.stringify(payload)",
									"                }",
									"            };",
									"",
									"    ",
									"             pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"                    if (err) {",
									"                        console.log(err);",
									"                    } else {",
									"                        console.log(descriptor);",
									"                    }",
									"            });",
									"    ",
									"    ",
									"     \t});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/AssessmentReportingMethodDescriptors",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"AssessmentReportingMethodDescriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiailze   StateAbbreviationDescriptors  List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === true){",
									"    pm.test(\"Status code is 200\", () => {",
									"        pm.expect(pm.response.code).to.equal(200);",
									"    });",
									"    ",
									"    const __ = require('lodash');",
									"    const descriptorList=['S1','S2','S3','S4'];",
									"    ",
									"    ",
									"        \t__.each(descriptorList, eachDescriptor => {",
									"        \t    ",
									"            \t    let payload = { ",
									"                    codeValue: eachDescriptor ,",
									"                    description: eachDescriptor ,",
									"                    namespace: 'uri://ed-fi.org/StateAbbreviationDescriptor' ,",
									"                    shortDescription: eachDescriptor",
									"                };",
									"    ",
									"                let  descriptorPostRequest = {",
									"                  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/StateAbbreviationDescriptors\",",
									"                  method:'POST',",
									"                  header: {",
									"                        \"Authorization\":'bearer '+pm.environment.get(\"AccessToken_255901\"),",
									"                        \"Content-Type\": \"application/json\"",
									"                    },",
									"                  body: {",
									"                        mode: 'raw',",
									"                        raw: JSON.stringify(payload)",
									"                    }",
									"                };",
									"    ",
									"        ",
									"                 pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"                        if (err) {",
									"                            console.log(err);",
									"                        } else {",
									"                            console.log(descriptor);",
									"                        }",
									"                });",
									"        ",
									"        ",
									"         \t});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StateAbbreviationDescriptors",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"StateAbbreviationDescriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiailze   SchoolCategoryDescriptors List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === true){",
									"    pm.test(\"Status code is 200\", () => {",
									"        pm.expect(pm.response.code).to.equal(200);",
									"    });",
									"    ",
									"    const __ = require('lodash');",
									"    const descriptorList=['S1','S2','S3','S4'];",
									"    ",
									"        \t__.each(descriptorList, eachDescriptor => {",
									"        \t    ",
									"            \t    let payload = { ",
									"                    codeValue: eachDescriptor ,",
									"                    description: eachDescriptor ,",
									"                    namespace: 'uri://ed-fi.org/SchoolCategoryDescriptor' ,",
									"                    shortDescription: eachDescriptor",
									"                };",
									"    ",
									"                let  descriptorPostRequest = {",
									"                  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/SchoolCategoryDescriptors\",",
									"                  method:'POST',",
									"                  header: {",
									"                        \"Authorization\":'bearer '+pm.environment.get(\"AccessToken_255901\"),",
									"                        \"Content-Type\": \"application/json\"",
									"                    },",
									"                  body: {",
									"                        mode: 'raw',",
									"                        raw: JSON.stringify(payload)",
									"                    }",
									"                };",
									"    ",
									"        ",
									"                 pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"                        if (err) {",
									"                            console.log(err);",
									"                        } else {",
									"                            console.log(descriptor);",
									"                        }",
									"                });",
									"        ",
									"        ",
									"         \t});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/SchoolCategoryDescriptors",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"SchoolCategoryDescriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiailze   GradeLevelDescriptors List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === true){",
									"    ",
									"    pm.test(\"Status code is 200\", () => {",
									"        pm.expect(pm.response.code).to.equal(200);",
									"    });",
									"    ",
									"    const __ = require('lodash');",
									"    const descriptorList=['G1','G2','G3','G4'];",
									"    ",
									"    ",
									"        \t__.each(descriptorList, eachDescriptor => {",
									"        \t    ",
									"            \t    let payload = { ",
									"                    codeValue: eachDescriptor ,",
									"                    description: eachDescriptor ,",
									"                    namespace: 'uri://ed-fi.org/GradeLevelDescriptor' ,",
									"                    shortDescription: eachDescriptor",
									"                };",
									"    ",
									"                let  descriptorPostRequest = {",
									"                  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/GradeLevelDescriptors\",",
									"                  method:'POST',",
									"                  header: {",
									"                        \"Authorization\":'bearer '+pm.environment.get(\"AccessToken_255901\"),",
									"                        \"Content-Type\": \"application/json\"",
									"                    },",
									"                  body: {",
									"                        mode: 'raw',",
									"                        raw: JSON.stringify(payload)",
									"                    }",
									"                };",
									"    ",
									"        ",
									"                 pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"                        if (err) {",
									"                            console.log(err);",
									"                        } else {",
									"                            console.log(descriptor);",
									"                        }",
									"                });",
									"        ",
									"        ",
									"         \t});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/GradeLevelDescriptors",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"GradeLevelDescriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiailze   CountryDescriptors List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === true){",
									"    pm.test(\"Status code is 200\", () => {",
									"        pm.expect(pm.response.code).to.equal(200);",
									"    });",
									"    ",
									"    const __ = require('lodash');",
									"    const descriptorList=['C1','C2','C3','C4'];",
									"    ",
									"    ",
									"        \t__.each(descriptorList, eachDescriptor => {",
									"        \t    ",
									"            \t    let payload = { ",
									"                    codeValue: eachDescriptor ,",
									"                    description: eachDescriptor ,",
									"                    namespace: 'uri://ed-fi.org/CountryDescriptor' ,",
									"                    shortDescription: eachDescriptor",
									"                };",
									"    ",
									"                let  descriptorPostRequest = {",
									"                  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/CountryDescriptors\",",
									"                  method:'POST',",
									"                  header: {",
									"                        \"Authorization\":'bearer '+pm.environment.get(\"AccessToken_255901\"),",
									"                        \"Content-Type\": \"application/json\"",
									"                    },",
									"                  body: {",
									"                        mode: 'raw',",
									"                        raw: JSON.stringify(payload)",
									"                    }",
									"                };",
									"    ",
									"        ",
									"                 pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"                        if (err) {",
									"                            console.log(err);",
									"                        } else {",
									"                            console.log(descriptor);",
									"                        }",
									"                });",
									"    ",
									"    ",
									"     \t});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/CountryDescriptors",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"CountryDescriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiailze   PerformanceLevelDescriptors List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === true){",
									"    pm.test(\"Status code is 200\", () => {",
									"        pm.expect(pm.response.code).to.equal(200);",
									"    });",
									"    ",
									"    const __ = require('lodash');",
									"    const descriptorList=['P1','P2','P3','P4'];",
									"    ",
									"    ",
									"        \t__.each(descriptorList, eachDescriptor => {",
									"        \t    ",
									"            \t    let payload = { ",
									"                    codeValue: eachDescriptor ,",
									"                    description: eachDescriptor ,",
									"                    namespace: 'uri://ed-fi.org/PerformanceLevelDescriptor' ,",
									"                    shortDescription: eachDescriptor",
									"                };",
									"    ",
									"                let  descriptorPostRequest = {",
									"                  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/PerformanceLevelDescriptors\",",
									"                  method:'POST',",
									"                  header: {",
									"                        \"Authorization\":'bearer '+pm.environment.get(\"AccessToken_255901\"),",
									"                        \"Content-Type\": \"application/json\"",
									"                    },",
									"                  body: {",
									"                        mode: 'raw',",
									"                        raw: JSON.stringify(payload)",
									"                    }",
									"                };",
									"    ",
									"        ",
									"                 pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"                        if (err) {",
									"                            console.log(err);",
									"                        } else {",
									"                            console.log(descriptor);",
									"                        }",
									"                });",
									"        ",
									"        ",
									"         \t});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/PerformanceLevelDescriptors",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"PerformanceLevelDescriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiailze   ResultDatatypeTypeDescriptors List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
									"",
									"if (profilesFeatureIsEnabled === true){",
									"    pm.test(\"Status code is 200\", () => {",
									"        pm.expect(pm.response.code).to.equal(200);",
									"    });",
									"    ",
									"    const __ = require('lodash');",
									"    const descriptorList=['A1','A2','A3','A4'];",
									"    ",
									"        \t__.each(descriptorList, eachDescriptor => {",
									"        \t    ",
									"            \t    let payload = { ",
									"                    codeValue: eachDescriptor ,",
									"                    description: eachDescriptor ,",
									"                    namespace: 'uri://ed-fi.org/ResultDatatypeTypeDescriptor' ,",
									"                    shortDescription: eachDescriptor",
									"                };",
									"    ",
									"                let  descriptorPostRequest = {",
									"                  url:pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/resultDatatypeTypeDescriptors\",",
									"                  method:'POST',",
									"                  header: {",
									"                        \"Authorization\":'bearer '+pm.environment.get(\"AccessToken_255901\"),",
									"                        \"Content-Type\": \"application/json\"",
									"                    },",
									"                  body: {",
									"                        mode: 'raw',",
									"                        raw: JSON.stringify(payload)",
									"                    }",
									"                };",
									"    ",
									"        ",
									"                 pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"                        if (err) {",
									"                            console.log(err);",
									"                        } else {",
									"                            console.log(descriptor);",
									"                        }",
									"                });",
									"        ",
									"        ",
									"         \t});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/resultDatatypeTypeDescriptors",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"resultDatatypeTypeDescriptors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feature:Embedded one to one references can be included and excluded",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Initialize Known Assessment Data for Get Requests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    const __ = require('lodash');",
											"    const responseItems = pm.response.json();",
											"    pm.environment.set('known:embedded:assessmentGuid', __.first(responseItems)[\"id\"]);",
											"    pm.environment.set('known:contentStandardTitle', __.first(responseItems)[\"contentStandard\"][\"title\"]);",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "The Read content type can include embedded one to one references",
					"item": [
						{
							"name": "The Read content type can include embedded one to one references",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"",
											"",
											"    pm.test(\"Should the item return contain the embedded object ContentStandard\", () => {",
											"    ",
											"     const responseItem = pm.response.json();",
											"     const properties = Object.keys(responseItem); ",
											"     pm.expect(properties).to.include.any.members(['contentStandard']);",
											"    });",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.ed-fi.assessment.assessment-readable-includes-embedded-object.readable+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:embedded:assessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments",
										"{{known:embedded:assessmentGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Read content type can exclude embedded one to one references",
					"item": [
						{
							"name": "The Read content type can exclude embedded one to one references",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"",
											"",
											"    pm.test(\"Should the item return should not contain the embedded object ContentStandard\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         const properties = Object.keys(responseItem); ",
											"         pm.expect(properties).to.not.include.any.members(['contentStandard']);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.assessment.assessment-readable-excludes-embedded-object.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:embedded:assessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments",
										"{{known:embedded:assessmentGuid}}"
									]
								},
								"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content type can exclude embedded one to one references",
					"item": [
						{
							"name": "The Write content type can exclude embedded one to one references",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle',newGuid());",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.assessment.assessment-writable-excludes-embedded-object.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"assessmentTitle\": \"4th Grade Reading 1st Six Weeks 2012-2013\",\r\n  \"contentStandard\": {\r\n     \"title\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\"\r\n  },\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n    }\r\n  ]\r\n \r\n \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:embedded:assessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments",
										"{{known:embedded:assessmentGuid}}"
									]
								},
								"description": "Scenario: The Write content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Excludes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should not be changed"
							},
							"response": []
						},
						{
							"name": "Get contentStandard Change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"",
											"",
											"    pm.test(\"Should the item return with updated the embedded object ContentStandard\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem[\"contentStandard\"][\"title\"]).to.equal(pm.environment.get('known:contentStandardTitle'));",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:embedded:assessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments",
										"{{known:embedded:assessmentGuid}}"
									]
								},
								"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The Write content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Excludes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should not be changed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content type can include embedded one to one references",
					"item": [
						{
							"name": "The Write content type can include embedded one to one references",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentTitle',newGuid());",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.assessment.assessment-writable-includes-embedded-object.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"assessmentTitle\": \"3rd Grade Reading 1st Six Weeks 2012-2013\",\r\n  \"contentStandard\": {\r\n     \"title\":\"{{supplied:{{scenarioId}}:edfiAssessmentTitle}}\"\r\n  },\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n    }\r\n  ]\r\n \r\n \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:embedded:assessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments",
										"{{known:embedded:assessmentGuid}}"
									]
								},
								"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
							},
							"response": []
						},
						{
							"name": "Get contentStandard Change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"",
											"",
											"    const responseItem = pm.response.json();",
											"    pm.test(\"Should the item return should not have update of embedded object ContentStandard\", () => {",
											"        ",
											"         pm.expect(responseItem[\"contentStandard\"][\"title\"]).to.not.equal(pm.environment.get('known:contentStandardTitle'));",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:embedded:assessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments",
										"{{known:embedded:assessmentGuid}}"
									]
								},
								"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Feature:Profile definitions can be readable or writable only",
			"item": [
				{
					"name": "A POST request is made with a write only profile",
					"item": [
						{
							"name": "A POST request is made with a write only profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    pm.environment.set('supplied:schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"255901\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n    \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n      }\r\n    ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								},
								"description": "Scenario: A POST request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: A POST request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GET request is made with a read only profile",
					"item": [
						{
							"name": "GET request is made with a read only profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-readonly.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:schoolGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "A GET request is made with a write only profile",
					"item": [
						{
							"name": "A GET request is made with a write only profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 405\", () => {",
											"        pm.expect(pm.response.code).to.equal(405);",
											"    });",
											"",
											"",
											"    pm.test(\"Should return the item with The allowed methods for this resource with the 'Test-Profile-Resource-WriteOnly' profile are PUT, POST, DELETE and OPTIONS. string\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"The allowed methods for this resource with the 'test-profile-resource-writeonly' profile are PUT, POST, DELETE and OPTIONS.\");",
											"          ",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:schoolGuid}}"
									]
								},
								"description": "Scenario: A GET request is made with a write only profile\r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are PUT, POST, DELETE and OPTIONS.\""
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a write only profile\r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are PUT, POST, DELETE and OPTIONS.\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "A PUT request is made with a read only profile",
					"item": [
						{
							"name": "A PUT request is made with a read only profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 405\", () => {",
											"        pm.expect(pm.response.code).to.equal(405);",
											"    });",
											"",
											"",
											"    pm.test(\"Should return the item with The allowed methods for this resource with the 'Test-Profile-Resource-ReadOnly' profile are GET, DELETE and OPTIONS. string\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"The allowed methods for this resource with the 'test-profile-resource-readonly' profile are GET, DELETE and OPTIONS.\");",
											"          ",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution','Grand Bend Elementary School'+__.random(10000));",
											"",
											"",
											"",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-readonly.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n   \r\n    \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n   \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n    \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n      }\r\n    ]\r\n  }\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:schoolGuid}}"
									]
								},
								"description": "Scenario: A PUT request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: A PUT request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "A PUT request is made with a write only profile",
					"item": [
						{
							"name": "A PUT request is made with a write only profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');",
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution','Grand Bend Elementary School'+__.random(10000));",
											"",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n   \r\n    \"nameOfInstitution\": \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n   \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n    \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n      }\r\n    ]\r\n  }\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:schoolGuid}}"
									]
								},
								"description": "Scenario: A PUT request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: A PUT request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "A POST request is made with a read only profile",
					"item": [
						{
							"name": "A POST request is made with a read only profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 405\", () => {",
											"        pm.expect(pm.response.code).to.equal(405);",
											"    });",
											"",
											"    pm.test(\"Should return the item with The allowed methods for this resource with the 'Test-Profile-Resource-ReadOnly' profile are GET, DELETE and OPTIONS. string\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"The allowed methods for this resource with the 'test-profile-resource-readonly' profile are GET, DELETE and OPTIONS.\");",
											"          ",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-readonly.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"255901\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n    \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n      }\r\n    ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								},
								"description": "Scenario: A POST request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\""
							},
							"response": []
						}
					],
					"description": "Scenario: A POST request is made with a read only profile\r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 405 Method Not Allowed failure indicating that \"The allowed methods for this resource with the '{profile}' profile are GET, DELETE and OPTIONS.\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Feature:Profile definitions can filter child collections to include or exclude items based on Descriptor values",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Insert  School Data for Get Requests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
											"function createScenarioId() { return newGuid().substring(0,5); }\r",
											"pm.environment.set('scenarioId',createScenarioId());\r",
											"const scenarioId = pm.environment.get('scenarioId');\r",
											"const __ = require('lodash');\r",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));\r",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    pm.environment.set('supplied:inculdeexculde:schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n     \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      },\t\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n      ,\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n      ,\r\n       {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n    ],\r\n   \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n     \"internationalAddresses\": [\r\n     {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n    }\r\n\t],\r\n     \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n      },\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n      },\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n      },\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n      }\r\n    ],\r\n   \r\n    \"schoolCategories\": [\r\n      {\r\n        \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n      },\r\n      {\r\n        \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n      },\r\n      {\r\n         \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n      },\r\n      {\r\n         \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n      }\r\n     \r\n    ]\r\n  \r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "The Read content type filters a child collection to only include certain Descriptor values",
					"item": [
						{
							"name": "The Read content type filters a child collection to only include certain Descriptor values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');\r",
											"\r",
											"if (profilesFeatureIsEnabled === true){\r",
											"    pm.test(\"Status code is 200\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"    \r",
											"    const responseItem = pm.response.json();\r",
											"    const __ = require('lodash');\r",
											"    const expectedaddressTypeDescriptor=[\r",
											"        'uri://ed-fi.org/AddressTypeDescriptor#A4',\r",
											"        'uri://ed-fi.org/AddressTypeDescriptor#A2'];\r",
											"    const expectedcountryDescriptor=[\r",
											"        'uri://ed-fi.org/CountryDescriptor#C2',\r",
											"        'uri://ed-fi.org/CountryDescriptor#C4'];\r",
											"    const expectedschoolCategoryDescriptor=[\r",
											"        'uri://ed-fi.org/SchoolCategoryDescriptor#S2',\r",
											"        'uri://ed-fi.org/SchoolCategoryDescriptor#S4'];\r",
											"    const expectedgradeLevelDescriptor=[\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G4'];\r",
											"\r",
											"\r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/AddressTypeDescriptor#A2','uri://ed-fi.org/AddressTypeDescriptor#A4'] for address.addressTypeDescriptor from addresses collection \", () => {\r",
											"    \r",
											"        const actualaddressTypeDescriptors = __.map(responseItem.addresses, address => address.addressTypeDescriptor);\r",
											"        pm.expect(actualaddressTypeDescriptors).to.have.members(expectedaddressTypeDescriptor);\r",
											"       \r",
											"    });\r",
											"    \r",
											"    pm.test(\"Should return all items in set of  ['uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C4'] for countryDescriptor from internationalAddresses collection  \", () => {\r",
											"        \r",
											"        const actualcountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
											"        pm.expect(actualcountryDescriptors).to.have.members(expectedcountryDescriptor);\r",
											"        \r",
											"    });\r",
											"    \r",
											"    \r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/SchoolCategoryDescriptor#S2','uri://ed-fi.org/SchoolCategoryDescriptor#S4'] for schoolCategoryDescriptor from schoolCategories collection  \", () => {\r",
											"        \r",
											"        const actualschoolCategoryDescriptors = __.map(responseItem.schoolCategories, schoolCategory => schoolCategory.schoolCategoryDescriptor);\r",
											"        pm.expect(actualschoolCategoryDescriptors).to.have.members(expectedschoolCategoryDescriptor);\r",
											"       \r",
											"    });\r",
											"    \r",
											"    \r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G4'] for gradeLevelDescriptor from gradeLevels collection  \", () => {\r",
											"        \r",
											"        const actualgradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
											"        pm.expect(actualgradeLevelDescriptors).to.have.members(expectedgradeLevelDescriptor);\r",
											"        \r",
											"    });\r",
											"}\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content Descriptor filters a child collection to only include certain Descriptor values and only conforming values are supplied",
					"item": [
						{
							"name": "The Write content Descriptor filters a child collection to only include certain Descriptor values and only conforming values are supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n     \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n      ,\r\n       {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n    ],\r\n   \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n     \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n    }\r\n\t],\r\n     \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n      },\r\n       {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n      }\r\n    ],\r\n   \r\n    \"schoolCategories\": [\r\n      {\r\n        \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n      },\r\n       {\r\n         \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n      }\r\n     \r\n    ]\r\n  \r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						},
						{
							"name": "Get request for School using ProfileTest_SpecificDescriptors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');\r",
											"\r",
											"if (profilesFeatureIsEnabled === true){\r",
											"    pm.test(\"Status code is 200\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"    \r",
											"    const responseItem = pm.response.json();\r",
											"    const __ = require('lodash');\r",
											"    const expectedcountryDescriptor = [\r",
											"        'uri://ed-fi.org/CountryDescriptor#C1',\r",
											"        'uri://ed-fi.org/CountryDescriptor#C2',\r",
											"        'uri://ed-fi.org/CountryDescriptor#C3',\r",
											"        'uri://ed-fi.org/CountryDescriptor#C4'];\r",
											"\r",
											"\r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/CountryDescriptor#C1','uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C3','uri://ed-fi.org/CountryDescriptor#C4'] for countryDescriptor from internationalAddresses collection  \", () => {\r",
											"      \r",
											"        const actualcountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
											"        pm.expect(actualcountryDescriptors).to.have.members(expectedcountryDescriptor);\r",
											"      \r",
											"    });\r",
											"    \r",
											"    \r",
											"    const expectedgradeLevelDescriptor = [\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G4',\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G1',\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G3'];\r",
											"    \r",
											"    \r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/GradeLevelDescriptor#G4','uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G3'] for gradeLevelDescriptor from gradeLevels collection  \", () => {\r",
											"    \r",
											"        const actualgradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
											"        pm.expect(actualgradeLevelDescriptors).to.have.members(expectedgradeLevelDescriptor);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors.readable+json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content Descriptor filters a child collection to only include certain Descriptor values and non-conforming values are supplied",
					"item": [
						{
							"name": "The Write content Descriptor filters a child collection to only include certain Descriptor values and non-conforming values are supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"    pm.test(\"Should return the item with message does not conform with the filter values defined by profile 'Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors'\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"does not conform with the filter values defined by profile 'Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors'\");",
											"          ",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n     \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n      ,\r\n       {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n    ],\r\n   \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n     \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n    }\r\n\t],\r\n     \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n      },\r\n       {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n      }\r\n    ],\r\n   \r\n    \"schoolCategories\": [\r\n      {\r\n        \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n      },\r\n       {\r\n         \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n      }\r\n     \r\n    ]\r\n  \r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								},
								"description": "Scenario: The Write content Descriptor filters a child collection to only include certain Descriptor values and non-conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only non-conforming included Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the value of {suppliedValue} supplied for the {property} of the {entity} does not conform with the filter values defined by profile {profileName}\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The Write content Descriptor filters a child collection to only include certain Descriptor values and non-conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only non-conforming included Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the value of {suppliedValue} supplied for the {property} of the {entity} does not conform with the filter values defined by profile {profileName}\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Read content type filters a child collection to only exclude certain Descriptor values",
					"item": [
						{
							"name": "Update  School Data for Get Requests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n     \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      },\t\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n      ,\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n      ,\r\n       {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n    ],\r\n   \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n     \"internationalAddresses\": [\r\n     {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n    },\r\n     {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n    }\r\n\t],\r\n     \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n      },\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n      },\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n      },\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n      }\r\n    ],\r\n   \r\n    \"schoolCategories\": [\r\n      {\r\n        \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n      },\r\n      {\r\n        \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n      },\r\n      {\r\n         \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n      },\r\n      {\r\n         \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n      }\r\n     \r\n    ]\r\n  \r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "The Read content type filters a child collection to only exclude certain Descriptor values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    const responseItem = pm.response.json();",
											"    const __ = require('lodash');",
											"    const expectedaddressTypeDescriptor=[",
											"        'uri://ed-fi.org/AddressTypeDescriptor#A1',",
											"        'uri://ed-fi.org/AddressTypeDescriptor#A3'];",
											"    ",
											"    const expectedcountryDescriptor=[",
											"        'uri://ed-fi.org/CountryDescriptor#C1',",
											"        'uri://ed-fi.org/CountryDescriptor#C3'];",
											"    const expectedschoolCategoryDescriptor=[",
											"        'uri://ed-fi.org/SchoolCategoryDescriptor#S1',",
											"        'uri://ed-fi.org/SchoolCategoryDescriptor#S3'];",
											"    const expectedgradeLevelDescriptor=[",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G1',",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G3'];",
											"",
											"    pm.test(\"Should return all items should not  in set of ['uri://ed-fi.org/AddressTypeDescriptor#A1','uri://ed-fi.org/AddressTypeDescriptor#A3'] for address.addressTypeDescriptor from addresses collection \", () => {",
											"        ",
											"        const actualaddressTypeDescriptors = __.map(responseItem.addresses, address => address.addressTypeDescriptor);",
											"        pm.expect(actualaddressTypeDescriptors).to.not.have.members(expectedaddressTypeDescriptor);",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Should return all items should not  in set of  ['uri://ed-fi.org/CountryDescriptor#C1','uri://ed-fi.org/CountryDescriptor#C3'] for countryDescriptor from internationalAddresses collection  \", () => {",
											"        ",
											"        const actualcountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);",
											"        pm.expect(actualcountryDescriptors).to.not.have.members(expectedcountryDescriptor);",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Should return all items should not  in set of ['uri://ed-fi.org/SchoolCategoryDescriptor#S1','uri://ed-fi.org/SchoolCategoryDescriptor#S3'] for schoolCategoryDescriptor from schoolCategories collection  \", () => {",
											"        ",
											"        const actualschoolCategoryDescriptors = __.map(responseItem.schoolCategories, schoolCategory => schoolCategory.schoolCategoryDescriptor);",
											"        pm.expect(actualschoolCategoryDescriptors).to.not.have.members(expectedschoolCategoryDescriptor);",
											"       ",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Should return all items should not  in set of ['uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G3'] for gradeLevelDescriptor from gradeLevels collection  \", () => {",
											"        ",
											"         const actualgradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);",
											"        pm.expect(actualgradeLevelDescriptors).to.not.have.members(expectedgradeLevelDescriptor);",
											"    });",
											"}   "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-excludeonly-specific-descriptors.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								},
								"description": "Scenario: The Read content type filters a child collection to only exclude certain Descriptor values\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response model's collection items should not contain items matching the excluded Descriptor values"
							},
							"response": []
						}
					],
					"description": "Scenario: The Read content type filters a child collection to only exclude certain Descriptor values\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response model's collection items should not contain items matching the excluded Descriptor values",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied",
					"item": [
						{
							"name": "The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n     \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n      ,\r\n       {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n    ],\r\n   \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n     \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n    }\r\n\t],\r\n     \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n      },\r\n       {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n      }\r\n    ],\r\n   \r\n    \"schoolCategories\": [\r\n      {\r\n        \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n      },\r\n       {\r\n         \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n      }\r\n     \r\n    ]\r\n  \r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								},
								"description": "Scenario: The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the School\r\n    And the pre-existing Descriptor values should be intact on the School"
							},
							"response": []
						},
						{
							"name": "Get request for School using ProfileTest_ExcludeOnlySpecificDescriptors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');\r",
											"\r",
											"if (profilesFeatureIsEnabled === true){\r",
											"    pm.test(\"Status code is 200\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"    \r",
											"    const responseItem = pm.response.json();\r",
											"    const __ = require('lodash');\r",
											"    const expectedcountryDescriptor=[\r",
											"        'uri://ed-fi.org/CountryDescriptor#C2',\r",
											"        'uri://ed-fi.org/CountryDescriptor#C4',\r",
											"        'uri://ed-fi.org/CountryDescriptor#C1'\r",
											"        ];\r",
											"    \r",
											"    const expectedgradeLevelDescriptor= [\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G4',\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G1',\r",
											"        'uri://ed-fi.org/GradeLevelDescriptor#G3'];\r",
											"    \r",
											"\r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C4','uri://ed-fi.org/CountryDescriptor#C1'] for countryDescriptor from internationalAddresses collection  \", () => {\r",
											"        \r",
											"        const actualcountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
											"        pm.expect(actualcountryDescriptors).to.have.members(expectedcountryDescriptor);\r",
											"    \r",
											"    });\r",
											"    \r",
											"    pm.test(\"Should return all items in set of  ['uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G4','uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G3'] for gradeLevelDescriptor from gradeLevels collection  \", () => {\r",
											"    \r",
											"        const actualgradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
											"        pm.expect(actualgradeLevelDescriptors).to.have.members(expectedgradeLevelDescriptor);\r",
											"        \r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the School\r\n    And the pre-existing Descriptor values should be intact on the School",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content Descriptor filters a child collection to only exclude certain Descriptor values and non-conforming values are supplied",
					"item": [
						{
							"name": "The Write content Descriptor filters a child collection to only exclude certain Descriptor values and non-conforming values are supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"    pm.test(\"Should return the item with message does not conform with the filter values defined by profile 'Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors'\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"does not conform with the filter values defined by profile 'Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors'\");",
											"          ",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n     \"addresses\": [\r\n      {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n      ,\r\n       {\r\n        \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n        \"city\": \"Grand Bend\",\r\n        \"postalCode\":\"73334-9376\",\r\n        \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n        \"streetNumberName\": \"P.O. Box 9376\"\r\n      }\r\n    ],\r\n   \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n     \"internationalAddresses\": [\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n    },\r\n    {\r\n      \"addressTypeDescriptor\":\"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n      \"addressLine1\": \"X-String-33\",\r\n      \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n    }\r\n\t],\r\n     \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n      },\r\n       {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n      }\r\n    ],\r\n   \r\n    \"schoolCategories\": [\r\n      {\r\n        \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n      },\r\n       {\r\n         \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n      }\r\n     \r\n    ]\r\n  \r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:inculdeexculde:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:inculdeexculde:schoolGuid}}"
									]
								},
								"description": "Scenario: The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the School\r\n    And the pre-existing Descriptor values should be intact on the School"
							},
							"response": []
						}
					],
					"description": "Scenario: The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the School\r\n    And the pre-existing Descriptor values should be intact on the School",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Feature:Profile definitions can filter nested child collections to include or exclude items based on Descriptor values",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Insert Assessment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiAssessmentIdentifier', \"edfi\" + newGuid());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n   \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\",\r\n   \"assessmentTitle\":\"Assessment\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\"\r\n      }\r\n   ]\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insert objectiveAssessments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiIdentificationCode', \"TestAId\"+ newGuid());",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t\t\"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n\t},\r\n\t\"identificationCode\":\"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\",\r\n\t \"performanceLevels\": [\r\n\t \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n        }\r\n        ,\r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n        }\r\n      ],\r\n      \"scoreResults\": [\r\n      \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n          \"result\": \"result2\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n          \"result\": \"result2\"\r\n        },\r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n          \"result\": \"result2\"\r\n        }\r\n        ,\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n          \"result\": \"result2\"\r\n        }\r\n      ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"objectiveAssessments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insert Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiStudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':edfiLastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':edfiFirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiBirthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:edfiBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:edfiFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:edfiLastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insert studentAssessments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"",
											"    pm.environment.set('supplied:inculdeexculde:studentAssessmentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiStudentAssessmentIdentifier', \"Edfi\"+ newGuid());",
											"const moment = require('moment');",
											"let administrationDate=new Date();",
											"administrationDate = administrationDate.addYears(-20);",
											"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiAdministrationDate',administrationDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\"\r\n\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:edfiAdministrationDate}}\",\r\n \"studentObjectiveAssessments\": [\r\n    {\r\n      \"objectiveAssessmentReference\": {\r\n        \"identificationCode\": \"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n     \r\n      },\r\n    \"performanceLevels\": [\r\n\t \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n        }\r\n        ,\r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n        }\r\n      ],\r\n      \"scoreResults\": [\r\n      \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n          \"result\": \"result2\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n          \"result\": \"result2\"\r\n        },\r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n          \"result\": \"result2\"\r\n        }\r\n        ,\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n          \"result\": \"result2\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "The Read content type filters a nested child collection to only include certain Descriptor values",
					"item": [
						{
							"name": "The Read content type filters a nested child collection to only include certain Descriptor values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');\r",
											"\r",
											"if (profilesFeatureIsEnabled === true){\r",
											"    pm.test(\"Status code is 200\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"\r",
											"    const responseItem = pm.response.json();\r",
											"    const __ = require('lodash');\r",
											"    const expectedAssessmentReportingMethodDescriptor=[\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
											"    const expectedperformanceLevelDescriptor=[\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
											"\r",
											"\r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'] for assessmentReportingMethodDescriptor from performanceLevels collection  \", () => {\r",
											"         \t__.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
											"                \r",
											"                const actualAssessmentReportingMethodDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.assessmentReportingMethodDescriptor);\r",
											"                pm.expect(actualAssessmentReportingMethodDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptor);\r",
											"         \t});\r",
											"    \r",
											"    });\r",
											"        \r",
											"        \r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P4'] for performanceLevelDescriptor from performanceLevels collection  \", () => {\r",
											"    \r",
											"         \t__.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
											"                \r",
											"                const actualperformanceLevelDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
											"                pm.expect(actualperformanceLevelDescriptors).to.have.members(expectedperformanceLevelDescriptor);\r",
											"         \t});\r",
											"    \r",
											"    });\r",
											"}\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content Descriptor filters a nested child collection to only include certain Descriptor values and only conforming values are supplied",
					"item": [
						{
							"name": "The Write content Descriptor filters a nested child collection to only include certain Descriptor values and only conforming values are supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let administrationDate=new Date();",
											"administrationDate = administrationDate.addYears(-20);",
											"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiAdministrationDate',administrationDate);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\"\r\n\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:edfiAdministrationDate}}\",\r\n \"studentObjectiveAssessments\": [\r\n    {\r\n      \"objectiveAssessmentReference\": {\r\n        \"identificationCode\": \"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n     \r\n      },\r\n    \"performanceLevels\": [\r\n\t \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n        },\r\n        \r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n        }\r\n       \r\n      ],\r\n      \"scoreResults\": [\r\n      \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n          \"result\": \"result2\"\r\n        },\r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n          \"result\": \"result2\"\r\n        }\r\n       \r\n      ]\r\n    }\r\n    \r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						},
						{
							"name": "Get StudentAssessments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');\r",
											"\r",
											"if (profilesFeatureIsEnabled === true){\r",
											"    pm.test(\"Status code is 200\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"    \r",
											"    const responseItem = pm.response.json();\r",
											"    const __ = require('lodash');\r",
											"    const expectedAssessmentReportingMethodDescriptor=[\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1',\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3',\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
											"    const expectedperformanceLevelDescriptor=[\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P1',\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P3',\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
											"\r",
											"\r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'] for AssessmentReportingMethodDescriptor from scoreResults collection  \", () => {\r",
											"        \r",
											"         \t__.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
											"                 \r",
											"                const actualAssessmentReportingMethodDescriptors = __.map(objectiveAssessment.scoreResults, scoreResult => scoreResult.assessmentReportingMethodDescriptor);\r",
											"                pm.expect(actualAssessmentReportingMethodDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptor);\r",
											"         \t});\r",
											"       \t\r",
											"    \r",
											"    });\r",
											"        \r",
											"        \r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/PerformanceLevelDescriptor#P1','uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P3','uri://ed-fi.org/PerformanceLevelDescriptor#P4'] for performanceLevelDescriptor from performanceLevels collection  \", () => {\r",
											"    \r",
											"         \t__.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
											"                 \r",
											"                const actualperformanceLevelDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
											"                pm.expect(actualperformanceLevelDescriptors).to.have.members(expectedperformanceLevelDescriptor);\r",
											"         \t    \r",
											"         \t});\r",
											"    \r",
											"    });\r",
											"}\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content Descriptor filters a nested child collection to only include certain Descriptor values and non-conforming values are supplied",
					"item": [
						{
							"name": "The Write content Descriptor filters a nested child collection to only include certain Descriptor values and non-conforming values are supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"",
											"    pm.test(\"Should return the item with message does not conform with the filter values defined by profile 'Test-Profile-Resource-Nested-Child-Collection-Filtered-To-IncludeOnly-Specific-Types-and-Descriptors'\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"does not conform with the filter values defined by profile 'Test-Profile-Resource-Nested-Child-Collection-Filtered-To-IncludeOnly-Specific-Types-and-Descriptors'\");",
											"          ",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiStudentAssessmentIdentifier', \"Edfi\"+ newGuid());",
											"const moment = require('moment');",
											"let administrationDate=new Date();",
											"administrationDate = administrationDate.addYears(-20);",
											"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiAdministrationDate',administrationDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\"\r\n\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:edfiAdministrationDate}}\",\r\n \"studentObjectiveAssessments\": [\r\n    {\r\n      \"objectiveAssessmentReference\": {\r\n        \"identificationCode\": \"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n     \r\n      },\r\n    \"performanceLevels\": [\r\n\t \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n        },\r\n        \r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n        }\r\n       \r\n      ],\r\n      \"scoreResults\": [\r\n      \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n          \"result\": \"result2\"\r\n        },\r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n          \"result\": \"result2\"\r\n        }\r\n       \r\n      ]\r\n    }\r\n    \r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Read content type filters a nested child collection to only exclude certain Descriptor values",
					"item": [
						{
							"name": "Update studentAssessments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiStudentAssessmentIdentifier', \"Edfi\"+ newGuid());",
											"const moment = require('moment');",
											"let administrationDate=new Date();",
											"administrationDate = administrationDate.addYears(-20);",
											"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiAdministrationDate',administrationDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\"\r\n\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:edfiAdministrationDate}}\",\r\n \"studentObjectiveAssessments\": [\r\n    {\r\n      \"objectiveAssessmentReference\": {\r\n        \"identificationCode\": \"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n     \r\n      },\r\n    \"performanceLevels\": [\r\n\t \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n        }\r\n        ,\r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n        }\r\n      ],\r\n      \"scoreResults\": [\r\n      \t {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n          \"result\": \"result2\"\r\n        },\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n          \"result\": \"result2\"\r\n        },\r\n         {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n          \"result\": \"result2\"\r\n        }\r\n        ,\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n          \"result\": \"result2\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "The Read content type filters a nested child collection to only exclude certain Descriptor values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');\r",
											"\r",
											"if (profilesFeatureIsEnabled === true){\r",
											"    pm.test(\"Status code is 200\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"    \r",
											"    const responseItem = pm.response.json();\r",
											"    const __ = require('lodash');\r",
											"    const expectedAssessmentReportingMethodDescriptor=[\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
											"    const expectedperformanceLevelDescriptor=[\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
											"\r",
											"    pm.test(\"Should return all items should not in set of ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'] for assessmentReportingMethodDescriptor from performanceLevels collection  \", () => {\r",
											"    \r",
											"         \t__.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
											"                 \r",
											"                const actualAssessmentReportingMethodDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.assessmentReportingMethodDescriptor);\r",
											"                pm.expect(actualAssessmentReportingMethodDescriptors).to.not.have.members(expectedAssessmentReportingMethodDescriptor);\r",
											"    \r",
											"         \t});\r",
											"    \r",
											"    });\r",
											"        \r",
											"    pm.test(\"Should return all items should not in set of ['uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P4'] for performanceLevelDescriptor from performanceLevels collection  \", () => {\r",
											"         \r",
											"         \t__.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
											"                 \r",
											"                const actualperformanceLevelDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
											"                pm.expect(actualperformanceLevelDescriptors).to.not.have.members(expectedperformanceLevelDescriptor);\r",
											"                \r",
											"         \t});\r",
											"         \r",
											"    });\r",
											"}\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and non-conforming values are supplied",
					"item": [
						{
							"name": "The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and non-conforming values are supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"    pm.test(\"Should return the item with message does not conform with the filter values defined by profile 'Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors'\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"does not conform with the filter values defined by profile 'Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors'\");",
											"          ",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiStudentAssessmentIdentifier', \"Edfi\"+ newGuid());",
											"const moment = require('moment');",
											"let administrationDate=new Date();",
											"administrationDate = administrationDate.addYears(-20);",
											"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiAdministrationDate',administrationDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\"\r\n\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:edfiAdministrationDate}}\",\r\n \"studentObjectiveAssessments\": [\r\n    {\r\n      \"objectiveAssessmentReference\": {\r\n        \"identificationCode\": \"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n     \r\n      },\r\n    \"performanceLevels\": [\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n        }\r\n        ,\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n        }\r\n      ],\r\n      \"scoreResults\": [\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n          \"result\": \"result2\"\r\n        }\r\n        ,\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n          \"result\": \"result2\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								},
								"description": "Scenario: The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and non-conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    When a PUT request with a collection containing only non-conforming excluded Descriptor values is submitted to studentAssessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the value of {suppliedValue} supplied for the {property} of the {entity} does not conform with the filter values defined by profile {profileName}\"\r\n"
							},
							"response": []
						}
					],
					"description": "# Write, Exclude Descriptors, Non-conforming\r\nScenario: The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and non-conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    When a PUT request with a collection containing only non-conforming excluded Descriptor values is submitted to studentAssessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the value of {suppliedValue} supplied for the {property} of the {entity} does not conform with the filter values defined by profile {profileName}\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and only conforming values are supplied",
					"item": [
						{
							"name": "The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and only conforming values are supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 204\", () => {",
											"        pm.expect(pm.response.code).to.equal(204);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const scenarioId = pm.environment.get('scenarioId');",
											"const moment = require('moment');",
											"let administrationDate=new Date();",
											"administrationDate = administrationDate.addYears(-20);",
											"administrationDate= moment(administrationDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiAdministrationDate',administrationDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.writable+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"assessmentReference\":\r\n\t{\r\n\t\t\"assessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiAssessmentIdentifier}}\",\r\n\t \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n\t},\r\n\"studentReference\":\r\n{\r\n\t\"studentUniqueId\":\"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\"\r\n\r\n},\r\n\"studentAssessmentIdentifier\":\"{{supplied:{{scenarioId}}:edfiStudentAssessmentIdentifier}}\",\r\n\"administrationDate\":\"{{supplied:{{scenarioId}}:edfiAdministrationDate}}\",\r\n \"studentObjectiveAssessments\": [\r\n    {\r\n      \"objectiveAssessmentReference\": {\r\n        \"identificationCode\": \"{{supplied:{{scenarioId}}:edfiIdentificationCode}}\"\r\n     \r\n      },\r\n    \"performanceLevels\": [\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n        }\r\n        ,\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n        }\r\n      ],\r\n      \"scoreResults\": [\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n          \"result\": \"result2\"\r\n        }\r\n        ,\r\n        {\r\n          \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n          \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n          \"result\": \"result2\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								},
								"description": "Scenario: The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to studentAssessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the StudentAssessment\r\n    And the pre-existing Descriptor values should be intact on the StudentAssessment\r\n"
							},
							"response": []
						},
						{
							"name": "Get StudentAssessments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');\r",
											"\r",
											"if (profilesFeatureIsEnabled === true){\r",
											"    pm.test(\"Status code is 200\", () => {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"    \r",
											"    const responseItem = pm.response.json();\r",
											"    const __ = require('lodash');\r",
											"    const expectedAssessmentReportingMethodDescriptor=[\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1',\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3',\r",
											"        'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
											"    const expectedperformanceLevelDescriptor=[\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P1',\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P3',\r",
											"        'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
											"\r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'] for AssessmentReportingMethodDescriptor from scoreResults collection  \", () => {\r",
											"         \r",
											"         \t__.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
											"                 \r",
											"                const actualAssessmentReportingMethodDescriptors = __.map(objectiveAssessment.scoreResults, scoreResult => scoreResult.assessmentReportingMethodDescriptor);\r",
											"                pm.expect(actualAssessmentReportingMethodDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptor);\r",
											"               \r",
											"         \t});     \r",
											"    });\r",
											"        \r",
											"        \r",
											"    pm.test(\"Should return all items in set of ['uri://ed-fi.org/PerformanceLevelDescriptor#P1','uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P3','uri://ed-fi.org/PerformanceLevelDescriptor#P4'] for performanceLevelDescriptor from performanceLevels collection  \", () => {\r",
											"         \r",
											"         \t__.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
											"         \t    \r",
											"                const actualperformanceLevelDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
											"                pm.expect(actualperformanceLevelDescriptors).to.have.members(expectedperformanceLevelDescriptor);\r",
											"         \t});\r",
											"         \r",
											"    });\r",
											"}\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{supplied:inculdeexculde:studentAssessmentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentAssessments",
										"{{supplied:inculdeexculde:studentAssessmentGuid}}"
									]
								},
								"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
							},
							"response": []
						}
					],
					"description": "Scenario: The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to studentAssessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the StudentAssessment\r\n    And the pre-existing Descriptor values should be intact on the StudentAssessment\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Feature:Profiles assigned to callers must be used for covered resources",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Insert  School Data for Get Requests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId', __.random(7000).toString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('supplied:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n   \r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n      \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n      }\r\n    ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "The caller is assigned a profile and requests a covered resource using the correct content type header",
					"item": [
						{
							"name": "The caller is assigned a profile and requests a covered resource using the correct content type header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_IncludeOnly}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-resource-includeonly.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "Scenario: The caller is assigned a profile and requests a covered resource using the correct content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    And the caller is using the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller is assigned a profile and requests a covered resource using the correct content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    And the caller is using the \"Test-Profile-Resource-IncludeOnly\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller is assigned a profile and requests a covered resource using a different profile's content type",
					"item": [
						{
							"name": "Initialize Known Student Data for Get Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    const __ = require('lodash');",
											"    const responseItems = pm.response.json();",
											"    pm.environment.set('known:studentGuid', __.first(responseItems)[\"id\"]);",
											"",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Students"
									]
								},
								"description": "Scenario: The caller is assigned a profile and requests a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\"\r\n"
							},
							"response": []
						},
						{
							"name": "The caller is assigned a profile and requests a covered resource using a different profile's content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 403\", () => {",
											"        pm.expect(pm.response.code).to.equal(403);",
											"    });",
											"",
											"    pm.test(\"Should return error message 'One of the following profile-specific content types is required when requesting this resource: application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json'\", () => {",
											"    ",
											"        const responseItem = pm.response.json();",
											"        pm.expect(responseItem.message).to.include(\"one of the following profile-specific content types is required when requesting this resource: \\'application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\\'\");",
											"        ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_StudentOnlyResourceIncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly2-resource-includeall.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:studentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"Students",
										"{{known:studentGuid}}"
									]
								},
								"description": "Scenario: The caller is assigned a profile and requests a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller is assigned a profile and requests a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller is assigned a profile and requests a covered resource using the standard content type header",
					"item": [
						{
							"name": "The caller is assigned a profile and requests a covered resource using the standard content type header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 403\", () => {",
											"        pm.expect(pm.response.code).to.equal(403);",
											"    });",
											"",
											"    pm.test(\"Should return error message 'One of the following profile-specific content types is required when requesting this resource: application/vnd.ed-fi.school.test-profile-resource-includeall.readable+json'\", () => {",
											"    ",
											"        const responseItem = pm.response.json();",
											"        pm.expect(responseItem.message).to.include(\"one of the following profile-specific content types is required when requesting this resource: \\'application/vnd.ed-fi.school.test-profile-resource-includeall.readable+json\\'\");",
											"        ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_IncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "Scenario: The caller is assigned a profile and requests a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\""
							},
							"response": []
						}
					],
					"description": "Scenario: The caller is assigned a profile and requests a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"one of the following profile-specific content types is required when requesting this resource\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller is assigned a profile and attempts to update a covered resource using the correct content type header",
					"item": [
						{
							"name": "The caller is assigned a profile and attempts to update a covered resource using the correct content type header",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId', __.random(7000).toString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('supplied:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_IncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.ed-fi.school.test-profile-resource-includeall.writable+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n   \r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n      \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n      }\r\n    ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the correct content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the correct content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller is assigned a profile and attempts to update a covered resource using a different profile's content type",
					"item": [
						{
							"name": "The caller is assigned a profile and attempts to update a covered resource using a different profile's content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 403\", () => {",
											"        pm.expect(pm.response.code).to.equal(403);",
											"    });",
											"",
											"",
											"    pm.test(\"Should return error message 'Based on profile assignments, one of the following profile-specific content types is required when updating this resource: application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json'\", () => {",
											"    ",
											"        const responseItem = pm.response.json();",
											"        pm.expect(responseItem.message).to.include(\"Based on profile assignments, one of the following profile-specific content types is required when updating this resource: \\'application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json\\'\");",
											"        ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_StudentOnlyResourceIncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly2-resource-includeall.writable+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using a different profile's content type\r\n    Given the caller is assigned the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly2-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller is assigned a profile and attempts to update a covered resource using the standard content type header",
					"item": [
						{
							"name": "The caller is assigned a profile and attempts to update a covered resource using the standard content type header",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId', __.random(7000).toString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"pm.test(\"Status code is 403\", () => {",
											"    pm.expect(pm.response.code).to.equal(403);",
											"});",
											"",
											"",
											"    pm.test(\"Should return error message 'Based on profile assignments, one of the following profile-specific content types is required when updating this resource: application/vnd.ed-fi.school.test-profile-resource-includeall.writable+json'\", () => {",
											"    ",
											"        const responseItem = pm.response.json();",
											"        pm.expect(responseItem.message).to.include(\"Based on profile assignments, one of the following profile-specific content types is required when updating this resource: \\'application/vnd.ed-fi.school.test-profile-resource-includeall.writable+json\\'\");",
											"        ",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_IncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n   \r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n      \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n      }\r\n    ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								},
								"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller is assigned a profile and attempts to update a covered resource using the standard content type header\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of \"application/json\"\r\n    Then the response should contain a 403 Forbidden failure indicating that \"based on the assigned profiles, one of the following profile-specific content types is required when updating this resource\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Feature:Profiles can exclude optional references",
			"item": [
				{
					"name": "Initital Setup",
					"item": [
						{
							"name": "Initialize Known School Data for Get Requests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const __ = require('lodash');",
											"const responseItems = pm.response.json();",
											"",
											"pm.environment.set('known:schoolId', __.first(responseItems)[\"schoolId\"]);",
											"",
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?localEducationAgencyId=255901",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									],
									"query": [
										{
											"key": "localEducationAgencyId",
											"value": "255901"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Insert new academicWeeks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200 or 201\", () => {",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"    });",
											"    ",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('supplied:'+scenarioId+':academicWeeksGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"const __ = require('lodash');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':weekIdentifier', __.random(70).toString());",
											"const moment = require('moment');",
											"const beginDate= moment(new Date()).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':beginDate',beginDate);",
											"",
											"let endDate=new Date();",
											"endDate = endDate.addMonths(__.random(12));",
											"endDate= moment(endDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':endDate',endDate);",
											"pm.environment.set('supplied:'+scenarioId+':totalInstructionalDays',__.random(10));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"weekIdentifier\":\"{{supplied:{{scenarioId}}:weekIdentifier}}\",\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n   },\r\n \"beginDate\":\"{{supplied:{{scenarioId}}:beginDate}}\",\r\n  \"endDate\":\"{{supplied:{{scenarioId}}:endDate}}\",\r\n  \"totalInstructionalDays\": \"{{supplied:{{scenarioId}}:totalInstructionalDays}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicWeeks"
									]
								},
								"description": "Pre-Condition : School record should be pre-populated.\n\nThis api post method adds new academicWeeks for particular school ."
							},
							"response": []
						}
					]
				},
				{
					"name": "The Read content type can exclude optional references",
					"item": [
						{
							"name": "The Read content type can exclude optional references",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"",
											"",
											"    pm.test(\"Should the item return only contain the included references\", () => {",
											"        ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.TotalInstructionalDays).to.be.undefined; ",
											"         pm.expect(responseItem.endDate).to.be.not.null; ",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_AcademicWeekReferences}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.academicweek.academic-week-readable-excludes-optional-references.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/academicWeeks/{{supplied:{{scenarioId}}:academicWeeksGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"academicWeeks",
										"{{supplied:{{scenarioId}}:academicWeeksGuid}}"
									]
								},
								"description": "cenario: The Read content type can exclude optional references\r\n    Given the caller is using the \"Academic-Week-Readable-Excludes-Optional-References\" profile\r\n    When a GET (by id) request is submitted using raw JSON to academicWeeks with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should only contain the included references"
							},
							"response": []
						}
					],
					"description": "Scenario: The Read content type can exclude optional references\r\n    Given the caller is using the \"Academic-Week-Readable-Excludes-Optional-References\" profile\r\n    When a GET (by id) request is submitted using raw JSON to academicWeeks with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should only contain the included references",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Feature:Profile-specific content type headers in requests are validated to match target resources",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Initialize Known Student Data for Get Requests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    const __ = require('lodash');",
											"    const responseItems = pm.response.json();",
											"    ",
											"    pm.environment.set('known:studentGuid',__.first(responseItems)[\"id\"]);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET Request contains an accept header with a content type using a profile that does not include the targeted resource",
					"item": [
						{
							"name": "GET Request contains an accept header with a content type using a profile that does not include the targeted resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"",
											"    pm.test(\"Should return error message 'resource is not accessible through the 'test-profile-staffonly-resource-includeall' profile specified by the content type\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"resource is not accessible through the \\'test-profile-staffonly-resource-includeall\\' profile specified by the content type\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.student.test-profile-staffonly-resource-includeall.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:studentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										"{{known:studentGuid}}"
									]
								},
								"description": "Scenario: GET Request contains an accept header with a content type using a profile that does not include the targeted resource\r\n    Given the caller is using the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: GET Request contains an accept header with a content type using a profile that does not include the targeted resource\r\n    Given the caller is using the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GET Request contains an accept header with a content type using a profile that includes the targeted resource",
					"item": [
						{
							"name": "GET Request contains an accept header with a content type using a profile that includes the targeted resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:studentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										"{{known:studentGuid}}"
									]
								},
								"description": "Scenario: GET Request contains an accept header with a content type using a profile that includes the targeted resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: GET Request contains an accept header with a content type using a profile that includes the targeted resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GET Request contains a content type header with a resource that does not match the requested resource",
					"item": [
						{
							"name": "GET Request contains a content type header with a resource that does not match the requested resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"    pm.test(\"Should return error message 'The resource in the profile-based content type does not match the resource targeted by the request.\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"The resource in the profile-based content type does not match the resource targeted by the request.\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:studentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										"{{known:studentGuid}}"
									]
								},
								"description": "Scenario: GET Request contains a content type header with a resource that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: GET Request contains a content type header with a resource that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GET Request contains a content type header with a read/write content that does not match the requested resource",
					"item": [
						{
							"name": "GET Request contains a content type header with a read/write content that does not match the requested resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"    pm.test(\"Should return error message 'A profile-based content type that is writable cannot be used with GET requests.\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.equal(\"A profile-based content type that is writable cannot be used with GET requests.\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:studentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										"{{known:studentGuid}}"
									]
								},
								"description": "Scenario: GET Request contains a content type header with a read/write content that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: GET Request contains a content type header with a read/write content that does not match the requested resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST Request contains a content type header using a profile that does not include the targeted resource",
					"item": [
						{
							"name": "POST Request contains a content type header using a profile that does not include the targeted resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true) {",
											"  pm.test(\"Status code is 400\", () => {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"  });",
											"",
											"  pm.test(\"Should return error message 'The 'student' resource is not accessible through the 'test-profile-staffonly-resource-includeall' profile specified by the content type\", () => {",
											"",
											"    const responseItem = pm.response.json();",
											"",
											"    const pattern = new RegExp(\"The 'student' resource is not accessible through the 'test-profile-staffonly-resource-includeall' profile specified by the content type\", \"i\");",
											"",
											"    pm.expect(responseItem.message).to.match(pattern);",
											"  });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.student.test-profile-staffonly-resource-includeall.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								},
								"description": "Scenario: POST Request contains a content type header using a profile that does not include the targeted resource\r\n    Given the caller is using the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: POST Request contains a content type header using a profile that does not include the targeted resource\r\n    Given the caller is using the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST Request contains a content type header using a profile that includes the targeted resource",
					"item": [
						{
							"name": "POST Request contains a content type header using a profile that includes the targeted resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								},
								"description": "Scenario: POST Request contains a content type header using a profile that includes the targeted resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: POST Request contains a content type header using a profile that includes the targeted resource\r\n    Given the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST Request contains a content type header with a resource that does not match the requested resource",
					"item": [
						{
							"name": "POST Request contains a content type header with a resource that does not match the requested resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"    pm.test(\"Should return error message 'The resource in the profile-based content type does not match the resource targeted by the request.'\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"The resource in the profile-based content type does not match the resource targeted by the request.\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								},
								"description": "Scenario: POST Request contains a content type header with a resource that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: POST Request contains a content type header with a resource that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.school.test-profile-studentonly-resource-includeall.writable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST\t Request contains a content type header with a read/write content that does not match the requested resource",
					"item": [
						{
							"name": "POST\t Request contains a content type header with a read/write content that does not match the requested resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 400\", () => {",
											"        pm.expect(pm.response.code).to.equal(400);",
											"    });",
											"",
											"",
											"    pm.test(\"Should return error message 'A profile-based content type that is readable cannot be used with PUT or POST requests.'\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.include(\"A profile-based content type that is readable cannot be used with PUT or POST requests.\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								},
								"description": "Scenario: POST\t Request contains a content type header with a read/write content that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: POST\t Request contains a content type header with a read/write content that does not match the requested resource\r\n\tGiven the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the resource is not accessible through the profile specified by the content type\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Feature:Requests using content types referencing undefined profiles will fail",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Insert  School Data for Get Requests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':localEducationAgencyId','255901');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId', __.random(7000).toString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"    ",
											"    const scenarioId = pm.environment.get('scenarioId');",
											"    pm.environment.set('supplied:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \t \"charterApprovalSchoolYearTypeReference\": {\r\n    \"schoolYear\": \"2001\"\r\n  },\r\n \t\"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"{{supplied:{{scenarioId}}:localEducationAgencyId}}\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n   \r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n      \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n      }\r\n    ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "The caller attempts to read a resource using a non-existing profile",
					"item": [
						{
							"name": "The caller attempts to read a resource using a non-existing profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 406\", () => {",
											"        pm.expect(pm.response.code).to.equal(406);",
											"    });",
											"",
											"",
											"    pm.test(\"Should return error message the profile specified by the content type in the Accept header is not supported by this host\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.equal(\"The profile specified by the content type in the 'Accept' header is not supported by this host.\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.ed-fi.school.non-existing.readable+json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{supplied:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{supplied:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "Scenario: The caller attempts to read a resource using a non-existing profile\r\n    Given the caller is using the \"Non-Existing\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 406 Not Acceptable failure indicating that \"the profile specified by the content type is not supported by this host\"\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller attempts to read a resource using a non-existing profile\r\n    Given the caller is using the \"Non-Existing\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should contain a 406 Not Acceptable failure indicating that \"the profile specified by the content type is not supported by this host\"\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller attempts to update a resource using a non-existing profile",
					"item": [
						{
							"name": "The caller attempts to update a resource using a non-existing profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    ",
											"       pm.test(\"Status code is 415\", () => {",
											"        pm.expect(pm.response.code).to.equal(415);",
											"    });",
											"    ",
											"    pm.test(\"Should return error message the profile specified by the content type is not supported by this host\", () => {",
											"         ",
											"         const responseItem = pm.response.json();",
											"         pm.expect(responseItem.message).to.equal(\"The profile specified by the content type in the 'Content-Type' header is not supported by this host.\");",
											"    });",
											"    ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"const __ = require('lodash');",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(10000));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.ed-fi.school.non-existing.writable+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"localEducationAgencyReference\": {\r\n      \"localEducationAgencyId\": \"255901\"\r\n    },\r\n    \"schoolId\": \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"educationOrganizationCategories\": [\r\n      {\r\n        \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n      }\r\n    ],\r\n    \"gradeLevels\": [\r\n      {\r\n        \"gradeLevelDescriptor\":\"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n      }\r\n    ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										""
									]
								},
								"description": "Scenario: The caller attempts to update a resource using a non-existing profile\r\n    Given the caller is using the \"Non-Existing\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 415 Unsupported Media Type failure indicating that \"the profile specified by the content type is not supported by this host\""
							},
							"response": []
						}
					],
					"description": "Scenario: The caller attempts to update a resource using a non-existing profile\r\n    Given the caller is using the \"Non-Existing\" profile\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 415 Unsupported Media Type failure indicating that \"the profile specified by the content type is not supported by this host\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Feature: Resources not covered by an assigned profile are accessible using either the standard JSON content type or a valid profile content type",
			"item": [
				{
					"name": "Initial Setup",
					"item": [
						{
							"name": "Initialize Known Student Data for Get Requests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"    ",
											"    const responseItems = pm.response.json();",
											"    const responseItem = responseItems[0];",
											"    pm.environment.set('known:studentGuid', responseItem.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "The caller requests a resource not covered by any of their assigned profiles using the standard content type",
					"item": [
						{
							"name": "The caller requests a resource not covered by any of their assigned profiles using the standard content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_IncludeAll_StaffOnlyIncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:studentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										"{{known:studentGuid}}"
									]
								},
								"description": "Scenario: The caller requests a resource not covered by any of their assigned profiles using the standard content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/json\"\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller requests a resource not covered by any of their assigned profiles using the standard content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/json\"\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller updates a resource not covered by any of their assigned profiles using the standard content type",
					"item": [
						{
							"name": "The caller updates a resource not covered by any of their assigned profiles using the standard content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiStudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':edfiLastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':edfiFirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiBirthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_IncludeAll_StaffOnlyIncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:edfiBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:edfiFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:edfiLastSurname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								},
								"description": "Scenario: The caller requests a resource not covered by any of their assigned profiles using the standard content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of \"application/json\"\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using the standard content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of \"application/json\"\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type",
					"item": [
						{
							"name": "The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 201\", () => {",
											"        pm.expect(pm.response.code).to.equal(201);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId',createScenarioId());",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':edfiStudentUniqueId', newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':edfiLastSurname',newGuid());",
											"pm.environment.set('supplied:'+scenarioId+':edfiFirstName',newGuid());",
											"",
											"const moment = require('moment');",
											"let birthDate=new Date();",
											"birthDate = birthDate.addYears(-20);",
											"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
											"pm.environment.set('supplied:'+scenarioId+':edfiBirthDate',birthDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_StaffOnlyStudentOnlyIncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.writable+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:edfiStudentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:edfiBirthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:edfiFirstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:edfiLastSurname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										""
									]
								},
								"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller updates a resource not covered by any of their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a POST request with a resource is submitted to students with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type",
					"item": [
						{
							"name": "The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const profilesFeatureIsEnabled = pm.environment.get('ProfilesFeatureIsEnabled');",
											"",
											"if (profilesFeatureIsEnabled === true){",
											"    pm.test(\"Status code is 200\", () => {",
											"        pm.expect(pm.response.code).to.equal(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_ProfileTest_StaffOnlyStudentOnlyIncludeAll}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.ed-fi.student.test-profile-studentonly-resource-includeall.readable+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:studentGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students",
										"{{known:studentGuid}}"
									]
								},
								"description": "Scenario: The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
							},
							"response": []
						}
					],
					"description": "Scenario: The caller requests a resource not covered by their assigned profiles using a valid but unassigned profile-specific content type\r\n    Given the caller is assigned the \"Test-Profile-Resource-IncludeAll\" profile\r\n    And the caller is assigned the \"Test-Profile-StaffOnly-Resource-IncludeAll\" profile\r\n    And the caller is using the \"Test-Profile-StudentOnly-Resource-IncludeAll\" profile\r\n    When a GET (by id) request is submitted to students with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Clean Up Test Data",
			"item": [
				{
					"name": "Clean up Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const __ = require('lodash');\r",
									"\r",
									"const keys = __.keys(pm.environment.toObject());\r",
									"console.log('Initial keys: ' + JSON.stringify(keys));\r",
									"\r",
									"const keysToRemove = __.filter(keys, x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'));\r",
									"\r",
									"__.each(keysToRemove, k => pm.environment.unset(k));\r",
									"\r",
									"const remainingKeys = __.keys(pm.environment.toObject());\r",
									"console.log('Remaining keys:' + JSON.stringify(remainingKeys));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"CreateAccessToken(\"TokenExpiry_255901\",\"AccessToken_255901\",\"ApiKey_255901\",\"ApiSecret_255901\")",
					"",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_EmbeddedObject\",\"AccessToken_ProfileTest_EmbeddedObject\",\"ApiKey_ProfileTest_EmbeddedObject\",\"ApiSecret_ProfileTest_EmbeddedObject\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_ResourceReadOnly\",\"AccessToken_ProfileTest_ResourceReadOnly\",\"ApiKey_ProfileTest_ResourceReadOnly\",\"ApiSecret_ProfileTest_ResourceReadOnly\")",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_SpecificDescriptors\",\"AccessToken_ProfileTest_SpecificDescriptors\",\"ApiKey_ProfileTest_SpecificDescriptors\",\"ApiSecret_ProfileTest_SpecificDescriptors\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_SpecificTypesDescriptors\",\"AccessToken_ProfileTest_SpecificTypesDescriptors\",\"ApiKey_ProfileTest_SpecificTypesDescriptors\",\"ApiSecret_ProfileTest_SpecificTypesDescriptors\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_IncludeAll\",\"AccessToken_ProfileTest_IncludeAll\",\"ApiKey_ProfileTest_IncludeAll\",\"ApiSecret_ProfileTest_IncludeAll\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_IncludeOnly\",\"AccessToken_ProfileTest_IncludeOnly\",\"ApiKey_ProfileTest_IncludeOnly\",\"ApiSecret_ProfileTest_IncludeOnly\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_ReferencesIncludeOnly\",\"AccessToken_ProfileTest_ReferencesIncludeOnly\",\"ApiKey_ProfileTest_ReferencesIncludeOnly\",\"ApiSecret_ProfileTest_ReferencesIncludeOnly\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_ChildCollectionIncludeOnly\",\"AccessToken_ProfileTest_ChildCollectionIncludeOnly\",\"ApiKey_ProfileTest_ChildCollectionIncludeOnly\",\"ApiSecret_ProfileTest_ChildCollectionIncludeOnly\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_AcademicWeekReferences\",\"AccessToken_ProfileTest_AcademicWeekReferences\",\"ApiKey_ProfileTest_AcademicWeekReferences\",\"ApiSecret_ProfileTest_AcademicWeekReferences\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_StaffOnlyIncludeAll\",\"AccessToken_ProfileTest_StaffOnlyIncludeAll\",\"ApiKey_ProfileTest_StaffOnlyIncludeAll\",\"ApiSecret_ProfileTest_StaffOnlyIncludeAll\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_NonExisting\",\"AccessToken_ProfileTest_NonExisting\",\"ApiKey_ProfileTest_NonExisting\",\"ApiSecret_ProfileTest_NonExisting\")",
					"",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_IncludeAll_StaffOnlyIncludeAll\",\"AccessToken_ProfileTest_IncludeAll_StaffOnlyIncludeAll\",\"ApiKey_ProfileTest_IncludeAll_StaffOnlyIncludeAll\",\"ApiSecret_ProfileTest_IncludeAll_StaffOnlyIncludeAll\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_Excludes_EmbeddedObject\",\"AccessToken_ProfileTest_Excludes_EmbeddedObject\",\"ApiKey_ProfileTest_Excludes_EmbeddedObject\",\"ApiSecret_ProfileTest_Excludes_EmbeddedObject\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_WritableIncludes_EmbeddedObject\",\"AccessToken_ProfileTest_WritableIncludes_EmbeddedObject\",\"ApiKey_ProfileTest_WritableIncludes_EmbeddedObject\",\"ApiSecret_ProfileTest_WritableIncludes_EmbeddedObject\")",
					"",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_WritableExcludes_EmbeddedObject\",\"AccessToken_ProfileTest_WritableExcludes_EmbeddedObject\",\"ApiKey_ProfileTest_WritableExcludes_EmbeddedObject\",\"ApiSecret_ProfileTest_WritableExcludes_EmbeddedObject\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_ResourceWriteOnly\",\"AccessToken_ProfileTest_ResourceWriteOnly\",\"ApiKey_ProfileTest_ResourceWriteOnly\",\"ApiSecret_ProfileTest_ResourceWriteOnly\")",
					"",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_ExcludeOnlySpecificDescriptors\",\"AccessToken_ProfileTest_ExcludeOnlySpecificDescriptors\",\"ApiKey_ProfileTest_ExcludeOnlySpecificDescriptors\",\"ApiSecret_ProfileTest_ExcludeOnlySpecificDescriptors\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_ExcludeOnlySpecificTypesDescriptors\",\"AccessToken_ProfileTest_ExcludeOnlySpecificTypesDescriptors\",\"ApiKey_ProfileTest_ExcludeOnlySpecificTypesDescriptors\",\"ApiSecret_ProfileTest_ExcludeOnlySpecificTypesDescriptors\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_StudentOnlyResourceIncludeAll\",\"AccessToken_ProfileTest_StudentOnlyResourceIncludeAll\",\"ApiKey_ProfileTest_StudentOnlyResourceIncludeAll\",\"ApiSecret_ProfileTest_StudentOnlyResourceIncludeAll\")",
					"",
					"CreateAccessToken(\"TokenExpiry_ProfileTest_StaffOnlyStudentOnlyIncludeAll\",\"AccessToken_ProfileTest_StaffOnlyStudentOnlyIncludeAll\",\"ApiKey_ProfileTest_StaffOnlyStudentOnlyIncludeAll\",\"ApiSecret_ProfileTest_StaffOnlyStudentOnlyIncludeAll\")",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry,AccessToken,ApiKey, ApiSecret)",
					"                  {",
					"let tokenExpiration = pm.environment.get(TokenExpiry);",
					"let currentToken = pm.environment.get(AccessToken);",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"   // console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(AccessToken, newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}