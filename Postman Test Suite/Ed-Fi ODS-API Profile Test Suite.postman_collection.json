{
	"info": {
		"_postman_id": "c0b4baa3-57b0-441a-856c-b53397e5292d",
		"name": "Ed-Fi ODS/API Profile Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1213570"
	},
	"item": [
		{
			"name": "Test Suite Setup",
			"item": [
				{
					"name": "Create Test Descriptor Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// const codeValues = ['A1', 'A2', 'A3', 'A4'];",
									"// const descriptorName = 'AddressTypeDescriptor';",
									"// const descriptorCollectionName = 'addressTypeDescriptors';",
									"",
									"const allDescriptorData = [",
									"    { descriptorName: 'AddressTypeDescriptor', descriptorCollectionName: 'addressTypeDescriptors', codeValues: ['A1', 'A2', 'A3', 'A4'] },",
									"    { descriptorName: 'AssessmentReportingMethodDescriptor', descriptorCollectionName: 'assessmentReportingMethodDescriptors', codeValues: ['A1', 'A2', 'A3', 'A4'] },",
									"    { descriptorName: 'StateAbbreviationDescriptor', descriptorCollectionName: 'stateAbbreviationDescriptors', codeValues: ['S1', 'S2', 'S3', 'S4'] },",
									"    { descriptorName: 'SchoolCategoryDescriptor', descriptorCollectionName: 'schoolCategoryDescriptors', codeValues: ['S1', 'S2', 'S3', 'S4'] },",
									"    { descriptorName: 'GradeLevelDescriptor', descriptorCollectionName: 'gradeLevelDescriptors', codeValues: ['G1', 'G2', 'G3', 'G4'] },",
									"    { descriptorName: 'CountryDescriptor', descriptorCollectionName: 'countryDescriptors', codeValues: ['C1', 'C2', 'C3', 'C4'] },",
									"    { descriptorName: 'PerformanceLevelDescriptor', descriptorCollectionName: 'performanceLevelDescriptors', codeValues: ['P1', 'P2', 'P3', 'P4'] },",
									"    { descriptorName: 'ResultDatatypeTypeDescriptor', descriptorCollectionName: 'resultDatatypeTypeDescriptors', codeValues: ['A1', 'A2', 'A3', 'A4'] },",
									"];",
									"",
									"_.each(allDescriptorData, descriptorData => {",
									"    const codeValues = descriptorData.codeValues;",
									"    const descriptorName = descriptorData.descriptorName;",
									"    const descriptorCollectionName = descriptorData.descriptorCollectionName;",
									"",
									"    _.each(codeValues, codeValue => {",
									"",
									"        let payload = {",
									"            codeValue: codeValue,",
									"            description: codeValue,",
									"            namespace: `uri://ed-fi.org/${descriptorName}`,",
									"            shortDescription: codeValue",
									"        };",
									"",
									"        let descriptorPostRequest = {",
									"            url: pm.environment.get(\"ApiBaseUrl\") + `/data/v3/ed-fi/${descriptorCollectionName}`,",
									"            method: 'POST',",
									"            header: {",
									"                \"Authorization\": 'bearer ' + pm.environment.get(\"AccessToken_255901\"),",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify(payload)",
									"            }",
									"        };",
									"",
									"        pm.sendRequest(descriptorPostRequest, function (err, descriptor) {",
									"            if (err) {",
									"                console.log(err);",
									"            } else {",
									"                console.log(descriptor);",
									"            }",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Embedded objects included and excluded",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Identify Test Subject (Assessment)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const items = pm.response.json();",
											"const item = items[0];",
											"",
											"pm.environment.set('known:assessment:id', item.id);",
											"pm.environment.set('known:assessment:contentStandard:title', item.contentStandard.title);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"assessments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Read Content Type",
					"item": [
						{
							"name": "Exclude Embedded Object",
							"item": [
								{
									"name": "Embedded object should NOT be present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not include the embedded object (contentStandard)\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem).to.not.include.any.keys('contentStandard');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.ed-fi.assessment.assessment-readable-excludes-embedded-object.readable+json",
												"description": "assessment-readable-excludes-embedded-object"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Read content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Excludes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response should not contain the embedded object ContentStandard"
									},
									"response": []
								}
							]
						},
						{
							"name": "Include Embedded Object",
							"item": [
								{
									"name": "Embedded object should be present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should include the embedded object (contentStandard)\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem).to.include.all.keys('contentStandard');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.ed-fi.assessment.assessment-readable-includes-embedded-object.readable+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Write Content Type",
					"item": [
						{
							"name": "Exclude Embedded Object",
							"item": [
								{
									"name": "Update title on embedded contentStandard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:assessment:contentStandard:title', pm.variables.replaceIn('{{$guid}}'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.assessment.assessment-writable-excludes-embedded-object.writable+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assessmentTitle\": \"4th Grade Reading 1st Six Weeks 2012-2013\",\r\n    \"contentStandard\": {\r\n        \"title\": \"{{supplied:assessment:contentStandard:title}}\"\r\n    },\r\n    \"academicSubjects\": [\r\n        {\r\n            \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Write content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Excludes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should not be changed"
									},
									"response": []
								},
								{
									"name": "Embedded object should be unchanged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not have updated the embedded object (contentStandard)\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.contentStandard.title).to.equal(pm.environment.get('known:assessment:contentStandard:title'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Include Embedded Object",
							"item": [
								{
									"name": "Update title on embedded contentStandard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:assessment:contentStandard:title', pm.variables.replaceIn(\"{{$guid}}\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.assessment.assessment-writable-includes-embedded-object.writable+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assessmentTitle\": \"3rd Grade Reading 1st Six Weeks 2012-2013\",\r\n    \"contentStandard\": {\r\n        \"title\": \"{{supplied:assessment:contentStandard:title}}\"\r\n    },\r\n    \"academicSubjects\": [\r\n        {\r\n            \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
									},
									"response": []
								},
								{
									"name": "Embedded object should be updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should have updated the embedded object (contentStandard)\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.contentStandard.title).to.equal(pm.environment.get('supplied:assessment:contentStandard:title'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments/{{known:assessment:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments",
												"{{known:assessment:id}}"
											]
										},
										"description": "Scenario: The Write content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Includes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should be changed\r\n"
									},
									"response": []
								}
							]
						}
					],
					"description": "Scenario: The Write content type can exclude embedded one to one references\r\n    Given the caller is using the \"Assessment-Writable-Excludes-Embedded-Object\" profile\r\n    When a PUT request with a completely updated resource is submitted using raw JSON to assessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the persisted entity model embedded object AssessmentContentStandard should not be changed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
											"_.chain(_.keys(pm.environment.toObject()))\r",
											"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
											"  .each(k => pm.environment.unset(k)).value();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Item filtering",
			"item": [
				{
					"name": "Child collection item filtering based on Descriptor values",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create School with child collections",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:school:schoolId', pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:school:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"internationalAddresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n        }\r\n    ],\r\n    \"schoolCategories\": [\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Read content type",
							"item": [
								{
									"name": "Includes child collection items",
									"item": [
										{
											"name": "Get the School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const __ = require('lodash');\r",
															"\r",
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"// Based on profile definition\r",
															"const expectedAddressTypeDescriptors = [\r",
															"    'uri://ed-fi.org/AddressTypeDescriptor#A4',\r",
															"    'uri://ed-fi.org/AddressTypeDescriptor#A2'];\r",
															"const expectedCountryDescriptors = [\r",
															"    'uri://ed-fi.org/CountryDescriptor#C2',\r",
															"    'uri://ed-fi.org/CountryDescriptor#C4'];\r",
															"const expectedSchoolCategoryDescriptors = [\r",
															"    'uri://ed-fi.org/SchoolCategoryDescriptor#S2',\r",
															"    'uri://ed-fi.org/SchoolCategoryDescriptor#S4'];\r",
															"const expectedGradeLevelDescriptors = [\r",
															"    'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
															"    'uri://ed-fi.org/GradeLevelDescriptor#G4'];\r",
															"\r",
															"pm.test(\"Should return exactly the items in set of ['uri://ed-fi.org/AddressTypeDescriptor#A2','uri://ed-fi.org/AddressTypeDescriptor#A4'] for address.addressTypeDescriptor from addresses collection \", () => {\r",
															"\r",
															"    const actualAddressTypeDescriptors = __.map(responseItem.addresses, address => address.addressTypeDescriptor);\r",
															"    pm.expect(actualAddressTypeDescriptors).to.have.length(expectedAddressTypeDescriptors.length);\r",
															"    pm.expect(actualAddressTypeDescriptors).to.have.members(expectedAddressTypeDescriptors);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return exactly the items in set of  ['uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C4'] for countryDescriptor from internationalAddresses collection  \", () => {\r",
															"    const actualCountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
															"    pm.expect(actualCountryDescriptors).to.have.length(expectedCountryDescriptors.length);\r",
															"    pm.expect(actualCountryDescriptors).to.have.members(expectedCountryDescriptors);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return exactly the items in set of ['uri://ed-fi.org/SchoolCategoryDescriptor#S2','uri://ed-fi.org/SchoolCategoryDescriptor#S4'] for schoolCategoryDescriptor from schoolCategories collection  \", () => {\r",
															"    const actualSchoolCategoryDescriptors = __.map(responseItem.schoolCategories, schoolCategory => schoolCategory.schoolCategoryDescriptor);\r",
															"    pm.expect(actualSchoolCategoryDescriptors).to.have.length(expectedSchoolCategoryDescriptors.length);\r",
															"    pm.expect(actualSchoolCategoryDescriptors).to.have.members(expectedSchoolCategoryDescriptors);\r",
															"});\r",
															"\r",
															"pm.test(\"Should return exactly the items in set of ['uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G4'] for gradeLevelDescriptor from gradeLevels collection  \", () => {\r",
															"    const actualGradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
															"    pm.expect(actualGradeLevelDescriptors).to.have.length(expectedGradeLevelDescriptors.length);\r",
															"    pm.expect(actualGradeLevelDescriptors).to.have.members(expectedGradeLevelDescriptors);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors.readable+json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												},
												"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Excludes child collection items",
									"item": [
										{
											"name": "Get the School",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const __ = require('lodash');",
															"",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"",
															"const excludedAddressTypeDescriptors = [",
															"    'uri://ed-fi.org/AddressTypeDescriptor#A1',",
															"    'uri://ed-fi.org/AddressTypeDescriptor#A3'];",
															"",
															"const excludedCountryDescriptors = [",
															"    'uri://ed-fi.org/CountryDescriptor#C1',",
															"    'uri://ed-fi.org/CountryDescriptor#C3'];",
															"",
															"const excludedSchoolCategoryDescriptors = [",
															"    'uri://ed-fi.org/SchoolCategoryDescriptor#S1',",
															"    'uri://ed-fi.org/SchoolCategoryDescriptor#S3'];",
															"",
															"const excludedGradeLevelDescriptors = [",
															"    'uri://ed-fi.org/GradeLevelDescriptor#G1',",
															"    'uri://ed-fi.org/GradeLevelDescriptor#G3'];",
															"",
															"pm.test(\"Should not return the addresses with excluded address type descriptors ['uri://ed-fi.org/AddressTypeDescriptor#A1','uri://ed-fi.org/AddressTypeDescriptor#A3']\", () => {",
															"    const actualAddressTypeDescriptors = __.map(responseItem.addresses, address => address.addressTypeDescriptor);",
															"    pm.expect(actualAddressTypeDescriptors).to.have.length(2);",
															"    pm.expect(actualAddressTypeDescriptors).to.not.have.members(excludedAddressTypeDescriptors);",
															"});",
															"",
															"pm.test(\"Should not return the international addresses with excluded country descriptors ['uri://ed-fi.org/CountryDescriptor#C1','uri://ed-fi.org/CountryDescriptor#C3']\", () => {",
															"    const actualCountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);",
															"    pm.expect(actualCountryDescriptors).to.have.length(2);",
															"    pm.expect(actualCountryDescriptors).to.not.have.members(excludedCountryDescriptors);",
															"});",
															"",
															"pm.test(\"Should not return the school categories with excluded school category descriptors ['uri://ed-fi.org/SchoolCategoryDescriptor#S1','uri://ed-fi.org/SchoolCategoryDescriptor#S3']\", () => {",
															"    const actualSchoolCategoryDescriptors = __.map(responseItem.schoolCategories, schoolCategory => schoolCategory.schoolCategoryDescriptor);",
															"    pm.expect(actualSchoolCategoryDescriptors).to.have.length(2);",
															"    pm.expect(actualSchoolCategoryDescriptors).to.not.have.members(excludedSchoolCategoryDescriptors);",
															"});",
															"",
															"pm.test(\"Should not return the grade levels with excluded grade level descriptors ['uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G3']\", () => {",
															"    const actualGradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);",
															"    pm.expect(actualGradeLevelDescriptors).to.have.length(2);",
															"    pm.expect(actualGradeLevelDescriptors).to.not.have.members(excludedGradeLevelDescriptors);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-excludeonly-specific-descriptors.readable+json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"schools",
														"{{known:school:id}}"
													]
												},
												"description": "Scenario: The Read content type filters a child collection to only exclude certain Descriptor values\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the response model's collection items should not contain items matching the excluded Descriptor values"
											},
											"response": []
										}
									]
								}
							],
							"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Write content type",
							"item": [
								{
									"name": "Includes child collection items",
									"item": [
										{
											"name": "Conforming Values",
											"item": [
												{
													"name": "Update School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", () => {",
																	"    pm.expect(pm.response.code).to.equal(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.school.test-profile-resource-child-collection-filtered-to-includeonly-specific-descriptors.writable+json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"city\": \"Grand Bend Updated\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"city\": \"Grand Bend Updated\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"internationalAddresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n        }\r\n    ],\r\n    \"schoolCategories\": [\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												},
												{
													"name": "Get full School (no Profile)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const __ = require('lodash');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"\r",
																	"const expectedCountryDescriptors = [\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C1',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C2',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C3',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C4'\r",
																	"];\r",
																	"\r",
																	"pm.test(\"Should return all the internationalAddresses with country descriptors ['uri://ed-fi.org/CountryDescriptor#C1','uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C3','uri://ed-fi.org/CountryDescriptor#C4']\", () => {\r",
																	"    const actualCountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
																	"    pm.expect(actualCountryDescriptors).to.have.members(expectedCountryDescriptors);\r",
																	"});\r",
																	"\r",
																	"const expectedGradeLevelDescriptors = [\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G1',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G3',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G4'\r",
																	"];\r",
																	"\r",
																	"pm.test(\"Should return all the grade level items ['uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G3','uri://ed-fi.org/GradeLevelDescriptor#G4']\", () => {\r",
																	"    const actualGradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
																	"    pm.expect(actualGradeLevelDescriptors).to.have.members(expectedGradeLevelDescriptors);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										},
										{
											"name": "Non-Conforming Values",
											"item": [
												{
													"name": "Update School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", () => {",
																	"    pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"pm.test(\"Should return the item with message does not conform with the filter values defined by profile 'Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors'\", () => {",
																	"",
																	"    const responseItem = pm.response.json();",
																	"    pm.expect(responseItem.message).to.include(\"does not conform with the filter values defined by profile 'Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors'\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.school.Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors.writable+json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"internationalAddresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n        }\r\n    ],\r\n    \"schoolCategories\": [\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a child collection to only include certain Descriptor values and non-conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-IncludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only non-conforming included Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the value of {suppliedValue} supplied for the {property} of the {entity} does not conform with the filter values defined by profile {profileName}\"\r\n"
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Excludes child collection items",
									"item": [
										{
											"name": "Conforming Values",
											"item": [
												{
													"name": "Update School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", () => {",
																	"    pm.expect(pm.response.code).to.equal(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.school.Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors.writable+json",
																"description": "Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"internationalAddresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A1\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C1\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A3\",\r\n            \"addressLine1\": \"X-String-34\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C3\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G1\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G3\"\r\n        }\r\n    ],\r\n    \"schoolCategories\": [\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S1\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S3\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the School\r\n    And the pre-existing Descriptor values should be intact on the School"
													},
													"response": []
												},
												{
													"name": "Get full School (no Profile)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const __ = require('lodash');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"\r",
																	"const expectedCountryDescriptors = [\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C1',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C2',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C3',\r",
																	"    'uri://ed-fi.org/CountryDescriptor#C4'\r",
																	"];\r",
																	"\r",
																	"const expectedgradeLevelDescriptor = [\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G1',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G2',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G3',\r",
																	"    'uri://ed-fi.org/GradeLevelDescriptor#G4'\r",
																	"];\r",
																	"\r",
																	"pm.test(\"Should return internationalAddress items with countryDescriptors in ['uri://ed-fi.org/CountryDescriptor#C1','uri://ed-fi.org/CountryDescriptor#C2','uri://ed-fi.org/CountryDescriptor#C4']\", () => {\r",
																	"\r",
																	"    const actualcountryDescriptors = __.map(responseItem.internationalAddresses, address => address.countryDescriptor);\r",
																	"    pm.expect(actualcountryDescriptors).to.have.members(expectedCountryDescriptors);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Should return gradeLevels with gradeLevelDescriptors in ['uri://ed-fi.org/GradeLevelDescriptor#G1','uri://ed-fi.org/GradeLevelDescriptor#G2','uri://ed-fi.org/GradeLevelDescriptor#G3','uri://ed-fi.org/GradeLevelDescriptor#G4'] for gradeLevelDescriptor\", () => {\r",
																	"\r",
																	"    const actualgradeLevelDescriptors = __.map(responseItem.gradeLevels, gradeLevel => gradeLevel.gradeLevelDescriptor);\r",
																	"    pm.expect(actualgradeLevelDescriptors).to.have.members(expectedgradeLevelDescriptor);\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										},
										{
											"name": "Non-Conforming Values",
											"item": [
												{
													"name": "Update School",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", () => {",
																	"    pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"pm.test(\"Should return the item with message does not conform with the filter values defined by profile 'Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors'\", () => {",
																	"    const responseItem = pm.response.json();",
																	"    pm.expect(responseItem.message).to.include(\"does not conform with the filter values defined by profile 'Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors'\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.school.Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors.writable+json",
																"description": "Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"localEducationAgencyReference\": {\r\n        \"localEducationAgencyId\": 255901\r\n    },\r\n    \"schoolId\": \"{{supplied:school:schoolId}}\",\r\n    \"nameOfInstitution\": \"Grand Bend Elementary School\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"city\": \"Grand Bend\",\r\n            \"postalCode\": \"73334-9376\",\r\n            \"stateAbbreviationDescriptor\": \"uri://ed-fi.org/StateAbbreviationDescriptor#TX\",\r\n            \"streetNumberName\": \"P.O. Box 9376\"\r\n        }\r\n    ],\r\n    \"educationOrganizationCategories\": [\r\n        {\r\n            \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"\r\n        }\r\n    ],\r\n    \"internationalAddresses\": [\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A2\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C2\"\r\n        },\r\n        {\r\n            \"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#A4\",\r\n            \"addressLine1\": \"X-String-33\",\r\n            \"countryDescriptor\": \"uri://ed-fi.org/CountryDescriptor#C4\"\r\n        }\r\n    ],\r\n    \"gradeLevels\": [\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G2\"\r\n        },\r\n        {\r\n            \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#G4\"\r\n        }\r\n    ],\r\n    \"schoolCategories\": [\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S2\"\r\n        },\r\n        {\r\n            \"schoolCategoryDescriptor\": \"uri://ed-fi.org/SchoolCategoryDescriptor#S4\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"schools",
																"{{known:school:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-ExcludeOnly-Specific-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the School\r\n    And the pre-existing Descriptor values should be intact on the School"
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "Scenario: A GET request is made with a read only profile \r\n    Given the caller is using the \"Test-Profile-Resource-ReadOnly\" profile\t\r\n    When a GET (by id) request is submitted to schools with an accept header content type of the appropriate value for the profile in use\r\n    Then the response should indicate success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete the School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.ed-fi.school.test-profile-resource-writeonly.writable+json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:school:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"schools",
												"{{known:school:id}}"
											]
										},
										"description": "Scenario: A POST request is made with a write only profile \r\n    Given the caller is using the \"Test-Profile-Resource-WriteOnly\" profile\t\r\n    When a POST request with a resource is submitted to schools with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success"
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Nested child collection item filtering based on Descriptor values",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create Assessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:assessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:assessment:assessmentIdentifier', \"edfi\" + pm.variables.replaceIn(\"{{$guid}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"assessmentIdentifier\":\"{{supplied:assessment:assessmentIdentifier}}\",\r\n   \"namespace\":\"uri://ed-fi.org/Assessment/Assessment.xml\",\r\n   \"assessmentTitle\":\"Assessment\",\r\n   \"academicSubjects\":[ \r\n      { \r\n         \"academicSubjectDescriptor\":\"uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics\"\r\n      }\r\n   ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/assessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"assessments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ObjectiveAssessment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:objectiveAssessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:objectiveAssessment:identificationCode', \"ObjAssmnt-\" + pm.variables.replaceIn(\"{{$guid}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\",\r\n    \"performanceLevels\": [\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n            \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n            \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n            \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n            \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n        }\r\n    ],\r\n    \"scoreResults\": [\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n            \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n            \"result\": \"result2\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n            \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n            \"result\": \"result2\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n            \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n            \"result\": \"result2\"\r\n        },\r\n        {\r\n            \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n            \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n            \"result\": \"result2\"\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/objectiveAssessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"objectiveAssessments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:student:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:student:studentUniqueId', pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"));",
													"",
													"const moment = require('moment');",
													"let birthDate = new Date();",
													"birthDate = birthDate.addYears(-20);",
													"birthDate = moment(birthDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:student:birthDate', birthDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\",\r\n    \"birthDate\": \"{{supplied:student:birthDate}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastSurname\": \"{{$randomLastName}}\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create StudentAssessment (with nested collections)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:studentAssessment:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.environment.set('supplied:studentAssessment:studentAssessmentIdentifier', \"StuAssmnt\" + pm.variables.replaceIn(\"{{$guid}}\"));",
													"",
													"const moment = require('moment');",
													"let administrationDate = new Date();",
													"administrationDate = administrationDate.addMonths(-2);",
													"administrationDate = moment(administrationDate).format(\"YYYY-MM-DD\");",
													"pm.environment.set('supplied:studentAssessment:administrationDate', administrationDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentAssessments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Read Content Type",
							"item": [
								{
									"name": "Includes Nested Child Collection Items",
									"item": [
										{
											"name": "Get Student Assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const __ = require('lodash');\r",
															"\r",
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"const expectedAssessmentReportingMethodDescriptors = [\r",
															"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
															"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
															"\r",
															"const expectedPerformanceLevelDescriptors = [\r",
															"    'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
															"    'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
															"\r",
															"pm.test(\"Should return the included performanceLevels items (nested collection) with reporting method descriptors in ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2', 'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4']\",\r",
															"    () => {\r",
															"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
															"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.assessmentReportingMethodDescriptor);\r",
															"            pm.expect(actualDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptors);\r",
															"        });\r",
															"    });\r",
															"\r",
															"pm.test(\"Should return the included performanceLevel items (nested collection) with performance level descriptors in ['uri://ed-fi.org/PerformanceLevelDescriptor#P2', 'uri://ed-fi.org/PerformanceLevelDescriptor#P4']\",\r",
															"    () => {\r",
															"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
															"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
															"            pm.expect(actualDescriptors).to.have.members(expectedPerformanceLevelDescriptors);\r",
															"        });\r",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.readable+json",
														"description": "test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments",
														"{{known:studentAssessment:id}}"
													]
												},
												"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								},
								{
									"name": "Excludes Nested Child Collection Items",
									"item": [
										{
											"name": "Get Student Assessment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const __ = require('lodash');\r",
															"\r",
															"pm.test(\"Status code is 200\", () => {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"const responseItem = pm.response.json();\r",
															"\r",
															"const excludedAssessmentReportingMethodDescriptors = [\r",
															"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
															"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
															"\r",
															"const excludedPerformanceLevelDescriptors = [\r",
															"    'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
															"    'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
															"\r",
															"pm.test(\"Should not return the excluded performanceLevel items (nested collection) with assessment reporting descriptors in ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4']\",\r",
															"    () => {\r",
															"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
															"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.assessmentReportingMethodDescriptor);\r",
															"\r",
															"            pm.expect(actualDescriptors).to.not.have.members(excludedAssessmentReportingMethodDescriptors);\r",
															"        });\r",
															"    });\r",
															"\r",
															"pm.test(\"Should not return the excluded performanceLevel items (nested collection) with performance level descriptors in ['uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P4']\",\r",
															"    () => {\r",
															"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
															"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
															"\r",
															"            pm.expect(actualDescriptors).to.not.have.members(excludedPerformanceLevelDescriptors);\r",
															"        });\r",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.readable+json",
														"description": "test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentAssessments",
														"{{known:studentAssessment:id}}"
													]
												},
												"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Write Content Type",
							"item": [
								{
									"name": "Includes Nested Child Collection Items",
									"item": [
										{
											"name": "Conforming Values",
											"item": [
												{
													"name": "Update StudentAssessment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", () => {",
																	"    pm.expect(pm.response.code).to.equal(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.writable+json",
																"description": "test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												},
												{
													"name": "Get StudentAssessments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const __ = require('lodash');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"\r",
																	"const expectedAssessmentReportingMethodDescriptors = [\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
																	"\r",
																	"const expectedPerformanceLevelDescriptors = [\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P1',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P3',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
																	"\r",
																	"pm.test(\"Should return all the scoreResults items (nested collection) with reporting method descriptors in ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4']\",\r",
																	"    () => {\r",
																	"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
																	"            const actualDescriptors = __.map(objectiveAssessment.scoreResults, scoreResult => scoreResult.assessmentReportingMethodDescriptor);\r",
																	"            pm.expect(actualDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptors);\r",
																	"        });\r",
																	"    });\r",
																	"\r",
																	"pm.test(\"Should return all the performanceLevel items (nested collection) with performance level descriptors in ['uri://ed-fi.org/PerformanceLevelDescriptor#P1','uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P3','uri://ed-fi.org/PerformanceLevelDescriptor#P4']\",\r",
																	"    () => {\r",
																	"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
																	"\r",
																	"            const actualperformanceLevelDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
																	"            pm.expect(actualperformanceLevelDescriptors).to.have.members(expectedPerformanceLevelDescriptors);\r",
																	"\r",
																	"        });\r",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										},
										{
											"name": "Non-Conforming Values",
											"item": [
												{
													"name": "Update StudentAssessment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", () => {",
																	"    pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"pm.test(\"Should return the item with message does not conform with the filter values defined by profile 'Test-Profile-Resource-Nested-Child-Collection-Filtered-To-IncludeOnly-Specific-Types-and-Descriptors'\",",
																	"    () => {",
																	"        const responseItem = pm.response.json();",
																	"",
																	"        pm.expect(responseItem.message).to.include(\"does not conform with the filter values defined by profile 'Test-Profile-Resource-Nested-Child-Collection-Filtered-To-IncludeOnly-Specific-Types-and-Descriptors'\");",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-descriptors.writable+json",
																"description": "test-profile-resource-nested-child-collection-filtered-to-includeonly-specific-types-and-escriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Excludes Nested Child Collection Items",
									"item": [
										{
											"name": "Conforming Values",
											"item": [
												{
													"name": "Update Student Assessment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", () => {",
																	"    pm.expect(pm.response.code).to.equal(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.writable+json",
																"type": "text",
																"description": "test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P4\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A2\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A4\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and only conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    When a PUT request with a collection containing only conforming excluded Descriptor values is submitted to studentAssessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should indicate success\r\n    And the submitted Descriptor values should be persisted to the StudentAssessment\r\n    And the pre-existing Descriptor values should be intact on the StudentAssessment\r\n"
													},
													"response": []
												},
												{
													"name": "Get StudentAssessments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const __ = require('lodash');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", () => {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"const responseItem = pm.response.json();\r",
																	"\r",
																	"const expectedAssessmentReportingMethodDescriptors = [\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3',\r",
																	"    'uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4'];\r",
																	"\r",
																	"const expectedPerformanceLevelDescriptors = [\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P1',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P2',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P3',\r",
																	"    'uri://ed-fi.org/PerformanceLevelDescriptor#P4'];\r",
																	"\r",
																	"pm.test(\"Should return all scoreResult items (nested collection) with reporting method descriptors in set of ['uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A2','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3','uri://ed-fi.org/AssessmentReportingMethodDescriptor#A4']\",\r",
																	"    () => {\r",
																	"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
																	"            const actualDescriptors = __.map(objectiveAssessment.scoreResults, scoreResult => scoreResult.assessmentReportingMethodDescriptor);\r",
																	"            pm.expect(actualDescriptors).to.have.members(expectedAssessmentReportingMethodDescriptors);\r",
																	"        });\r",
																	"    });\r",
																	"\r",
																	"pm.test(\"Should return all performanceLevel items (nested collection) with performance level descriptors in set of ['uri://ed-fi.org/PerformanceLevelDescriptor#P1','uri://ed-fi.org/PerformanceLevelDescriptor#P2','uri://ed-fi.org/PerformanceLevelDescriptor#P3','uri://ed-fi.org/PerformanceLevelDescriptor#P4']\",\r",
																	"    () => {\r",
																	"        __.each(responseItem.studentObjectiveAssessments, objectiveAssessment => {\r",
																	"            const actualDescriptors = __.map(objectiveAssessment.performanceLevels, performanceLevel => performanceLevel.performanceLevelDescriptor);\r",
																	"            pm.expect(actualDescriptors).to.have.members(expectedPerformanceLevelDescriptors);\r",
																	"        });\r",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Read content type can include embedded one to one references\r\n    Given the caller is using the \"Assessment-Readable-Includes-Embedded-Object\" profile\r\n    When a GET (by id) request is submitted using raw JSON to assessments with an accept header content type of the appropriate value for the profile in use\t\r\n    Then the response should indicate success\r\n    And the response should contain the embedded object ContentStandard"
													},
													"response": []
												}
											]
										},
										{
											"name": "Non-Conforming Values",
											"item": [
												{
													"name": "Update Student Assessment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", () => {",
																	"    pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"pm.test(\"Should return the item with message does not conform with the filter values defined by profile 'Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors'\",",
																	"    () => {",
																	"        const responseItem = pm.response.json();",
																	"        pm.expect(responseItem.message).to.include(\"does not conform with the filter values defined by profile 'Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors'\");",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.ed-fi.studentassessment.test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors.writable+json",
																"description": "test-profile-resource-nested-child-collection-filtered-to-excludeonly-specific-types-and-descriptors"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"assessmentReference\": {\r\n        \"assessmentIdentifier\": \"{{supplied:assessment:assessmentIdentifier}}\",\r\n        \"namespace\": \"uri://ed-fi.org/Assessment/Assessment.xml\"\r\n    },\r\n    \"studentReference\": {\r\n        \"studentUniqueId\": \"{{supplied:student:studentUniqueId}}\"\r\n    },\r\n    \"studentAssessmentIdentifier\": \"{{supplied:studentAssessment:studentAssessmentIdentifier}}\",\r\n    \"administrationDate\": \"{{supplied:studentAssessment:administrationDate}}\",\r\n    \"studentObjectiveAssessments\": [\r\n        {\r\n            \"objectiveAssessmentReference\": {\r\n                \"identificationCode\": \"{{supplied:objectiveAssessment:identificationCode}}\"\r\n            },\r\n            \"performanceLevels\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P1\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"performanceLevelDescriptor\": \"uri://ed-fi.org/PerformanceLevelDescriptor#P3\"\r\n                }\r\n            ],\r\n            \"scoreResults\": [\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A1\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A1\",\r\n                    \"result\": \"result2\"\r\n                },\r\n                {\r\n                    \"assessmentReportingMethodDescriptor\": \"uri://ed-fi.org/AssessmentReportingMethodDescriptor#A3\",\r\n                    \"resultDatatypeTypeDescriptor\": \"uri://ed-fi.org/ResultDatatypeTypeDescriptor#A3\",\r\n                    \"result\": \"result2\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentAssessments/{{known:studentAssessment:id}}",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"studentAssessments",
																"{{known:studentAssessment:id}}"
															]
														},
														"description": "Scenario: The Write content Descriptor filters a nested child collection to only exclude certain Descriptor values and non-conforming values are supplied\r\n    Given the caller is using the \"Test-Profile-Resource-Nested-Child-Collection-Filtered-To-ExcludeOnly-Specific-Types-and-Descriptors\" profile\r\n    When a PUT request with a collection containing only non-conforming excluded Descriptor values is submitted to studentAssessments with a request body content type of the appropriate value for the profile in use\r\n    Then the response should contain a 400 Bad Request failure indicating that \"the value of {suppliedValue} supplied for the {property} of the {entity} does not conform with the filter values defined by profile {profileName}\"\r\n"
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Test Suite Teardown",
			"item": [
				{
					"name": "Clean up Access Tokens and Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remove all environment variables related to Access Tokens\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'AccessToken_') || _.startsWith(x, 'TokenExpiry_'))\r",
									"  .each(k => pm.environment.unset(k)).value();\r",
									"\r",
									"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
									"  .each(k => pm.environment.unset(k)).value();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"CreateAccessToken(\"255901\");",
					"",
					"// Used for Assigned Profiles tests (maybe could be reduced further with additional analysis)",
					"// Assigned profiles must be used for covered resources",
					"CreateAccessToken(\"ProfileTest_IncludeOnly\");",
					"CreateAccessToken(\"ProfileTest_IncludeAll\");",
					"CreateAccessToken(\"ProfileTest_StudentOnlyResourceIncludeAll\");",
					"",
					"// Resources not covered by an assigned profile",
					"CreateAccessToken(\"ProfileTest_IncludeAll_StaffOnlyIncludeAll\");",
					"CreateAccessToken(\"ProfileTest_StaffOnlyStudentOnlyIncludeAll\");",
					"",
					"// ------------------------------------------------------------------------------------------------------------------------------",
					"// TODO: Delete integration testing definition of the following unnecessary API clients after evaluating use ",
					"// by Composites Profiles Tests Suite -- these are not needed here for Assigned Profile testing",
					"// ------------------------------------------------------------------------------------------------------------------------------",
					"// CreateAccessToken(\"EmbeddedObject\");",
					"// CreateAccessToken(\"ProfileTest_ResourceReadOnly\");",
					"// CreateAccessToken(\"ProfileTest_SpecificDescriptors\");",
					"// CreateAccessToken(\"ProfileTest_SpecificTypesDescriptors\");",
					"// CreateAccessToken(\"ProfileTest_ReferencesIncludeOnly\");",
					"// CreateAccessToken(\"ProfileTest_ChildCollectionIncludeOnly\");",
					"// CreateAccessToken(\"ProfileTest_AcademicWeekReferences\");",
					"// CreateAccessToken(\"TokenExpiry_ProfileTest_StaffOnlyIncludeAll\");",
					"// CreateAccessToken(\"ProfileTest_NonExisting\");",
					"// CreateAccessToken(\"ProfileTest_IncludeAll_StaffOnlyIncludeAll\");",
					"// CreateAccessToken(\"ProfileTest_Excludes_EmbeddedObject\");",
					"// CreateAccessToken(\"ProfileTest_WritableIncludes_EmbeddedObject\");",
					"// CreateAccessToken(\"ProfileTest_WritableExcludes_EmbeddedObject\");",
					"// CreateAccessToken(\"ProfileTest_ResourceWriteOnly\");",
					"// CreateAccessToken(\"ProfileTest_ExcludeOnlySpecificDescriptors\");",
					"// CreateAccessToken(\"ProfileTest_ExcludeOnlySpecificTypesDescriptors\");",
					"// CreateAccessToken(\"ProfileTest_StudentOnly_ResourceIncludeAll\");",
					"// CreateAccessToken(\"ProfileTest_StaffOnlyStudentOnlyIncludeAll\");",
					"// ------------------------------------------------------------------------------------------------------------------------------",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(clientSuffix) {",
					"  const apiKeyName = `ApiKey_${clientSuffix}`;",
					"  const apiSecretName = `ApiSecret_${clientSuffix}`;",
					"  const tokenExpiryName = `TokenExpiry_${clientSuffix}`;",
					"  const accessTokenName = `AccessToken_${clientSuffix}`;",
					"",
					"  let tokenExpiration = pm.environment.get(tokenExpiryName);",
					"  let currentToken = pm.environment.get(accessTokenName);",
					"  let getToken = true;",
					"  ",
					"  if (!tokenExpiration || !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"  } else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"  } else {",
					"    getToken = false;",
					"  }",
					"",
					"  if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(apiKeyName);",
					"    let clientSecret = pm.environment.get(apiSecretName);",
					"    let grantType = 'client_credentials';",
					"",
					"    let getTokenRequest = {",
					"      method: 'POST',",
					"      url: tokenUrl,",
					"      auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"          { key: \"username\", value: clientId },",
					"          { key: \"password\", value: clientSecret }",
					"        ]",
					"      },",
					"      header: [",
					"        \"content-type:application/x-www-form-urlencoded\"",
					"      ],",
					"      body: {",
					"        mode: \"urlencoded\",",
					"        urlencoded: [{ key: \"grant_type\", value: grantType }]",
					"      }",
					"    };",
					"",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"      let jsonResponse = response.json();",
					"      let newAccessToken = jsonResponse.access_token;",
					"",
					"      // console.log({ err, jsonResponse, newAccessToken })",
					"      console.log(`${accessTokenName} = ${newAccessToken}`);",
					"      pm.environment.set(accessTokenName, newAccessToken);",
					"",
					"      let expiryDate = new Date();",
					"      expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"      pm.environment.set(tokenExpiryName, expiryDate.getTime());",
					"    });",
					"  }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}