{
	"info": {
		"_postman_id": "5d73b7a7-81fd-4a05-b6f3-cdee50de85cd",
		"name": "Ed-Fi ODS/API Multiple Authorization Strategy Test Suite",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1213570"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Initialize EdOrgs and Sections",
					"item": [
						{
							"name": "Initialize Known/Supplied Values",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('known:schoolId', 255901001);",
											"pm.environment.set('known:schoolId:responsibility', 255901044);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initialize Section Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItems = pm.response.json();",
											"",
											"const sectionRecord = responseItems[0];",
											"",
											"// Prepare to copy the section",
											"delete sectionRecord.id;",
											"delete sectionRecord._etag;",
											"delete sectionRecord._lastModifiedDate;",
											"",
											"// Create a new SectionIdentifier for uniqueness",
											"sectionRecord.sectionIdentifier = pm.variables.replaceIn('{{$guid}}');",
											"",
											"const url = pm.variables.replaceIn('{{ApiBaseUrl}}/data/v3/ed-fi/sections');",
											"const authHeader = pm.variables.replaceIn('Authorization: Bearer {{AccessToken_255901}}');",
											"",
											"let postRequest = {",
											"  method: 'POST',",
											"  url: url,",
											"  header: [authHeader, \"Content-Type: application/json\"],",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify(sectionRecord)",
											"  }",
											"};",
											"",
											"pm.sendRequest(postRequest, (err, response) => {",
											"  if (err) {",
											"    console.log({ err: err, response: response });",
											"    return;",
											"  }",
											"",
											"  pm.test('Test section was created.', () => {",
											"    pm.expect(response.code).to.equal(201);",
											"  });",
											"",
											"  pm.environment.set('known:section:id', response.headers.one('Location').value.split(\"/\").pop());",
											"  pm.environment.set('known:section:sectionIdentifier', sectionRecord.sectionIdentifier);",
											"",
											"  const courseOffering = sectionRecord.courseOfferingReference;",
											"  pm.environment.set('known:section:localCourseCode', courseOffering.localCourseCode);",
											"  pm.environment.set('known:section:schoolId', courseOffering.schoolId);",
											"  pm.environment.set('known:section:schoolYear', courseOffering.schoolYear);",
											"  pm.environment.set('known:section:sessionName', courseOffering.sessionName);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sections?schoolId={{known:schoolId}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"sections"
									],
									"query": [
										{
											"key": "schoolId",
											"value": "{{known:schoolId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Student accessible only via StudentSchoolAssociation",
					"item": [
						{
							"name": "Create Student A (Registered)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set(`known:student:registered:id`, pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"studentUniqueId\": \"AAAAAA\",\r\n  \"birthDate\": \"2010-01-01\",\r\n  \"firstName\": \"Joe\",\r\n  \"lastSurname\": \"Registered\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student School Association for A",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:studentSchoolAssociation:registered:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"AAAAAA\"\r\n  },\r\n  \"entryDate\": \"2022-02-22\",\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create StudentSectionAssociation owned by School client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set(`known:studentSectionAssociation:registered:owned:id`, pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901001}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"AAAAAA\"\r\n  },\r\n  \"beginDate\": \"2022-01-01\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create StudentSectionAssociation owned by LEA client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"// Ensure response body is logged in Newman",
											"if (pm.response.code >= 400) {",
											"  const message = pm.response.json().message;",
											"",
											"  pm.test(`Error message of '${message}' should not be present`, () => {",
											"    pm.expect(message).to.be.empty();",
											"  });",
											"}",
											"",
											"pm.environment.set(`known:studentSectionAssociation:registered:unowned:id`, pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"AAAAAA\"\r\n  },\r\n  \"beginDate\": \"2022-01-02\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						}
					]
				},
				{
					"name": "Student accessible only via Responsibility",
					"item": [
						{
							"name": "Create Student B (Responsibility)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set(`known:student:responsibility:id`, pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"studentUniqueId\": \"BBBBBB\",\r\n  \"birthDate\": \"2010-01-01\",\r\n  \"firstName\": \"Joe\",\r\n  \"lastSurname\": \"Responsibility\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student School Association for B (for initialization)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:studentSchoolAssociation:responsibility:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  },\r\n  \"entryDate\": \"2022-02-22\",\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create Student responsibility association",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:studentEducationOrganizationResponsibilityAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"beginDate\": \"2022-02-22\",\r\n  \"responsibilityDescriptor\": \"uri://ed-fi.org/ResponsibilityDescriptor#Residency\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": \"{{known:schoolId:responsibility}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentEducationOrganizationResponsibilityAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentEducationOrganizationResponsibilityAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create  StudentSectionAssociation owned by School client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set('known:studentSectionAssociation:responsibility:owned:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901001}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  },\r\n  \"beginDate\": \"2022-02-01\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Create  StudentSectionAssociation owned by LEA client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"pm.environment.set(`known:studentSectionAssociation:responsibility:unowned:id`, pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  },\r\n  \"beginDate\": \"2022-02-02\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"studentSectionAssociations"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Clean Up Student School Association used for initialization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"  pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken_255901}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations/{{known:studentSchoolAssociation:responsibility:id}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"StudentSchoolAssociations",
										"{{known:studentSchoolAssociation:responsibility:id}}"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Multiple Authorization Strategy Namespace/Ownership",
			"item": [
				{
					"name": "EducationContents",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Attempt create (mismatched namespace)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:namespace:access-denied:namespace-mismatch\");",
													"  pm.expect(problemDetails.detail).to.match(/^Access to the resource could not be authorized. The 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"    pm.expect(problemDetails.errors).to.be.undefined;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contentIdentifier\": \"{{$guid}}\",\r\n  \"namespace\": \"uri://ed-fi.org\",\r\n  \"shortDescription\": \"Exploring for possible existing item\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create test EducationContent (ed-fi namespace)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"  pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:educationContent:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(`supplied:educationContentIdentifier`, pm.variables.replaceIn('{{$guid}}'));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contentIdentifier\": \"{{supplied:educationContentIdentifier}}\",\r\n  \"namespace\": \"uri://ed-fi.org\",\r\n  \"shortDescription\": \"Main Namespace Content\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Non-owner without Namespace Claim",
							"item": [
								{
									"name": "GetById by non-owner without namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return the expected type\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:namespace:access-denied:namespace-mismatch\");",
													"});",
													"",
													"pm.test(\"Should return a detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.match(/^Access to the resource could not be authorized. The existing 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(`Should NOT return the detail indicating the ownership token doesn't match`, () => {",
													"  pm.expect(problemDetails.detail).to.not.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update by non-owner without namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return the expected type\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:namespace:access-denied:namespace-mismatch\");",
													"});",
													"",
													"pm.test(\"Should return a detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.match(/^Access to the resource could not be authorized. The existing 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(`Should NOT return the detail indicating the ownership token doesn't match`, () => {",
													"  pm.expect(problemDetails.detail).to.not.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contentIdentifier\": \"{{supplied:educationContentIdentifier}}\",\r\n  \"namespace\": \"uri://not-their-namespace.org\",\r\n  \"shortDescription\": \"Update attempt by different client WITHOUT matching namespace claim\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update by non-owner without namespace claim (PUT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return the expected type\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:namespace:access-denied:namespace-mismatch\");",
													"});",
													"",
													"pm.test(\"Should return a detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.match(/^Access to the resource could not be authorized. The existing 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(`Should NOT return the detail indicating the ownership token doesn't match`, () => {",
													"  pm.expect(problemDetails.detail).to.not.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contentIdentifier\": \"{{supplied:educationContentIdentifier}}\",\r\n  \"namespace\": \"uri://not-their-namespace.org\",\r\n  \"shortDescription\": \"Update attempt by different client WITHOUT matching namespace claim\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete by non-owner without namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return the expected type\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:namespace:access-denied:namespace-mismatch\");",
													"});",
													"",
													"pm.test(\"Should return a detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.match(/^Access to the resource could not be authorized. The existing 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(`Should NOT return the detail indicating the ownership token doesn't match`, () => {",
													"  pm.expect(problemDetails.detail).to.not.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_Other_Namespace}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Non-Owner with Namespace Claim",
							"item": [
								{
									"name": "GetById by non-owner with namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return the expected type\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"});",
													"",
													"pm.test(\"Should return a detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should NOT return the detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.not.match(/^Access to the resource could not be authorized. The existing 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update by non-owner with namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return the expected type\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"});",
													"",
													"pm.test(\"Should return a detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should NOT return the detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.not.match(/^Access to the resource could not be authorized. The existing 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contentIdentifier\": \"{{supplied:educationContentIdentifier}}\",\r\n  \"namespace\": \"uri://ed-fi.org\",\r\n  \"shortDescription\": \"Update attempt by different client with matching namespace claim\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update by non-owner with namespace claim (PUT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return the expected type\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"});",
													"",
													"pm.test(\"Should return a detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should NOT return the detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.not.match(/^Access to the resource could not be authorized. The existing 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contentIdentifier\": \"{{supplied:educationContentIdentifier}}\",\r\n  \"namespace\": \"uri://ed-fi.org\",\r\n  \"shortDescription\": \"Update attempt by different client with matching namespace claim\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete by non-owner with namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return the expected type\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"});",
													"",
													"pm.test(\"Should return a detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should NOT return the detail indicating that that the caller doesn't have the necessary namespace prefix.\", () => {",
													"  pm.expect(problemDetails.detail).to.not.match(/^Access to the resource could not be authorized. The existing 'Namespace' value of the resource does not start with any of the caller's associated namespace prefixes \\('(.*)'\\)\\./);",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Owner with namespace claim",
							"item": [
								{
									"name": "GetById by owner with namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Content identifier returned matches item created earlier\", () => {",
													"  pm.expect(pm.response.json().contentIdentifier).to.equal(pm.environment.get('supplied:educationContentIdentifier'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update by owner with namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contentIdentifier\": \"{{supplied:educationContentIdentifier}}\",\r\n  \"namespace\": \"uri://ed-fi.org\",\r\n  \"shortDescription\": \"Updated by owner WITH matching namespace claim\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update by owner with namespace claim (PUT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"  pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contentIdentifier\": \"{{supplied:educationContentIdentifier}}\",\r\n  \"namespace\": \"uri://ed-fi.org\",\r\n  \"shortDescription\": \"Updated (PUT) by owner WITH matching namespace claim\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete by owner with namespace claim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"  pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationContents/{{known:educationContent:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"educationContents",
												"{{known:educationContent:id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Multiple Authorization Strategy Relationships/Ownership",
			"item": [
				{
					"name": "StudentSectionAssociation",
					"item": [
						{
							"name": "Get Many",
							"item": [
								{
									"name": "Get StudentSectionAssociations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItems = pm.response.json();",
													"",
													"pm.test(\"Should only return the owned section associated with the still registered student\", () => {",
													"  responseItems.forEach(responseItem => {",
													"    pm.expect(responseItem.studentReference.studentUniqueId).to.equal('AAAAAA');",
													"    pm.expect(responseItem.beginDate).to.equal(\"2022-01-01\");",
													"  });",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"  pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get StudentSectionAttendanceEvents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"var items = pm.response.json();",
													"",
													"pm.test(\"Items were returned\", () => {",
													"  pm.expect(items.length).is.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAttendanceEvents/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAttendanceEvents",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Composites",
							"item": [
								{
									"name": "Get Section enrollments using School client",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let responseItem = pm.response.json();\r",
													"\r",
													"// Using query parameters returns an array, this will handle those scenarios so we validate only the first element in the response\r",
													"if (Array.isArray(responseItem)) {\r",
													"    responseItem = responseItem[0];\r",
													"}\r",
													"\r",
													"const students = responseItem.students;\r",
													"\r",
													"// -----------------------------\r",
													"// Registered Student Checks\r",
													"// -----------------------------\r",
													"const studentThroughUnownedStudentSectionAssociationId = pm.environment.get('known:studentSectionAssociation:registered:unowned:id');\r",
													"\r",
													"const studentThroughUnownedStudentSectionAssociation = _.find(students, { 'studentSectionAssociation_id': studentThroughUnownedStudentSectionAssociationId });\r",
													"\r",
													"const studentThroughOwnedSectionAssociationId = pm.environment.get('known:studentSectionAssociation:registered:owned:id');\r",
													"\r",
													"const studentThroughOwnedStudentSectionAssociation = _.find(students, { 'studentSectionAssociation_id': studentThroughOwnedSectionAssociationId });\r",
													"\r",
													"pm.test(`Should include the registered student (through owned section association).`, () => {\r",
													"  pm.expect(studentThroughOwnedStudentSectionAssociation.studentUniqueId).to.equal('AAAAAA');\r",
													"});\r",
													"\r",
													"pm.test(`Should include the registered student (through unowned section association, but only until ownership-based security is supported).`, () => {\r",
													"  // Ownership-based authorization --> pm.expect(unownedStudentSectionAssociation).to.be.undefined;\r",
													"  pm.expect(studentThroughUnownedStudentSectionAssociation.studentUniqueId).to.equal('AAAAAA');\r",
													"});\r",
													"\r",
													"// -----------------------------\r",
													"// Responsibility Student Checks\r",
													"// -----------------------------\r",
													"\r",
													"const responsibilityStudentThroughUnownedStudentSectionAssociationId = pm.environment.get('known:studentSectionAssociation:responsibility:unowned:id');\r",
													"\r",
													"const responsibilityStudentThroughUnownedStudentSectionAssociation = _.find(students, { 'studentSectionAssociation_id': responsibilityStudentThroughUnownedStudentSectionAssociationId });\r",
													"\r",
													"const responsibilityStudentThroughOwnedSectionAssociationId = pm.environment.get('known:studentSectionAssociation:responsibility:owned:id');\r",
													"\r",
													"const responsibilityStudentThroughOwnedStudentSectionAssociation = _.find(students, { 'studentSectionAssociation_id': responsibilityStudentThroughOwnedSectionAssociationId });\r",
													"\r",
													"pm.test(`Should NOT include the responsibility student (even through owned section association because client is not affiliated with the schoold of responsibility).`, () => {\r",
													"  pm.expect(responsibilityStudentThroughOwnedStudentSectionAssociation).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(`Should NOT include the responsibility student (through the unowned section association, and because client is not affiliated with the schoold of responsibility).`, () => {\r",
													"  pm.expect(responsibilityStudentThroughUnownedStudentSectionAssociation).to.be.undefined;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/sectionEnrollments/{{known:section:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"sectionEnrollments",
												"{{known:section:id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Section enrollments using LEA client",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let responseItem = pm.response.json();\r",
													"\r",
													"// Using query parameters returns an array, this will handle those scenarios so we validate only the first element in the response\r",
													"if (Array.isArray(responseItem)) {\r",
													"    responseItem = responseItem[0];\r",
													"}\r",
													"\r",
													"const students = responseItem.students;\r",
													"\r",
													"// NOTE: The semantics used in the environment variables for \"owned\" and \"unowned\" are centered around the School client.\r",
													"// For the LEA client, which is the caller on this request, the semantics don't match (they're actually opposite), however,\r",
													"// this is corrected in the variable names.\r",
													"\r",
													"// -----------------------------\r",
													"// Registered Student Checks\r",
													"// -----------------------------\r",
													"const studentThroughLeaOwnedStudentSectionAssociationId = pm.environment.get('known:studentSectionAssociation:registered:unowned:id');\r",
													"\r",
													"const studentThroughLeaOwnedStudentSectionAssociation = _.find(students, { 'studentSectionAssociation_id': studentThroughLeaOwnedStudentSectionAssociationId });\r",
													"\r",
													"const studentThroughLeaUnownedSectionAssociationId = pm.environment.get('known:studentSectionAssociation:registered:owned:id');\r",
													"\r",
													"const studentThroughLeaUnownedStudentSectionAssociation = _.find(students, { 'studentSectionAssociation_id': studentThroughLeaUnownedSectionAssociationId });\r",
													"\r",
													"pm.test(`Should include the registered student (through LEA-unowned section association, but only until ownership-based security is supported).`, () => {\r",
													"  pm.expect(studentThroughLeaUnownedStudentSectionAssociation.studentUniqueId).to.equal('AAAAAA');\r",
													"});\r",
													"\r",
													"pm.test(`Should include the registered student (through LEA-owned section association, ).`, () => {\r",
													"  // Ownership-based authorization --> pm.expect(unownedStudentSectionAssociation).to.be.undefined;\r",
													"  pm.expect(studentThroughLeaOwnedStudentSectionAssociation.studentUniqueId).to.equal('AAAAAA');\r",
													"});\r",
													"\r",
													"// -----------------------------\r",
													"// Responsibility Student Checks\r",
													"// -----------------------------\r",
													"\r",
													"const responsibilityStudentThroughLeaOwnedStudentSectionAssociationId = pm.environment.get('known:studentSectionAssociation:responsibility:unowned:id');\r",
													"\r",
													"const responsibilityStudentThroughLeaOwnedStudentSectionAssociation = _.find(students, { 'studentSectionAssociation_id': responsibilityStudentThroughLeaOwnedStudentSectionAssociationId });\r",
													"\r",
													"const responsibilityStudentThroughLeaUnownedSectionAssociationId = pm.environment.get('known:studentSectionAssociation:responsibility:owned:id');\r",
													"\r",
													"const responsibilityStudentThroughLeaUnownedStudentSectionAssociation = _.find(students, { 'studentSectionAssociation_id': responsibilityStudentThroughLeaUnownedSectionAssociationId });\r",
													"\r",
													"pm.test(`Should include the responsibility student (through LEA-unowned section association, but only until ownership-based security is implemented).`, () => {\r",
													"  // After ownership-based security support --> pm.expect(responsibilityStudentThroughLeaUnownedStudentSectionAssociation).to.be.undefined;\r",
													"  pm.expect(responsibilityStudentThroughLeaUnownedStudentSectionAssociation.studentUniqueId).to.equal('BBBBBB');\r",
													"});\r",
													"\r",
													"pm.test(`Should include the responsibility student (through the LEA-owned section association, because the student is associated through responsibility association).`, () => {\r",
													"  pm.expect(responsibilityStudentThroughLeaOwnedStudentSectionAssociation.studentUniqueId).to.equal('BBBBBB');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/sectionEnrollments/{{known:section:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"sectionEnrollments",
												"{{known:section:id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Non-owner with relationship",
							"item": [
								{
									"name": "GetById by non-owner with relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:registered:unowned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:registered:unowned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Update by non-owner with relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"AAAAAA\"\r\n  },\r\n  \"beginDate\": \"2022-01-02\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Update by non-owner with relationship (PUT)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"AAAAAA\"\r\n  },\r\n  \"beginDate\": \"2022-01-02\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:registered:unowned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:registered:unowned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Delete by non-owner with relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:registered:unowned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:registered:unowned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Non-owner without relationship",
							"item": [
								{
									"name": "GetById by non-owner without relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:responsibility:unowned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:responsibility:unowned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Update by non-owner without relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  },\r\n  \"beginDate\": \"2022-02-02\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Update by non-owner without relationship (PUT)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  },\r\n  \"beginDate\": \"2022-02-02\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:responsibility:unowned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:responsibility:unowned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Delete by non-owner without relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization:ownership:access-denied:ownership-mismatch\");",
													"  pm.expect(problemDetails.detail).to.equal(\"Access to the resource could not be authorized. The resource item is not owned by the caller.\");",
													"});",
													"",
													"pm.test(\"Should not return errors.\", () => {",
													"  pm.expect(problemDetails.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:responsibility:unowned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:responsibility:unowned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Owner without relationship",
							"item": [
								{
									"name": "GetById by owner without relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");",
													"  pm.expect(problemDetails.detail).to.contain(\"Access to the resource could not be authorized.\");",
													"});",
													"",
													"pm.test(`Should indicate that client does not have any established relationship with the item`, () => {",
													"  pm.expect(problemDetails.errors).to.match(/^No relationships have been established between the caller's education organization id claim \\([\\d\\s,]+\\) and the resource item's 'StudentUniqueId' value./);",
													"});",
													"",
													"pm.test(`Should hint to create 'StudentSchoolAssociation'`, () => {",
													"  pm.expect(problemDetails.detail).to.contain(\"You may need to create a corresponding 'StudentSchoolAssociation' resource item.\");",
													"});",
													"",
													"pm.test(`Should hint to create 'StudentEducationOrganizationResponsibilityAssociation'`, () => {",
													"  pm.expect(problemDetails.detail).to.contain(\"You may need to create a corresponding 'StudentEducationOrganizationResponsibilityAssociation' resource item.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:responsibility:owned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:responsibility:owned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Update by owner without relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");",
													"  pm.expect(problemDetails.detail).to.contain(\"Access to the resource could not be authorized.\");",
													"});",
													"",
													"pm.test(`Should indicate that client does not have any established relationship with the item`, () => {",
													"  pm.expect(problemDetails.errors).to.match(/^No relationships have been established between the caller's education organization id claim \\([\\d\\s,]+\\) and the resource item's 'StudentUniqueId' value./);",
													"});",
													"",
													"pm.test(`Should hint to create 'StudentSchoolAssociation'`, () => {",
													"  pm.expect(problemDetails.detail).to.contain(\"You may need to create a corresponding 'StudentSchoolAssociation' resource item.\");",
													"});",
													"",
													"pm.test(`Should hint to create 'StudentEducationOrganizationResponsibilityAssociation'`, () => {",
													"  pm.expect(problemDetails.detail).to.contain(\"You may need to create a corresponding 'StudentEducationOrganizationResponsibilityAssociation' resource item.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  },\r\n  \"beginDate\": \"2022-02-01\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Update by owner without relationship (PUT)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");",
													"  pm.expect(problemDetails.detail).to.contain(\"Access to the resource could not be authorized.\");",
													"});",
													"",
													"pm.test(`Should indicate that client does not have any established relationship with the item`, () => {",
													"  pm.expect(problemDetails.errors).to.match(/^No relationships have been established between the caller's education organization id claim \\([\\d\\s,]+\\) and the resource item's 'StudentUniqueId' value./);",
													"});",
													"",
													"pm.test(`Should hint to create 'StudentSchoolAssociation'`, () => {",
													"  pm.expect(problemDetails.detail).to.contain(\"You may need to create a corresponding 'StudentSchoolAssociation' resource item.\");",
													"});",
													"",
													"pm.test(`Should hint to create 'StudentEducationOrganizationResponsibilityAssociation'`, () => {",
													"  pm.expect(problemDetails.detail).to.contain(\"You may need to create a corresponding 'StudentEducationOrganizationResponsibilityAssociation' resource item.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  },\r\n  \"beginDate\": \"2022-02-01\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:responsibility:owned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:responsibility:owned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Delete by owner without relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {",
													"  pm.expect(pm.response.code).to.equal(403);",
													"});",
													"",
													"const problemDetails = pm.response.json();",
													"",
													"pm.test(\"Should return a problem details result\", () => {",
													"  pm.expect(pm.response.code).equal(problemDetails.status);",
													"  pm.expect(problemDetails.type).to.equal(\"urn:ed-fi:api:security:authorization\");",
													"  pm.expect(problemDetails.detail).to.contain(\"Access to the resource could not be authorized.\");",
													"});",
													"",
													"pm.test(`Should indicate that client does not have any established relationship with the item`, () => {",
													"  pm.expect(problemDetails.errors).to.match(/^No relationships have been established between the caller's education organization id claim \\([\\d\\s,]+\\) and the resource item's 'StudentUniqueId' value./);",
													"});",
													"",
													"pm.test(`Should hint to create 'StudentSchoolAssociation'`, () => {",
													"  pm.expect(problemDetails.detail).to.contain(\"You may need to create a corresponding 'StudentSchoolAssociation' resource item.\");",
													"});",
													"",
													"pm.test(`Should hint to create 'StudentEducationOrganizationResponsibilityAssociation'`, () => {",
													"  pm.expect(problemDetails.detail).to.contain(\"You may need to create a corresponding 'StudentEducationOrganizationResponsibilityAssociation' resource item.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:responsibility:owned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:responsibility:owned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Owner with relationship",
							"item": [
								{
									"name": "GetById by owner with relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Item returned matches the values created earlier\", () => {",
													"  const response = pm.response.json();",
													"",
													"  pm.expect(response.studentReference.studentUniqueId).to.equal(\"AAAAAA\");",
													"  pm.expect(response.beginDate).to.equal(\"2022-01-01\");",
													"});",
													"",
													"// Ensure response body is logged in Newman",
													"if (pm.response.code >= 400) {",
													"  const message = pm.response.json().message;",
													"",
													"  pm.test(`Error message of '${message}' should not be present`, () => {",
													"    pm.expect(message).to.be.empty();",
													"  });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:registered:owned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:registered:owned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Update by owner with relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"AAAAAA\"\r\n  },\r\n  \"beginDate\": \"2022-01-01\",\r\n  \"endDate\": \"2022-07-07\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Update by owner with relationship (PUT)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"  pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"sectionReference\": {\r\n    \"localCourseCode\": \"{{known:section:localCourseCode}}\",\r\n    \"schoolId\": \"{{known:section:schoolId}}\",\r\n    \"schoolYear\": \"{{known:section:schoolYear}}\",\r\n    \"sectionIdentifier\": \"{{known:section:sectionIdentifier}}\",\r\n    \"sessionName\": \"{{known:section:sessionName}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"AAAAAA\"\r\n  },\r\n  \"beginDate\": \"2022-01-01\",\r\n  \"endDate\": \"2022-08-08\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:registered:owned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:registered:owned:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Delete by owner with relationship",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"  pm.expect(pm.response.code).to.equal(204);",
													"});",
													"",
													"// Ensure response body is logged in Newman",
													"if (pm.response.code >= 400) {",
													"  const message = pm.response.json().message;",
													"",
													"  pm.test(`Error message of '${message}' should not be present`, () => {",
													"    pm.expect(message).to.be.empty();",
													"  });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken_255901001}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:registered:owned:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentSectionAssociations",
												"{{known:studentSectionAssociation:registered:owned:id}}"
											],
											"query": [
												{
													"key": "studentUniqueId",
													"value": "AAAAAA",
													"disabled": true
												}
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "Recreate Student School Association for B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"pm.environment.set('known:studentSchoolAssociation:responsibility:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"BBBBBB\"\r\n  },\r\n  \"entryDate\": \"2022-02-22\",\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"StudentSchoolAssociations"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "Delete Student EdOrg Responsibility for B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentEducationOrganizationResponsibilityAssociations/{{known:studentEducationOrganizationResponsibilityAssociation:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"StudentEducationOrganizationResponsibilityAssociations",
								"{{known:studentEducationOrganizationResponsibilityAssociation:id}}"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "Delete Unowned StudentSectionAssociation for A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"// Ensure response body is logged in Newman",
									"if (pm.response.code >= 400) {",
									"  const message = pm.response.json().message;",
									"",
									"  pm.test(`Error message of '${message}' should not be present`, () => {",
									"    pm.expect(message).to.be.empty();",
									"  });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:registered:unowned:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentSectionAssociations",
								"{{known:studentSectionAssociation:registered:unowned:id}}"
							],
							"query": [
								{
									"key": "studentUniqueId",
									"value": "AAAAAA",
									"disabled": true
								}
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "Delete Owned StudentSectionAssociation for B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"// Ensure response body is logged in Newman",
									"if (pm.response.code >= 400) {",
									"  const message = pm.response.json().message;",
									"",
									"  pm.test(`Error message of '${message}' should not be present`, () => {",
									"    pm.expect(message).to.be.empty();",
									"  });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901001}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:responsibility:owned:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentSectionAssociations",
								"{{known:studentSectionAssociation:responsibility:owned:id}}"
							],
							"query": [
								{
									"key": "studentUniqueId",
									"value": "BBBBBB",
									"disabled": true
								}
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "Delete Unowned StudentSectionAssociation for B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"// Ensure response body is logged in Newman",
									"if (pm.response.code >= 400) {",
									"  const message = pm.response.json().message;",
									"",
									"  pm.test(`Error message of '${message}' should not be present`, () => {",
									"    pm.expect(message).to.be.empty();",
									"  });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSectionAssociations/{{known:studentSectionAssociation:responsibility:unowned:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentSectionAssociations",
								"{{known:studentSectionAssociation:responsibility:unowned:id}}"
							],
							"query": [
								{
									"key": "studentUniqueId",
									"value": "BBBBBB",
									"disabled": true
								}
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "Delete StudentSchoolAssociation for A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"// Ensure response body is logged in Newman",
									"if (pm.response.code >= 400) {",
									"  const message = pm.response.json().message;",
									"",
									"  pm.test(`Error message of '${message}' should not be present`, () => {",
									"    pm.expect(message).to.be.empty();",
									"  });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:registered:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentSchoolAssociations",
								"{{known:studentSchoolAssociation:registered:id}}"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "Delete StudentSchoolAssociation for B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"// Ensure response body is logged in Newman",
									"if (pm.response.code >= 400) {",
									"  const message = pm.response.json().message;",
									"",
									"  pm.test(`Error message of '${message}' should not be present`, () => {",
									"    pm.expect(message).to.be.empty();",
									"  });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:studentSchoolAssociation:responsibility:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"studentSchoolAssociations",
								"{{known:studentSchoolAssociation:responsibility:id}}"
							]
						},
						"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
					},
					"response": []
				},
				{
					"name": "Delete Student A (Registered)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"studentUniqueId\": \"AAAAAA\",\r\n  \"birthDate\": \"2010-01-01\",\r\n  \"firstName\": \"Joe\",\r\n  \"lastSurname\": \"Registered\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:registered:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students",
								"{{known:student:registered:id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Student B (Responsibility)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"  pm.expect(pm.response.code).to.equal(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken_255901}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"studentUniqueId\": \"AAAAAA\",\r\n  \"birthDate\": \"2010-01-01\",\r\n  \"firstName\": \"Joe\",\r\n  \"lastSurname\": \"Registered\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:student:responsibility:id}}",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"students",
								"{{known:student:responsibility:id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean up Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
									"  .each(k => pm.environment.unset(k)).value();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Add a correlation id to the query string of every request and save it to the environment as well",
					"const correlationId = pm.variables.replaceIn(\"{{$randomMACAddress}}\").replace(/:/g, '');",
					"pm.request.addQueryParams(`correlationId=${correlationId}`);",
					"",
					"CreateAccessToken(\"TokenExpiry_255901\",",
					"  \"AccessToken_255901\",",
					"  \"ApiKey_255901\",",
					"  \"ApiSecret_255901\")",
					"",
					"CreateAccessToken(\"TokenExpiry_Other_Namespace\",",
					"  \"AccessToken_Other_Namespace\",",
					"  \"ApiKey_Other_Namespace\",",
					"  \"ApiSecret_Other_Namespace\")",
					"",
					"CreateAccessToken(\"TokenExpiry_255901001\",",
					"  \"AccessToken_255901001\",",
					"  \"ApiKey_255901001\",",
					"  \"ApiSecret_255901001\")",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry, AccessToken, ApiKey, ApiSecret) {",
					"  let tokenExpiration = pm.environment.get(TokenExpiry);",
					"  let currentToken = pm.environment.get(AccessToken);",
					"  let getToken = true;",
					"  if (!tokenExpiration ||",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"  } else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"  } else {",
					"    getToken = false;",
					"  }",
					"  if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"",
					"    let getTokenRequest = {",
					"      method: 'POST',",
					"      url: tokenUrl,",
					"      auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"          { key: \"username\", value: clientId },",
					"          { key: \"password\", value: clientSecret }",
					"        ]",
					"      },",
					"      header: [",
					"        \"content-type:application/x-www-form-urlencoded\"",
					"      ],",
					"      body: {",
					"        mode: \"urlencoded\",",
					"        urlencoded: [{ key: \"grant_type\", value: grantType }]",
					"      }",
					"    };",
					"",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"      let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"      console.log({ err, jsonResponse, newAccessToken })",
					"",
					"      pm.environment.set(AccessToken, newAccessToken);",
					"",
					"      let expiryDate = new Date();",
					"      expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"      pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"  }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/*Prepare Sandbox environment by running the SQL Server script below against the populated sandbox ODS -- which performs the following activities:",
					" * Create an ownership token in EdFi_Admin database.",
					" * Add the ownership token to the collection of ownership tokens associated with the Populated sandbox API client.",
					" * INSERT two students (Joe Registered, and Joe Responsibility)",
					" * INSERT a StudentSchoolAssociation record for Joe Registered.",
					" * INSERT a StudentEdOrgResponsibilityAssociation record for Joe Responsibility.",
					" * INSERT two StudentSectionAssociations for each student – one matching the ownership token, and one _not_ matching the ownership token.",
					" */"
				]
			}
		}
	]
}