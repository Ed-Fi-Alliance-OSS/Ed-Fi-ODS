{
	"info": {
		"_postman_id": "9b84856e-cc9d-47aa-afbe-bae9d53fddcb",
		"name": "Ed-Fi ODS/API ChangeQueries Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ChangeQueries",
			"item": [
				{
					"name": "GetAllResourceTests",
					"item": [
						{
							"name": "When_retrieving_resource_should_support_change_version_filter",
							"item": [
								{
									"name": "Clean up Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItems = pm.response.json();",
													"",
													"pm.test('Delete all programs', () => {",
													"",
													"           responseItems.forEach(responseItem => {",
													"            ",
													"            if(isNaN(responseItem.programId))",
													"            {",
													"                let ProgramDeleteRequest = {",
													"                        url: pm.environment.get(\"ApiBaseUrl\") + \"/data/v3/ed-fi/programs/\" + responseItem.id,",
													"                        method: 'DELETE',",
													"                        header: 'Authorization:bearer ' + pm.environment.get(\"AccessToken_255901\"),",
													"                        body: {}",
													"                };",
													"    ",
													"                pm.sendRequest(ProgramDeleteRequest, function (err, ProgramDelete) {",
													"                        if (err) {",
													"                            console.log(err);",
													"                        } else {}",
													"                    });",
													"           }",
													"        });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?limit=100",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"const responseItems = pm.response.json();",
													"pm.environment.set('known:programsLength',responseItems.length);",
													"pm.environment.set('known:localEducationAgencyId', 255901);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?limit=100",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':programGuid1', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
													"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get AvailableChangeVersions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"const responseItem = pm.response.json();",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':newestChangeVersion1', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':programGuid2', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get AvailableChangeVersions Second one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"const responseItem = pm.response.json();",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':newestChangeVersion2', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Program Data -Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':programGuid3', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('supplied:'+scenarioId+':thirdProgramName', newGuid());",
													"pm.environment.set('supplied:'+scenarioId+':thirdProgramId', newGuid().substring(0,20));",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:thirdProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:thirdProgramId}}\"\r\n  \r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get AvailableChangeVersions Third one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':newestChangeVersion3', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Program Data filter by min change version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const __ = require('lodash');",
													"const responseItems = pm.response.json();",
													" const scenarioId = pm.environment.get('scenarioId');",
													" ",
													"pm.test(\"Should match with Program Response MinChangeVersion Results\", () => {",
													"   ",
													"    __.each(responseItems, (responseItem) => {",
													"         pm.expect(responseItem.programId).to.equal(pm.environment.get('supplied:'+scenarioId+':thirdProgramId'));",
													"         pm.expect(responseItem.programName).to.equal(pm.environment.get('supplied:'+scenarioId+':thirdProgramName'));",
													"      });",
													"});",
													"",
													"",
													"     ",
													"     "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?minChangeVersion={{known:{{scenarioId}}:newestChangeVersion3}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "minChangeVersion",
													"value": "{{known:{{scenarioId}}:newestChangeVersion3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Program Data filter by max Change Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const __ = require('lodash');",
													"const responseItems = pm.response.json();",
													"const scenarioId = pm.environment.get('scenarioId');",
													" ",
													"pm.test(\"Should match with Program Response MaxChangeVersion Results\", () => {",
													"   ",
													"    const maxChangeVersionProgramIds = [];",
													"    __.each(responseItems, (responseItem) => {",
													"         maxChangeVersionProgramIds.push(responseItem.id);",
													"      });",
													"      ",
													"       pm.expect(3).to.equal(responseItems.length-pm.environment.get('known:programsLength'));",
													"       pm.expect(maxChangeVersionProgramIds.includes(pm.environment.get('known:'+scenarioId+':programGuid3'))).to.equal(true);",
													"       pm.expect(maxChangeVersionProgramIds.includes(pm.environment.get('known:'+scenarioId+':programGuid2'))).to.equal(true);",
													"       pm.expect(maxChangeVersionProgramIds.includes(pm.environment.get('known:'+scenarioId+':programGuid1'))).to.equal(true);",
													"});",
													"",
													"",
													"     ",
													"     "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?maxChangeVersion={{known:{{scenarioId}}:newestChangeVersion3}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "maxChangeVersion",
													"value": "{{known:{{scenarioId}}:newestChangeVersion3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Program Data filter by min Change Version & max Change Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const __ = require('lodash');",
													"const responseItems = pm.response.json();",
													"const scenarioId = pm.environment.get('scenarioId');",
													" ",
													"pm.test(\"Should match with Program Response MinChangeVersion & MaxChangeVersion Results\", () => {",
													"   ",
													"    const maxChangeVersionProgramIds = [];",
													"    __.each(responseItems, (responseItem) => {",
													"         maxChangeVersionProgramIds.push(responseItem.id);",
													"      });",
													"      ",
													"       pm.expect(responseItems.length).to.equal(2);",
													"       pm.expect(maxChangeVersionProgramIds.includes(pm.environment.get('known:'+scenarioId+':programGuid2'))).to.equal(true);",
													"       pm.expect(maxChangeVersionProgramIds.includes(pm.environment.get('known:'+scenarioId+':programGuid1'))).to.equal(true);",
													"});",
													"",
													"",
													"     ",
													"     "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs?minChangeVersion={{known:{{scenarioId}}:newestChangeVersion1}}&maxChangeVersion={{known:{{scenarioId}}:newestChangeVersion2}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"programs"
											],
											"query": [
												{
													"key": "minChangeVersion",
													"value": "{{known:{{scenarioId}}:newestChangeVersion1}}"
												},
												{
													"key": "maxChangeVersion",
													"value": "{{known:{{scenarioId}}:newestChangeVersion2}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "GetDeletedResource",
					"item": [
						{
							"name": "When_deleting_student",
							"item": [
								{
									"name": "Should_not_return_unregistered_deleted_students",
									"item": [
										{
											"name": "Get AvailableChangeVersions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:' + scenarioId + ':newestChangeVersion', responseItem.newestChangeVersion);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');\r",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
															"function createScenarioId() { return newGuid().substring(0,5); }\r",
															"pm.environment.set('scenarioId', createScenarioId());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"changeQueries",
														"v1",
														"AvailableChangeVersions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"  pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('known:' + scenarioId + ':student:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:' + scenarioId + ':studentUniqueId', pm.environment.get('supplied:' + scenarioId + ':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:' + scenarioId + ':studentUniqueId', pm.variables.replaceIn('{{$guid}}').replace(/-/g, \"\"));",
															"pm.environment.set('supplied:' + scenarioId + ':lastSurname', pm.variables.replaceIn('{{$randomLastName}}'));",
															"pm.environment.set('supplied:' + scenarioId + ':firstName', pm.variables.replaceIn('{{$randomFirstName}}'));",
															"",
															"const moment = require('moment');",
															"let birthDate = new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate = moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:' + scenarioId + ':birthDate', birthDate);",
															"",
															"let enteredUSDate = new Date();",
															"enteredUSDate = enteredUSDate.addMonths(-20);",
															"enteredUSDate = moment(enteredUSDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:' + scenarioId + ':enteredUSDate', enteredUSDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete student by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:student:id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get deleted students",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItems = pm.response.json();",
															"",
															"pm.test(\"Should not return the deleted student\", () => {",
															"  pm.expect(responseItems.length).to.equal(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/deletes?minChangeVersion={{known:{{scenarioId}}:newestChangeVersion}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"deletes"
													],
													"query": [
														{
															"key": "minChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Should_return_registered_and_subsequently_deleted_students",
									"item": [
										{
											"name": "Get AvailableChangeVersions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:' + scenarioId + ':newestChangeVersion', responseItem.newestChangeVersion);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');\r",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }\r",
															"function createScenarioId() { return newGuid().substring(0,5); }\r",
															"pm.environment.set('scenarioId', createScenarioId());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"changeQueries",
														"v1",
														"AvailableChangeVersions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create student",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"  pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('known:' + scenarioId + ':student:id', pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:' + scenarioId + ':studentUniqueId', pm.environment.get('supplied:' + scenarioId + ':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:' + scenarioId + ':studentUniqueId', pm.variables.replaceIn('{{$guid}}').replace(/-/g, \"\"));",
															"pm.environment.set('supplied:' + scenarioId + ':lastSurname', pm.variables.replaceIn('{{$randomLastName}}'));",
															"pm.environment.set('supplied:' + scenarioId + ':firstName', pm.variables.replaceIn('{{$randomFirstName}}'));",
															"",
															"const moment = require('moment');",
															"let birthDate = new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate = moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:' + scenarioId + ':birthDate', birthDate);",
															"",
															"let enteredUSDate = new Date();",
															"enteredUSDate = enteredUSDate.addMonths(-20);",
															"enteredUSDate = moment(enteredUSDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:' + scenarioId + ':enteredUSDate', enteredUSDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register student in a school",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(201);\r",
															"});\r",
															"\r",
															"const scenarioId = pm.environment.get('scenarioId');\r",
															"\r",
															"pm.environment.set('known:' + scenarioId + ':studentSchoolAssociation:id', pm.response.headers.one('Location').value.split(\"/\").pop());\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');\r",
															"\r",
															"const moment = require('moment');\r",
															"let entryDate = pm.variables.replaceIn('{{$randomDateRecent}}');\r",
															"entryDate = moment(entryDate).format(\"YYYY-MM-DD\");\r",
															"pm.environment.set('supplied:' + scenarioId + ':entryDate', entryDate);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\"\r\n  },\r\n  \"entryDate\": \"{{supplied:{{scenarioId}}:entryDate}}\",\r\n  \"entryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete student registration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {\r",
															"  pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": 255901001\r\n  },\r\n  \"studentReference\": {\r\n    \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociation:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociation:id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete student by Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:student:id}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:student:id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get deleted students",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const __ = require('lodash');",
															"",
															"const responseItems = pm.response.json();",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should return a single deleted student\", () => {",
															"  pm.expect(responseItems.length).to.equal(1);",
															"});",
															"",
															"pm.test(\"Should return the recently created and registered and deleted student\", () => {",
															"  pm.expect(responseItems[0].id).to.equal(pm.environment.get('known:' + scenarioId + ':student:id'));",
															"});",
															"",
															"pm.test(\"Should return the natural key of the deleted student\", () => {",
															"  pm.expect(responseItems[0].keyValues.studentUniqueId).to.equal(pm.environment.get('supplied:' + scenarioId + ':studentUniqueId'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/deletes?minChangeVersion={{known:{{scenarioId}}:newestChangeVersion}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"deletes"
													],
													"query": [
														{
															"key": "minChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get deleted student registrations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const __ = require('lodash');",
															"",
															"const responseItems = pm.response.json();",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should return a single deleted student registration\", () => {",
															"  pm.expect(responseItems.length).to.equal(1);",
															"});",
															"",
															"pm.test(\"Should return the recently created and deleted student registration\", () => {",
															"  pm.expect(responseItems[0].id).to.equal(pm.environment.get('known:' + scenarioId + ':studentSchoolAssociation:id'));",
															"});",
															"",
															"pm.test(\"Should return the natural key of the deleted student registration\", () => {",
															"  pm.expect(responseItems[0].keyValues.studentUniqueId).to.equal(pm.environment.get('supplied:' + scenarioId + ':studentUniqueId'));",
															"  pm.expect(responseItems[0].keyValues.entryDate).to.equal(pm.environment.get('supplied:' + scenarioId + ':entryDate'));",
															"  pm.expect(responseItems[0].keyValues.schoolId).to.equal(255901001);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/deletes?minChangeVersion={{known:{{scenarioId}}:newestChangeVersion}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"deletes"
													],
													"query": [
														{
															"key": "minChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "When_deleting_program_with_same_natural_key_twice",
							"item": [
								{
									"name": "Should_trigger_insert_into_trackedDeletes_table_for_each_resource_id",
									"item": [
										{
											"name": "Create Program Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':programGuid1', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:localEducationAgencyId', 255901);",
															"pm.environment.set('supplied:'+scenarioId+':programName', 'Duplicate Program');",
															"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
															"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Program Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid1}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"{{known:{{scenarioId}}:programGuid1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get AvailableChangeVersions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"const responseItem = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':newestChangeVersion1', responseItem.newestChangeVersion);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"changeQueries",
														"v1",
														"AvailableChangeVersions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Recreate Program Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':programGuid2', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Program Data -Second one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid2}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"{{known:{{scenarioId}}:programGuid2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get AvailableChangeVersions Second one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:' + scenarioId + ':newestChangeVersion2', responseItem.newestChangeVersion);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"changeQueries",
														"v1",
														"AvailableChangeVersions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get tracked Deletes Program  Data filter by min change version & max change version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItems = pm.response.json();",
															"",
															"pm.test(\"Should return only two deleted items\", () => {",
															"  pm.expect(responseItems.length).to.equal(2);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should return the minimum change version in the first item returned \", () => {",
															"  pm.expect(responseItems[0].changeVersion).to.equal(pm.environment.get('known:' + scenarioId + ':newestChangeVersion1'));",
															"});",
															"",
															"pm.test(\"Should return the first item deleted in the first item returned \", () => {",
															"  pm.expect(responseItems[0].id.replace(/\\-/g, '')).to.equal(pm.environment.get('known:' + scenarioId + ':programGuid1'));",
															"});",
															"",
															"pm.test(\"Should return the maximum change version in the second item returned \", () => {",
															"  pm.expect(responseItems[1].changeVersion).to.equal(pm.environment.get('known:' + scenarioId + ':newestChangeVersion2'));",
															"});",
															"",
															"pm.test(\"Should return the second item deleted in the second item returned \", () => {",
															"  pm.expect(responseItems[1].id.replace(/\\-/g, '')).to.equal(pm.environment.get('known:' + scenarioId + ':programGuid2'));",
															"});",
															"",
															"pm.test(\"Should return the same key values for both items returned \", () => {",
															"  pm.expect(responseItems[0].keyValues.programName).to.equal(pm.environment.get('supplied:' + scenarioId + ':programName'));",
															"  pm.expect(responseItems[0].keyValues.programTypeDescriptor).to.equal(pm.environment.get('supplied:' + scenarioId + ':programTypeDescriptor'));",
															"  pm.expect(responseItems[0].keyValues.educationOrganizationId).to.equal(pm.environment.get('known:localEducationAgencyId'));",
															"  pm.expect(responseItems[1].keyValues.programName).to.equal(pm.environment.get('supplied:' + scenarioId + ':programName'));",
															"  pm.expect(responseItems[1].keyValues.programTypeDescriptor).to.equal(pm.environment.get('supplied:' + scenarioId + ':programTypeDescriptor'));",
															"  pm.expect(responseItems[1].keyValues.educationOrganizationId).to.equal(pm.environment.get('known:localEducationAgencyId'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/deletes?minChangeVersion={{known:{{scenarioId}}:newestChangeVersion1}}&maxChangeVersion={{known:{{scenarioId}}:newestChangeVersion2}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"deletes"
													],
													"query": [
														{
															"key": "minChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion1}}"
														},
														{
															"key": "maxChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion2}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "When_retrieving_deleted_items",
							"item": [
								{
									"name": "When_retrieving_deleted_items_should_support_change_version_filter",
									"item": [
										{
											"name": "Initialize Program Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':programGuid1', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:localEducationAgencyId', 255901);",
															"pm.environment.set('supplied:'+scenarioId+':programName', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':programId', newGuid().substring(0,20));",
															"pm.environment.set('supplied:'+scenarioId+':programTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:programName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:programTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:programId}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Program Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid1}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"{{known:{{scenarioId}}:programGuid1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get AvailableChangeVersions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"const responseItem = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':newestChangeVersion1', responseItem.newestChangeVersion);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"changeQueries",
														"v1",
														"AvailableChangeVersions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize Program Data -Second one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':programGuid2', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':secondProgramName', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':secondProgramId', newGuid().substring(0,20));",
															"pm.environment.set('supplied:'+scenarioId+':secondProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:secondProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:secondProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:secondProgramId}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Program Data-Second one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid2}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"{{known:{{scenarioId}}:programGuid2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get AvailableChangeVersions Second one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"",
															"const responseItem = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':newestChangeVersion2', responseItem.newestChangeVersion);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"changeQueries",
														"v1",
														"AvailableChangeVersions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize Program Data -Third one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':programGuid3', pm.response.headers.one('Location').value.split(\"/\").pop());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':thirdProgramName', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':thirdProgramId', newGuid().substring(0,20));",
															"pm.environment.set('supplied:'+scenarioId+':thirdProgramTypeDescriptor', \"uri://ed-fi.org/ProgramTypeDescriptor#Athletics\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n     \"educationOrganizationReference\":{ \r\n      \"educationOrganizationId\":\"{{known:localEducationAgencyId}}\"\r\n   },\r\n   \"programName\":\"{{supplied:{{scenarioId}}:thirdProgramName}}\",\r\n   \"programTypeDescriptor\":\"{{supplied:{{scenarioId}}:thirdProgramTypeDescriptor}}\",\r\n   \"programId\":\"{{supplied:{{scenarioId}}:thirdProgramId}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Program Data-Third one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/{{known:{{scenarioId}}:programGuid3}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"{{known:{{scenarioId}}:programGuid3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get AvailableChangeVersions Third one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItem = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':newestChangeVersion3', responseItem.newestChangeVersion);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"changeQueries",
														"v1",
														"AvailableChangeVersions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Tracked Deletes Program  Data filter by min change version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItems = pm.response.json();",
															"",
															"pm.test(\"Should return only one deleted item\", () => {",
															"  pm.expect(responseItems.length).to.equal(1);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should return the requested minimum change version in the item returned\", () => {",
															"  pm.expect(responseItems[0].changeVersion).to.equal(pm.environment.get('known:' + scenarioId + ':newestChangeVersion3'));",
															"});",
															"",
															"pm.test(\"Should return the the deleted item associated with the requested minimum change version\", () => {",
															"  pm.expect(responseItems[0].id.replace(/\\-/g, '')).to.equal(pm.environment.get('known:' + scenarioId + ':programGuid3'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/deletes?minChangeVersion={{known:{{scenarioId}}:newestChangeVersion3}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"deletes"
													],
													"query": [
														{
															"key": "minChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Tracked Deletes Program  Data filter by max change version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItems = pm.response.json();",
															"",
															"pm.test(\"Should return greater than or equal to one record for responseItems length\", () => {",
															"  pm.expect(responseItems.length).to.be.gte(1);",
															"});",
															"",
															"const __ = require('lodash');",
															"",
															"pm.test(\"Should return the maximum change version as the last item of the response\", () => {",
															"  pm.expect(__.last(responseItems).changeVersion).to.equal(pm.environment.get('known:' + scenarioId + ':newestChangeVersion1'));",
															"  pm.expect(__.last(responseItems).id.replace(/\\-/g, '')).to.equal(pm.environment.get('known:' + scenarioId + ':programGuid1'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/deletes?maxChangeVersion={{known:{{scenarioId}}:newestChangeVersion1}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"deletes"
													],
													"query": [
														{
															"key": "maxChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Tracked Deletes Program  Data filter by min change version & max change version to the same change version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"  pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const responseItems = pm.response.json();",
															"",
															"pm.test(\"Should return only one record for responseItems length\", () => {",
															"  pm.expect(responseItems.length).to.equal(1);",
															"});",
															"",
															"pm.test(\"Should return the minimum change version and maximum change version  in the first item returned \", () => {",
															"  const scenarioId = pm.environment.get('scenarioId');",
															"  pm.expect(responseItems[0].changeVersion).to.equal(pm.environment.get('known:' + scenarioId + ':newestChangeVersion2'));",
															"  pm.expect(responseItems[0].id.replace(/\\-/g, '')).to.equal(pm.environment.get('known:' + scenarioId + ':programGuid2'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/programs/deletes?minChangeVersion={{known:{{scenarioId}}:newestChangeVersion2}}&maxChangeVersion={{known:{{scenarioId}}:newestChangeVersion2}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"programs",
														"deletes"
													],
													"query": [
														{
															"key": "minChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion2}}"
														},
														{
															"key": "maxChangeVersion",
															"value": "{{known:{{scenarioId}}:newestChangeVersion2}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Full Life Cycle with Change Queries",
			"item": [
				{
					"name": "Derived Resource School",
					"item": [
						{
							"name": "Get AvailableChangeVersions  Pre-create version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"const responseItem = pm.response.json();",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':precreateversion', responseItem.newestChangeVersion);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
											"function createScenarioId() { return newGuid().substring(0,5); }",
											"pm.environment.set('scenarioId', createScenarioId());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"changeQueries",
										"v1",
										"AvailableChangeVersions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create School Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:localEducationAgencyId', 255901);",
											"pm.environment.set('supplied:'+scenarioId+':schoolId',__.random(100000));",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-2001013454354');",
											"pm.environment.set('supplied:'+scenarioId+':educationOrganizationCategoryDescriptor', \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\");",
											"pm.environment.set('supplied:'+scenarioId+':gradeLevelDescriptor', \"uri://ed-fi.org/GradeLevelDescriptor#Adult Education\");",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Regular\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('known:'+scenarioId+':schoolGuid',pm.response.headers.one('Location').value.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get AvailableChangeVersions  Post-Create version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseItem = pm.response.json();",
											"const scenarioId = pm.environment.get('scenarioId');",
											"",
											"pm.test(\"Should created version greater than pre create version\", () => {",
											"    console.log(responseItem.newestChangeVersion);",
											"    console.log(parseInt(pm.environment.get('known:'+scenarioId+':precreateversion'),10));",
											"    pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:'+scenarioId+':precreateversion'));",
											"});",
											"",
											"pm.environment.set('known:'+scenarioId+':createdversion', responseItem.newestChangeVersion);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"changeQueries",
										"v1",
										"AvailableChangeVersions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update School Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const __ = require('lodash');",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.environment.set('supplied:'+scenarioId+':nameOfInstitution', 'SCH-456546');",
											"pm.environment.set('supplied:'+scenarioId+':schoolTypeDescriptor', \"uri://ed-fi.org/SchoolTypeDescriptor#Alternative\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"educationOrganizationCategories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\":  \"{{supplied:{{scenarioId}}:educationOrganizationCategoryDescriptor}}\"\r\n    }\r\n  ],\r\n   \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\":  \"{{supplied:{{scenarioId}}:gradeLevelDescriptor}}\"\r\n    }\r\n  ],\r\n  \"schoolId\":  \"{{supplied:{{scenarioId}}:schoolId}}\",\r\n  \"localEducationAgencyReference\": {\r\n    \"localEducationAgencyId\": \"{{known:localEducationAgencyId}}\"\r\n  },\r\n  \"nameOfInstitution\":  \"{{supplied:{{scenarioId}}:nameOfInstitution}}\",\r\n  \"schoolTypeDescriptor\": \"{{supplied:{{scenarioId}}:schoolTypeDescriptor}}\"\r\n}"
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get AvailableChangeVersions  Updated version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"const responseItem = pm.response.json();",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.test(\"Should updated version greater than created version\", () => {",
											"    ",
											"    pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:'+scenarioId+':createdversion'));",
											"});",
											"pm.environment.set('known:'+scenarioId+':updatedversion', responseItem.newestChangeVersion);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"changeQueries",
										"v1",
										"AvailableChangeVersions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  School Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Delete  School Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.expect(pm.response.code).to.equal(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/{{known:{{scenarioId}}:schoolGuid}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"{{known:{{scenarioId}}:schoolGuid}}"
									]
								},
								"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
							},
							"response": []
						},
						{
							"name": "Get AvailableChangeVersions  Deleted version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"const responseItem = pm.response.json();",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.test(\"Should deleted version greater than updated version\", () => {",
											"    ",
											"    pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:'+scenarioId+':updatedversion'));",
											"});",
											"pm.environment.set('known:'+scenarioId+':deletedversion', responseItem.newestChangeVersion);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"changeQueries",
										"v1",
										"AvailableChangeVersions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tracked Deletes SchoolsData filter by min change version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"/*",
											"ODS-4087 JIRA ticket- Change Queries does not capture deletes on derived resources",
											"known bug with deleting derived (non-descriptor) entities which is not inserting data using Trigger for derived table",
											"So it's not returning any data for this request",
											"",
											"const responseItems = pm.response.json();",
											"pm.test(\"Should return only one record for responseItems length\", () => {",
											"   pm.expect(responseItems.length).to.equal(1);   ",
											"});",
											"",
											"const scenarioId = pm.environment.get('scenarioId');",
											"pm.test(\"Should return the minimum change version in the first item returned \", () => {",
											"     pm.expect(responseItems[0].ChangeVersion).to.equal(pm.environment.get('known:'+scenarioId+':deletedversion'));  ",
											"     pm.expect(responseItems[0].Id.replace(/\\-/g,'')).to.equal(pm.environment.get('known:'+scenarioId+':schoolGuid'));   ",
											"});",
											"*/ "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools/deletes?minChangeVersion={{known:{{scenarioId}}:deletedversion}}",
									"host": [
										"{{ApiBaseUrl}}"
									],
									"path": [
										"data",
										"v3",
										"ed-fi",
										"schools",
										"deletes"
									],
									"query": [
										{
											"key": "minChangeVersion",
											"value": "{{known:{{scenarioId}}:deletedversion}}"
										},
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Derived Resource Local Education Agency",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Initialize stateEducationAgency Data for Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:stateEducationAgencyId', pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:stateEducationAgency:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateEducationAgencyId\": \"{{supplied:stateEducationAgencyId}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#State Education Agency\"\r\n    }\r\n  ],\r\n  \"nameOfInstitution\": \"State-31\",\r\n  \"shortNameOfInstitution\": \"S31\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/stateEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"stateEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get AvailableChangeVersions  Pre-create version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"pm.environment.set('known:precreateversion', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create localEducationAgency Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:localEducationAgencyId', pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.environment.set('known:localEducationAgency:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{supplied:localEducationAgencyId}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Local Education Agency\"\r\n    }\r\n  ],\r\n  \"stateEducationAgencyReference\": {\r\n    \"stateEducationAgencyId\": \"{{supplied:stateEducationAgencyId}}\"\r\n  },\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Charter\",\r\n  \"nameOfInstitution\": \"LEA-100001\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								}
							]
						},
						{
							"name": "Tests",
							"item": [
								{
									"name": "Get AvailableChangeVersions  Post-Create version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"",
													"pm.test(\"Should created version greater than pre create version\", () => {",
													"  pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:precreateversion'));",
													"});",
													"",
													"pm.environment.set('known:createdversion', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update localEducationAgency Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"  pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"localEducationAgencyId\": \"{{supplied:localEducationAgencyId}}\",\r\n  \"categories\": [\r\n    {\r\n      \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Education Service Center\"\r\n    }\r\n  ],\r\n  \"localEducationAgencyCategoryDescriptor\": \"uri://ed-fi.org/LocalEducationAgencyCategoryDescriptor#Independent\",\r\n  \"nameOfInstitution\": \"LEA-Test\"\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies/{{known:localEducationAgency:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies",
												"{{known:localEducationAgency:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get AvailableChangeVersions  Updated version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"",
													"pm.test(\"Should updated version greater than created version\", () => {",
													"  pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:createdversion'));",
													"});",
													"",
													"pm.environment.set('known:updatedversion', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  localEducationAgencies Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies/{{known:localEducationAgency:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies",
												"{{known:localEducationAgency:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Delete  localEducationAgencies Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"  pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies/{{known:localEducationAgency:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies",
												"{{known:localEducationAgency:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get AvailableChangeVersions after delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"",
													"pm.test(\"Should deleted version greater than updated version\", () => {",
													"  pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:updatedversion'));",
													"});",
													"",
													"pm.environment.set('known:deletedversion', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tracked Deletes  localEducationAgency filter by min change version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItems = pm.response.json();",
													"pm.test(\"Should return only one record for responseItems length\", () => {",
													"  pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.test(\"Should return the minimum change version in the first item returned \", () => {",
													"  pm.expect(responseItems[0].changeVersion).to.equal(pm.environment.get('known:deletedversion'));",
													"  pm.expect(responseItems[0].id).to.equal(pm.environment.get('known:localEducationAgency:id'));",
													"});",
													"",
													"/*",
													"ODS-4087 JIRA ticket- Change Queries does not capture deletes on derived resources",
													"known bug with deleting derived (non-descriptor) entities which is not inserting data using Trigger for derived table",
													"So it's not returning any data for this request",
													"",
													"});",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/localEducationAgencies/deletes?minChangeVersion={{known:deletedversion}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"localEducationAgencies",
												"deletes"
											],
											"query": [
												{
													"key": "limit",
													"value": "100",
													"disabled": true
												},
												{
													"key": "minChangeVersion",
													"value": "{{known:deletedversion}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Delete  stateEducationAgencies Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"  pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/stateEducationAgencies/{{known:stateEducationAgency:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"stateEducationAgencies",
												"{{known:stateEducationAgency:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Regular Resource Course",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Get AvailableChangeVersions  Pre-create version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"",
													"pm.environment.set('known:precreateversion', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Course Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"  pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.environment.set('known:course:id', pm.response.headers.one('Location').value.split(\"/\").pop());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('supplied:courseCode', pm.variables.replaceIn(\"{{$guid}}\"));",
													"pm.environment.set('supplied:educationOrganizationId', 255901);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"courseCode\":\"{{supplied:courseCode}}\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  },\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\": \"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\",\r\n      \"assigningOrganizationIdentificationCode\": \"CSSC course code\",\r\n      \"identificationCode\": \"CSSC course code\"\r\n    }\r\n  ],\r\n  \"courseDefinedByDescriptor\": \"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\",\r\n  \"courseDescription\": \"Algebra I\",\r\n  \"courseTitle\": \"Algebra I\",\r\n  \"numberOfParts\": 2\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Tests",
							"item": [
								{
									"name": "Get AvailableChangeVersions  Post-Create version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"",
													"pm.test(\"Created version should be greater than pre-created version\", () => {",
													"  pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:precreateversion'));",
													"});",
													"",
													"pm.environment.set('known:createdversion', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Course Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('supplied:'+scenarioId+':courseDefinedByDescriptor',\"uri://ed-fi.org/CourseDefinedByDescriptor#National Organization\");",
													"pm.environment.set('supplied:'+scenarioId+':courseDescription',\"Algebra II\");",
													"pm.environment.set('supplied:'+scenarioId+':courseTitle',\"Algebra II\");",
													"pm.environment.set('supplied:'+scenarioId+':courseIdentificationSystemDescriptor',\"uri://ed-fi.org/CourseIdentificationSystemDescriptor#SCED course code\");",
													"pm.environment.set('supplied:'+scenarioId+':assigningOrganizationIdentificationCode',\"SCED course code\");",
													"pm.environment.set('supplied:'+scenarioId+':identificationCode',\"SCED course code\");",
													"pm.environment.set('supplied:'+scenarioId+':courseCode',\"SCED course code\");",
													"pm.environment.set('supplied:'+scenarioId+':NumberOfParts',2);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"courseCode\": \"{{supplied:courseCode}}\",\r\n  \"educationOrganizationReference\": {\r\n    \"educationOrganizationId\": 255901\r\n  },\r\n  \"identificationCodes\": [\r\n    {\r\n      \"courseIdentificationSystemDescriptor\": \"uri://ed-fi.org/CourseIdentificationSystemDescriptor#CSSC course code\",\r\n      \"assigningOrganizationIdentificationCode\": \"CSSC course code\",\r\n      \"identificationCode\": \"CSSC course code\"\r\n    }\r\n  ],\r\n  \"courseDefinedByDescriptor\": \"uri://ed-fi.org/CourseDefinedByDescriptor#LEA\",\r\n  \"courseDescription\": \"Algebra I\",\r\n  \"courseTitle\": \"Algebra I\",\r\n  \"numberOfParts\": 3\r\n}"
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:course:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses",
												"{{known:course:id}}"
											]
										},
										"description": "StartFragment\n\n```\n\n{\n   \"identificationCodes\": [\n    {\n      \"courseIdentificationSystemDescriptor\":\"{{supplied:{{scenarioId}}:courseIdentificationSystemDescriptor}}\",\n      \"assigningOrganizationIdentificationCode\": \"{{supplied:{{scenarioId}}:assigningOrganizationIdentificationCode}}\",\n      \"identificationCode\": \"{{supplied:{{scenarioId}}:identificationCode}}\"\n    }\n  ],\n  \"courseDefinedByDescriptor\": \"{{supplied:{{scenarioId}}:courseDefinedByDescriptor}}\",\n  \"courseDescription\": \"{{supplied:{{scenarioId}}:courseDescription}}\",\n  \"courseTitle\": \"{{supplied:{{scenarioId}}:courseTitle}}\",\n  \"numberOfParts\":\"{{supplied:{{scenarioId}}:NumberOfParts}}\"\n}\n\n```\n\nOld body. Delete this."
									},
									"response": []
								},
								{
									"name": "Get AvailableChangeVersions  Updated version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItem = pm.response.json();",
													"",
													"pm.test(\"Should updated version greater than created version\", () => {",
													"  pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:createdversion'));",
													"});",
													"",
													"pm.environment.set('known:updatedversion', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  Course Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:course:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses",
												"{{known:course:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Delete  Course Data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"  pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/{{known:course:id}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses",
												"{{known:course:id}}"
											]
										},
										"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
									},
									"response": []
								},
								{
									"name": "Get AvailableChangeVersions  Deleted version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"const responseItem = pm.response.json();",
													"",
													"pm.test(\"Should deleted version greater than updated version\", () => {",
													"  pm.expect(responseItem.newestChangeVersion).to.be.gt(pm.environment.get('known:updatedversion'));",
													"});",
													"",
													"pm.environment.set('known:deletedversion', responseItem.newestChangeVersion);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/changeQueries/v1/AvailableChangeVersions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"changeQueries",
												"v1",
												"AvailableChangeVersions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Tracked Deletes Course Data filter by min change version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseItems = pm.response.json();",
													"",
													"pm.test(\"Should return only one record for responseItems length\", () => {",
													"  pm.expect(responseItems.length).to.equal(1);",
													"});",
													"",
													"const responseItem = responseItems[0];",
													"",
													"pm.test(\"Should return the minimum change version in the first item returned \", () => {",
													"  pm.expect(responseItem.changeVersion).to.equal(pm.environment.get('known:deletedversion'));",
													"  pm.expect(responseItem.id).to.equal(pm.environment.get('known:course:id'));",
													"  pm.expect(responseItem.keyValues.courseCode).to.equal(pm.environment.get('supplied:courseCode'));",
													"  pm.expect(responseItem.keyValues.educationOrganizationId).to.equal(255901);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses/deletes?minChangeVersion={{known:deletedversion}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"courses",
												"deletes"
											],
											"query": [
												{
													"key": "minChangeVersion",
													"value": "{{known:deletedversion}}"
												},
												{
													"key": "limit",
													"value": "100",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Clean up Environment Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
													"_.chain(_.keys(pm.environment.toObject()))\r",
													"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
													"  .each(k => pm.environment.unset(k)).value();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}",
											"host": [
												"{{ApiBaseUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Clean Up Test Data",
			"item": [
				{
					"name": "Clean up Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remove all environment variables that start with \"known:\" or \"supplied:\"\r",
									"_.chain(_.keys(pm.environment.toObject()))\r",
									"  .filter(x => _.startsWith(x, 'known:') || _.startsWith(x, 'supplied:'))\r",
									"  .each(k => pm.environment.unset(k)).value();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}",
							"host": [
								"{{ApiBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken_255901}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"CreateAccessToken(\"TokenExpiry_255901\",\"AccessToken_255901\",\"ApiKey_255901\",\"ApiSecret_255901\")",
					"",
					"",
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"function CreateAccessToken(TokenExpiry,AccessToken,ApiKey, ApiSecret)",
					"                  {",
					"let tokenExpiration = pm.environment.get(TokenExpiry);",
					"let currentToken = pm.environment.get(AccessToken);",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get(ApiKey);",
					"    let clientSecret = pm.environment.get(ApiSecret);",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        // console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(AccessToken, newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set(TokenExpiry, expiryDate.getTime());",
					"    });",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}