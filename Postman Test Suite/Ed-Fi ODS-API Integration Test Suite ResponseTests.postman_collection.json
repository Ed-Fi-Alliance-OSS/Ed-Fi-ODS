{
	"info": {
		"_postman_id": "eb1bbe1d-4598-40df-a17e-ca38b342f9c3",
		"name": "Ed-Fi ODS/API Integration Test Suite ResponseTests",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ResponseTests",
			"item": [
				{
					"name": "Initialize Education Organization Ids",
					"item": [
						{
							"name": "Initialize Education Organization Ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "112271e1-3ff0-4379-8cab-170739feb315",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "944aaba2-acfc-4474-9141-b367686109a6",
										"exec": [
											"pm.environment.set('known:localEducationAgencyId', 255901);\r",
											"pm.environment.set('known:schoolId', 255901001);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "GetAll_200_Tests",
							"item": [
								{
									"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
									"item": [
										{
											"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Not_Supplied_Should_Not_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Not_Supplied_Should_Not_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should undefined for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(pm.response.headers.one('Total-Count')).to.be.a('undefined');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Supplied_As_False_Should_Not_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Supplied_As_False_Should_Not_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should undefined for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(pm.response.headers.one('Total-Count')).to.be.a('undefined');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=false",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "totalCount",
															"value": "false"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Supplied_As_True_Should_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Supplied_As_True_Should_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should return value for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     const totalCount=pm.response.headers.one('Total-Count').value;",
															"    pm.expect(Number(totalCount)).to.be.greaterThan(0);     ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "totalCount",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_No_Parameters_are_supplied_should_return_25_results",
									"item": [
										{
											"name": "When_No_Parameters_are_supplied_should_return_25_results",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_No_Resources_Exist_Should_Return_Empty_Collection_With_200",
									"item": [
										{
											"name": "When_No_Resources_Exist_Should_Return_Empty_Collection_With_200",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return empty collection for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(0);",
															"});",
															"",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationorganizationnetworks",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"educationorganizationnetworks"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Offset_Value_Supplied_Should_Return_Next_Set_of_Resources",
									"item": [
										{
											"name": "Course with Limit param",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"const __ = require('lodash');",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															"",
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItems = pm.response.json();",
															"pm.environment.set('known:'+scenarioId+':limitCourseResponse',__.first(responseItems).id);",
															"",
															"console.log(__.first(responseItems).id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Course with Limit & offset param",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"const __ = require('lodash');",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItems = pm.response.json();",
															"pm.environment.set('known:'+scenarioId+':limitoffsetCourseResponse',__.first(responseItems).id);",
															"console.log(__.first(responseItems).id);",
															"",
															"",
															"pm.test(\"Should not be same as course with Limit response\", () => {",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    ",
															"     const limitCourseResponse=pm.environment.get('known:'+scenarioId+':limitCourseResponse'); ",
															"     const limitoffsetCourseResponse=pm.environment.get('known:'+scenarioId+':limitoffsetCourseResponse'); ",
															"     pm.expect(limitCourseResponse).to.not.equal(limitoffsetCourseResponse);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10&Offset=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "Offset",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetAll_400_Tests",
							"item": [
								{
									"name": "When_Given_a_limit_0_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_0_Should_return_400",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and 100\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and 100.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=0",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_101_or_more_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_101_or_more_Should_return_400",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and 100\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and 100.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=101",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "101"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and 100\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and 100.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=-1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "-1"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByExample_200_Tests",
							"item": [
								{
									"name": "Initialize Test Data ",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data for Get Request for 2nd one",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', \"Jane\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request for 2nd one",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data for Get Request for 3rd one",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurnameNew',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"Jefe\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurnameNew}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request for 3rd one",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data birthdate for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const __ = require('lodash');",
															"const responseItems = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':birthDate', __.first(responseItems)[\"birthDate\"]);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "731a1b6b-ea3e-4132-b1ee-a989186fa119",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "731e4a6b-c35a-49e1-b097-aced0e7822c5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 2 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
									"item": [
										{
											"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Offset_Value_Supplied_Should_Return_Next_Set_of_Resources",
									"item": [
										{
											"name": "Get Request for Student with limit and Lastsurname param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"const __ = require('lodash');",
															"const responseItems = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':id', __.first(responseItems)[\"id\"]);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Student with offset ,limit and Lastsurname param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Should not match with this response\", () => {",
															"    ",
															"    const __ = require('lodash');",
															"    const responseItems = pm.response.json();",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    pm.expect(__.first(responseItems)[\"id\"]).to.be.not.equal(pm.environment.get('known:'+scenarioId+':id'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1&Offset=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														},
														{
															"key": "Offset",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_An_Invalid_Example_Should_Return_No_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_An_Invalid_Example_Should_Return_No_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return no record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_With_Multiple_Properties_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&FirstName=John",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "FirstName",
															"value": "John"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_With_Non_Key_Properties_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_With_Non_Key_Properties_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Should match with birthdate\", () => {",
															"   const responseItems = pm.response.json();",
															"   const __ = require('lodash');",
															"   const scenarioId = pm.environment.get('scenarioId');",
															"   __.each(responseItems, (responseItem) => {",
															"    pm.expect(responseItem.birthDate).to.be.equal(pm.environment.get('known:'+scenarioId+':birthDate'));",
															"   });",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?limit=50&BirthDate={{known:{{scenarioId}}:birthDate}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "BirthDate",
															"value": "{{known:{{scenarioId}}:birthDate}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByExample_400_Tests",
							"item": [
								{
									"name": "When_Given_a_limit_0_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_0_Should_return_400",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and 100\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and 100.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4&limit=0",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														},
														{
															"key": "limit",
															"value": "0"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_101_or_more_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_101_or_more_Should_return_400",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and 100\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and 100.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4&limit=101",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														},
														{
															"key": "limit",
															"value": "101"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and 100\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and 100.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4&limit=-1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														},
														{
															"key": "limit",
															"value": "-1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByKey_200_Tests",
							"item": [
								{
									"name": "When_Given_A_Valid_Key_Should_Return_Resource_For_That_Key",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "When_Given_A_Valid_Key_Should_Return_Resource_For_That_Key",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/?StudentUniqueId={{known:{{scenarioId}}:studentUniqueId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														""
													],
													"query": [
														{
															"key": "StudentUniqueId",
															"value": "{{known:{{scenarioId}}:studentUniqueId}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_a_resource_by_id",
							"item": [
								{
									"name": "api_should_succeed_with_200_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_200_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"     pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_a_resource_by_id_that_doesnt_exist",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentGuid',  newGuid());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{supplied:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{supplied:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_an_unchanged_resource_by_id",
							"item": [
								{
									"name": "api_should_succeed_with_304_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"     pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_304_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 304\", () => {",
															"    pm.expect(pm.response.code).to.equal(304);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-None-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ReferenceLinkTests",
							"item": [
								{
									"name": "When_getting_resources_with_links",
									"item": [
										{
											"name": "Should_provide_the_link_for_an_abstract_reference_to_the_concrete_resource_with_a_non_default_id_in_the_GetById_URL_format",
											"item": [
												{
													"name": "Should_provide_the_link_for_an_abstract_reference_to_the_concrete_resource_with_a_non_default_id_in_the_GetById_URL_format",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "86b9ddc7-c8d8-462e-9e93-c5a7d49d2176",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Should return 1 item\", () => {",
																	"     const responseItems = pm.response.json();",
																	"     pm.expect(responseItems.length).to.equal(1);",
																	"});",
																	"",
																	"const __ = require('lodash');",
																	"",
																	"pm.test(\"Should return EducationOrganizationReference  field to verify rel and herf of link \", () => {",
																	"     const responseItems = pm.response.json();",
																	"       __.each(responseItems, (responseItem) => {",
																	"       ",
																	"       const rel=responseItem.educationOrganizationReference.link.rel;",
																	"       const href=responseItem.educationOrganizationReference.link.href;",
																	"       const  lastHrefSegment=href.split(\"/\").pop();",
																	"         pm.expect(rel).to.satisfy(function(relValue) { return relValue ==='School' || relValue ==='LocalEducationAgency' ; });",
																	"         pm.expect(href).to.satisfy(function(hrefValue) { return hrefValue.includes('/ed-fi/schools') || hrefValue.includes('/ed-fi/localEducationAgencies') ; });",
																	"         pm.expect(lastHrefSegment.length).to.equal(32);",
																	"         ",
																	"     });",
																	"});",
																	"",
																	"    "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "de55b320-a80f-4c41-90a2-3b10b7bfe58b",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=1",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Should_provide_the_link_for_an_inherited_reference_with_a_non_default_id_in_the_GetById_URL_format",
											"item": [
												{
													"name": "Should_provide_the_link_for_an_inherited_reference_with_a_non_default_id_in_the_GetById_URL_format",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "86b9ddc7-c8d8-462e-9e93-c5a7d49d2176",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Should return 1 item\", () => {",
																	"     const responseItems = pm.response.json();",
																	"     pm.expect(responseItems.length).to.equal(1);",
																	"});",
																	"",
																	"const __ = require('lodash');",
																	"",
																	"pm.test(\"Should return studentReference  field to verify rel and herf of link \", () => {",
																	"     const responseItems = pm.response.json();",
																	"       __.each(responseItems, (responseItem) => {",
																	"       ",
																	"       const rel=responseItem.studentReference.link.rel;",
																	"       const href=responseItem.studentReference.link.href;",
																	"       const  lastHrefSegment=href.split(\"/\").pop();",
																	"        pm.expect(rel).to.equal('Student');",
																	"        pm.expect(href).to.include('/ed-fi/students');",
																	"        pm.expect(lastHrefSegment.length).to.equal(32);",
																	"         ",
																	"     });",
																	"});",
																	"",
																	"    "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "de55b320-a80f-4c41-90a2-3b10b7bfe58b",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentProgramAssociations?limit=1",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"StudentProgramAssociations"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Post",
					"item": [
						{
							"name": "when_posting_a_resource",
							"item": [
								{
									"name": "api_should_succeed_with_201_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "when_posting_a_resource",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"    const __ = require('lodash');",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"   ",
															"    pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"      ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6de9af37-6d98-4dfd-8abb-45882100fb4e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f54f5ac8-0783-4ec2-a658-dc501644203b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_missing_a_required_value",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that Validation of 'Student' failed.LastSurname is required.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"LastSurname is required.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_posting_a_resource_with_decimal_overflow",
							"item": [
								{
									"name": "api_should_fail_with_500_code",
									"item": [
										{
											"name": "api_should_fail_with_500_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that The request is invalid.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
															"pm.environment.set('supplied:'+scenarioId+':YearsOfPriorProfessionalExperience', \"1123.2345498765\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\",\r\n  \"YearsOfPriorProfessionalExperience\":\"{{supplied:{{scenarioId}}:YearsOfPriorProfessionalExperience}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_null_collection",
							"item": [
								{
									"name": "api_should_still_succeed_with_201_code",
									"item": [
										{
											"name": "api_should_still_succeed_with_201_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"pm.environment.set('scenarioId',createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															"let enteredUSDate=new Date();",
															"enteredUSDate = enteredUSDate.addMonths(-20);",
															"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_null_parameters",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid because it is missing a request body.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"The request is invalid because it is missing a request body.\");",
															"});",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_an_existing_resource",
							"item": [
								{
									"name": "api_should_succeed_with_200_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															"let enteredUSDate=new Date();",
															"enteredUSDate = enteredUSDate.addMonths(-20);",
															"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':schoolId',255901001);",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{supplied:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_200_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', \"GotMarried\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_optional_references_with_key_unification",
							"item": [
								{
									"name": "api_should_save_the_unified_key_value_when_either_reference_is_provided",
									"item": [
										{
											"name": "Initialize Calendar and SchoolYear",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c154b14d-b2a7-4cd1-9bd0-4c46d52bab1d",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should have test data available\", () => {",
															"   pm.expect(pm.response.json().length).to.be.greaterThan(0); ",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItem = pm.response.json()[0];",
															"",
															"pm.environment.set('known:'+scenarioId+':schoolId', responseItem.schoolReference.schoolId);",
															"pm.environment.set('known:'+scenarioId+':schoolYear', responseItem.schoolYearTypeReference.schoolYear);",
															"pm.environment.set('known:'+scenarioId+':calendarCode', responseItem.calendarCode);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a46c7448-563c-4dd8-a810-481a81d2d98b",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"pm.environment.set('scenarioId', createScenarioId());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/calendars",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"calendars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize Student Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId', pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create StudentSchoolAssociation with neither optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentSchoolAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_neither_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should not have either optional reference\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference).to.equal(undefined);",
															"    pm.expect(responseItem.calendarReference).to.equal(undefined);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with first optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolYearTypeReference\": {\r\n     \"schoolYear\": \"{{known:{{scenarioId}}:schoolYear}}\"\r\n   },\r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_first_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should have first optional reference set with unified key value\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference.schoolYear).to.equal(pm.environment.get('known:'+scenarioId+':schoolYear'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with neither optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_neither_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should not have either optional reference\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference).to.equal(undefined);",
															"    pm.expect(responseItem.calendarReference).to.equal(undefined);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with second optional reference Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"calendarReference\": {\r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\",\r\n      \"schoolYear\": \"{{known:{{scenarioId}}:schoolYear}}\",\r\n      \"calendarCode\": \"{{known:{{scenarioId}}:calendarCode}}\"\r\n   },\r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_second_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should have second optional reference set with unified key value\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.calendarReference.schoolYear).to.equal(pm.environment.get('known:'+scenarioId+':schoolYear'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ef9ebaba-f66c-4bd9-b94d-a4a593866eaa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a9abf24-2100-4179-b451-7bc08258d16e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_required_unified_keys_with_different_source_values",
							"item": [
								{
									"name": "api_should_fail_with_a_400_bad_request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8fdacc-7686-4f84-9a44-f633afce6f54",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should indicate the source values are inconsistent\", () => {",
													"    pm.expect(pm.response.json().message).to.contain(\"Supplied values for unified key property 'schoolId' on 'Grade' are not consistent\");",
													"});",
													"",
													"pm.test(\"Should include the inconsistent values and their location in the resource\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    pm.expect(message).to.contain(\"gradingPeriodReference.schoolId = 777\");",
													"    pm.expect(message).to.contain(\"studentSectionAssociationReference.schoolId = 888\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"gradingPeriodReference\": {\r\n    \"gradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\",\r\n    \"periodSequence\": 1,\r\n    \"schoolId\": 777,\r\n    \"schoolYear\": 2011\r\n  },\r\n  \"studentSectionAssociationReference\": {\r\n    \"beginDate\": \"2010-08-23T00:00:00Z\",\r\n    \"localCourseCode\": \"ALG-1\",\r\n    \"schoolId\": 888,\r\n    \"schoolYear\": 2011,\r\n    \"sectionIdentifier\": \"25590100102Trad220ALG112011\",\r\n    \"sessionName\": \"2010-2011 Fall Semester\",\r\n    \"studentUniqueId\": \"604822\"\r\n  },\r\n  \"gradeTypeDescriptor\": \"uri://ed-fi.org/GradeTypeDescriptor#Grading Period\",\r\n  \"numericGradeEarned\": 63,\r\n  \"learningStandardGrades\": [\r\n    {\r\n      \"learningStandardReference\": {\r\n        \"learningStandardId\": \"111.32.NA.A.1.D\"\r\n      },\r\n      \"numericGradeEarned\": 63\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/grades",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"grades"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ff6a9f-6041-4717-962b-a8c3506f761f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3329278f-7b77-4e15-a1eb-9ddcdb45c932",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_contextual_unified_keys_with_different_source_values",
							"item": [
								{
									"name": "api_should_fail_with_a_400_bad_request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8fdacc-7686-4f84-9a44-f633afce6f54",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should indicate the source values are inconsistent\", () => {",
													"    pm.expect(pm.response.json().message).to.contain(\"Supplied values for unified key property 'schoolId' on 'BellScheduleClassPeriod' are not consistent\");",
													"});",
													"",
													"pm.test(\"Should include the inconsistent values and their locations in the resource\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    pm.expect(message).to.contain(\"schoolId (from parent context) = 777\");",
													"    pm.expect(message).to.contain(\"classPeriodReference.schoolId = 888\");",
													"    pm.expect(message).to.contain(\"classPeriodReference.schoolId = 999\");",
													"});",
													"",
													"pm.test(\"Should not include multiple messages for the same value mismatches\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    let firstPos = message.indexOf(\"classPeriodReference.schoolId = 999\");",
													"    pm.expect(firstPos).to.be.greaterThan(0);",
													"    ",
													"    let nextPos = message.indexOf(\"classPeriodReference.schoolId = 999\", firstPos + 1);",
													"    pm.expect(nextPos).to.be.lessThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": 777\r\n  },\r\n  \"bellScheduleName\": \"Normal Schedule\",\r\n  \"endTime\": \"16:00:00\",\r\n  \"startTime\": \"08:15:00\",\r\n  \"totalInstructionalTime\": 325,\r\n  \"classPeriods\": [\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 888,\r\n        \"classPeriodName\": \"01 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"02 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"03 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"04 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"05 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"06 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"07 - Traditional\"\r\n      }\r\n    }\r\n  ],\r\n  \"dates\": [],\r\n  \"gradeLevels\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ff6a9f-6041-4717-962b-a8c3506f761f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3329278f-7b77-4e15-a1eb-9ddcdb45c932",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_contextual_unified_keys_without_a_value",
							"item": [
								{
									"name": "api_should_indicate_success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8fdacc-7686-4f84-9a44-f633afce6f54",
												"exec": [
													"pm.test(\"Status code is 200/201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": {{known:schoolId}}\r\n  },\r\n  \"bellScheduleName\": \"Normal Schedule\",\r\n  \"endTime\": \"16:00:00\",\r\n  \"startTime\": \"08:15:00\",\r\n  \"totalInstructionalTime\": 325,\r\n  \"classPeriods\": [\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"01 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"02 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"03 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"04 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"05 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"06 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"07 - Traditional\"\r\n      }\r\n    }\r\n  ],\r\n  \"dates\": [],\r\n  \"gradeLevels\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_return_all_child_items_with_contextual_unified_key_values_included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8fdacc-7686-4f84-9a44-f633afce6f54",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return all saved children with the contextual unified key value included\", () => {",
													"    const responseItem = pm.response.json()[0];",
													"    ",
													"    const __ = require('lodash');",
													"    ",
													"    const schoolId = responseItem.schoolReference.schoolId;",
													"    ",
													"    let childItemVerified = false;",
													"    ",
													"    _.all(responseItem.classPeriods, cp => {",
													"        pm.expect(cp.classPeriodReference.schoolId).to.equal(schoolId);",
													"        childItemVerified = true;",
													"    });",
													"    ",
													"    pm.expect(childItemVerified, \"No child items present to be verified.\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules?schoolId=255901001&bellScheduleName=Normal Schedule",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901001"
												},
												{
													"key": "bellScheduleName",
													"value": "Normal Schedule"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ff6a9f-6041-4717-962b-a8c3506f761f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3329278f-7b77-4e15-a1eb-9ddcdb45c932",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_partially_formed_optional_reference",
							"item": [
								{
									"name": "Initialize Staff reference",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ebd9069d-0672-47dd-ad31-d4ec0e265b33",
												"exec": [
													"const uuid = require('uuid');",
													"",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ff959c18-d58b-4fe8-bf4a-669244ace668",
												"exec": [
													"pm.test(\"Should indicate success\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);    ",
													"})",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId', pm.response.json()[0].staffUniqueId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?limit=1",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_indicate_success_when_saving_resource_with_partially_formed_optional_reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8fdacc-7686-4f84-9a44-f633afce6f54",
												"exec": [
													"pm.test(\"Status code is 200/201 indicating success with saving resource with partially formed optional reference\", () => {",
													"    // NOTE: This behavior will change in future version of the API, becoming a 400 Bad Request with partially formed references",
													"    pm.expect(pm.response.code).to.oneOf([200, 201]);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffSchoolAssociationGuid', pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"calendarReference\": {\r\n  \t\"calendarCode\": \"Ignored Due To Missing SchoolId\",\r\n  \t\"schoolYear\": 1234\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n  },\r\n  \"programAssignmentDescriptor\": \"uri://ed-fi.org/ProgramAssignmentDescriptor#Regular Education\",\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Other\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_not_save_partially_formed_references",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8fdacc-7686-4f84-9a44-f633afce6f54",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the partially formed reference\", () => {",
													"   pm.expect(pm.response.json().calendarReference).to.equal(undefined);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSchoolAssociations/{{known:{{scenarioId}}:staffSchoolAssociationGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSchoolAssociations",
												"{{known:{{scenarioId}}:staffSchoolAssociationGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Put",
					"item": [
						{
							"name": "when_putting_a_resource_missing_a_required_value",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that Validation of 'Student' failed.LastSurname is required.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"LastSurname is required.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_invalid_state",
							"item": [
								{
									"name": "api_should_fail_with_400_bad_request",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_400_bad_request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that Unable to resolve value '00' to an existing 'CountryDescriptor' resource.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Unable to resolve value '00' to an existing 'CountryDescriptor' resource\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"BirthCountryDescriptor\":\"00\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_matching_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															"pm.test(\"Should return an ETag header with an updated ETag value.\", () => {",
															"   ",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    let eTagValue =pm.response.headers.one('ETag').value;",
															"    pm.expect(pm.response.headers.one('ETag').value).to.not.equals( pm.environment.get('known:'+scenarioId+':ETag'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_mismatched_etag",
							"item": [
								{
									"name": "api_should_fail_with_412_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_412_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 412\", () => {",
															"    pm.expect(pm.response.code).to.equal(412);",
															"});",
															"pm.test(\"Should return a message indicating that Resource was modified by another consumer.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource was modified by another consumer\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_mismatched_id",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															"pm.test(\"Should return a message indicating that Resource to update was not found.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource to update was not found\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':studentGuid',newGuid());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_no_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let eTagValue =pm.response.headers.one('ETag').value;",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															"pm.test(\"Should return an ETag header with an updated ETag value\", () => {",
															"   ",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    let eTagValue =pm.response.headers.one('ETag').value;",
															"    pm.expect(pm.response.headers.one('ETag').value).to.not.equals( pm.environment.get('known:'+scenarioId+':ETag'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_null_parameters",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Put Request with MalformedId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const studentGuid =pm.environment.get('known:'+scenarioId+':studentGuid');",
															"pm.environment.set('supplied:'+scenarioId+':MalformedId',studentGuid.substring(0, 1));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:MalformedId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:MalformedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put Request without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid because it is missing a request body\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid because it is missing a request body.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put Request with MalformedId and without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:MalformedId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:MalformedId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "when_deleting_a_resource",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_would_break_referential_integrity",
							"item": [
								{
									"name": "api_should_fail_with_409_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Delete Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const moment = require('moment');",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_409_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 409\", () => {",
															"    pm.expect(pm.response.code).to.equal(409);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_that_doesnt_exist",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':programdGuid', newGuid());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Programs/{{supplied:{{scenarioId}}:programdGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Programs",
														"{{supplied:{{scenarioId}}:programdGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_a_malformed_id",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const programdGuid =newGuid();",
															"pm.environment.set('supplied:'+scenarioId+':programdGuid', programdGuid.substr(0,3) + '-' + programdGuid.substr(3+1));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Programs/{{supplied:{{scenarioId}}:programdGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Programs",
														"{{supplied:{{scenarioId}}:programdGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_an_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															"",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_mismatched_etag",
							"item": [
								{
									"name": "api_should_fail_with_412_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Delete Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c9b944-cedb-4e13-8897-195b24f081b2",
														"exec": [
															"const moment = require('moment');",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c2af725-2ea5-433b-b390-9ac1293b0443",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_412_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ceed769-2e79-4cb3-93c0-123bcb213366",
														"exec": [
															"pm.test(\"Status code is 412\", () => {",
															"    pm.expect(pm.response.code).to.equal(412);",
															"});",
															"pm.test(\"Should return a message indicating that Resource was modified by another consume.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource was modified by another consumer\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f6b3d716-aa54-4236-8f15-8c11d3330a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up Test Data",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "112271e1-3ff0-4379-8cab-170739feb315",
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"const keys = __.keys(pm.environment.toObject());\r",
											"console.log('Initial keys: ' + JSON.stringify(keys));\r",
											"\r",
											"const keysToRemove = __.filter(keys, x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'));\r",
											"\r",
											"__.each(keysToRemove, k => pm.environment.unset(k));\r",
											"\r",
											"const remainingKeys = __.keys(pm.environment.toObject());\r",
											"console.log('Remaining keys:' + JSON.stringify(remainingKeys));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e60e7900-c8a0-41a8-82ab-d1a214cd87bf",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"let tokenExpiration = pm.environment.get('TokenExpiry');",
					"let currentToken = pm.environment.get('AccessToken');",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get('ApiKey_255901');",
					"    let clientSecret = pm.environment.get('ApiSecret_255901');",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/json\"",
					"        ],",
					"        body: {",
					"            mode: \"raw\",",
					"            raw: JSON.stringify({ Grant_type: grantType })",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(\"AccessToken\", newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set('TokenExpiry', expiryDate.getTime());",
					"    });",
					"}",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a6356328-da92-4bfc-9373-1ceb77f5fb86",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}