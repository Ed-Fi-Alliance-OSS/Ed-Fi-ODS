{
	"info": {
		"_postman_id": "520e7933-9f53-4c1c-8f78-a13d5450f542",
		"name": "Ed-Fi ODS/API Integration Test Suite ResponseTests",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ResponseTests",
			"item": [
				{
					"name": "Initialize Education Organization Ids",
					"item": [
						{
							"name": "Initialize Education Organization Ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfaaef60-5631-4b67-acdc-99002de218fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "37ae628f-cae2-4661-8878-484e1ac6235d",
										"exec": [
											"pm.environment.set('known:localEducationAgencyId', 255901);\r",
											"pm.environment.set('known:schoolId', 255901001);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "GetAll_200_Tests",
							"item": [
								{
									"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
									"item": [
										{
											"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30687097-304a-48de-a26d-c0347257b216",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7313cce9-f9d8-47e7-90d6-8b9e24473acb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Not_Supplied_Should_Not_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Not_Supplied_Should_Not_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "78a0e234-50d3-4a27-b5bb-c0e798e20053",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should undefined for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(pm.response.headers.one('Total-Count')).to.be.a('undefined');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f4e61c61-d091-4818-a884-93b262d9425a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Supplied_As_False_Should_Not_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Supplied_As_False_Should_Not_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4bc7e1a9-ea1e-401e-9593-03879e1c97da",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should undefined for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(pm.response.headers.one('Total-Count')).to.be.a('undefined');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "10d67afb-4ed7-452c-a6ab-60797adecd36",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=false",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "totalCount",
															"value": "false"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Supplied_As_True_Should_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Supplied_As_True_Should_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "21f1a325-b1d3-4212-8750-222c6ca90f0b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should return value for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     const totalCount=pm.response.headers.one('Total-Count').value;",
															"    pm.expect(Number(totalCount)).to.be.greaterThan(0);     ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d1b38411-505f-4a46-9c71-e698f23df1a9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "totalCount",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_No_Parameters_are_supplied_should_return_25_results",
									"item": [
										{
											"name": "When_No_Parameters_are_supplied_should_return_25_results",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3027cb54-3361-455d-8190-b6ab0c5309b1",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7e7b3f34-3069-444c-ad5a-8ebe07e46fc5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_No_Resources_Exist_Should_Return_Empty_Collection_With_200",
									"item": [
										{
											"name": "When_No_Resources_Exist_Should_Return_Empty_Collection_With_200",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ae412ec-15c0-4546-b599-045777c05deb",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return empty collection for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(0);",
															"});",
															"",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b23ad663-20f4-4b32-9582-aa4bc1aefe0f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationorganizationnetworks",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"educationorganizationnetworks"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Offset_Value_Supplied_Should_Return_Next_Set_of_Resources",
									"item": [
										{
											"name": "Course with Limit param",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b844f5ee-075b-4447-b161-9cdebb2cca4a",
														"exec": [
															"const __ = require('lodash');",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															"",
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItems = pm.response.json();",
															"pm.environment.set('known:'+scenarioId+':limitCourseResponse',__.first(responseItems).id);",
															"",
															"console.log(__.first(responseItems).id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "80667796-9b64-422a-a930-71367e40eeda",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Course with Limit & offset param",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb990db3-d1a1-4d97-8968-85d72952e59e",
														"exec": [
															"const __ = require('lodash');",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItems = pm.response.json();",
															"pm.environment.set('known:'+scenarioId+':limitoffsetCourseResponse',__.first(responseItems).id);",
															"console.log(__.first(responseItems).id);",
															"",
															"",
															"pm.test(\"Should not be same as course with Limit response\", () => {",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    ",
															"     const limitCourseResponse=pm.environment.get('known:'+scenarioId+':limitCourseResponse'); ",
															"     const limitoffsetCourseResponse=pm.environment.get('known:'+scenarioId+':limitoffsetCourseResponse'); ",
															"     pm.expect(limitCourseResponse).to.not.equal(limitoffsetCourseResponse);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f4b58fc8-afa4-4241-bade-561e860885ff",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10&Offset=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "Offset",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetAll_400_Tests",
							"item": [
								{
									"name": "When_Given_a_limit_101_or_more_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_101_or_more_Should_return_400",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7254706d-0e9f-4fbb-82a3-2043f2842332",
														"exec": [
															"",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ce38702a-8ba7-4d3d-9dd9-472aa7d26a4a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=501",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "501"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a0d970ac-a67e-462c-8f5a-280da86af531",
														"exec": [
															"",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b6d1cbf9-9959-428e-b2d8-91fdd39ec843",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=-1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "-1"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByExample_200_Tests",
							"item": [
								{
									"name": "Initialize Test Data ",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3001e3cb-3548-4035-b1e0-432c6d98d45f",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a48d2cad-b86c-4276-8175-b3bc734f3118",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "14e5d3d2-a515-422d-9e07-21f88884510f",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "370d438f-7be9-4018-a8e5-6583ebf9d46d",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data for Get Request for 2nd one",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0532a658-b872-412d-9262-df7d612011bc",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2a81b4e8-9e3c-486a-9f34-30092d21d1e4",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', \"Jane\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request for 2nd one",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d91256a7-7264-4926-bee3-a15e523ddb30",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "824bab23-357f-49f1-964a-f77eeb06d430",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data for Get Request for 3rd one",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e1062936-4f59-4046-9b84-24d461e40647",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8c83114f-2238-4f89-9860-047e9ea28c4d",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurnameNew',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"Jefe\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurnameNew}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request for 3rd one",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "702c9422-8c86-485b-aed0-5334c41a6b27",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3ac548e5-d4ac-440d-9c94-92c836281352",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data birthdate for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee690793-db0b-45de-bb56-e9efe62d2543",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const __ = require('lodash');",
															"const responseItems = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':birthDate', __.first(responseItems)[\"birthDate\"]);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6e18e259-212e-476e-be86-8f997181019b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e87150a3-b16c-4e7c-ac90-655bed68f92b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "126ed720-ddd2-4eeb-8892-327ea42ae94e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fd58d0b5-d346-4d3c-8ea8-39eeec122b77",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "953ba5a6-c7f3-40fb-a0a1-12647163748b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 2 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
									"item": [
										{
											"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "aa55f69b-a425-4458-a70a-7e160cad8fce",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "031fa65c-e26b-49ad-9278-6b96d578fea9",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Offset_Value_Supplied_Should_Return_Next_Set_of_Resources",
									"item": [
										{
											"name": "Get Request for Student with limit and Lastsurname param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6402d7c7-ad13-40f4-ade9-da913e7d2028",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b9c5681e-de96-4e37-a72f-fbcc07c28ece",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"const __ = require('lodash');",
															"const responseItems = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':id', __.first(responseItems)[\"id\"]);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Student with offset ,limit and Lastsurname param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4fd6de49-a0db-4740-98b3-ecde174cdc80",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4a219cfa-1a9f-4e36-94df-2e1b62b9b65b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Should not match with this response\", () => {",
															"    ",
															"    const __ = require('lodash');",
															"    const responseItems = pm.response.json();",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    pm.expect(__.first(responseItems)[\"id\"]).to.be.not.equal(pm.environment.get('known:'+scenarioId+':id'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1&Offset=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														},
														{
															"key": "Offset",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_An_Invalid_Example_Should_Return_No_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_An_Invalid_Example_Should_Return_No_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "719afd5f-c5df-4f8b-9dea-1bd5fe1967e3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0206702e-1ec0-4c71-b4d7-67c334989acf",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return no record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_With_Multiple_Properties_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9745269a-a4e2-45f1-ad3b-31f43173bead",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d9115fa0-7737-4c91-b55b-16ca195bd3fe",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&FirstName=John",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "FirstName",
															"value": "John"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_With_Non_Key_Properties_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_With_Non_Key_Properties_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "185afd36-274b-44da-9b70-d2d022861a63",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0bb54746-b1e0-437f-a9d3-e86a8b7c61a4",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Should match with birthdate\", () => {",
															"   const responseItems = pm.response.json();",
															"   const __ = require('lodash');",
															"   const scenarioId = pm.environment.get('scenarioId');",
															"   __.each(responseItems, (responseItem) => {",
															"    pm.expect(responseItem.birthDate).to.be.equal(pm.environment.get('known:'+scenarioId+':birthDate'));",
															"   });",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?limit=50&BirthDate={{known:{{scenarioId}}:birthDate}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "BirthDate",
															"value": "{{known:{{scenarioId}}:birthDate}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_0_Should_return_200",
									"item": [
										{
											"name": "When_Given_a_limit_0_Should_return_200_with_empty_array",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7c8acecb-df83-43b6-a63c-19cad8de53f9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c300d641-8c43-4e94-ba0f-ee3b59255c3b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return an empty array\", () => {",
															"    const responseItems = pm.response.json();",
															"    pm.expect(responseItems.length).to.equal(0);",
															"});",
															"",
															"pm.test(\"Should not return a Total-Count header\", () => {",
															"    pm.expect(pm.response.headers.has(\"Total-Count\")).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?limit=0",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "limit",
															"value": "0"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "When_Given_a_limit_0_and_TotalCount_Should_return_200_with_empty_array_and_total_count_header",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e4569961-d351-4b2e-a7e4-f2b3b2c42c80",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f10ff0ed-efbd-4b94-8c38-b3039575a2d6",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return an empty array\", () => {",
															"    const responseItems = pm.response.json();",
															"    pm.expect(responseItems.length).to.equal(0);",
															"});",
															"",
															"pm.test(\"Should return a Total-Count header\", () => {",
															"    pm.expect(pm.response.headers.has(\"Total-Count\")).to.be.true;",
															"});",
															"",
															"pm.test(\"Should return a Total-Count header value greater than 0\", () => {",
															"    const totalCountHeaderValue = parseInt(pm.response.headers.get(\"Total-Count\"));",
															"    ",
															"    pm.expect(totalCountHeaderValue).to.be.greaterThan(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?limit=0&totalCount=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "limit",
															"value": "0"
														},
														{
															"key": "totalCount",
															"value": "true"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByExample_400_Tests",
							"item": [
								{
									"name": "When_Given_a_limit_101_or_more_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_101_or_more_Should_return_400",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9a4ba619-195b-43aa-90c7-96bf3fd661ff",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "71a58718-c1ee-4006-ab7e-c924fe92d489",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4&limit=501",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														},
														{
															"key": "limit",
															"value": "501"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6dd617f4-4d03-46c4-9745-29116ea21b3f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "86e85f55-c6ed-43d6-85b2-11aa6583f85a",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4&limit=-1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														},
														{
															"key": "limit",
															"value": "-1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByKey_200_Tests",
							"item": [
								{
									"name": "When_Given_A_Valid_Key_Should_Return_Resource_For_That_Key",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8947af0a-a580-4125-871d-d5389ff51346",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "766e45f4-bb4b-425a-8f9f-0229c12489f7",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "42ae7118-8d54-4b99-a88e-92d31c784e61",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3bfc1eb8-599b-4605-abb8-68638e60545a",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "When_Given_A_Valid_Key_Should_Return_Resource_For_That_Key",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ff5e9902-2cfa-47e8-b612-469b66352c93",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d9a9560c-eea1-4dd2-9234-319975615f05",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/?StudentUniqueId={{known:{{scenarioId}}:studentUniqueId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														""
													],
													"query": [
														{
															"key": "StudentUniqueId",
															"value": "{{known:{{scenarioId}}:studentUniqueId}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_a_resource_by_id",
							"item": [
								{
									"name": "api_should_succeed_with_200_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9aa25a95-6cec-4524-801e-7220d2ce54b3",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e2c84bf9-8fa4-49c7-a9d8-2bdb2b57232e",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "143912a3-1ec0-448d-bbd3-821a1bd06a29",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ca0434e4-a365-4161-aaae-c9a1c370cc4c",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_200_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dfc6d323-f4a0-43b6-a813-daf73d3ac1e8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7f10be77-b311-47f2-8c65-0f817357e0ed",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"     pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_a_resource_by_id_that_doesnt_exist",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4d5bf6bf-8351-4caa-9e14-020b461ef5b1",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentGuid',  newGuid());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3a194cbc-1794-4604-88de-f09172283acf",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{supplied:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{supplied:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_an_unchanged_resource_by_id",
							"item": [
								{
									"name": "api_should_succeed_with_304_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d8408527-160f-4634-98f4-e4d11ea43b27",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a80a0a0a-3476-4212-a4fb-563789890924",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2514e160-a49c-42b8-9b82-4654440fa2cd",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b847c379-65e6-42bb-9298-856466d0e2f6",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e0680935-de26-4c4e-9267-846ee97e6af2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7012dbb2-f75b-4094-b392-3dd28b2a257d",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"     pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_304_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fee03998-ed7c-41bc-8887-2fc0822a94a7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "80e70e55-b52b-4ead-888d-c0fde34916a3",
														"exec": [
															"pm.test(\"Status code is 304\", () => {",
															"    pm.expect(pm.response.code).to.equal(304);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-None-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ReferenceLinkTests",
							"item": [
								{
									"name": "When_getting_resources_with_links",
									"item": [
										{
											"name": "Should_provide_the_link_for_an_abstract_reference_to_the_concrete_resource_with_a_non_default_id_in_the_GetById_URL_format",
											"item": [
												{
													"name": "Should_provide_the_link_for_an_abstract_reference_to_the_concrete_resource_with_a_non_default_id_in_the_GetById_URL_format",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "adb90391-254b-4818-af58-72f650e2b069",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Should return 1 item\", () => {",
																	"     const responseItems = pm.response.json();",
																	"     pm.expect(responseItems.length).to.equal(1);",
																	"});",
																	"",
																	"const __ = require('lodash');",
																	"",
																	"pm.test(\"Should return EducationOrganizationReference  field to verify rel and herf of link \", () => {",
																	"     const responseItems = pm.response.json();",
																	"       __.each(responseItems, (responseItem) => {",
																	"       ",
																	"       const rel=responseItem.educationOrganizationReference.link.rel;",
																	"       const href=responseItem.educationOrganizationReference.link.href;",
																	"       const  lastHrefSegment=href.split(\"/\").pop();",
																	"         pm.expect(rel).to.satisfy(function(relValue) { return relValue ==='School' || relValue ==='LocalEducationAgency' ; });",
																	"         pm.expect(href).to.satisfy(function(hrefValue) { return hrefValue.includes('/ed-fi/schools') || hrefValue.includes('/ed-fi/localEducationAgencies') ; });",
																	"         pm.expect(lastHrefSegment.length).to.equal(32);",
																	"         ",
																	"     });",
																	"});",
																	"",
																	"    "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "dd756fb5-744f-41f1-936d-d24a8e26e3c4",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=1",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Should_provide_the_link_for_an_inherited_reference_with_a_non_default_id_in_the_GetById_URL_format",
											"item": [
												{
													"name": "Should_provide_the_link_for_an_inherited_reference_with_a_non_default_id_in_the_GetById_URL_format",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fec2125e-ae7e-49cb-9dde-508faf89ebb1",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Should return 1 item\", () => {",
																	"     const responseItems = pm.response.json();",
																	"     pm.expect(responseItems.length).to.equal(1);",
																	"});",
																	"",
																	"const __ = require('lodash');",
																	"",
																	"pm.test(\"Should return studentReference  field to verify rel and herf of link \", () => {",
																	"     const responseItems = pm.response.json();",
																	"       __.each(responseItems, (responseItem) => {",
																	"       ",
																	"       const rel=responseItem.studentReference.link.rel;",
																	"       const href=responseItem.studentReference.link.href;",
																	"       const  lastHrefSegment=href.split(\"/\").pop();",
																	"        pm.expect(rel).to.equal('Student');",
																	"        pm.expect(href).to.include('/ed-fi/students');",
																	"        pm.expect(lastHrefSegment.length).to.equal(32);",
																	"         ",
																	"     });",
																	"});",
																	"",
																	"    "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c298e791-c76d-4b9f-85f5-383d3e9cc187",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentProgramAssociations?limit=1",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"StudentProgramAssociations"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Post",
					"item": [
						{
							"name": "when_posting_a_resource",
							"item": [
								{
									"name": "api_should_succeed_with_201_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bca9b861-7a94-45b2-a253-058ddaf297e0",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f2f4d6de-22b4-48c9-b4c4-5ddff6c2b72f",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a7a06347-ca97-4e6b-bb8f-0085010551d8",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c2510865-16b0-4825-be2c-b96e22fa3aa9",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "when_posting_a_resource",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e544457c-b480-4006-bee7-9372d5c7d3a9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "aed2ee16-379f-4d9d-ab18-e7ead64e6899",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"    const __ = require('lodash');",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"   ",
															"    pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"      ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5f3d247-d160-4064-a537-623382005494",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "46ba4c24-0248-4392-b9f8-7a4580e9aa54",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_missing_a_required_value",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6e7abcf5-505f-4df6-b3e0-8d4bb007fdb5",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that Validation of 'Student' failed.LastSurname is required.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"LastSurname is required.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6453bb23-536f-4951-9f66-05c6004a8b6d",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_posting_a_resource_with_decimal_overflow",
							"item": [
								{
									"name": "api_should_fail_with_500_code",
									"item": [
										{
											"name": "api_should_fail_with_500_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "47c60df9-9fae-4485-bc98-56aec6567db3",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that The request is invalid.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "65dc36f1-fef7-416c-b457-41a33e26ee50",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
															"pm.environment.set('supplied:'+scenarioId+':YearsOfPriorProfessionalExperience', \"1123.2345498765\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\",\r\n  \"YearsOfPriorProfessionalExperience\":\"{{supplied:{{scenarioId}}:YearsOfPriorProfessionalExperience}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_null_collection",
							"item": [
								{
									"name": "api_should_still_succeed_with_201_code",
									"item": [
										{
											"name": "api_should_still_succeed_with_201_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67e956e8-e9f3-4e32-a55f-ef5e41f66e74",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f011814f-a8e4-40d1-9564-badfb7eee89c",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"pm.environment.set('scenarioId',createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															"let enteredUSDate=new Date();",
															"enteredUSDate = enteredUSDate.addMonths(-20);",
															"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_null_parameters",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7d3d2b30-3faf-4d5b-b7a4-0f3c70ee206c",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that A non-empty request body is required.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"A non-empty request body is required.\");",
															"});",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b3dc30cf-1484-48db-83c1-cb0235540776",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_an_existing_resource",
							"item": [
								{
									"name": "api_should_succeed_with_200_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b9d07853-b943-4e3c-b603-f9d4e45a97fa",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c3b15bdf-92be-481d-b841-8f43957c77a8",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															"let enteredUSDate=new Date();",
															"enteredUSDate = enteredUSDate.addMonths(-20);",
															"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "676cfee1-2a6f-4712-b69d-00bdb30d012c",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':schoolId',255901001);",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0e4a9509-e20f-4eac-8957-4a8d36758440",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{supplied:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"// Get response id to match with location header",
															"pm.environment.set(`known:${pm.environment.get('scenarioId')}:studentId`, pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_200_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "18d365de-caa6-4cc1-a9b6-3ca0bcae113c",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return the correct location header\", () => {",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    const knownStudentId = pm.environment.get('known:'+scenarioId+':studentId');",
															"    pm.expect(pm.response.headers.one('location').value)",
															"        .to.equal(`${pm.variables.replaceIn(pm.request.url.toString())}${knownStudentId}`);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9ab296dd-b1b4-460c-aa52-73b1094be2e1",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', \"GotMarried\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_optional_references_with_key_unification",
							"item": [
								{
									"name": "api_should_save_the_unified_key_value_when_either_reference_is_provided",
									"item": [
										{
											"name": "Initialize Calendar and SchoolYear",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1cabe588-9eda-41c4-8207-0fc4c52a37f1",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should have test data available\", () => {",
															"   pm.expect(pm.response.json().length).to.be.greaterThan(0); ",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItem = pm.response.json()[0];",
															"",
															"pm.environment.set('known:'+scenarioId+':schoolId', responseItem.schoolReference.schoolId);",
															"pm.environment.set('known:'+scenarioId+':schoolYear', responseItem.schoolYearTypeReference.schoolYear);",
															"pm.environment.set('known:'+scenarioId+':calendarCode', responseItem.calendarCode);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "abe300e2-94d5-455c-b702-e38b4b03453d",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"pm.environment.set('scenarioId', createScenarioId());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/calendars",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"calendars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize Student Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30a868fd-f83c-4f9c-bbc6-1695c3ce340a",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId', pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0aaf3b64-d882-46a1-926e-29141e1caf83",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create StudentSchoolAssociation with neither optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "72783114-af7b-477e-8c63-9277b6e32e41",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentSchoolAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d45093e6-02ba-42eb-a457-8df0e8edb01c",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_neither_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "20b620ef-d7b2-48e5-8b27-4aa6b499b568",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should not have either optional reference\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference).to.equal(undefined);",
															"    pm.expect(responseItem.calendarReference).to.equal(undefined);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4a0676dd-57d6-4d74-b893-a2e995e9f23c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with first optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "52c3956a-ec48-469c-87a2-382c0ded2583",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5e96f77e-1328-4dde-a37b-df21321cd058",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolYearTypeReference\": {\r\n     \"schoolYear\": \"{{known:{{scenarioId}}:schoolYear}}\"\r\n   },\r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_first_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ffe806e2-6abe-46fb-8f83-2a72d2273a10",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should have first optional reference set with unified key value\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference.schoolYear).to.equal(pm.environment.get('known:'+scenarioId+':schoolYear'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d0fac684-15e4-4764-92cb-76d6792d14be",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with neither optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1769cc89-2d30-4a74-b029-94b68bc3a488",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "98c33ce9-07b0-4d6f-8339-e1594399d10f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_neither_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fbc08d1f-0636-466b-ae54-3c9a6a07e9d6",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should not have either optional reference\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference).to.equal(undefined);",
															"    pm.expect(responseItem.calendarReference).to.equal(undefined);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "da361a51-200c-4eb8-bbe8-1505e891ace3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with second optional reference Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ad190bd9-e983-43cd-b38b-0c3d4c6dc33a",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d6006c7a-dc1f-409c-8d08-415e4d0cc348",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"calendarReference\": {\r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\",\r\n      \"schoolYear\": \"{{known:{{scenarioId}}:schoolYear}}\",\r\n      \"calendarCode\": \"{{known:{{scenarioId}}:calendarCode}}\"\r\n   },\r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_second_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c3b0a8fd-e78a-4604-8024-212c46234d36",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should have second optional reference set with unified key value\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.calendarReference.schoolYear).to.equal(pm.environment.get('known:'+scenarioId+':schoolYear'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2aa170f7-aba0-44fe-ab7c-cf9afc160b81",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b142633b-ea95-4a3a-b996-79b6c5184264",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be85185c-075a-4216-8835-b0e54fd78327",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_required_unified_keys_with_different_source_values",
							"item": [
								{
									"name": "api_should_fail_with_a_400_bad_request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e7b727f-ba54-4d74-be90-7c304edd6bc1",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should indicate the source values are inconsistent\", () => {",
													"    pm.expect(pm.response.json().message).to.contain(\"Supplied values for unified key property 'schoolId' on 'Grade' are not consistent\");",
													"});",
													"",
													"pm.test(\"Should include the inconsistent values and their location in the resource\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    pm.expect(message).to.contain(\"gradingPeriodReference.schoolId = 777\");",
													"    pm.expect(message).to.contain(\"studentSectionAssociationReference.schoolId = 888\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"gradingPeriodReference\": {\r\n    \"gradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\",\r\n    \"periodSequence\": 1,\r\n    \"schoolId\": 777,\r\n    \"schoolYear\": 2011\r\n  },\r\n  \"studentSectionAssociationReference\": {\r\n    \"beginDate\": \"2010-08-23T00:00:00Z\",\r\n    \"localCourseCode\": \"ALG-1\",\r\n    \"schoolId\": 888,\r\n    \"schoolYear\": 2011,\r\n    \"sectionIdentifier\": \"25590100102Trad220ALG112011\",\r\n    \"sessionName\": \"2010-2011 Fall Semester\",\r\n    \"studentUniqueId\": \"604822\"\r\n  },\r\n  \"gradeTypeDescriptor\": \"uri://ed-fi.org/GradeTypeDescriptor#Grading Period\",\r\n  \"numericGradeEarned\": 63,\r\n  \"learningStandardGrades\": [\r\n    {\r\n      \"learningStandardReference\": {\r\n        \"learningStandardId\": \"111.32.NA.A.1.D\"\r\n      },\r\n      \"numericGradeEarned\": 63\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/grades",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"grades"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "edf40e56-54e2-4b97-a723-21fc8a90ac10",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f59aefa-8630-4ae6-bdc1-708bb9e840eb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_contextual_unified_keys_with_different_source_values",
							"item": [
								{
									"name": "api_should_fail_with_a_400_bad_request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9908d217-4773-4972-a7b0-bea3497c7484",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should indicate the source values are inconsistent\", () => {",
													"    pm.expect(pm.response.json().message).to.contain(\"Supplied values for unified key property 'schoolId' on 'BellScheduleClassPeriod' are not consistent\");",
													"});",
													"",
													"pm.test(\"Should include the inconsistent values and their locations in the resource\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    pm.expect(message).to.contain(\"schoolId (from parent context) = 777\");",
													"    pm.expect(message).to.contain(\"classPeriodReference.schoolId = 888\");",
													"    pm.expect(message).to.contain(\"classPeriodReference.schoolId = 999\");",
													"});",
													"",
													"pm.test(\"Should not include multiple messages for the same value mismatches\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    let firstPos = message.indexOf(\"classPeriodReference.schoolId = 999\");",
													"    pm.expect(firstPos).to.be.greaterThan(0);",
													"    ",
													"    let nextPos = message.indexOf(\"classPeriodReference.schoolId = 999\", firstPos + 1);",
													"    pm.expect(nextPos).to.be.lessThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": 777\r\n  },\r\n  \"bellScheduleName\": \"Normal Schedule\",\r\n  \"endTime\": \"16:00:00\",\r\n  \"startTime\": \"08:15:00\",\r\n  \"totalInstructionalTime\": 325,\r\n  \"classPeriods\": [\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 888,\r\n        \"classPeriodName\": \"01 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"02 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"03 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"04 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"05 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"06 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"07 - Traditional\"\r\n      }\r\n    }\r\n  ],\r\n  \"dates\": [],\r\n  \"gradeLevels\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e6f41997-7a33-4d49-9cd6-4047cc570bfd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bb38707b-b9b1-4227-9e78-43a0f0b926a8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_contextual_unified_keys_without_a_value",
							"item": [
								{
									"name": "api_should_indicate_success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3205810-4136-4824-84a0-0041243c8249",
												"exec": [
													"pm.test(\"Status code is 200/201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": {{known:schoolId}}\r\n  },\r\n  \"bellScheduleName\": \"Normal Schedule\",\r\n  \"endTime\": \"16:00:00\",\r\n  \"startTime\": \"08:15:00\",\r\n  \"totalInstructionalTime\": 325,\r\n  \"classPeriods\": [\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"01 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"02 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"03 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"04 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"05 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"06 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"07 - Traditional\"\r\n      }\r\n    }\r\n  ],\r\n  \"dates\": [],\r\n  \"gradeLevels\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_return_all_child_items_with_contextual_unified_key_values_included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f188a6f8-99d8-453e-97d8-5430a542f145",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return all saved children with the contextual unified key value included\", () => {",
													"    const responseItem = pm.response.json()[0];",
													"    ",
													"    const __ = require('lodash');",
													"    ",
													"    const schoolId = responseItem.schoolReference.schoolId;",
													"    ",
													"    let childItemVerified = false;",
													"    ",
													"    _.all(responseItem.classPeriods, cp => {",
													"        pm.expect(cp.classPeriodReference.schoolId).to.equal(schoolId);",
													"        childItemVerified = true;",
													"    });",
													"    ",
													"    pm.expect(childItemVerified, \"No child items present to be verified.\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules?schoolId=255901001&bellScheduleName=Normal Schedule",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901001"
												},
												{
													"key": "bellScheduleName",
													"value": "Normal Schedule"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b8486302-dbbc-4cc3-b03b-d77d21585fe5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "99fa1f69-9b14-40d0-932c-45337677dcbf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_partially_formed_optional_reference",
							"item": [
								{
									"name": "Initialize Staff reference",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "76fdec19-c719-4ea5-abca-f19b996a9edc",
												"exec": [
													"const uuid = require('uuid');",
													"",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "059f95c0-8b44-4356-bcff-3eb1aab3e9c8",
												"exec": [
													"pm.test(\"Should indicate success\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);    ",
													"})",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId', pm.response.json()[0].staffUniqueId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?limit=1",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_indicate_success_when_saving_resource_with_partially_formed_optional_reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "036355c4-0e15-47bb-a093-782d46b43eb0",
												"exec": [
													"pm.test(\"Status code is 200/201 indicating success with saving resource with partially formed optional reference\", () => {",
													"    // NOTE: This behavior will change in future version of the API, becoming a 400 Bad Request with partially formed references",
													"    pm.expect(pm.response.code).to.oneOf([200, 201]);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffSchoolAssociationGuid', pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"calendarReference\": {\r\n  \t\"calendarCode\": \"Ignored Due To Missing SchoolId\",\r\n  \t\"schoolYear\": 1234\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n  },\r\n  \"programAssignmentDescriptor\": \"uri://ed-fi.org/ProgramAssignmentDescriptor#Regular Education\",\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Other\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_not_save_partially_formed_references",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35740df1-2f61-4d62-8ed8-05d7e5047da3",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the partially formed reference\", () => {",
													"   pm.expect(pm.response.json().calendarReference).to.equal(undefined);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSchoolAssociations/{{known:{{scenarioId}}:staffSchoolAssociationGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSchoolAssociations",
												"{{known:{{scenarioId}}:staffSchoolAssociationGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Put",
					"item": [
						{
							"name": "when_putting_a_resource_missing_a_required_value",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0848329f-7196-494e-80f1-01380c94dfc3",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "be91c044-a932-4f74-af0d-7ee45a35542b",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bbd669d1-3c0c-42dd-9394-31faa77feba7",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5659d434-9dce-43d8-b9d7-bab4ffa8fa4d",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4d544308-300d-456e-9dfe-9584d48419ca",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e6e22185-6381-487a-b2bc-3032d331c889",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a6e4ecc-9398-43cf-ab86-2047becfed22",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that Validation of 'Student' failed.LastSurname is required.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"LastSurname is required.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "dae98e66-6832-4445-b8bf-2324cf74ede9",
														"exec": [
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_invalid_state",
							"item": [
								{
									"name": "api_should_fail_with_400_bad_request",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "419ed50a-6849-4ca2-b246-a3f358a519e9",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "301b275d-bba0-403e-a948-5bc4dacfbc48",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9d3fd092-2331-40f4-9978-c83b12fd9529",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8fe01ee2-ebfb-46cd-9449-e53cd0e40398",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6bb42e73-dab4-464e-bed7-25d23cc52cbd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "74e48fd7-b8b7-443e-be62-07349e905d83",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_400_bad_request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e487e46c-81f5-4f8a-ad40-b4c619965cff",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that Unable to resolve value '00' to an existing 'CountryDescriptor' resource.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Unable to resolve value '00' to an existing 'CountryDescriptor' resource\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cb9d1292-de97-45a6-9b26-74ef605db65b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"BirthCountryDescriptor\":\"00\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_matching_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d3f3d41-8aa6-402b-861b-e7d83550765e",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b54b25a4-4b40-45b7-bb80-3ea0a26770d9",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8a21d703-3d47-4bbe-953b-09387f630d31",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7642bf12-1c4b-4109-b3aa-8410a71479a9",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c623370c-1892-4d33-83f5-f7e65157e1e0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e30f64ff-adc5-48be-8808-6c7505b746bf",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0aec6945-454c-4424-b9f0-b8305a815f75",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															"",
															"pm.test(\"Should return an ETag header with an updated ETag value.\", () => {",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    pm.expect(pm.response.headers.one('ETag').value).to.not.equal(pm.environment.get('known:'+scenarioId+':ETag'));",
															"});",
															"",
															"pm.test(\"Should return the correct location header\", () => {",
															"    pm.expect(pm.response.headers.one('location').value).to.equal(pm.variables.replaceIn(pm.request.url.toString()));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fb5a0e98-4d58-4697-93c8-f28589cb06e9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_mismatched_etag",
							"item": [
								{
									"name": "api_should_fail_with_412_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f063a540-28b4-408f-b431-6300146f4386",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "25b5f9ed-a2d1-4143-bbb0-eddf841f8aad",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4ba831e4-e2f2-45b6-af54-71d6a3e7f359",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bcd60520-a290-4021-a9cb-665d9078f16b",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "20c8cef5-8fa4-4f27-bb50-a2304de2cac2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0ababb4c-735c-4f25-83fc-4d86f778d8ef",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_412_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "16a689cb-672a-40a6-b459-94b46019fec0",
														"exec": [
															"pm.test(\"Status code is 412\", () => {",
															"    pm.expect(pm.response.code).to.equal(412);",
															"});",
															"pm.test(\"Should return a message indicating that Resource was modified by another consumer.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource was modified by another consumer\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cb6d3a12-030c-4f6e-8b6f-c8349cfe1a87",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_mismatched_id",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dd408286-0dd0-4007-b0a2-483f81f041d1",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4573e8c9-30e7-47bd-90f8-b1526ed54ac1",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "952dce75-b982-4da6-aa72-eef8319dfb69",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "028b5b61-0856-47ce-b3ea-45fa5640ab8c",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1aaf5152-64fd-4b22-8e0d-7c217a782471",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "262c591e-1b28-4294-b10a-ac79a4abafb5",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c10a3779-e3d8-40bd-a5ca-db5ad8bb3dfe",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															"pm.test(\"Should return a message indicating that Resource to update was not found.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource to update was not found\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2d93d76d-7df1-4a8a-8504-3eff335b41f3",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':studentGuid',newGuid());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_no_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7cf9be85-be07-45d7-8edd-1b15638c0f9e",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "72773267-365a-46f2-823f-2f4330c2af49",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d9a0c276-396f-4672-b845-14368560f3f0",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "da669b4c-20e7-48fa-8913-8748ec83f332",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9aa28625-446e-45df-8bf9-41592b74d735",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ea2e376-8f0d-4fa4-988d-6c7470cadad2",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let eTagValue =pm.response.headers.one('ETag').value;",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0bca4656-fbe9-43da-894c-b2107018f7ce",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															"pm.test(\"Should return an ETag header with an updated ETag value\", () => {",
															"   ",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    let eTagValue =pm.response.headers.one('ETag').value;",
															"    pm.expect(pm.response.headers.one('ETag').value).to.not.equals( pm.environment.get('known:'+scenarioId+':ETag'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8f19b362-c697-4b6d-8be2-9c190387358e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_null_parameters",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9f34eaf2-6260-4ecc-b427-507a08c7ef9f",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0a7c8fac-93b1-40e5-94ec-3cddf2c3fd9c",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4530addf-5ee5-44d3-9f60-e56ffe22ccbd",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "54129811-2a82-4414-9cc9-2fddd43624e5",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "432257bf-7a46-4939-b954-2bc53b8a17ba",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bf87a109-99d7-4019-b3c6-344113e0790b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Put Request with MalformedId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fe566f00-aefd-4d51-a90d-7f1b18429730",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7303a99c-6ff9-4dc7-9fab-b92e2158c51e",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const studentGuid =pm.environment.get('known:'+scenarioId+':studentGuid');",
															"pm.environment.set('supplied:'+scenarioId+':MalformedId',studentGuid.substring(0, 1));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:MalformedId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:MalformedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put Request without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d0fcb80-dc27-4d3f-8f9f-b3c184acb28e",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that A non-empty request body is required\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.modelState['request.']).to.contains(\"A non-empty request body is required.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "49ff507b-22bc-4384-ac80-e4b3c79f4929",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put Request with MalformedId and without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8f46e96-e65a-40d5-8d56-9f873c83de4e",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "29c054c7-08ac-4732-9071-0b7da2bbad54",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:MalformedId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:MalformedId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "when_deleting_a_resource",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "18490656-bf24-41b8-a2db-5c69afdc8ab7",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "504ec166-2ced-4f9a-9574-3a97900ee268",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8443594d-b96d-4aea-b600-17623d1441f8",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fe87628e-77a0-4e76-a8d9-f6d7442379ff",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_would_break_referential_integrity",
							"item": [
								{
									"name": "api_should_fail_with_409_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7950d1e4-64f3-4d55-b9a8-bcd3f95856dc",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9cea4bba-ebc9-4fa1-82e7-3ac30b6ba044",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Delete Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1d877549-4a5d-4f89-af32-fbade7fe2966",
														"exec": [
															"const moment = require('moment');",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "291db0c2-9adf-45f2-bb2e-f1a8baeeaaac",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_409_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "899219e6-e217-4dd0-af20-c9d8af173e8a",
														"exec": [
															"pm.test(\"Status code is 409\", () => {",
															"    pm.expect(pm.response.code).to.equal(409);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3e2cc217-bfdf-4309-9fff-58a7a1f9eac9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_that_doesnt_exist",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "74db4462-fd94-4e0d-b991-409f6e09c03a",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "77571351-7586-481d-9955-9874315bc965",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':programdGuid', newGuid());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Programs/{{supplied:{{scenarioId}}:programdGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Programs",
														"{{supplied:{{scenarioId}}:programdGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_a_malformed_id",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e5e45ae4-9e92-4686-9eae-8e4915bd5f1d",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9def1f8b-3721-4183-9859-769cad8b13e5",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const programdGuid =newGuid();",
															"pm.environment.set('supplied:'+scenarioId+':programdGuid', programdGuid.substr(0,3) + '-' + programdGuid.substr(3+1));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Programs/{{supplied:{{scenarioId}}:programdGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Programs",
														"{{supplied:{{scenarioId}}:programdGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_an_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "64efffdf-e57b-4d0c-baec-c285cd0efd88",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															"",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d0a7ce1b-3bb1-4403-ad0c-12074733fbca",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f9e52bf-81fc-46f5-9404-a40ffa89a6bd",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8c62ccd8-863d-4755-953e-acc8b5bb7e92",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_mismatched_etag",
							"item": [
								{
									"name": "api_should_fail_with_412_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "46ee64aa-fcf4-4088-9ab9-dbb3ca2383db",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d03e0d98-97a7-4a90-a5ba-02a12dcf8193",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Delete Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a44d48ba-79e0-4585-a810-deb01f34f383",
														"exec": [
															"const moment = require('moment');",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cc42da2f-2b3b-45e7-a36d-30b8c9dfa994",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_412_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2c182468-00ea-4fe8-8873-dbe956d095eb",
														"exec": [
															"pm.test(\"Status code is 412\", () => {",
															"    pm.expect(pm.response.code).to.equal(412);",
															"});",
															"pm.test(\"Should return a message indicating that Resource was modified by another consume.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource was modified by another consumer\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1f6fd165-3823-495c-8f16-27d2bfd7bc14",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up Test Data",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "66fb4ac1-f00f-4a00-b805-548d017cdbb3",
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"const keys = __.keys(pm.environment.toObject());\r",
											"console.log('Initial keys: ' + JSON.stringify(keys));\r",
											"\r",
											"const keysToRemove = __.filter(keys, x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'));\r",
											"\r",
											"__.each(keysToRemove, k => pm.environment.unset(k));\r",
											"\r",
											"const remainingKeys = __.keys(pm.environment.toObject());\r",
											"console.log('Remaining keys:' + JSON.stringify(remainingKeys));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "64a7e3eb-fe2f-4cd3-8462-bd4b59a060be",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"let tokenExpiration = pm.environment.get('TokenExpiry');",
					"let currentToken = pm.environment.get('AccessToken');",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get('ApiKey_255901');",
					"    let clientSecret = pm.environment.get('ApiSecret_255901');",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(\"AccessToken\", newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set('TokenExpiry', expiryDate.getTime());",
					"    });",
					"}",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e4e512c7-b81b-48fa-9625-d42874e3419b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}