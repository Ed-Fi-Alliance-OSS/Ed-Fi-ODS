{
	"info": {
		"_postman_id": "fab6493e-47dc-4430-b8df-907d57ac5eaa",
		"name": "Ed-Fi ODS/API Integration Test Suite ResponseTests",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ResponseTests",
			"item": [
				{
					"name": "Initialize Education Organization Ids",
					"item": [
						{
							"name": "Initialize Education Organization Ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8ea9fe4-1423-4102-ad94-8bfb700d09c9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d1369c1a-5db7-4e56-9a27-fd3ef7d526b8",
										"exec": [
											"pm.environment.set('known:localEducationAgencyId', 255901);\r",
											"pm.environment.set('known:schoolId', 255901001);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "GetAll_200_Tests",
							"item": [
								{
									"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
									"item": [
										{
											"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e5b9c8b-03a9-4a06-897b-6caa038bd77f",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "02f0a237-3610-4bc1-b42f-b99aa52a2485",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Not_Supplied_Should_Not_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Not_Supplied_Should_Not_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b404aec0-c289-49ad-8b4f-6d8cf9b7cb0f",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should undefined for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(pm.response.headers.one('Total-Count')).to.be.a('undefined');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8ac1c26e-dcaf-40d1-988c-f330fca9f73d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Supplied_As_False_Should_Not_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Supplied_As_False_Should_Not_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4deb1512-d775-48d0-9bad-914dcf600476",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should undefined for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(pm.response.headers.one('Total-Count')).to.be.a('undefined');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4bb9aae1-278d-42f5-9873-78f089a59516",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=false",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "totalCount",
															"value": "false"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_TotalCount_Value_Supplied_As_True_Should_Return_Total_Count_Header_In_The_Response",
									"item": [
										{
											"name": "When_TotalCount_Value_Supplied_As_True_Should_Return_Total_Count_Header_In_The_Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab176c92-9e83-4e8a-ab4f-3c29d74187f7",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															"",
															"",
															"pm.test(\"Should return value for Total-Count Header Value\", () => {",
															"     const responseItems = pm.response.json();",
															"     const totalCount=pm.response.headers.one('Total-Count').value;",
															"    pm.expect(Number(totalCount)).to.be.greaterThan(0);     ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9329a8cd-9c0d-4ac4-b1fa-943e48ab612c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?totalCount=true",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "totalCount",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_No_Parameters_are_supplied_should_return_25_results",
									"item": [
										{
											"name": "When_No_Parameters_are_supplied_should_return_25_results",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2aa4ff6b-06a2-4b8e-9aa1-ab54b9390792",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 25 items for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(25);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bf7dea2c-c95b-4b91-99f6-8199d7240e57",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_No_Resources_Exist_Should_Return_Empty_Collection_With_200",
									"item": [
										{
											"name": "When_No_Resources_Exist_Should_Return_Empty_Collection_With_200",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a96f6614-9ca9-4c81-8b10-5ef68f738830",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return empty collection for verification\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(0);",
															"});",
															"",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "87c0c2df-4d7d-4869-9ab9-af25b3e4d729",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/educationorganizationnetworks",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"educationorganizationnetworks"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Offset_Value_Supplied_Should_Return_Next_Set_of_Resources",
									"item": [
										{
											"name": "Course with Limit param",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "151113df-6651-46fd-9abb-ca207991a3e9",
														"exec": [
															"const __ = require('lodash');",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															"",
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItems = pm.response.json();",
															"pm.environment.set('known:'+scenarioId+':limitCourseResponse',__.first(responseItems).id);",
															"",
															"console.log(__.first(responseItems).id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "32604883-926b-45ec-b983-1ef085d916da",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Course with Limit & offset param",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "54bbbe01-0835-4eb0-a5ea-f1131df9cfe1",
														"exec": [
															"const __ = require('lodash');",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 10 items\", () => {",
															"     const responseItems = pm.response.json();",
															"     pm.expect(responseItems.length).to.equal(10);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItems = pm.response.json();",
															"pm.environment.set('known:'+scenarioId+':limitoffsetCourseResponse',__.first(responseItems).id);",
															"console.log(__.first(responseItems).id);",
															"",
															"",
															"pm.test(\"Should not be same as course with Limit response\", () => {",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    ",
															"     const limitCourseResponse=pm.environment.get('known:'+scenarioId+':limitCourseResponse'); ",
															"     const limitoffsetCourseResponse=pm.environment.get('known:'+scenarioId+':limitoffsetCourseResponse'); ",
															"     pm.expect(limitCourseResponse).to.not.equal(limitoffsetCourseResponse);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4e8708eb-169c-45e0-b0fb-51917753282e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=10&Offset=10",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "Offset",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetAll_400_Tests",
							"item": [
								{
									"name": "When_Given_a_limit_0_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_0_Should_return_400",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c88b0c65-c79b-4ec7-9643-044c47891c3f",
														"exec": [
															"",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "590febb2-36fb-4f6c-aa4d-56923cbb33df",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=0",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_101_or_more_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_101_or_more_Should_return_400",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3362ef89-6d25-43f3-b71d-1469b0c478e8",
														"exec": [
															"",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "84c177ac-7165-40f7-850c-feb797e29817",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=501",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "501"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0e81e1ec-48d7-4031-8c4b-27d27462630a",
														"exec": [
															"",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "489f45d9-b12d-4d22-be8f-941df9ceb3f8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=-1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"courses"
													],
													"query": [
														{
															"key": "limit",
															"value": "-1"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByExample_200_Tests",
							"item": [
								{
									"name": "Initialize Test Data ",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "51cd9524-15b5-4634-b686-2c1108a0ebf7",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c4f1642e-1504-4954-bb76-7a1a27b9944a",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "67ef7916-d4d8-4fcb-8878-8129ba9c7ebf",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6f795f70-65a5-4298-8e25-68b41d1e5135",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data for Get Request for 2nd one",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cab116fb-59a0-45de-a5bc-7ab65da22732",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3ad803bb-022f-4d9a-a52e-7506ca62b8eb",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', \"Jane\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request for 2nd one",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "75b9e36a-3ffc-42d5-bf35-8644b4b355e1",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ab88d3a5-4a1a-49fb-9253-90b3e23c1181",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data for Get Request for 3rd one",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b158723e-a3a5-417f-ab5a-c01718e54457",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bca9110a-b679-4231-a680-9708ca897b6f",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurnameNew',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"Jefe\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurnameNew}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request for 3rd one",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c99546a1-cd45-4df0-ad65-c0f59b270b04",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b969cac6-afa6-4d91-a530-3a990dc5c8a8",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Initialize Student Data birthdate for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b2969c1a-d81a-49a5-98da-032594908ca4",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const __ = require('lodash');",
															"const responseItems = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':birthDate', __.first(responseItems)[\"birthDate\"]);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d8b059cf-c6a1-4ab6-a64d-ff6f7d9ccb70",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4127dd12-5f35-4480-ae4a-10f847480ac5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "44fbf661-41dd-41ab-b4e4-d94e34b11677",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b69d5da4-a8d6-4aed-a44f-612c346c429a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "607c9bcd-fbc9-48ea-a82f-88d7d31c9f84",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 2 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
									"item": [
										{
											"name": "When_Limit_Value_Supplied_Should_Not_Return_more_than_that_number",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0120a097-b5e3-4e91-bcd5-aa29210667e4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ce7b70a4-0289-46c4-8490-7af6e6cab841",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Offset_Value_Supplied_Should_Return_Next_Set_of_Resources",
									"item": [
										{
											"name": "Get Request for Student with limit and Lastsurname param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f2a742a3-cf16-4475-9b00-c74c5cbbbce6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ab02cb7d-2ac5-49a1-aa9f-2d40657f807a",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"const __ = require('lodash');",
															"const responseItems = pm.response.json();",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':id', __.first(responseItems)[\"id\"]);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Student with offset ,limit and Lastsurname param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f8092d37-5fef-4032-8664-c87fd102dd94",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "541e0820-c665-4fe7-b2c1-17e487e12b8c",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Should not match with this response\", () => {",
															"    ",
															"    const __ = require('lodash');",
															"    const responseItems = pm.response.json();",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    pm.expect(__.first(responseItems)[\"id\"]).to.be.not.equal(pm.environment.get('known:'+scenarioId+':id'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&limit=1&Offset=1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "limit",
															"value": "1"
														},
														{
															"key": "Offset",
															"value": "1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_An_Invalid_Example_Should_Return_No_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_An_Invalid_Example_Should_Return_No_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "535b5b2c-902f-465b-9ede-d38735e5e70b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5d2852bb-c496-4c36-bd23-b6657f14e57f",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return no record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_With_Multiple_Properties_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b74b1ba1-a742-4a76-a3aa-d470c77311d2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b296dd65-b578-4f96-a310-6f096e298816",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname={{supplied:{{scenarioId}}:lastSurname}}&FirstName=John",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "{{supplied:{{scenarioId}}:lastSurname}}"
														},
														{
															"key": "FirstName",
															"value": "John"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_A_Valid_Example_With_Non_Key_Properties_Should_Return_All_Resources_For_That_Example",
									"item": [
										{
											"name": "When_Given_A_Valid_Example_With_Non_Key_Properties_Should_Return_All_Resources_For_That_Example",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "00142a16-28a4-441e-b993-b351b3a9f6f5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2c761255-a41e-41e8-8430-d0e906f02411",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should return 1 record for verification \", () => {",
															"    const responseItems = pm.response.json();",
															"   pm.expect(responseItems.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Should match with birthdate\", () => {",
															"   const responseItems = pm.response.json();",
															"   const __ = require('lodash');",
															"   const scenarioId = pm.environment.get('scenarioId');",
															"   __.each(responseItems, (responseItem) => {",
															"    pm.expect(responseItem.birthDate).to.be.equal(pm.environment.get('known:'+scenarioId+':birthDate'));",
															"   });",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?limit=50&BirthDate={{known:{{scenarioId}}:birthDate}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "BirthDate",
															"value": "{{known:{{scenarioId}}:birthDate}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByExample_400_Tests",
							"item": [
								{
									"name": "When_Given_a_limit_0_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_0_Should_return_400",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2d381483-c9a6-473c-a430-ed6fb46f60fd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "51f798a2-87b3-4bae-a163-da4382cf636f",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4&limit=0",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														},
														{
															"key": "limit",
															"value": "0"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_101_or_more_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_101_or_more_Should_return_400",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2966da7b-9595-47c4-bcfa-050d4140494a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8c7cf832-5e87-48dc-b7a5-444448c74942",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4&limit=501",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														},
														{
															"key": "limit",
															"value": "501"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
									"item": [
										{
											"name": "When_Given_a_limit_Negative1_or_less_Should_return_400",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "315d9d69-31a6-436f-8756-04d554a6fa40",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5d25814d-3e2a-44c6-b5ea-245d9747cff8",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?LastSurname=kj34lk3j4lk3j4&limit=-1",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													],
													"query": [
														{
															"key": "LastSurname",
															"value": "kj34lk3j4lk3j4"
														},
														{
															"key": "limit",
															"value": "-1"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetByKey_200_Tests",
							"item": [
								{
									"name": "When_Given_A_Valid_Key_Should_Return_Resource_For_That_Key",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3937dace-48b3-46cc-aaa9-61f6f3ab77f9",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6fe2386b-78d7-475f-94c1-e1120abbf3c1",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9566482c-2d04-4604-b1c4-4c10da34d01c",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "af5eee31-2302-40ff-90b0-0e40a27e4a70",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "When_Given_A_Valid_Key_Should_Return_Resource_For_That_Key",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "50cb47b3-29b6-476e-bdb0-28c67368d6ac",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ebc2560b-71b1-4cec-bdce-cbc4ac8850bb",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"    const __ = require('lodash');",
															"     const responseItems = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"      __.each(responseItems, (responseItem) => {",
															"        pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"      });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/?StudentUniqueId={{known:{{scenarioId}}:studentUniqueId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														""
													],
													"query": [
														{
															"key": "StudentUniqueId",
															"value": "{{known:{{scenarioId}}:studentUniqueId}}"
														}
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_a_resource_by_id",
							"item": [
								{
									"name": "api_should_succeed_with_200_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "73249e0f-0bf5-4a94-bfc6-4a50f0357642",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0091eee8-7aa3-415b-b852-3371dccf36f4",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ef6c404b-232e-4bbc-a318-ef13e9c45b57",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a906c877-4eb0-400c-b4eb-2b0747028133",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_200_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5d478c8e-e52a-45b2-b648-fc8a814cd9cc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6683e12b-f43d-4fec-a092-d328583f75e6",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"     pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_a_resource_by_id_that_doesnt_exist",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5919ad2a-3212-4e42-9cc6-915c3b8b68ac",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentGuid',  newGuid());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7007df6f-4fed-44ca-b895-5e47a60bc7a9",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{supplied:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{supplied:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_getting_an_unchanged_resource_by_id",
							"item": [
								{
									"name": "api_should_succeed_with_304_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a60126c4-7431-41ec-8c79-0638d5aa7a81",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1c58b054-d52c-437c-beae-eb01d7f0de4d",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a5541289-d1b8-478f-9fdb-8a15701eeca9",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1ee1fd28-fc57-4eec-9edb-2e7788d06675",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9c24d09d-1898-4347-bbf5-72a348fc5f43",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ba6f045c-1b6c-4ea8-9bec-0ee282b9425d",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"     pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_304_code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ff9534b9-05b2-42fa-aa8c-afb3fdda9b4c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c1b91b3b-d66b-4383-a2f0-3b37c0cf93a7",
														"exec": [
															"pm.test(\"Status code is 304\", () => {",
															"    pm.expect(pm.response.code).to.equal(304);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-None-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ReferenceLinkTests",
							"item": [
								{
									"name": "When_getting_resources_with_links",
									"item": [
										{
											"name": "Should_provide_the_link_for_an_abstract_reference_to_the_concrete_resource_with_a_non_default_id_in_the_GetById_URL_format",
											"item": [
												{
													"name": "Should_provide_the_link_for_an_abstract_reference_to_the_concrete_resource_with_a_non_default_id_in_the_GetById_URL_format",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "169a0295-c549-4244-95ae-da54e6baabd2",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Should return 1 item\", () => {",
																	"     const responseItems = pm.response.json();",
																	"     pm.expect(responseItems.length).to.equal(1);",
																	"});",
																	"",
																	"const __ = require('lodash');",
																	"",
																	"pm.test(\"Should return EducationOrganizationReference  field to verify rel and herf of link \", () => {",
																	"     const responseItems = pm.response.json();",
																	"       __.each(responseItems, (responseItem) => {",
																	"       ",
																	"       const rel=responseItem.educationOrganizationReference.link.rel;",
																	"       const href=responseItem.educationOrganizationReference.link.href;",
																	"       const  lastHrefSegment=href.split(\"/\").pop();",
																	"         pm.expect(rel).to.satisfy(function(relValue) { return relValue ==='School' || relValue ==='LocalEducationAgency' ; });",
																	"         pm.expect(href).to.satisfy(function(hrefValue) { return hrefValue.includes('/ed-fi/schools') || hrefValue.includes('/ed-fi/localEducationAgencies') ; });",
																	"         pm.expect(lastHrefSegment.length).to.equal(32);",
																	"         ",
																	"     });",
																	"});",
																	"",
																	"    "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "6f562d59-95d1-4fac-b9cb-c28694ae6772",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/courses?limit=1",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"courses"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Should_provide_the_link_for_an_inherited_reference_with_a_non_default_id_in_the_GetById_URL_format",
											"item": [
												{
													"name": "Should_provide_the_link_for_an_inherited_reference_with_a_non_default_id_in_the_GetById_URL_format",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "740627f9-ba41-4857-9eed-2fd947bd1ac1",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Should return 1 item\", () => {",
																	"     const responseItems = pm.response.json();",
																	"     pm.expect(responseItems.length).to.equal(1);",
																	"});",
																	"",
																	"const __ = require('lodash');",
																	"",
																	"pm.test(\"Should return studentReference  field to verify rel and herf of link \", () => {",
																	"     const responseItems = pm.response.json();",
																	"       __.each(responseItems, (responseItem) => {",
																	"       ",
																	"       const rel=responseItem.studentReference.link.rel;",
																	"       const href=responseItem.studentReference.link.href;",
																	"       const  lastHrefSegment=href.split(\"/\").pop();",
																	"        pm.expect(rel).to.equal('Student');",
																	"        pm.expect(href).to.include('/ed-fi/students');",
																	"        pm.expect(lastHrefSegment.length).to.equal(32);",
																	"         ",
																	"     });",
																	"});",
																	"",
																	"    "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "3595a901-05ad-438d-aa77-50f4eb9129e9",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentProgramAssociations?limit=1",
															"host": [
																"{{ApiBaseUrl}}"
															],
															"path": [
																"data",
																"v3",
																"ed-fi",
																"StudentProgramAssociations"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Post",
					"item": [
						{
							"name": "when_posting_a_resource",
							"item": [
								{
									"name": "api_should_succeed_with_201_code",
									"item": [
										{
											"name": "Initialize Student Data for Get Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d19863ca-296c-4c0a-905c-2245de5e2b27",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2f6e7cee-8585-4a43-b538-312174955cf9",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Get Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bdfcb6b6-185f-4c58-92bb-1bcd43fa80fa",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "84a0511f-2175-48f7-b07b-4eb546366600",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "when_posting_a_resource",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9b7017b3-a140-4a9b-825b-a1f580541514",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2207505e-87bc-45c5-8fa5-8b521a008302",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"pm.test(\"Should return 1 item for verification\", () => {",
															"    const __ = require('lodash');",
															"     const responseItem = pm.response.json();",
															"     const scenarioId = pm.environment.get('scenarioId');",
															"   ",
															"    pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get('known:'+scenarioId+':studentUniqueId'));",
															"      ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc7cf995-27c9-4751-82f7-698bfe86ae31",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5416768c-0f5d-4271-a130-ee3bc3940154",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_missing_a_required_value",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f094320e-64aa-46de-bd8a-6fe6fc42815d",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that Validation of 'Student' failed.LastSurname is required.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"LastSurname is required.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "09aef639-4cfd-4961-8a5e-e9212bb9d9b9",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  \"John\");",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "When_posting_a_resource_with_decimal_overflow",
							"item": [
								{
									"name": "api_should_fail_with_500_code",
									"item": [
										{
											"name": "api_should_fail_with_500_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06bd6b83-7df0-4326-b319-c50718f81c26",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that The request is invalid.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "65932c0a-6b77-46dd-89d4-ae35da862f9c",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':staffUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':sexDescriptor', \"uri://ed-fi.org/SexDescriptor#Female\");",
															"pm.environment.set('supplied:'+scenarioId+':YearsOfPriorProfessionalExperience', \"1123.2345498765\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n  \"staffUniqueId\": \"{{supplied:{{scenarioId}}:staffUniqueId}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\",\r\n  \"sexDescriptor\":\"uri://ed-fi.org/SexDescriptor#Female\",\r\n  \"YearsOfPriorProfessionalExperience\":\"{{supplied:{{scenarioId}}:YearsOfPriorProfessionalExperience}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"staffs"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_null_collection",
							"item": [
								{
									"name": "api_should_still_succeed_with_201_code",
									"item": [
										{
											"name": "api_should_still_succeed_with_201_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e8d415cb-e4a6-459c-88b2-23957a569926",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1c91dc20-c48c-44b5-89ac-045c4eb529d6",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"pm.environment.set('scenarioId',createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname',newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															"let enteredUSDate=new Date();",
															"enteredUSDate = enteredUSDate.addMonths(-20);",
															"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_null_parameters",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b7fc3b9e-e94c-4fa8-97d0-cb6d4c908dd2",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid because it is missing a request body.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.equal(\"The request is invalid because it is missing a request body.\");",
															"});",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0f8cdce0-a00d-4431-b957-b865be505bca",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_an_existing_resource",
							"item": [
								{
									"name": "api_should_succeed_with_200_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2b98466e-72dc-4372-8528-aba13dd8b16b",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cf575960-cc94-48c0-90ff-a25408170754",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															"let enteredUSDate=new Date();",
															"enteredUSDate = enteredUSDate.addMonths(-20);",
															"enteredUSDate= moment(enteredUSDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':enteredUSDate',enteredUSDate);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"dateEnteredUS\": \"{{supplied:{{scenarioId}}:enteredUSDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "848ff670-4541-4059-8534-e027557139cc",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':schoolId',255901001);",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ba6fd4ce-6148-41fd-a85e-8683ffc58f6a",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{supplied:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_200_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2bd00cfc-03a6-4d4e-a69a-e9b86a33c141",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "be5677f6-a6d2-45dd-a0f8-d3772cfc3978",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', \"GotMarried\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														""
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_optional_references_with_key_unification",
							"item": [
								{
									"name": "api_should_save_the_unified_key_value_when_either_reference_is_provided",
									"item": [
										{
											"name": "Initialize Calendar and SchoolYear",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eff5d32d-6ac2-44fc-a162-67d63734e58f",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should have test data available\", () => {",
															"   pm.expect(pm.response.json().length).to.be.greaterThan(0); ",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const responseItem = pm.response.json()[0];",
															"",
															"pm.environment.set('known:'+scenarioId+':schoolId', responseItem.schoolReference.schoolId);",
															"pm.environment.set('known:'+scenarioId+':schoolYear', responseItem.schoolYearTypeReference.schoolYear);",
															"pm.environment.set('known:'+scenarioId+':calendarCode', responseItem.calendarCode);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6525242d-c243-4394-bd01-a8628d52ee2d",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"pm.environment.set('scenarioId', createScenarioId());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/calendars",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"calendars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize Student Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "195e9632-f6b5-4cb4-9a5a-fa7865c5e1d4",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId', pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "decc5fde-9294-4751-9ab3-689a3c0a0a64",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create StudentSchoolAssociation with neither optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "102a43bd-3611-427e-806d-49b2673a733b",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentSchoolAssociationGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0acfdcad-6a00-4281-92bb-a8d373d076f0",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_neither_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1933e10-beb3-4025-84b0-5393f9bd03c5",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should not have either optional reference\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference).to.equal(undefined);",
															"    pm.expect(responseItem.calendarReference).to.equal(undefined);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6ac6c85d-9d0c-41de-8e92-5a3f98a467d6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with first optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d1daad48-74e6-4066-aec4-eb6cb9702960",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cce61523-940d-47c7-9670-fe93b39f44c3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolYearTypeReference\": {\r\n     \"schoolYear\": \"{{known:{{scenarioId}}:schoolYear}}\"\r\n   },\r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_first_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d179f723-bd42-4419-9008-3c8fcd48f508",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should have first optional reference set with unified key value\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference.schoolYear).to.equal(pm.environment.get('known:'+scenarioId+':schoolYear'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e1774fd8-2522-448d-b016-6c73fb22c7c3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with neither optional reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bf03e733-8411-4145-8e4c-f7d7f5bc7f79",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a3cafe84-6211-459c-965a-b45101850e52",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"schoolReference\":{ \r\n      \"schoolId\": \"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_neither_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "caab4fef-6e88-4237-ab6a-e814d8c30d94",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Should not have either optional reference\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.schoolYearTypeReference).to.equal(undefined);",
															"    pm.expect(responseItem.calendarReference).to.equal(undefined);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3920ec98-f451-4d8b-8356-082acb52cdbc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update StudentSchoolAssociation with second optional reference Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cc28885b-982b-42e0-944d-5cc2e1981b3a",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2f8008ce-67dd-427e-b0f5-78a5038488db",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"calendarReference\": {\r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\",\r\n      \"schoolYear\": \"{{known:{{scenarioId}}:schoolYear}}\",\r\n      \"calendarCode\": \"{{known:{{scenarioId}}:calendarCode}}\"\r\n   },\r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:{{scenarioId}}:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations"
													]
												}
											},
											"response": []
										},
										{
											"name": "when_posting_with_second_optional_reference",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "74fda64e-58f0-4db7-ae99-0f3c6457fb75",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.test(\"Should have second optional reference set with unified key value\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.calendarReference.schoolYear).to.equal(pm.environment.get('known:'+scenarioId+':schoolYear'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "05236748-ec67-412a-b01d-aaaf88c915cc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentSchoolAssociations/{{known:{{scenarioId}}:studentSchoolAssociationGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"studentSchoolAssociations",
														"{{known:{{scenarioId}}:studentSchoolAssociationGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cd8a31c7-9955-4ce7-87f1-7e1bc09037f8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dc48b2e4-7d26-43f9-85e8-06edb7232f38",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_required_unified_keys_with_different_source_values",
							"item": [
								{
									"name": "api_should_fail_with_a_400_bad_request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "987c9038-0b95-4f4e-ad4b-45250c93862d",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should indicate the source values are inconsistent\", () => {",
													"    pm.expect(pm.response.json().message).to.contain(\"Supplied values for unified key property 'schoolId' on 'Grade' are not consistent\");",
													"});",
													"",
													"pm.test(\"Should include the inconsistent values and their location in the resource\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    pm.expect(message).to.contain(\"gradingPeriodReference.schoolId = 777\");",
													"    pm.expect(message).to.contain(\"studentSectionAssociationReference.schoolId = 888\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"gradingPeriodReference\": {\r\n    \"gradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\",\r\n    \"periodSequence\": 1,\r\n    \"schoolId\": 777,\r\n    \"schoolYear\": 2011\r\n  },\r\n  \"studentSectionAssociationReference\": {\r\n    \"beginDate\": \"2010-08-23T00:00:00Z\",\r\n    \"localCourseCode\": \"ALG-1\",\r\n    \"schoolId\": 888,\r\n    \"schoolYear\": 2011,\r\n    \"sectionIdentifier\": \"25590100102Trad220ALG112011\",\r\n    \"sessionName\": \"2010-2011 Fall Semester\",\r\n    \"studentUniqueId\": \"604822\"\r\n  },\r\n  \"gradeTypeDescriptor\": \"uri://ed-fi.org/GradeTypeDescriptor#Grading Period\",\r\n  \"numericGradeEarned\": 63,\r\n  \"learningStandardGrades\": [\r\n    {\r\n      \"learningStandardReference\": {\r\n        \"learningStandardId\": \"111.32.NA.A.1.D\"\r\n      },\r\n      \"numericGradeEarned\": 63\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/grades",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"grades"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5f1532a1-b12d-42aa-bd54-eabdbc4a7124",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dc38a5be-a349-4a45-aa4b-f3c324e60840",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_contextual_unified_keys_with_different_source_values",
							"item": [
								{
									"name": "api_should_fail_with_a_400_bad_request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "169e5809-40ac-4ae7-b052-299000896cdb",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should indicate the source values are inconsistent\", () => {",
													"    pm.expect(pm.response.json().message).to.contain(\"Supplied values for unified key property 'schoolId' on 'BellScheduleClassPeriod' are not consistent\");",
													"});",
													"",
													"pm.test(\"Should include the inconsistent values and their locations in the resource\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    pm.expect(message).to.contain(\"schoolId (from parent context) = 777\");",
													"    pm.expect(message).to.contain(\"classPeriodReference.schoolId = 888\");",
													"    pm.expect(message).to.contain(\"classPeriodReference.schoolId = 999\");",
													"});",
													"",
													"pm.test(\"Should not include multiple messages for the same value mismatches\", () => {",
													"    const message = pm.response.json().message;",
													"    ",
													"    let firstPos = message.indexOf(\"classPeriodReference.schoolId = 999\");",
													"    pm.expect(firstPos).to.be.greaterThan(0);",
													"    ",
													"    let nextPos = message.indexOf(\"classPeriodReference.schoolId = 999\", firstPos + 1);",
													"    pm.expect(nextPos).to.be.lessThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": 777\r\n  },\r\n  \"bellScheduleName\": \"Normal Schedule\",\r\n  \"endTime\": \"16:00:00\",\r\n  \"startTime\": \"08:15:00\",\r\n  \"totalInstructionalTime\": 325,\r\n  \"classPeriods\": [\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 888,\r\n        \"classPeriodName\": \"01 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"02 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"03 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"04 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"05 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"06 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"schoolId\": 999,\r\n        \"classPeriodName\": \"07 - Traditional\"\r\n      }\r\n    }\r\n  ],\r\n  \"dates\": [],\r\n  \"gradeLevels\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f717514c-e59f-4cab-b642-037db49cb1b0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e5060220-a1a8-4df1-b0df-326a42659119",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_contextual_unified_keys_without_a_value",
							"item": [
								{
									"name": "api_should_indicate_success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2e838f3-56dd-4027-9d7d-7267e259df19",
												"exec": [
													"pm.test(\"Status code is 200/201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"schoolReference\": {\r\n    \"schoolId\": {{known:schoolId}}\r\n  },\r\n  \"bellScheduleName\": \"Normal Schedule\",\r\n  \"endTime\": \"16:00:00\",\r\n  \"startTime\": \"08:15:00\",\r\n  \"totalInstructionalTime\": 325,\r\n  \"classPeriods\": [\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"01 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"02 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"03 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"04 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"05 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"06 - Traditional\"\r\n      }\r\n    },\r\n    {\r\n      \"classPeriodReference\": {\r\n        \"classPeriodName\": \"07 - Traditional\"\r\n      }\r\n    }\r\n  ],\r\n  \"dates\": [],\r\n  \"gradeLevels\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_return_all_child_items_with_contextual_unified_key_values_included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87c68149-c8c0-4ae9-8aa6-1d46b58c3771",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return all saved children with the contextual unified key value included\", () => {",
													"    const responseItem = pm.response.json()[0];",
													"    ",
													"    const __ = require('lodash');",
													"    ",
													"    const schoolId = responseItem.schoolReference.schoolId;",
													"    ",
													"    let childItemVerified = false;",
													"    ",
													"    _.all(responseItem.classPeriods, cp => {",
													"        pm.expect(cp.classPeriodReference.schoolId).to.equal(schoolId);",
													"        childItemVerified = true;",
													"    });",
													"    ",
													"    pm.expect(childItemVerified, \"No child items present to be verified.\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/bellSchedules?schoolId=255901001&bellScheduleName=Normal Schedule",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"bellSchedules"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901001"
												},
												{
													"key": "bellScheduleName",
													"value": "Normal Schedule"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "391f452d-514e-49cc-a5dc-e79cdaa63b74",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "781d419d-525e-416e-a0f1-85f0dcc343a2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_posting_a_resource_with_partially_formed_optional_reference",
							"item": [
								{
									"name": "Initialize Staff reference",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5b376820-05e3-446f-bc34-8677bed2ef23",
												"exec": [
													"const uuid = require('uuid');",
													"",
													"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
													"function createScenarioId() { return newGuid().substring(0,5); }",
													"pm.environment.set('scenarioId', createScenarioId());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ef85196c-43be-4fb1-a545-31a022cc0d16",
												"exec": [
													"pm.test(\"Should indicate success\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);    ",
													"})",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"",
													"pm.environment.set('known:'+scenarioId+':staffUniqueId', pm.response.json()[0].staffUniqueId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs?limit=1",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_indicate_success_when_saving_resource_with_partially_formed_optional_reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a95644b-8472-4bbe-94a7-1f074e2a69f6",
												"exec": [
													"pm.test(\"Status code is 200/201 indicating success with saving resource with partially formed optional reference\", () => {",
													"    // NOTE: This behavior will change in future version of the API, becoming a 400 Bad Request with partially formed references",
													"    pm.expect(pm.response.code).to.oneOf([200, 201]);",
													"});",
													"",
													"const scenarioId = pm.environment.get('scenarioId');",
													"pm.environment.set('known:'+scenarioId+':staffSchoolAssociationGuid', pm.response.headers.one('Location').value.split(\"/\").pop());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"calendarReference\": {\r\n  \t\"calendarCode\": \"Ignored Due To Missing SchoolId\",\r\n  \t\"schoolYear\": 1234\r\n  },\r\n  \"schoolReference\": {\r\n    \"schoolId\": \"{{known:schoolId}}\"\r\n  },\r\n  \"staffReference\": {\r\n    \"staffUniqueId\": \"{{known:{{scenarioId}}:staffUniqueId}}\"\r\n  },\r\n  \"programAssignmentDescriptor\": \"uri://ed-fi.org/ProgramAssignmentDescriptor#Regular Education\",\r\n  \"academicSubjects\": [\r\n    {\r\n      \"academicSubjectDescriptor\": \"uri://ed-fi.org/AcademicSubjectDescriptor#Other\"\r\n    }\r\n  ],\r\n  \"gradeLevels\": [\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\"\r\n    },\r\n    {\r\n      \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSchoolAssociations"
											]
										}
									},
									"response": []
								},
								{
									"name": "api_should_not_save_partially_formed_references",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d4fc734-651f-4999-8b73-46e98c418b7d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should not return the partially formed reference\", () => {",
													"   pm.expect(pm.response.json().calendarReference).to.equal(undefined);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffSchoolAssociations/{{known:{{scenarioId}}:staffSchoolAssociationGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffSchoolAssociations",
												"{{known:{{scenarioId}}:staffSchoolAssociationGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Put",
					"item": [
						{
							"name": "when_putting_a_resource_missing_a_required_value",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "424d8fb6-c0a4-43cf-b2b6-230a74b5810e",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "07ecca19-f3c4-47f1-a726-aa1c3ffcbf1f",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "02797158-f416-4606-9321-d67a13c16c3d",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "12da8c4f-d065-4418-8744-ee840ca70678",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b9098c65-89c1-4d51-9704-1f7c625fdf14",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bf7fefa5-9860-4c87-bad6-40385cd16d74",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59c7bb77-91a5-4b9b-b614-0c6ef957c909",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that Validation of 'Student' failed.LastSurname is required.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"LastSurname is required.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3d11b95e-93a9-4bdd-a77e-cc0fe29f05d9",
														"exec": [
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_invalid_state",
							"item": [
								{
									"name": "api_should_fail_with_400_bad_request",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "04be71b4-fca7-43ea-b4a4-a694537add9f",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a9ce05d5-eb8b-4c97-995b-bbeb036fc119",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7924bc3b-7d72-43c6-a853-cffc05d97209",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f1810815-437a-4f53-922c-0b6a16ee531a",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fdd10b79-5d68-4d67-bfe8-020700791b5b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e592209f-5285-4e5a-838d-066a9cc8db69",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_400_bad_request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd75d6c6-6933-4690-b639-25386bcee633",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that Unable to resolve value '00' to an existing 'CountryDescriptor' resource.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Unable to resolve value '00' to an existing 'CountryDescriptor' resource\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "14c3f84a-4bc5-4cae-a0f3-af9eef7bdb23",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"BirthCountryDescriptor\":\"00\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_matching_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bad325c8-9b39-4351-afea-bd483ebe47fc",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6ef7cd83-0870-4dcb-9df4-74ed2e56376f",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c4e4295f-8bf3-417f-ac91-df0c4bef15c5",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d810283e-5b81-4b5e-b054-4ebb946402ac",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e9d55086-320a-44bc-8dcf-318e9d3aba26",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c6b46dd8-f6c4-473d-8af5-71b0783ce66d",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84ecbf1b-9e24-43c3-a1b3-8b1a629eff15",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															"pm.test(\"Should return an ETag header with an updated ETag value.\", () => {",
															"   ",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    let eTagValue =pm.response.headers.one('ETag').value;",
															"    pm.expect(pm.response.headers.one('ETag').value).to.not.equals( pm.environment.get('known:'+scenarioId+':ETag'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "23276a8e-fc19-42a1-9366-cedb966bb320",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_mismatched_etag",
							"item": [
								{
									"name": "api_should_fail_with_412_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8c229d3e-6991-47e1-80b8-12b7bcbbd078",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "072649b3-e599-4981-adf5-09a86943821b",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0751d731-d226-4137-8f5f-d818fceb9836",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e19a706c-f0be-4459-a7a6-4a17d90094df",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0f72be3b-1576-40fb-b3e3-a9c1c2598293",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "da51ab63-6e5a-40dc-9649-34e1fb52ffa5",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_412_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ddfa43e1-215f-4983-8fe4-53767281b113",
														"exec": [
															"pm.test(\"Status code is 412\", () => {",
															"    pm.expect(pm.response.code).to.equal(412);",
															"});",
															"pm.test(\"Should return a message indicating that Resource was modified by another consumer.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource was modified by another consumer\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c78e7d39-cec8-4d8c-8ad5-c557bc364bbc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_mismatched_id",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1e4f08e3-0fa3-4cb0-9afc-acc84d773211",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f2a00a38-9486-4613-91aa-f947423a583d",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "84a18210-a7d1-4522-9dca-b08c1f8d0ad7",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7d303c6e-841b-4dcd-ab52-0b52606b6b54",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cf45d46e-e5d6-4f30-90c9-7a4dd048d85e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "02f6a0cc-b4eb-45ee-ba0c-fd6316ef71ef",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "469c000f-0697-4295-a82e-5785fcbb9228",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															"pm.test(\"Should return a message indicating that Resource to update was not found.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource to update was not found\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "186f6d47-51b7-4937-a70a-a3bbe7701f5d",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':studentGuid',newGuid());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_no_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "992c113a-a148-428a-b050-e7566b742c0f",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ad17759d-4fe8-47e8-93a8-f9d88e966dc9",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "54a6d0cc-0439-49db-8c1d-b12476610d30",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7e9afe47-0269-4986-b2a9-0915ff6bf41f",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "84bf8e0e-cdd8-4ab1-90c4-e3f13dc41aec",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5b2664e5-ab78-40b7-b309-4a9b8b6bd052",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let eTagValue =pm.response.headers.one('ETag').value;",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "940a2351-4165-4c6c-92f5-b7c80ac905bf",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															"pm.test(\"Should return an ETag header with an updated ETag value\", () => {",
															"   ",
															"    const scenarioId = pm.environment.get('scenarioId');",
															"    let eTagValue =pm.response.headers.one('ETag').value;",
															"    pm.expect(pm.response.headers.one('ETag').value).to.not.equals( pm.environment.get('known:'+scenarioId+':ETag'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bc518477-cff4-4680-b13e-37a7e00975d6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_putting_a_resource_with_null_parameters",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "Initialize Student Data for Put Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ef248995-47e8-4abd-954f-161a9b04ae18",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "efdbcacb-bd31-4b7f-862f-d48cebc19bb6",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Put Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8d4efd60-bc3f-41fa-946f-10488b194615",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const moment = require('moment');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b555fcfe-fb90-44dc-9e77-f1011e305792",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Get Request for Students by Guid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a6465795-ffe6-4d21-a948-b82410e7f5d8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e065c3c9-65a3-4735-adc8-ca07f7bf13a0",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "Put Request with MalformedId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "010ad078-bc7a-4bda-95ea-ec9330c57067",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9882632a-d4a0-46a5-b1a7-6d7a82ad92fb",
														"exec": [
															"const scenarioId = pm.environment.get('scenarioId');",
															"const studentGuid =pm.environment.get('known:'+scenarioId+':studentGuid');",
															"pm.environment.set('supplied:'+scenarioId+':MalformedId',studentGuid.substring(0, 1));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastName}}\",\r\n  \"MaidenName\":\"MaidenName\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:MalformedId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:MalformedId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put Request without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "23c3840d-bf5b-4c7a-94c0-917d744a1c20",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid because it is missing a request body\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid because it is missing a request body.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3e69458e-5498-4927-be77-2233f07297a5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put Request with MalformedId and without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e5342f9a-36a5-4a70-93b0-363215b63646",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d085f761-9930-47b4-bdee-6dc3245773da",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{supplied:{{scenarioId}}:MalformedId}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{supplied:{{scenarioId}}:MalformedId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "when_deleting_a_resource",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af55d0cb-53a2-41e8-8887-ae8eeeb3d858",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e22f0d17-18de-4e17-873d-9e22d52f0365",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n   \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "16778dc2-e81e-42fe-8bfe-7c961e2ea1d1",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7a797682-1f18-46ba-9e5b-ef50d00e23af",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_would_break_referential_integrity",
							"item": [
								{
									"name": "api_should_fail_with_409_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "566d252d-9578-4903-b5e2-5f49197339ab",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3333b335-8023-472c-82ad-3b1b068e1351",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Delete Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ba71de14-1a3c-419e-9df3-24ddc3b0bf14",
														"exec": [
															"const moment = require('moment');",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "06a39ace-89df-48b5-82a2-b8fba98e072a",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_409_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4591e02a-992d-454e-a94a-61430302ac4b",
														"exec": [
															"pm.test(\"Status code is 409\", () => {",
															"    pm.expect(pm.response.code).to.equal(409);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e1d7367f-e1af-4808-ad89-79a921d21ffb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_that_doesnt_exist",
							"item": [
								{
									"name": "api_should_fail_with_404_code",
									"item": [
										{
											"name": "api_should_fail_with_404_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f6d8943f-414e-4464-a229-c5430c5a1992",
														"exec": [
															"pm.test(\"Status code is 404\", () => {",
															"    pm.expect(pm.response.code).to.equal(404);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "698df8ce-dbfe-4815-ad7b-bcdd4293d21b",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('supplied:'+scenarioId+':programdGuid', newGuid());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Programs/{{supplied:{{scenarioId}}:programdGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Programs",
														"{{supplied:{{scenarioId}}:programdGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_a_malformed_id",
							"item": [
								{
									"name": "api_should_fail_with_400_code",
									"item": [
										{
											"name": "api_should_fail_with_400_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3863266a-ae56-4315-8d74-c9707cf20a57",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"pm.test(\"Should return a message indicating that The request is invalid.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"The request is invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "15e7b8fa-1726-49d2-a397-883cc11fcf9e",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"const scenarioId = pm.environment.get('scenarioId');",
															"const programdGuid =newGuid();",
															"pm.environment.set('supplied:'+scenarioId+':programdGuid', programdGuid.substr(0,3) + '-' + programdGuid.substr(3+1));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Programs/{{supplied:{{scenarioId}}:programdGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"Programs",
														"{{supplied:{{scenarioId}}:programdGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_an_etag",
							"item": [
								{
									"name": "api_should_succeed_with_204_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7f322e95-69fd-4c32-b208-2e870f928b00",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"console.log(pm.response.headers);",
															"",
															"//removing double-quotes \" around the ETag value",
															"let eTagValue =pm.response.headers.one('ETag').value.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\");",
															"pm.environment.set('known:'+scenarioId+':ETag',eTagValue);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4a926b9d-6f6e-431d-9dfa-d5530a0f03fd",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId',  newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName',  newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "api_should_succeed_with_204_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "32768165-8b5a-42df-b92a-3e078a463433",
														"exec": [
															"pm.test(\"Status code is 204\", () => {",
															"    pm.expect(pm.response.code).to.equal(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fb0cf738-eb98-4f66-8130-10d1ebbfd8bb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "If-Match",
														"value": "{{known:{{scenarioId}}:ETag}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "when_deleting_a_resource_with_mismatched_etag",
							"item": [
								{
									"name": "api_should_fail_with_412_code",
									"item": [
										{
											"name": "Initialize Student Data for Delete Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cfa69062-2995-4f8f-807d-58987f2b9078",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															"",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"pm.environment.set('known:'+scenarioId+':studentGuid',pm.response.headers.one('Location').value.split(\"/\").pop());",
															"pm.environment.set('known:'+scenarioId+':studentUniqueId',pm.environment.get('supplied:'+scenarioId+':studentUniqueId'));",
															"",
															"",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c606b27b-860d-4d8d-ac18-80dfdbaf8cf3",
														"exec": [
															"const uuid = require('uuid');",
															"function newGuid() { return uuid.v4().toString().replace(/[^a-zA-Z0-9 ]/g,\"\"); }",
															"function createScenarioId() { return newGuid().substring(0,5); }",
															"pm.environment.set('scenarioId', createScenarioId());",
															"",
															"const scenarioId = pm.environment.get('scenarioId');",
															"",
															"pm.environment.set('supplied:'+scenarioId+':studentUniqueId', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':lastSurname', newGuid());",
															"pm.environment.set('supplied:'+scenarioId+':firstName', newGuid());",
															"",
															"",
															"const moment = require('moment');",
															"let birthDate=new Date();",
															"birthDate = birthDate.addYears(-20);",
															"birthDate= moment(birthDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':birthDate',birthDate);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"studentUniqueId\": \"{{supplied:{{scenarioId}}:studentUniqueId}}\",\r\n  \"birthDate\":\"{{supplied:{{scenarioId}}:birthDate}}\",\r\n  \"firstName\": \"{{supplied:{{scenarioId}}:firstName}}\",\r\n  \"lastSurname\": \"{{supplied:{{scenarioId}}:lastSurname}}\"\r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initialize StudentSchoolAssociations Data for Delete Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "214752e2-20ea-4b60-91dc-0f70760fbed1",
														"exec": [
															"const moment = require('moment');",
															"const scenarioId = pm.environment.get('scenarioId');",
															"let entryDate=new Date();",
															"entryDate = entryDate.addMonths(-10);",
															"entryDate= moment(entryDate).format(\"YYYY-MM-DD\");",
															"pm.environment.set('supplied:'+scenarioId+':entryDate',entryDate);",
															"pm.environment.set('supplied:'+scenarioId+':entryGradeLevelDescriptor',\"uri://ed-fi.org/GradeLevelDescriptor#Fourth grade\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9b12e34b-caeb-42ad-be40-b6b772a2c3f1",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.expect(pm.response.code).to.equal(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n   \"schoolReference\":{ \r\n      \"schoolId\":\"{{known:schoolId}}\"\r\n   },\r\n   \"studentReference\":{ \r\n      \"studentUniqueId\":\"{{known:{{scenarioId}}:studentUniqueId}}\"\r\n   },\r\n   \"entryDate\":\"{{supplied:{{scenarioId}}:entryDate}}\",\r\n   \"entryGradeLevelDescriptor\":\"{{supplied:{{scenarioId}}:entryGradeLevelDescriptor}}\"\r\n  \r\n}"
												},
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"StudentSchoolAssociations"
													]
												},
												"description": "This api post method adds new academicWeeks for particular school .\nThis test method will throw WeekIdentifier is required error when WeekIdentifier is not passed"
											},
											"response": []
										},
										{
											"name": "api_should_fail_with_412_code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "183dbdc6-d5e6-49e6-b8fb-1d2b71739164",
														"exec": [
															"pm.test(\"Status code is 412\", () => {",
															"    pm.expect(pm.response.code).to.equal(412);",
															"});",
															"pm.test(\"Should return a message indicating that Resource was modified by another consume.\", () => {",
															"    const responseItem = pm.response.json();",
															"    pm.expect(responseItem.message).to.contains(\"Resource was modified by another consumer\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ee23ddaa-1d6e-4fac-a03f-f99c9e4379f7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "If-Match",
														"value": "InvalidETAG",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students/{{known:{{scenarioId}}:studentGuid}}",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"data",
														"v3",
														"ed-fi",
														"students",
														"{{known:{{scenarioId}}:studentGuid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean Up Test Data",
					"item": [
						{
							"name": "Clean up Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5282c4ff-7769-47f7-aa60-ac8c208b9485",
										"exec": [
											"const __ = require('lodash');\r",
											"\r",
											"const keys = __.keys(pm.environment.toObject());\r",
											"console.log('Initial keys: ' + JSON.stringify(keys));\r",
											"\r",
											"const keysToRemove = __.filter(keys, x => __.startsWith(x, 'known:') || __.startsWith(x, 'supplied:'));\r",
											"\r",
											"__.each(keysToRemove, k => pm.environment.unset(k));\r",
											"\r",
											"const remainingKeys = __.keys(pm.environment.toObject());\r",
											"console.log('Remaining keys:' + JSON.stringify(remainingKeys));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiBaseUrl}}",
									"host": [
										"{{ApiBaseUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "613feec9-5d32-4287-8e5a-fd1d0066c772",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"let tokenExpiration = pm.environment.get('TokenExpiry');",
					"let currentToken = pm.environment.get('AccessToken');",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get('ApiKey_255901');",
					"    let clientSecret = pm.environment.get('ApiSecret_255901');",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"        header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(\"AccessToken\", newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set('TokenExpiry', expiryDate.getTime());",
					"    });",
					"}",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "99f28e5e-3db0-4263-88b4-23b6d0bd42ab",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}