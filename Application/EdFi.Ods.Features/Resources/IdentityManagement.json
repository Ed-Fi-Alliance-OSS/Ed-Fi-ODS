{
  "swagger": "2.0",
  "info": {
    "description": "The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. \n***\n > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.* \n***\n",
    "title": "Identity API Endpoints",
    "version": "2"
  },
  "host": "%HOST%",
  "basePath": "%BASE_PATH%",
  "paths": {
    "/identities": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Identity object to be created.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Identity was created. The new Unique Id is returned in the returned Identity record.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "There were invalid properties."
          },
          "501": {
            "description": "The server does not support the requested function."
          },
          "502": {
            "description": "The underlying identity system returned an error."
          }
        },
        "tags": [
          "Identities"
        ],
        "description": "Assumption here is that the user has verified that possible matches are not correct matches. Returns the created identity information along with the assigned Unique Id.",
        "operationId": "Identities_Create",
        "summary": "Creates a new Unique Id for the given Identity information."
      }
    },
    "/identities/find": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Unique Ids of the persons to be retrieved.",
            "in": "body",
            "name": "uniqueIds",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The returned identities match the provided Unique Id.",
            "schema": {
              "$ref": "#/definitions/IdentitySearchResponse"
            }
          },
          "202": {
            "description": "The identity query was accepted for asynchronous processing. The result will be available at the URL indicated in the location response header."
          },
          "501": {
            "description": "The server does not support the requested function."
          },
          "502": {
            "description": "The underlying identity system returned an error."
          }
        },
        "tags": [
          "Identities"
        ],
        "operationId": "Identities_Find",
        "summary": "Retrieve a multiple person records from their Unique Ids."
      }
    },
    "/identities/results/{id}": {
      "get": {
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The search token provided by a Find or Search request.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The identity results are contained in the body of this response.",
            "schema": {
              "$ref": "#/definitions/IdentitySearchResponse"
            }
          },
          "404": {
            "description": "No identity search matching the provided search token was found."
          },
          "501": {
            "description": "The server does not support the requested function."
          },
          "502": {
            "description": "The underlying identity system returned an error."
          }
        },
        "tags": [
          "Identities"
        ],
        "operationId": "Identities_Result",
        "summary": "Retrieve asynchronous search results from a previously created request."
      }
    },
    "/identities/search": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "One or more identity search request objects.",
            "in": "body",
            "name": "criteria",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/IdentitySearchRequest"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The returned identities are possible matches for the provided identity search requests.",
            "schema": {
              "$ref": "#/definitions/IdentitySearchResponse"
            }
          },
          "202": {
            "description": "The identity query was accepted for asynchronous processing. The result will be available at the URL indicated in the location response header."
          },
          "501": {
            "description": "The server does not support the requested function."
          },
          "502": {
            "description": "The underlying identity system returned an error."
          }
        },
        "tags": [
          "Identities"
        ],
        "operationId": "Identities_Search",
        "summary": "Lookup existing Unique Ids for a persons, or suggest possible matches."
      }
    },
    "/identities/{id}": {
      "get": {
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Unique Id of the identity to be retrieved",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The returned identity matches the provided Unique Id.",
            "schema": {
              "$ref": "#/definitions/IdentityResponse"
            }
          },
          "404": {
            "description": "No identity matching the provided Unique Id was found."
          },
          "501": {
            "description": "The server does not support the requested function."
          },
          "502": {
            "description": "The underlying identity system returned an error."
          }
        },
        "tags": [
          "Identities"
        ],
        "description": "Returns either a single identity or 404 and no data",
        "operationId": "Identities_GetById",
        "summary": "Retrieve a single person record from their Unique Id."
      }
    }
  },
  "definitions": {
    "IdentityCreateRequest": {
      "properties": {
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        },
        "BirthLocation": {
          "$ref": "#/definitions/Location"
        },
        "BirthOrder": {
          "format": "int32",
          "type": "integer"
        },
        "FirstName": {
          "type": "string"
        },
        "GenerationCodeSuffix": {
          "type": "string"
        },
        "LastSurname": {
          "type": "string"
        },
        "MiddleName": {
          "type": "string"
        },
        "SexType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityResponse": {
      "properties": {
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        },
        "BirthLocation": {
          "$ref": "#/definitions/Location"
        },
        "BirthOrder": {
          "format": "int32",
          "type": "integer"
        },
        "FirstName": {
          "type": "string"
        },
        "GenerationCodeSuffix": {
          "type": "string"
        },
        "LastSurname": {
          "type": "string"
        },
        "MiddleName": {
          "type": "string"
        },
        "Score": {
          "format": "double",
          "type": "number"
        },
        "SexType": {
          "type": "string"
        },
        "UniqueId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentitySearchRequest": {
      "properties": {
        "BirthDate": {
          "format": "date-time",
          "type": "string"
        },
        "BirthLocation": {
          "$ref": "#/definitions/Location"
        },
        "BirthOrder": {
          "format": "int32",
          "type": "integer"
        },
        "FirstName": {
          "type": "string"
        },
        "GenerationCodeSuffix": {
          "type": "string"
        },
        "LastSurname": {
          "type": "string"
        },
        "MiddleName": {
          "type": "string"
        },
        "SexType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentitySearchResponse": {
      "properties": {
        "SearchResponses": {
          "items": {
            "$ref": "#/definitions/IdentitySearchResponses"
          },
          "type": "array"
        },
        "Status": {
          "enum": [
            "Incomplete",
            "Complete"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentitySearchResponses": {
      "properties": {
        "Responses": {
          "items": {
            "$ref": "#/definitions/IdentityResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Location": {
      "properties": {
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "InternationalProvince": {
          "type": "string"
        },
        "StateAbbreviation": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "tags": [
    {
      "description": "Retrieve or create Unique Ids for a person, and add or update their information. Version 2.0",
      "name": "Identities"
    }
  ],
   "securityDefinitions": {
    "oauth2_client_credentials": {
      "type": "oauth2",
      "description": "Ed-Fi ODS/API OAuth 2.0 Client Credentials Grant Type authorization",
      "flow": "application",
      "tokenUrl": "%TOKEN_URL%",
      "scopes": {}
    }
  },
  "security": [
    {
      "oauth2_client_credentials": []
    }
  ]
}