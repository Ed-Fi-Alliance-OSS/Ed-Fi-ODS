// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.

using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using NHibernate.Driver;

namespace EdFi.Ods.Common.Infrastructure.SqlServer
{
    /// <summary>
    /// Overrides the NHibernate SQL client driver's OnBeforePrepare method to modify
    /// the generated SQL to correctly use any table-valued parameters that are present.
    /// </summary>
    public class EdFiSql2008ClientDriver : Sql2008ClientDriver
    {
        /// <summary>
        /// Search for use of SQL Server table-value parameters in the SqlCommand, and modify
        /// the SQL so that they are used correctly.
        /// </summary>
        /// <param name="command">The <see cref="System.Data.SqlClient.SqlCommand"/> prepared by NHibernate.</param>
        protected override void OnBeforePrepare(DbCommand command)
        {
            // Defensive check against accidental use of this client driver with a non-SQL Server back end
            if (!(command is SqlCommand))
            {
                throw new NotSupportedException(
                    $"The configured client driver ({typeof(EdFiSql2008ClientDriver).Name}) was expecting a '{typeof(SqlCommand).FullName}' but encountered a command of type '{command.GetType().FullName}'.");
            }

            // Find any usages of SQL Server "structured" parameters in the prepared command
            foreach (SqlParameter parameter in command.Parameters)
            {
                if (parameter.SqlDbType == SqlDbType.Structured)
                {
                    string parameterName = parameter.ParameterName;

                    // Replace the SQL Server-specific SQL generated by NHibernate
                    // for the structured parameter to use a sub-query against the
                    // table-valued parameter (required for correct execution behavior).
                    command.CommandText = command.CommandText
                                                 .Replace(
                                                      $"({parameterName})",
                                                      $"(SELECT Id FROM {parameterName})");
                }
            }
        }
    }
}
