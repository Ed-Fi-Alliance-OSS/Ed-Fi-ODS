// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.

using System;
using System.Data;
using System.Data.Common;
using Microsoft.Data.SqlClient;
using NHibernate.Driver;
using NHibernate.SqlTypes;

namespace EdFi.Ods.Common.Infrastructure.SqlServer
{
    /// <summary>
    /// Overrides the NHibernate SQL client driver's OnBeforePrepare method to modify
    /// the generated SQL to correctly use any table-valued parameters that are present.
    /// </summary>
    public class EdFiSql2008ClientDriver : MicrosoftDataSqlClientDriver
    {
        /// <summary>
        /// Search for use of SQL Server table-value parameters in the SqlCommand, and modify
        /// the SQL so that they are used correctly.
        /// </summary>
        /// <param name="command">The <see cref="Microsoft.Data.SqlClient.SqlCommand"/> prepared by NHibernate.</param>
        protected override void OnBeforePrepare(DbCommand command)
        {
            // Defensive check against accidental use of this client driver with a non-SQL Server back end
            if (command is not SqlCommand)
            {
                throw new NotSupportedException(
                    $"The configured client driver ({typeof(EdFiSql2008ClientDriver).Name}) was expecting a '{typeof(SqlCommand).FullName}' but encountered a command of type '{command.GetType().FullName}'.");
            }

            // Find any usages of SQL Server "structured" parameters in the prepared command
            foreach (SqlParameter parameter in command.Parameters)
            {
                if (parameter.SqlDbType == SqlDbType.Structured)
                {
                    string parameterName = parameter.ParameterName;

                    // Replace the SQL Server-specific SQL generated by NHibernate
                    // for the structured parameter to use a sub-query against the
                    // table-valued parameter (required for correct execution behavior).
                    command.CommandText = command.CommandText
                                                 .Replace(
                                                      $"({parameterName})",
                                                      $"(SELECT Id FROM {parameterName})");
                }
            }
        }
        
        protected override void InitializeParameter(DbParameter dbParam, string name, SqlType sqlType)
        {
            base.InitializeParameter(dbParam, name, sqlType);
        
            // DbType.Currency is provided in the API model produced by MetaEd, but it uses the SQL Server decimal
            // type for currency values in the generated database scripts, and the 'money' type in the PostgreSQL
            // scripts. To support money type already in use with the PostgreSQL ODS, we had to modify the NHibernate
            // mappings to use 'Currency' instead of 'Decimal' and remove the logic (now seen below) from the out-of-the-box
            // PostgreSQL driver class.
            //
            // But this then leaves the NHibernate mappings for SQL Server using the 'Currency' type (unless we implement
            // database engine-specific conversions from DbType to NHibernate type, which is a bit nonsensical).
            //
            // The best option seems to be to move the logic seen below over from the PostgreSQL driver class to our
            // custom SQL Server driver class and override the SQL Server mappings back to decimal to match what is
            // actually used for our SQL Server Ed-Fi ODS.
            if (sqlType.DbType == DbType.Currency)
                dbParam.DbType = DbType.Decimal;
        }
    }
}
