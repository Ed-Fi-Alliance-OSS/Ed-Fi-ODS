using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using EdFi.Common.Extensions;
using EdFi.Ods.Api.Caching;
using EdFi.Ods.Api.Attributes;
using EdFi.Ods.Common.Adapters;
using EdFi.Ods.Common.Attributes;
using EdFi.Ods.Common.Caching;
using EdFi.Ods.Common.Models.Domain;
using EdFi.Ods.Common.Infrastructure.Extensibility;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Entities.Common.EdFi;
using EdFi.Ods.Entities.Common.TPDM;
using Newtonsoft.Json;

// Aggregate: AccreditationStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.AccreditationStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AccreditationStatusDescriptor table of the AccreditationStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AccreditationStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IAccreditationStatusDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int AccreditationStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AccreditationStatusDescriptorId", AccreditationStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAccreditationStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAccreditationStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: AidTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.AidTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AidTypeDescriptor table of the AidTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AidTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IAidTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int AidTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AidTypeDescriptorId", AidTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAidTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAidTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicantProfile

namespace EdFi.Ods.Entities.NHibernate.ApplicantProfileAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="ApplicantProfile"/> entity.
    /// </summary>
    public class ApplicantProfileReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string ApplicantProfileIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantProfileIdentifier", ApplicantProfileIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfile table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfile : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IApplicantProfile, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfile()
        {
            ApplicantProfileAddresses = new HashSet<ApplicantProfileAddress>();
            ApplicantProfileApplicantCharacteristics = new HashSet<ApplicantProfileApplicantCharacteristic>();
            ApplicantProfileBackgroundChecks = new HashSet<ApplicantProfileBackgroundCheck>();
            ApplicantProfileDisabilities = new HashSet<ApplicantProfileDisability>();
            ApplicantProfileEducatorPreparationProgramNames = new HashSet<ApplicantProfileEducatorPreparationProgramName>();
            ApplicantProfileElectronicMails = new HashSet<ApplicantProfileElectronicMail>();
            ApplicantProfileGradePointAverages = new HashSet<ApplicantProfileGradePointAverage>();
            ApplicantProfileHighlyQualifiedAcademicSubjects = new HashSet<ApplicantProfileHighlyQualifiedAcademicSubject>();
            ApplicantProfileIdentificationDocuments = new HashSet<ApplicantProfileIdentificationDocument>();
            ApplicantProfileInternationalAddresses = new HashSet<ApplicantProfileInternationalAddress>();
            ApplicantProfileLanguages = new HashSet<ApplicantProfileLanguage>();
            ApplicantProfilePersonalIdentificationDocuments = new HashSet<ApplicantProfilePersonalIdentificationDocument>();
            ApplicantProfileRaces = new HashSet<ApplicantProfileRace>();
            ApplicantProfileTelephones = new HashSet<ApplicantProfileTelephone>();
            ApplicantProfileVisas = new HashSet<ApplicantProfileVisa>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ApplicantProfileIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BirthDate 
        {
            get { return _birthDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _birthDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _birthDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _birthDate;
        
        public virtual int? CitizenshipStatusDescriptorId 
        {
            get
            {
                if (_citizenshipStatusDescriptorId == default(int?))
                    _citizenshipStatusDescriptorId = string.IsNullOrWhiteSpace(_citizenshipStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CitizenshipStatusDescriptor", _citizenshipStatusDescriptor);

                return _citizenshipStatusDescriptorId;
            } 
            set
            {
                _citizenshipStatusDescriptorId = value;
                _citizenshipStatusDescriptor = null;
            }
        }

        private int? _citizenshipStatusDescriptorId;
        private string _citizenshipStatusDescriptor;

        public virtual string CitizenshipStatusDescriptor
        {
            get
            {
                if (_citizenshipStatusDescriptor == null)
                    _citizenshipStatusDescriptor = _citizenshipStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CitizenshipStatusDescriptor", _citizenshipStatusDescriptorId.Value);
                    
                return _citizenshipStatusDescriptor;
            }
            set
            {
                _citizenshipStatusDescriptor = value;
                _citizenshipStatusDescriptorId = default(int?);
            }
        }
        public virtual bool? EconomicDisadvantaged  { get; set; }
        public virtual bool? FirstGenerationStudent  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string FirstName  { get; set; }
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        [StringLength(10), NoDangerousText]
        public virtual string GenerationCodeSuffix  { get; set; }
        public virtual int? HighestCompletedLevelOfEducationDescriptorId 
        {
            get
            {
                if (_highestCompletedLevelOfEducationDescriptorId == default(int?))
                    _highestCompletedLevelOfEducationDescriptorId = string.IsNullOrWhiteSpace(_highestCompletedLevelOfEducationDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LevelOfEducationDescriptor", _highestCompletedLevelOfEducationDescriptor);

                return _highestCompletedLevelOfEducationDescriptorId;
            } 
            set
            {
                _highestCompletedLevelOfEducationDescriptorId = value;
                _highestCompletedLevelOfEducationDescriptor = null;
            }
        }

        private int? _highestCompletedLevelOfEducationDescriptorId;
        private string _highestCompletedLevelOfEducationDescriptor;

        public virtual string HighestCompletedLevelOfEducationDescriptor
        {
            get
            {
                if (_highestCompletedLevelOfEducationDescriptor == null)
                    _highestCompletedLevelOfEducationDescriptor = _highestCompletedLevelOfEducationDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LevelOfEducationDescriptor", _highestCompletedLevelOfEducationDescriptorId.Value);
                    
                return _highestCompletedLevelOfEducationDescriptor;
            }
            set
            {
                _highestCompletedLevelOfEducationDescriptor = value;
                _highestCompletedLevelOfEducationDescriptorId = default(int?);
            }
        }
        public virtual bool? HighlyQualifiedTeacher  { get; set; }
        public virtual bool? HispanicLatinoEthnicity  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string LastSurname  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MaidenName  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MiddleName  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string PersonalTitlePrefix  { get; set; }
        public virtual int? SexDescriptorId 
        {
            get
            {
                if (_sexDescriptorId == default(int?))
                    _sexDescriptorId = string.IsNullOrWhiteSpace(_sexDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SexDescriptor", _sexDescriptor);

                return _sexDescriptorId;
            } 
            set
            {
                _sexDescriptorId = value;
                _sexDescriptor = null;
            }
        }

        private int? _sexDescriptorId;
        private string _sexDescriptor;

        public virtual string SexDescriptor
        {
            get
            {
                if (_sexDescriptor == null)
                    _sexDescriptor = _sexDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SexDescriptor", _sexDescriptorId.Value);
                    
                return _sexDescriptor;
            }
            set
            {
                _sexDescriptor = value;
                _sexDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? YearsOfPriorProfessionalExperience  { get; set; }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? YearsOfPriorTeachingExperience  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddress> _applicantProfileAddresses;
        private ICollection<Entities.Common.TPDM.IApplicantProfileAddress> _applicantProfileAddressesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddress> ApplicantProfileAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileAddresses)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileAddresses;
            }
            set
            {
                _applicantProfileAddresses = value;
                _applicantProfileAddressesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileAddress, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileAddress> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileAddresses)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileAddressesCovariant;
            }
            set
            {
                ApplicantProfileAddresses = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddress>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddress>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileApplicantCharacteristic> _applicantProfileApplicantCharacteristics;
        private ICollection<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic> _applicantProfileApplicantCharacteristicsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileApplicantCharacteristic> ApplicantProfileApplicantCharacteristics
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileApplicantCharacteristics)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileApplicantCharacteristics;
            }
            set
            {
                _applicantProfileApplicantCharacteristics = value;
                _applicantProfileApplicantCharacteristicsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileApplicantCharacteristic>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileApplicantCharacteristics
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileApplicantCharacteristics)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileApplicantCharacteristicsCovariant;
            }
            set
            {
                ApplicantProfileApplicantCharacteristics = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileApplicantCharacteristic>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileApplicantCharacteristic>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileBackgroundCheck> _applicantProfileBackgroundChecks;
        private ICollection<Entities.Common.TPDM.IApplicantProfileBackgroundCheck> _applicantProfileBackgroundChecksCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileBackgroundCheck> ApplicantProfileBackgroundChecks
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileBackgroundChecks)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileBackgroundChecks;
            }
            set
            {
                _applicantProfileBackgroundChecks = value;
                _applicantProfileBackgroundChecksCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileBackgroundCheck, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileBackgroundCheck>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileBackgroundCheck> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileBackgroundChecks
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileBackgroundChecks)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileBackgroundChecksCovariant;
            }
            set
            {
                ApplicantProfileBackgroundChecks = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileBackgroundCheck>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileBackgroundCheck>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisability> _applicantProfileDisabilities;
        private ICollection<Entities.Common.TPDM.IApplicantProfileDisability> _applicantProfileDisabilitiesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisability> ApplicantProfileDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileDisabilities)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileDisabilities;
            }
            set
            {
                _applicantProfileDisabilities = value;
                _applicantProfileDisabilitiesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileDisability, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisability>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileDisability> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileDisabilities)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileDisabilitiesCovariant;
            }
            set
            {
                ApplicantProfileDisabilities = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisability>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisability>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileEducatorPreparationProgramName> _applicantProfileEducatorPreparationProgramNames;
        private ICollection<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName> _applicantProfileEducatorPreparationProgramNamesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileEducatorPreparationProgramName> ApplicantProfileEducatorPreparationProgramNames
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileEducatorPreparationProgramNames)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileEducatorPreparationProgramNames;
            }
            set
            {
                _applicantProfileEducatorPreparationProgramNames = value;
                _applicantProfileEducatorPreparationProgramNamesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileEducatorPreparationProgramName>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileEducatorPreparationProgramNames
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileEducatorPreparationProgramNames)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileEducatorPreparationProgramNamesCovariant;
            }
            set
            {
                ApplicantProfileEducatorPreparationProgramNames = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileEducatorPreparationProgramName>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileEducatorPreparationProgramName>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileElectronicMail> _applicantProfileElectronicMails;
        private ICollection<Entities.Common.TPDM.IApplicantProfileElectronicMail> _applicantProfileElectronicMailsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileElectronicMail> ApplicantProfileElectronicMails
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileElectronicMails)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileElectronicMails;
            }
            set
            {
                _applicantProfileElectronicMails = value;
                _applicantProfileElectronicMailsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileElectronicMail, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileElectronicMail>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileElectronicMail> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileElectronicMails
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileElectronicMails)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileElectronicMailsCovariant;
            }
            set
            {
                ApplicantProfileElectronicMails = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileElectronicMail>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileElectronicMail>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileGradePointAverage> _applicantProfileGradePointAverages;
        private ICollection<Entities.Common.TPDM.IApplicantProfileGradePointAverage> _applicantProfileGradePointAveragesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileGradePointAverage> ApplicantProfileGradePointAverages
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileGradePointAverages)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileGradePointAverages;
            }
            set
            {
                _applicantProfileGradePointAverages = value;
                _applicantProfileGradePointAveragesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileGradePointAverage, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileGradePointAverage>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileGradePointAverage> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileGradePointAverages
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileGradePointAverages)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileGradePointAveragesCovariant;
            }
            set
            {
                ApplicantProfileGradePointAverages = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileGradePointAverage>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileGradePointAverage>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileHighlyQualifiedAcademicSubject> _applicantProfileHighlyQualifiedAcademicSubjects;
        private ICollection<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject> _applicantProfileHighlyQualifiedAcademicSubjectsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileHighlyQualifiedAcademicSubject> ApplicantProfileHighlyQualifiedAcademicSubjects
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileHighlyQualifiedAcademicSubjects)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileHighlyQualifiedAcademicSubjects;
            }
            set
            {
                _applicantProfileHighlyQualifiedAcademicSubjects = value;
                _applicantProfileHighlyQualifiedAcademicSubjectsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileHighlyQualifiedAcademicSubject>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileHighlyQualifiedAcademicSubjects
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileHighlyQualifiedAcademicSubjects)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileHighlyQualifiedAcademicSubjectsCovariant;
            }
            set
            {
                ApplicantProfileHighlyQualifiedAcademicSubjects = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileHighlyQualifiedAcademicSubject>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileHighlyQualifiedAcademicSubject>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileIdentificationDocument> _applicantProfileIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IApplicantProfileIdentificationDocument> _applicantProfileIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileIdentificationDocument> ApplicantProfileIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileIdentificationDocuments)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileIdentificationDocuments;
            }
            set
            {
                _applicantProfileIdentificationDocuments = value;
                _applicantProfileIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileIdentificationDocument, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileIdentificationDocument> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileIdentificationDocuments)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileIdentificationDocumentsCovariant;
            }
            set
            {
                ApplicantProfileIdentificationDocuments = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileIdentificationDocument>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileInternationalAddress> _applicantProfileInternationalAddresses;
        private ICollection<Entities.Common.TPDM.IApplicantProfileInternationalAddress> _applicantProfileInternationalAddressesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileInternationalAddress> ApplicantProfileInternationalAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileInternationalAddresses)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileInternationalAddresses;
            }
            set
            {
                _applicantProfileInternationalAddresses = value;
                _applicantProfileInternationalAddressesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileInternationalAddress, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileInternationalAddress> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileInternationalAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileInternationalAddresses)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileInternationalAddressesCovariant;
            }
            set
            {
                ApplicantProfileInternationalAddresses = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileInternationalAddress>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileInternationalAddress>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguage> _applicantProfileLanguages;
        private ICollection<Entities.Common.TPDM.IApplicantProfileLanguage> _applicantProfileLanguagesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguage> ApplicantProfileLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileLanguages)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileLanguages;
            }
            set
            {
                _applicantProfileLanguages = value;
                _applicantProfileLanguagesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileLanguage, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguage>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileLanguage> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileLanguages)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileLanguagesCovariant;
            }
            set
            {
                ApplicantProfileLanguages = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguage>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguage>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfilePersonalIdentificationDocument> _applicantProfilePersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument> _applicantProfilePersonalIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfilePersonalIdentificationDocument> ApplicantProfilePersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfilePersonalIdentificationDocuments)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfilePersonalIdentificationDocuments;
            }
            set
            {
                _applicantProfilePersonalIdentificationDocuments = value;
                _applicantProfilePersonalIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfilePersonalIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument> Entities.Common.TPDM.IApplicantProfile.ApplicantProfilePersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfilePersonalIdentificationDocuments)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfilePersonalIdentificationDocumentsCovariant;
            }
            set
            {
                ApplicantProfilePersonalIdentificationDocuments = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfilePersonalIdentificationDocument>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfilePersonalIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileRace> _applicantProfileRaces;
        private ICollection<Entities.Common.TPDM.IApplicantProfileRace> _applicantProfileRacesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileRace> ApplicantProfileRaces
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileRaces)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileRaces;
            }
            set
            {
                _applicantProfileRaces = value;
                _applicantProfileRacesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileRace, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileRace>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileRace> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileRaces
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileRaces)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileRacesCovariant;
            }
            set
            {
                ApplicantProfileRaces = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileRace>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileRace>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileTelephone> _applicantProfileTelephones;
        private ICollection<Entities.Common.TPDM.IApplicantProfileTelephone> _applicantProfileTelephonesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileTelephone> ApplicantProfileTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileTelephones)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileTelephones;
            }
            set
            {
                _applicantProfileTelephones = value;
                _applicantProfileTelephonesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileTelephone, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileTelephone> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileTelephones)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileTelephonesCovariant;
            }
            set
            {
                ApplicantProfileTelephones = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileTelephone>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileTelephone>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileVisa> _applicantProfileVisas;
        private ICollection<Entities.Common.TPDM.IApplicantProfileVisa> _applicantProfileVisasCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileVisa> ApplicantProfileVisas
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileVisas)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileVisas;
            }
            set
            {
                _applicantProfileVisas = value;
                _applicantProfileVisasCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileVisa, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileVisa>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileVisa> Entities.Common.TPDM.IApplicantProfile.ApplicantProfileVisas
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileVisas)
                    if (item.ApplicantProfile == null)
                        item.ApplicantProfile = this;
                // -------------------------------------------------------------

                return _applicantProfileVisasCovariant;
            }
            set
            {
                ApplicantProfileVisas = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileVisa>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileVisa>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CitizenshipStatusDescriptor", new LookupColumnDetails { PropertyName = "CitizenshipStatusDescriptorId", LookupTypeName = "CitizenshipStatusDescriptor"} },
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
                { "HighestCompletedLevelOfEducationDescriptor", new LookupColumnDetails { PropertyName = "HighestCompletedLevelOfEducationDescriptorId", LookupTypeName = "LevelOfEducationDescriptor"} },
                { "SexDescriptor", new LookupColumnDetails { PropertyName = "SexDescriptorId", LookupTypeName = "SexDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantProfileIdentifier", ApplicantProfileIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfile)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfile) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicantProfileAddressesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileAddressesSupported
        {
            get { return _isApplicantProfileAddressesSupported; }
            set { _isApplicantProfileAddressesSupported = value; }
        }

        private bool _isApplicantProfileApplicantCharacteristicsSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileApplicantCharacteristicsSupported
        {
            get { return _isApplicantProfileApplicantCharacteristicsSupported; }
            set { _isApplicantProfileApplicantCharacteristicsSupported = value; }
        }

        private bool _isApplicantProfileBackgroundChecksSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileBackgroundChecksSupported
        {
            get { return _isApplicantProfileBackgroundChecksSupported; }
            set { _isApplicantProfileBackgroundChecksSupported = value; }
        }

        private bool _isApplicantProfileDisabilitiesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileDisabilitiesSupported
        {
            get { return _isApplicantProfileDisabilitiesSupported; }
            set { _isApplicantProfileDisabilitiesSupported = value; }
        }

        private bool _isApplicantProfileEducatorPreparationProgramNamesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileEducatorPreparationProgramNamesSupported
        {
            get { return _isApplicantProfileEducatorPreparationProgramNamesSupported; }
            set { _isApplicantProfileEducatorPreparationProgramNamesSupported = value; }
        }

        private bool _isApplicantProfileElectronicMailsSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileElectronicMailsSupported
        {
            get { return _isApplicantProfileElectronicMailsSupported; }
            set { _isApplicantProfileElectronicMailsSupported = value; }
        }

        private bool _isApplicantProfileGradePointAveragesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileGradePointAveragesSupported
        {
            get { return _isApplicantProfileGradePointAveragesSupported; }
            set { _isApplicantProfileGradePointAveragesSupported = value; }
        }

        private bool _isApplicantProfileHighlyQualifiedAcademicSubjectsSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectsSupported
        {
            get { return _isApplicantProfileHighlyQualifiedAcademicSubjectsSupported; }
            set { _isApplicantProfileHighlyQualifiedAcademicSubjectsSupported = value; }
        }

        private bool _isApplicantProfileIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileIdentificationDocumentsSupported
        {
            get { return _isApplicantProfileIdentificationDocumentsSupported; }
            set { _isApplicantProfileIdentificationDocumentsSupported = value; }
        }

        private bool _isApplicantProfileInternationalAddressesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileInternationalAddressesSupported
        {
            get { return _isApplicantProfileInternationalAddressesSupported; }
            set { _isApplicantProfileInternationalAddressesSupported = value; }
        }

        private bool _isApplicantProfileLanguagesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileLanguagesSupported
        {
            get { return _isApplicantProfileLanguagesSupported; }
            set { _isApplicantProfileLanguagesSupported = value; }
        }

        private bool _isApplicantProfilePersonalIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfilePersonalIdentificationDocumentsSupported
        {
            get { return _isApplicantProfilePersonalIdentificationDocumentsSupported; }
            set { _isApplicantProfilePersonalIdentificationDocumentsSupported = value; }
        }

        private bool _isApplicantProfileRacesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileRacesSupported
        {
            get { return _isApplicantProfileRacesSupported; }
            set { _isApplicantProfileRacesSupported = value; }
        }

        private bool _isApplicantProfileTelephonesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileTelephonesSupported
        {
            get { return _isApplicantProfileTelephonesSupported; }
            set { _isApplicantProfileTelephonesSupported = value; }
        }

        private bool _isApplicantProfileVisasSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileVisasSupported
        {
            get { return _isApplicantProfileVisasSupported; }
            set { _isApplicantProfileVisasSupported = value; }
        }

        private bool _isBirthDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsBirthDateSupported
        {
            get { return _isBirthDateSupported; }
            set { _isBirthDateSupported = value; }
        }

        private bool _isCitizenshipStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported
        {
            get { return _isCitizenshipStatusDescriptorSupported; }
            set { _isCitizenshipStatusDescriptorSupported = value; }
        }

        private bool _isEconomicDisadvantagedSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsEconomicDisadvantagedSupported
        {
            get { return _isEconomicDisadvantagedSupported; }
            set { _isEconomicDisadvantagedSupported = value; }
        }

        private bool _isFirstGenerationStudentSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsFirstGenerationStudentSupported
        {
            get { return _isFirstGenerationStudentSupported; }
            set { _isFirstGenerationStudentSupported = value; }
        }

        private bool _isFirstNameSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsFirstNameSupported
        {
            get { return _isFirstNameSupported; }
            set { _isFirstNameSupported = value; }
        }

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isGenerationCodeSuffixSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsGenerationCodeSuffixSupported
        {
            get { return _isGenerationCodeSuffixSupported; }
            set { _isGenerationCodeSuffixSupported = value; }
        }

        private bool _isHighestCompletedLevelOfEducationDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported
        {
            get { return _isHighestCompletedLevelOfEducationDescriptorSupported; }
            set { _isHighestCompletedLevelOfEducationDescriptorSupported = value; }
        }

        private bool _isHighlyQualifiedTeacherSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported
        {
            get { return _isHighlyQualifiedTeacherSupported; }
            set { _isHighlyQualifiedTeacherSupported = value; }
        }

        private bool _isHispanicLatinoEthnicitySupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported
        {
            get { return _isHispanicLatinoEthnicitySupported; }
            set { _isHispanicLatinoEthnicitySupported = value; }
        }

        private bool _isLastSurnameSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsLastSurnameSupported
        {
            get { return _isLastSurnameSupported; }
            set { _isLastSurnameSupported = value; }
        }

        private bool _isMaidenNameSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsMaidenNameSupported
        {
            get { return _isMaidenNameSupported; }
            set { _isMaidenNameSupported = value; }
        }

        private bool _isMiddleNameSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsMiddleNameSupported
        {
            get { return _isMiddleNameSupported; }
            set { _isMiddleNameSupported = value; }
        }

        private bool _isPersonalTitlePrefixSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsPersonalTitlePrefixSupported
        {
            get { return _isPersonalTitlePrefixSupported; }
            set { _isPersonalTitlePrefixSupported = value; }
        }

        private bool _isSexDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsSexDescriptorSupported
        {
            get { return _isSexDescriptorSupported; }
            set { _isSexDescriptorSupported = value; }
        }

        private bool _isYearsOfPriorProfessionalExperienceSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported
        {
            get { return _isYearsOfPriorProfessionalExperienceSupported; }
            set { _isYearsOfPriorProfessionalExperienceSupported = value; }
        }

        private bool _isYearsOfPriorTeachingExperienceSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported
        {
            get { return _isYearsOfPriorTeachingExperienceSupported; }
            set { _isYearsOfPriorTeachingExperienceSupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileAddress, bool> _isApplicantProfileAddressIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileAddress, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileAddressIncluded
        {
            get { return _isApplicantProfileAddressIncluded; }
            set { _isApplicantProfileAddressIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic, bool> _isApplicantProfileApplicantCharacteristicIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileApplicantCharacteristicIncluded
        {
            get { return _isApplicantProfileApplicantCharacteristicIncluded; }
            set { _isApplicantProfileApplicantCharacteristicIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileBackgroundCheck, bool> _isApplicantProfileBackgroundCheckIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileBackgroundCheck, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileBackgroundCheckIncluded
        {
            get { return _isApplicantProfileBackgroundCheckIncluded; }
            set { _isApplicantProfileBackgroundCheckIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileDisability, bool> _isApplicantProfileDisabilityIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileDisability, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileDisabilityIncluded
        {
            get { return _isApplicantProfileDisabilityIncluded; }
            set { _isApplicantProfileDisabilityIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName, bool> _isApplicantProfileEducatorPreparationProgramNameIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileEducatorPreparationProgramNameIncluded
        {
            get { return _isApplicantProfileEducatorPreparationProgramNameIncluded; }
            set { _isApplicantProfileEducatorPreparationProgramNameIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileElectronicMail, bool> _isApplicantProfileElectronicMailIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileElectronicMail, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileElectronicMailIncluded
        {
            get { return _isApplicantProfileElectronicMailIncluded; }
            set { _isApplicantProfileElectronicMailIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileGradePointAverage, bool> _isApplicantProfileGradePointAverageIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileGradePointAverage, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileGradePointAverageIncluded
        {
            get { return _isApplicantProfileGradePointAverageIncluded; }
            set { _isApplicantProfileGradePointAverageIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject, bool> _isApplicantProfileHighlyQualifiedAcademicSubjectIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectIncluded
        {
            get { return _isApplicantProfileHighlyQualifiedAcademicSubjectIncluded; }
            set { _isApplicantProfileHighlyQualifiedAcademicSubjectIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileIdentificationDocument, bool> _isApplicantProfileIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileIdentificationDocument, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileIdentificationDocumentIncluded
        {
            get { return _isApplicantProfileIdentificationDocumentIncluded; }
            set { _isApplicantProfileIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileInternationalAddress, bool> _isApplicantProfileInternationalAddressIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileInternationalAddress, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileInternationalAddressIncluded
        {
            get { return _isApplicantProfileInternationalAddressIncluded; }
            set { _isApplicantProfileInternationalAddressIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileLanguage, bool> _isApplicantProfileLanguageIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileLanguage, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileLanguageIncluded
        {
            get { return _isApplicantProfileLanguageIncluded; }
            set { _isApplicantProfileLanguageIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument, bool> _isApplicantProfilePersonalIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfilePersonalIdentificationDocumentIncluded
        {
            get { return _isApplicantProfilePersonalIdentificationDocumentIncluded; }
            set { _isApplicantProfilePersonalIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileRace, bool> _isApplicantProfileRaceIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileRace, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileRaceIncluded
        {
            get { return _isApplicantProfileRaceIncluded; }
            set { _isApplicantProfileRaceIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileTelephone, bool> _isApplicantProfileTelephoneIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileTelephone, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileTelephoneIncluded
        {
            get { return _isApplicantProfileTelephoneIncluded; }
            set { _isApplicantProfileTelephoneIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileVisa, bool> _isApplicantProfileVisaIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileVisa, bool> Entities.Common.TPDM.IApplicantProfileSynchronizationSourceSupport.IsApplicantProfileVisaIncluded
        {
            get { return _isApplicantProfileVisaIncluded; }
            set { _isApplicantProfileVisaIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileAddress table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileAddress : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileAddress, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileAddress()
        {
            ApplicantProfileAddressPeriods = new HashSet<ApplicantProfileAddressPeriod>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileAddress.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AddressTypeDescriptorId 
        {
            get
            {
                if (_addressTypeDescriptorId == default(int))
                    _addressTypeDescriptorId = DescriptorsCache.GetCache().GetId("AddressTypeDescriptor", _addressTypeDescriptor);

                return _addressTypeDescriptorId;
            } 
            set
            {
                _addressTypeDescriptorId = value;
                _addressTypeDescriptor = null;
            }
        }

        private int _addressTypeDescriptorId;
        private string _addressTypeDescriptor;

        public virtual string AddressTypeDescriptor
        {
            get
            {
                if (_addressTypeDescriptor == null)
                    _addressTypeDescriptor = DescriptorsCache.GetCache().GetValue("AddressTypeDescriptor", _addressTypeDescriptorId);
                    
                return _addressTypeDescriptor;
            }
            set
            {
                _addressTypeDescriptor = value;
                _addressTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(30), NoDangerousText, NoWhitespace]
        public virtual string City  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(17), NoDangerousText, NoWhitespace]
        public virtual string PostalCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int StateAbbreviationDescriptorId 
        {
            get
            {
                if (_stateAbbreviationDescriptorId == default(int))
                    _stateAbbreviationDescriptorId = DescriptorsCache.GetCache().GetId("StateAbbreviationDescriptor", _stateAbbreviationDescriptor);

                return _stateAbbreviationDescriptorId;
            } 
            set
            {
                _stateAbbreviationDescriptorId = value;
                _stateAbbreviationDescriptor = null;
            }
        }

        private int _stateAbbreviationDescriptorId;
        private string _stateAbbreviationDescriptor;

        public virtual string StateAbbreviationDescriptor
        {
            get
            {
                if (_stateAbbreviationDescriptor == null)
                    _stateAbbreviationDescriptor = DescriptorsCache.GetCache().GetValue("StateAbbreviationDescriptor", _stateAbbreviationDescriptorId);
                    
                return _stateAbbreviationDescriptor;
            }
            set
            {
                _stateAbbreviationDescriptor = value;
                _stateAbbreviationDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(150), NoDangerousText, NoWhitespace]
        public virtual string StreetNumberName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(50), NoDangerousText]
        public virtual string ApartmentRoomSuiteNumber  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string BuildingSiteNumber  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string CongressionalDistrict  { get; set; }
        [StringLength(5), NoDangerousText]
        public virtual string CountyFIPSCode  { get; set; }
        public virtual bool? DoNotPublishIndicator  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string Latitude  { get; set; }
        public virtual int? LocaleDescriptorId 
        {
            get
            {
                if (_localeDescriptorId == default(int?))
                    _localeDescriptorId = string.IsNullOrWhiteSpace(_localeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LocaleDescriptor", _localeDescriptor);

                return _localeDescriptorId;
            } 
            set
            {
                _localeDescriptorId = value;
                _localeDescriptor = null;
            }
        }

        private int? _localeDescriptorId;
        private string _localeDescriptor;

        public virtual string LocaleDescriptor
        {
            get
            {
                if (_localeDescriptor == null)
                    _localeDescriptor = _localeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LocaleDescriptor", _localeDescriptorId.Value);
                    
                return _localeDescriptor;
            }
            set
            {
                _localeDescriptor = value;
                _localeDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string Longitude  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string NameOfCounty  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddressPeriod> _applicantProfileAddressPeriods;
        private ICollection<Entities.Common.TPDM.IApplicantProfileAddressPeriod> _applicantProfileAddressPeriodsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddressPeriod> ApplicantProfileAddressPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileAddressPeriods)
                    if (item.ApplicantProfileAddress == null)
                        item.ApplicantProfileAddress = this;
                // -------------------------------------------------------------

                return _applicantProfileAddressPeriods;
            }
            set
            {
                _applicantProfileAddressPeriods = value;
                _applicantProfileAddressPeriodsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileAddressPeriod, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddressPeriod>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileAddressPeriod> Entities.Common.TPDM.IApplicantProfileAddress.ApplicantProfileAddressPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileAddressPeriods)
                    if (item.ApplicantProfileAddress == null)
                        item.ApplicantProfileAddress = this;
                // -------------------------------------------------------------

                return _applicantProfileAddressPeriodsCovariant;
            }
            set
            {
                ApplicantProfileAddressPeriods = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddressPeriod>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileAddressPeriod>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "LocaleDescriptor", new LookupColumnDetails { PropertyName = "LocaleDescriptorId", LookupTypeName = "LocaleDescriptor"} },
                { "StateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AddressTypeDescriptorId", AddressTypeDescriptorId);
            keyValues.Add("City", City);
            keyValues.Add("PostalCode", PostalCode);
            keyValues.Add("StateAbbreviationDescriptorId", StateAbbreviationDescriptorId);
            keyValues.Add("StreetNumberName", StreetNumberName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileAddress) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApartmentRoomSuiteNumberSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported
        {
            get { return _isApartmentRoomSuiteNumberSupported; }
            set { _isApartmentRoomSuiteNumberSupported = value; }
        }

        private bool _isApplicantProfileAddressPeriodsSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsApplicantProfileAddressPeriodsSupported
        {
            get { return _isApplicantProfileAddressPeriodsSupported; }
            set { _isApplicantProfileAddressPeriodsSupported = value; }
        }

        private bool _isBuildingSiteNumberSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported
        {
            get { return _isBuildingSiteNumberSupported; }
            set { _isBuildingSiteNumberSupported = value; }
        }

        private bool _isCongressionalDistrictSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported
        {
            get { return _isCongressionalDistrictSupported; }
            set { _isCongressionalDistrictSupported = value; }
        }

        private bool _isCountyFIPSCodeSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported
        {
            get { return _isCountyFIPSCodeSupported; }
            set { _isCountyFIPSCodeSupported = value; }
        }

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isLatitudeSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsLatitudeSupported
        {
            get { return _isLatitudeSupported; }
            set { _isLatitudeSupported = value; }
        }

        private bool _isLocaleDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported
        {
            get { return _isLocaleDescriptorSupported; }
            set { _isLocaleDescriptorSupported = value; }
        }

        private bool _isLongitudeSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsLongitudeSupported
        {
            get { return _isLongitudeSupported; }
            set { _isLongitudeSupported = value; }
        }

        private bool _isNameOfCountySupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsNameOfCountySupported
        {
            get { return _isNameOfCountySupported; }
            set { _isNameOfCountySupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileAddressPeriod, bool> _isApplicantProfileAddressPeriodIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileAddressPeriod, bool> Entities.Common.TPDM.IApplicantProfileAddressSynchronizationSourceSupport.IsApplicantProfileAddressPeriodIncluded
        {
            get { return _isApplicantProfileAddressPeriodIncluded; }
            set { _isApplicantProfileAddressPeriodIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileAddressPeriod table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileAddressPeriod : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileAddressPeriod, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileAddressPeriodSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileAddressPeriod()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfileAddress ApplicantProfileAddress { get; set; }

        Entities.Common.TPDM.IApplicantProfileAddress IApplicantProfileAddressPeriod.ApplicantProfileAddress
        {
            get { return ApplicantProfileAddress; }
            set { ApplicantProfileAddress = (ApplicantProfileAddress) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "StateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfileAddress as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileAddressPeriod) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfileAddress = (ApplicantProfileAddress) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileAddressPeriodSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileApplicantCharacteristic table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileApplicantCharacteristic : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileApplicantCharacteristic()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileApplicantCharacteristic.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int StudentCharacteristicDescriptorId 
        {
            get
            {
                if (_studentCharacteristicDescriptorId == default(int))
                    _studentCharacteristicDescriptorId = DescriptorsCache.GetCache().GetId("StudentCharacteristicDescriptor", _studentCharacteristicDescriptor);

                return _studentCharacteristicDescriptorId;
            } 
            set
            {
                _studentCharacteristicDescriptorId = value;
                _studentCharacteristicDescriptor = null;
            }
        }

        private int _studentCharacteristicDescriptorId;
        private string _studentCharacteristicDescriptor;

        public virtual string StudentCharacteristicDescriptor
        {
            get
            {
                if (_studentCharacteristicDescriptor == null)
                    _studentCharacteristicDescriptor = DescriptorsCache.GetCache().GetValue("StudentCharacteristicDescriptor", _studentCharacteristicDescriptorId);
                    
                return _studentCharacteristicDescriptor;
            }
            set
            {
                _studentCharacteristicDescriptor = value;
                _studentCharacteristicDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DesignatedBy  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StudentCharacteristicDescriptor", new LookupColumnDetails { PropertyName = "StudentCharacteristicDescriptorId", LookupTypeName = "StudentCharacteristicDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("StudentCharacteristicDescriptorId", StudentCharacteristicDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileApplicantCharacteristic) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isDesignatedBySupported = true;
        bool Entities.Common.TPDM.IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport.IsDesignatedBySupported
        {
            get { return _isDesignatedBySupported; }
            set { _isDesignatedBySupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileBackgroundCheck table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileBackgroundCheck : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileBackgroundCheck, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileBackgroundCheck()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileBackgroundCheck.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int BackgroundCheckTypeDescriptorId 
        {
            get
            {
                if (_backgroundCheckTypeDescriptorId == default(int))
                    _backgroundCheckTypeDescriptorId = DescriptorsCache.GetCache().GetId("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptor);

                return _backgroundCheckTypeDescriptorId;
            } 
            set
            {
                _backgroundCheckTypeDescriptorId = value;
                _backgroundCheckTypeDescriptor = null;
            }
        }

        private int _backgroundCheckTypeDescriptorId;
        private string _backgroundCheckTypeDescriptor;

        public virtual string BackgroundCheckTypeDescriptor
        {
            get
            {
                if (_backgroundCheckTypeDescriptor == null)
                    _backgroundCheckTypeDescriptor = DescriptorsCache.GetCache().GetValue("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptorId);
                    
                return _backgroundCheckTypeDescriptor;
            }
            set
            {
                _backgroundCheckTypeDescriptor = value;
                _backgroundCheckTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BackgroundCheckCompletedDate 
        {
            get { return _backgroundCheckCompletedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _backgroundCheckCompletedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _backgroundCheckCompletedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _backgroundCheckCompletedDate;
        
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BackgroundCheckRequestedDate 
        {
            get { return _backgroundCheckRequestedDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _backgroundCheckRequestedDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _backgroundCheckRequestedDate;
        
        public virtual int? BackgroundCheckStatusDescriptorId 
        {
            get
            {
                if (_backgroundCheckStatusDescriptorId == default(int?))
                    _backgroundCheckStatusDescriptorId = string.IsNullOrWhiteSpace(_backgroundCheckStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptor);

                return _backgroundCheckStatusDescriptorId;
            } 
            set
            {
                _backgroundCheckStatusDescriptorId = value;
                _backgroundCheckStatusDescriptor = null;
            }
        }

        private int? _backgroundCheckStatusDescriptorId;
        private string _backgroundCheckStatusDescriptor;

        public virtual string BackgroundCheckStatusDescriptor
        {
            get
            {
                if (_backgroundCheckStatusDescriptor == null)
                    _backgroundCheckStatusDescriptor = _backgroundCheckStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptorId.Value);
                    
                return _backgroundCheckStatusDescriptor;
            }
            set
            {
                _backgroundCheckStatusDescriptor = value;
                _backgroundCheckStatusDescriptorId = default(int?);
            }
        }
        public virtual bool? Fingerprint  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "BackgroundCheckStatusDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckStatusDescriptorId", LookupTypeName = "BackgroundCheckStatusDescriptor"} },
                { "BackgroundCheckTypeDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckTypeDescriptorId", LookupTypeName = "BackgroundCheckTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BackgroundCheckTypeDescriptorId", BackgroundCheckTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileBackgroundCheck) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBackgroundCheckCompletedDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported
        {
            get { return _isBackgroundCheckCompletedDateSupported; }
            set { _isBackgroundCheckCompletedDateSupported = value; }
        }

        private bool _isBackgroundCheckRequestedDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported
        {
            get { return _isBackgroundCheckRequestedDateSupported; }
            set { _isBackgroundCheckRequestedDateSupported = value; }
        }

        private bool _isBackgroundCheckStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported
        {
            get { return _isBackgroundCheckStatusDescriptorSupported; }
            set { _isBackgroundCheckStatusDescriptorSupported = value; }
        }

        private bool _isFingerprintSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported
        {
            get { return _isFingerprintSupported; }
            set { _isFingerprintSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileDisability table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileDisability : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileDisability, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileDisability()
        {
            ApplicantProfileDisabilityDesignations = new HashSet<ApplicantProfileDisabilityDesignation>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileDisability.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDescriptorId 
        {
            get
            {
                if (_disabilityDescriptorId == default(int))
                    _disabilityDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDescriptor", _disabilityDescriptor);

                return _disabilityDescriptorId;
            } 
            set
            {
                _disabilityDescriptorId = value;
                _disabilityDescriptor = null;
            }
        }

        private int _disabilityDescriptorId;
        private string _disabilityDescriptor;

        public virtual string DisabilityDescriptor
        {
            get
            {
                if (_disabilityDescriptor == null)
                    _disabilityDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDescriptor", _disabilityDescriptorId);
                    
                return _disabilityDescriptor;
            }
            set
            {
                _disabilityDescriptor = value;
                _disabilityDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? DisabilityDeterminationSourceTypeDescriptorId 
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptorId == default(int?))
                    _disabilityDeterminationSourceTypeDescriptorId = string.IsNullOrWhiteSpace(_disabilityDeterminationSourceTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptor);

                return _disabilityDeterminationSourceTypeDescriptorId;
            } 
            set
            {
                _disabilityDeterminationSourceTypeDescriptorId = value;
                _disabilityDeterminationSourceTypeDescriptor = null;
            }
        }

        private int? _disabilityDeterminationSourceTypeDescriptorId;
        private string _disabilityDeterminationSourceTypeDescriptor;

        public virtual string DisabilityDeterminationSourceTypeDescriptor
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptor == null)
                    _disabilityDeterminationSourceTypeDescriptor = _disabilityDeterminationSourceTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptorId.Value);
                    
                return _disabilityDeterminationSourceTypeDescriptor;
            }
            set
            {
                _disabilityDeterminationSourceTypeDescriptor = value;
                _disabilityDeterminationSourceTypeDescriptorId = default(int?);
            }
        }
        [StringLength(80), NoDangerousText]
        public virtual string DisabilityDiagnosis  { get; set; }
        public virtual int? OrderOfDisability  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisabilityDesignation> _applicantProfileDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation> _applicantProfileDisabilityDesignationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisabilityDesignation> ApplicantProfileDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileDisabilityDesignations)
                    if (item.ApplicantProfileDisability == null)
                        item.ApplicantProfileDisability = this;
                // -------------------------------------------------------------

                return _applicantProfileDisabilityDesignations;
            }
            set
            {
                _applicantProfileDisabilityDesignations = value;
                _applicantProfileDisabilityDesignationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisabilityDesignation>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation> Entities.Common.TPDM.IApplicantProfileDisability.ApplicantProfileDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileDisabilityDesignations)
                    if (item.ApplicantProfileDisability == null)
                        item.ApplicantProfileDisability = this;
                // -------------------------------------------------------------

                return _applicantProfileDisabilityDesignationsCovariant;
            }
            set
            {
                ApplicantProfileDisabilityDesignations = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisabilityDesignation>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileDisabilityDesignation>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDeterminationSourceTypeDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDeterminationSourceTypeDescriptorId", LookupTypeName = "DisabilityDeterminationSourceTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDescriptorId", DisabilityDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileDisability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileDisability) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicantProfileDisabilityDesignationsSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsApplicantProfileDisabilityDesignationsSupported
        {
            get { return _isApplicantProfileDisabilityDesignationsSupported; }
            set { _isApplicantProfileDisabilityDesignationsSupported = value; }
        }

        private bool _isDisabilityDeterminationSourceTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported
        {
            get { return _isDisabilityDeterminationSourceTypeDescriptorSupported; }
            set { _isDisabilityDeterminationSourceTypeDescriptorSupported = value; }
        }

        private bool _isDisabilityDiagnosisSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported
        {
            get { return _isDisabilityDiagnosisSupported; }
            set { _isDisabilityDiagnosisSupported = value; }
        }

        private bool _isOrderOfDisabilitySupported = true;
        bool Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported
        {
            get { return _isOrderOfDisabilitySupported; }
            set { _isOrderOfDisabilitySupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation, bool> _isApplicantProfileDisabilityDesignationIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileDisabilityDesignation, bool> Entities.Common.TPDM.IApplicantProfileDisabilitySynchronizationSourceSupport.IsApplicantProfileDisabilityDesignationIncluded
        {
            get { return _isApplicantProfileDisabilityDesignationIncluded; }
            set { _isApplicantProfileDisabilityDesignationIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileDisabilityDesignation table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileDisabilityDesignation : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileDisabilityDesignation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileDisabilityDesignationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileDisabilityDesignation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfileDisability ApplicantProfileDisability { get; set; }

        Entities.Common.TPDM.IApplicantProfileDisability IApplicantProfileDisabilityDesignation.ApplicantProfileDisability
        {
            get { return ApplicantProfileDisability; }
            set { ApplicantProfileDisability = (ApplicantProfileDisability) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDesignationDescriptorId 
        {
            get
            {
                if (_disabilityDesignationDescriptorId == default(int))
                    _disabilityDesignationDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDesignationDescriptor", _disabilityDesignationDescriptor);

                return _disabilityDesignationDescriptorId;
            } 
            set
            {
                _disabilityDesignationDescriptorId = value;
                _disabilityDesignationDescriptor = null;
            }
        }

        private int _disabilityDesignationDescriptorId;
        private string _disabilityDesignationDescriptor;

        public virtual string DisabilityDesignationDescriptor
        {
            get
            {
                if (_disabilityDesignationDescriptor == null)
                    _disabilityDesignationDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDesignationDescriptor", _disabilityDesignationDescriptorId);
                    
                return _disabilityDesignationDescriptor;
            }
            set
            {
                _disabilityDesignationDescriptor = value;
                _disabilityDesignationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDesignationDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDesignationDescriptorId", LookupTypeName = "DisabilityDesignationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfileDisability as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDesignationDescriptorId", DisabilityDesignationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileDisabilityDesignation) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfileDisability = (ApplicantProfileDisability) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileEducatorPreparationProgramName table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileEducatorPreparationProgramName : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramNameSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileEducatorPreparationProgramName()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileEducatorPreparationProgramName.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EducatorPreparationProgramName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EducatorPreparationProgramName", EducatorPreparationProgramName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileEducatorPreparationProgramName) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileElectronicMail table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileElectronicMail : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileElectronicMail, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileElectronicMailSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileElectronicMail()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileElectronicMail.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(128), NoDangerousText, NoWhitespace]
        public virtual string ElectronicMailAddress  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ElectronicMailTypeDescriptorId 
        {
            get
            {
                if (_electronicMailTypeDescriptorId == default(int))
                    _electronicMailTypeDescriptorId = DescriptorsCache.GetCache().GetId("ElectronicMailTypeDescriptor", _electronicMailTypeDescriptor);

                return _electronicMailTypeDescriptorId;
            } 
            set
            {
                _electronicMailTypeDescriptorId = value;
                _electronicMailTypeDescriptor = null;
            }
        }

        private int _electronicMailTypeDescriptorId;
        private string _electronicMailTypeDescriptor;

        public virtual string ElectronicMailTypeDescriptor
        {
            get
            {
                if (_electronicMailTypeDescriptor == null)
                    _electronicMailTypeDescriptor = DescriptorsCache.GetCache().GetValue("ElectronicMailTypeDescriptor", _electronicMailTypeDescriptorId);
                    
                return _electronicMailTypeDescriptor;
            }
            set
            {
                _electronicMailTypeDescriptor = value;
                _electronicMailTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual bool? PrimaryEmailAddressIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ElectronicMailTypeDescriptor", new LookupColumnDetails { PropertyName = "ElectronicMailTypeDescriptorId", LookupTypeName = "ElectronicMailTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("ElectronicMailAddress", ElectronicMailAddress);
            keyValues.Add("ElectronicMailTypeDescriptorId", ElectronicMailTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileElectronicMail) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isPrimaryEmailAddressIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported
        {
            get { return _isPrimaryEmailAddressIndicatorSupported; }
            set { _isPrimaryEmailAddressIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileGradePointAverage table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileGradePointAverage : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileGradePointAverage, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileGradePointAverageSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileGradePointAverage()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileGradePointAverage.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradePointAverageTypeDescriptorId 
        {
            get
            {
                if (_gradePointAverageTypeDescriptorId == default(int))
                    _gradePointAverageTypeDescriptorId = DescriptorsCache.GetCache().GetId("GradePointAverageTypeDescriptor", _gradePointAverageTypeDescriptor);

                return _gradePointAverageTypeDescriptorId;
            } 
            set
            {
                _gradePointAverageTypeDescriptorId = value;
                _gradePointAverageTypeDescriptor = null;
            }
        }

        private int _gradePointAverageTypeDescriptorId;
        private string _gradePointAverageTypeDescriptor;

        public virtual string GradePointAverageTypeDescriptor
        {
            get
            {
                if (_gradePointAverageTypeDescriptor == null)
                    _gradePointAverageTypeDescriptor = DescriptorsCache.GetCache().GetValue("GradePointAverageTypeDescriptor", _gradePointAverageTypeDescriptorId);
                    
                return _gradePointAverageTypeDescriptor;
            }
            set
            {
                _gradePointAverageTypeDescriptor = value;
                _gradePointAverageTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal GradePointAverageValue  { get; set; }
        public virtual bool? IsCumulative  { get; set; }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? MaxGradePointAverageValue  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradePointAverageTypeDescriptor", new LookupColumnDetails { PropertyName = "GradePointAverageTypeDescriptorId", LookupTypeName = "GradePointAverageTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradePointAverageTypeDescriptorId", GradePointAverageTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileGradePointAverage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileGradePointAverage) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isGradePointAverageValueSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileGradePointAverageSynchronizationSourceSupport.IsGradePointAverageValueSupported
        {
            get { return _isGradePointAverageValueSupported; }
            set { _isGradePointAverageValueSupported = value; }
        }

        private bool _isIsCumulativeSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileGradePointAverageSynchronizationSourceSupport.IsIsCumulativeSupported
        {
            get { return _isIsCumulativeSupported; }
            set { _isIsCumulativeSupported = value; }
        }

        private bool _isMaxGradePointAverageValueSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileGradePointAverageSynchronizationSourceSupport.IsMaxGradePointAverageValueSupported
        {
            get { return _isMaxGradePointAverageValueSupported; }
            set { _isMaxGradePointAverageValueSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileHighlyQualifiedAcademicSubject table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileHighlyQualifiedAcademicSubject : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubjectSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileHighlyQualifiedAcademicSubject()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileHighlyQualifiedAcademicSubject.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int))
                    _academicSubjectDescriptorId = DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicSubjectDescriptorId", AcademicSubjectDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileHighlyQualifiedAcademicSubject) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileIdentificationDocument table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileIdentificationDocument, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileIdentificationDocument.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileInternationalAddress table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileInternationalAddress : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileInternationalAddress, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileInternationalAddress()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileInternationalAddress.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AddressTypeDescriptorId 
        {
            get
            {
                if (_addressTypeDescriptorId == default(int))
                    _addressTypeDescriptorId = DescriptorsCache.GetCache().GetId("AddressTypeDescriptor", _addressTypeDescriptor);

                return _addressTypeDescriptorId;
            } 
            set
            {
                _addressTypeDescriptorId = value;
                _addressTypeDescriptor = null;
            }
        }

        private int _addressTypeDescriptorId;
        private string _addressTypeDescriptor;

        public virtual string AddressTypeDescriptor
        {
            get
            {
                if (_addressTypeDescriptor == null)
                    _addressTypeDescriptor = DescriptorsCache.GetCache().GetValue("AddressTypeDescriptor", _addressTypeDescriptorId);
                    
                return _addressTypeDescriptor;
            }
            set
            {
                _addressTypeDescriptor = value;
                _addressTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(150), NoDangerousText]
        public virtual string AddressLine1  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine2  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine3  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine4  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [RequiredWithNonDefault]
        public virtual int CountryDescriptorId 
        {
            get
            {
                if (_countryDescriptorId == default(int))
                    _countryDescriptorId = DescriptorsCache.GetCache().GetId("CountryDescriptor", _countryDescriptor);

                return _countryDescriptorId;
            } 
            set
            {
                _countryDescriptorId = value;
                _countryDescriptor = null;
            }
        }

        private int _countryDescriptorId;
        private string _countryDescriptor;

        public virtual string CountryDescriptor
        {
            get
            {
                if (_countryDescriptor == null)
                    _countryDescriptor = DescriptorsCache.GetCache().GetValue("CountryDescriptor", _countryDescriptorId);
                    
                return _countryDescriptor;
            }
            set
            {
                _countryDescriptor = value;
                _countryDescriptorId = default(int);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [StringLength(20), NoDangerousText]
        public virtual string Latitude  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string Longitude  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "CountryDescriptor", new LookupColumnDetails { PropertyName = "CountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AddressTypeDescriptorId", AddressTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileInternationalAddress) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAddressLine1Supported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported
        {
            get { return _isAddressLine1Supported; }
            set { _isAddressLine1Supported = value; }
        }

        private bool _isAddressLine2Supported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported
        {
            get { return _isAddressLine2Supported; }
            set { _isAddressLine2Supported = value; }
        }

        private bool _isAddressLine3Supported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported
        {
            get { return _isAddressLine3Supported; }
            set { _isAddressLine3Supported = value; }
        }

        private bool _isAddressLine4Supported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported
        {
            get { return _isAddressLine4Supported; }
            set { _isAddressLine4Supported = value; }
        }

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported
        {
            get { return _isCountryDescriptorSupported; }
            set { _isCountryDescriptorSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isLatitudeSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported
        {
            get { return _isLatitudeSupported; }
            set { _isLatitudeSupported = value; }
        }

        private bool _isLongitudeSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported
        {
            get { return _isLongitudeSupported; }
            set { _isLongitudeSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileLanguage table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileLanguage : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileLanguage, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileLanguageSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileLanguage()
        {
            ApplicantProfileLanguageUses = new HashSet<ApplicantProfileLanguageUse>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileLanguage.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageDescriptorId 
        {
            get
            {
                if (_languageDescriptorId == default(int))
                    _languageDescriptorId = DescriptorsCache.GetCache().GetId("LanguageDescriptor", _languageDescriptor);

                return _languageDescriptorId;
            } 
            set
            {
                _languageDescriptorId = value;
                _languageDescriptor = null;
            }
        }

        private int _languageDescriptorId;
        private string _languageDescriptor;

        public virtual string LanguageDescriptor
        {
            get
            {
                if (_languageDescriptor == null)
                    _languageDescriptor = DescriptorsCache.GetCache().GetValue("LanguageDescriptor", _languageDescriptorId);
                    
                return _languageDescriptor;
            }
            set
            {
                _languageDescriptor = value;
                _languageDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguageUse> _applicantProfileLanguageUses;
        private ICollection<Entities.Common.TPDM.IApplicantProfileLanguageUse> _applicantProfileLanguageUsesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguageUse> ApplicantProfileLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileLanguageUses)
                    if (item.ApplicantProfileLanguage == null)
                        item.ApplicantProfileLanguage = this;
                // -------------------------------------------------------------

                return _applicantProfileLanguageUses;
            }
            set
            {
                _applicantProfileLanguageUses = value;
                _applicantProfileLanguageUsesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantProfileLanguageUse, Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguageUse>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantProfileLanguageUse> Entities.Common.TPDM.IApplicantProfileLanguage.ApplicantProfileLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantProfileLanguageUses)
                    if (item.ApplicantProfileLanguage == null)
                        item.ApplicantProfileLanguage = this;
                // -------------------------------------------------------------

                return _applicantProfileLanguageUsesCovariant;
            }
            set
            {
                ApplicantProfileLanguageUses = new HashSet<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguageUse>(value.Cast<Entities.NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileLanguageUse>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageDescriptorId", LanguageDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileLanguage) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicantProfileLanguageUsesSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileLanguageSynchronizationSourceSupport.IsApplicantProfileLanguageUsesSupported
        {
            get { return _isApplicantProfileLanguageUsesSupported; }
            set { _isApplicantProfileLanguageUsesSupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantProfileLanguageUse, bool> _isApplicantProfileLanguageUseIncluded;
        Func<Entities.Common.TPDM.IApplicantProfileLanguageUse, bool> Entities.Common.TPDM.IApplicantProfileLanguageSynchronizationSourceSupport.IsApplicantProfileLanguageUseIncluded
        {
            get { return _isApplicantProfileLanguageUseIncluded; }
            set { _isApplicantProfileLanguageUseIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileLanguageUse table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileLanguageUse : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileLanguageUse, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileLanguageUseSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileLanguageUse()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfileLanguage ApplicantProfileLanguage { get; set; }

        Entities.Common.TPDM.IApplicantProfileLanguage IApplicantProfileLanguageUse.ApplicantProfileLanguage
        {
            get { return ApplicantProfileLanguage; }
            set { ApplicantProfileLanguage = (ApplicantProfileLanguage) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageUseDescriptorId 
        {
            get
            {
                if (_languageUseDescriptorId == default(int))
                    _languageUseDescriptorId = DescriptorsCache.GetCache().GetId("LanguageUseDescriptor", _languageUseDescriptor);

                return _languageUseDescriptorId;
            } 
            set
            {
                _languageUseDescriptorId = value;
                _languageUseDescriptor = null;
            }
        }

        private int _languageUseDescriptorId;
        private string _languageUseDescriptor;

        public virtual string LanguageUseDescriptor
        {
            get
            {
                if (_languageUseDescriptor == null)
                    _languageUseDescriptor = DescriptorsCache.GetCache().GetValue("LanguageUseDescriptor", _languageUseDescriptorId);
                    
                return _languageUseDescriptor;
            }
            set
            {
                _languageUseDescriptor = value;
                _languageUseDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
                { "LanguageUseDescriptor", new LookupColumnDetails { PropertyName = "LanguageUseDescriptorId", LookupTypeName = "LanguageUseDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfileLanguage as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageUseDescriptorId", LanguageUseDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileLanguageUse) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfileLanguage = (ApplicantProfileLanguage) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfilePersonalIdentificationDocument table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfilePersonalIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfilePersonalIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfilePersonalIdentificationDocument.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileRace table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileRace : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileRace, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileRaceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileRace()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileRace.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int RaceDescriptorId 
        {
            get
            {
                if (_raceDescriptorId == default(int))
                    _raceDescriptorId = DescriptorsCache.GetCache().GetId("RaceDescriptor", _raceDescriptor);

                return _raceDescriptorId;
            } 
            set
            {
                _raceDescriptorId = value;
                _raceDescriptor = null;
            }
        }

        private int _raceDescriptorId;
        private string _raceDescriptor;

        public virtual string RaceDescriptor
        {
            get
            {
                if (_raceDescriptor == null)
                    _raceDescriptor = DescriptorsCache.GetCache().GetValue("RaceDescriptor", _raceDescriptorId);
                    
                return _raceDescriptor;
            }
            set
            {
                _raceDescriptor = value;
                _raceDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RaceDescriptor", new LookupColumnDetails { PropertyName = "RaceDescriptorId", LookupTypeName = "RaceDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RaceDescriptorId", RaceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileRace) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileTelephone table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileTelephone : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileTelephone, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileTelephoneSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileTelephone()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileTelephone.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(24), NoDangerousText, NoWhitespace]
        public virtual string TelephoneNumber  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TelephoneNumberTypeDescriptorId 
        {
            get
            {
                if (_telephoneNumberTypeDescriptorId == default(int))
                    _telephoneNumberTypeDescriptorId = DescriptorsCache.GetCache().GetId("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptor);

                return _telephoneNumberTypeDescriptorId;
            } 
            set
            {
                _telephoneNumberTypeDescriptorId = value;
                _telephoneNumberTypeDescriptor = null;
            }
        }

        private int _telephoneNumberTypeDescriptorId;
        private string _telephoneNumberTypeDescriptor;

        public virtual string TelephoneNumberTypeDescriptor
        {
            get
            {
                if (_telephoneNumberTypeDescriptor == null)
                    _telephoneNumberTypeDescriptor = DescriptorsCache.GetCache().GetValue("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptorId);
                    
                return _telephoneNumberTypeDescriptor;
            }
            set
            {
                _telephoneNumberTypeDescriptor = value;
                _telephoneNumberTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual int? OrderOfPriority  { get; set; }
        public virtual bool? TextMessageCapabilityIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TelephoneNumberTypeDescriptor", new LookupColumnDetails { PropertyName = "TelephoneNumberTypeDescriptorId", LookupTypeName = "TelephoneNumberTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TelephoneNumber", TelephoneNumber);
            keyValues.Add("TelephoneNumberTypeDescriptorId", TelephoneNumberTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileTelephone) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isOrderOfPrioritySupported = true;
        bool Entities.Common.TPDM.IApplicantProfileTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported
        {
            get { return _isOrderOfPrioritySupported; }
            set { _isOrderOfPrioritySupported = value; }
        }

        private bool _isTextMessageCapabilityIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantProfileTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported
        {
            get { return _isTextMessageCapabilityIndicatorSupported; }
            set { _isTextMessageCapabilityIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProfileVisa table of the ApplicantProfile aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProfileVisa : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantProfileVisa, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProfileVisaSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProfileVisa()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantProfile ApplicantProfile { get; set; }

        Entities.Common.TPDM.IApplicantProfile IApplicantProfileVisa.ApplicantProfile
        {
            get { return ApplicantProfile; }
            set { ApplicantProfile = (ApplicantProfile) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int VisaDescriptorId 
        {
            get
            {
                if (_visaDescriptorId == default(int))
                    _visaDescriptorId = DescriptorsCache.GetCache().GetId("VisaDescriptor", _visaDescriptor);

                return _visaDescriptorId;
            } 
            set
            {
                _visaDescriptorId = value;
                _visaDescriptor = null;
            }
        }

        private int _visaDescriptorId;
        private string _visaDescriptor;

        public virtual string VisaDescriptor
        {
            get
            {
                if (_visaDescriptor == null)
                    _visaDescriptor = DescriptorsCache.GetCache().GetValue("VisaDescriptor", _visaDescriptorId);
                    
                return _visaDescriptor;
            }
            set
            {
                _visaDescriptor = value;
                _visaDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "VisaDescriptor", new LookupColumnDetails { PropertyName = "VisaDescriptorId", LookupTypeName = "VisaDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantProfile as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("VisaDescriptorId", VisaDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProfileVisa)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProfileVisa) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantProfile = (ApplicantProfile) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: Application

namespace EdFi.Ods.Entities.NHibernate.ApplicationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Application"/> entity.
    /// </summary>
    public class ApplicationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string ApplicantProfileIdentifier { get; set; }
        public virtual string ApplicationIdentifier { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantProfileIdentifier", ApplicantProfileIdentifier);
            keyValues.Add("ApplicationIdentifier", ApplicationIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Application table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Application : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IApplication, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Application()
        {
            ApplicationRecruitmentEventAttendances = new HashSet<ApplicationRecruitmentEventAttendance>();
            ApplicationScoreResults = new HashSet<ApplicationScoreResult>();
            ApplicationTerms = new HashSet<ApplicationTerm>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ApplicantProfileIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string ApplicationIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int?))
                    _academicSubjectDescriptorId = string.IsNullOrWhiteSpace(_academicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int? _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = _academicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId.Value);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? AcceptedDate 
        {
            get { return _acceptedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _acceptedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _acceptedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _acceptedDate;
        
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime ApplicationDate 
        {
            get { return _applicationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _applicationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _applicationDate;
        
        public virtual int? ApplicationSourceDescriptorId 
        {
            get
            {
                if (_applicationSourceDescriptorId == default(int?))
                    _applicationSourceDescriptorId = string.IsNullOrWhiteSpace(_applicationSourceDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ApplicationSourceDescriptor", _applicationSourceDescriptor);

                return _applicationSourceDescriptorId;
            } 
            set
            {
                _applicationSourceDescriptorId = value;
                _applicationSourceDescriptor = null;
            }
        }

        private int? _applicationSourceDescriptorId;
        private string _applicationSourceDescriptor;

        public virtual string ApplicationSourceDescriptor
        {
            get
            {
                if (_applicationSourceDescriptor == null)
                    _applicationSourceDescriptor = _applicationSourceDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ApplicationSourceDescriptor", _applicationSourceDescriptorId.Value);
                    
                return _applicationSourceDescriptor;
            }
            set
            {
                _applicationSourceDescriptor = value;
                _applicationSourceDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault]
        public virtual int ApplicationStatusDescriptorId 
        {
            get
            {
                if (_applicationStatusDescriptorId == default(int))
                    _applicationStatusDescriptorId = DescriptorsCache.GetCache().GetId("ApplicationStatusDescriptor", _applicationStatusDescriptor);

                return _applicationStatusDescriptorId;
            } 
            set
            {
                _applicationStatusDescriptorId = value;
                _applicationStatusDescriptor = null;
            }
        }

        private int _applicationStatusDescriptorId;
        private string _applicationStatusDescriptor;

        public virtual string ApplicationStatusDescriptor
        {
            get
            {
                if (_applicationStatusDescriptor == null)
                    _applicationStatusDescriptor = DescriptorsCache.GetCache().GetValue("ApplicationStatusDescriptor", _applicationStatusDescriptorId);
                    
                return _applicationStatusDescriptor;
            }
            set
            {
                _applicationStatusDescriptor = value;
                _applicationStatusDescriptorId = default(int);
            }
        }
        public virtual bool? CurrentEmployee  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? FirstContactDate 
        {
            get { return _firstContactDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _firstContactDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _firstContactDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _firstContactDate;
        
        public virtual int? HighNeedsAcademicSubjectDescriptorId 
        {
            get
            {
                if (_highNeedsAcademicSubjectDescriptorId == default(int?))
                    _highNeedsAcademicSubjectDescriptorId = string.IsNullOrWhiteSpace(_highNeedsAcademicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _highNeedsAcademicSubjectDescriptor);

                return _highNeedsAcademicSubjectDescriptorId;
            } 
            set
            {
                _highNeedsAcademicSubjectDescriptorId = value;
                _highNeedsAcademicSubjectDescriptor = null;
            }
        }

        private int? _highNeedsAcademicSubjectDescriptorId;
        private string _highNeedsAcademicSubjectDescriptor;

        public virtual string HighNeedsAcademicSubjectDescriptor
        {
            get
            {
                if (_highNeedsAcademicSubjectDescriptor == null)
                    _highNeedsAcademicSubjectDescriptor = _highNeedsAcademicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _highNeedsAcademicSubjectDescriptorId.Value);
                    
                return _highNeedsAcademicSubjectDescriptor;
            }
            set
            {
                _highNeedsAcademicSubjectDescriptor = value;
                _highNeedsAcademicSubjectDescriptorId = default(int?);
            }
        }
        public virtual int? HireStatusDescriptorId 
        {
            get
            {
                if (_hireStatusDescriptorId == default(int?))
                    _hireStatusDescriptorId = string.IsNullOrWhiteSpace(_hireStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("HireStatusDescriptor", _hireStatusDescriptor);

                return _hireStatusDescriptorId;
            } 
            set
            {
                _hireStatusDescriptorId = value;
                _hireStatusDescriptor = null;
            }
        }

        private int? _hireStatusDescriptorId;
        private string _hireStatusDescriptor;

        public virtual string HireStatusDescriptor
        {
            get
            {
                if (_hireStatusDescriptor == null)
                    _hireStatusDescriptor = _hireStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("HireStatusDescriptor", _hireStatusDescriptorId.Value);
                    
                return _hireStatusDescriptor;
            }
            set
            {
                _hireStatusDescriptor = value;
                _hireStatusDescriptorId = default(int?);
            }
        }
        public virtual int? HiringSourceDescriptorId 
        {
            get
            {
                if (_hiringSourceDescriptorId == default(int?))
                    _hiringSourceDescriptorId = string.IsNullOrWhiteSpace(_hiringSourceDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("HiringSourceDescriptor", _hiringSourceDescriptor);

                return _hiringSourceDescriptorId;
            } 
            set
            {
                _hiringSourceDescriptorId = value;
                _hiringSourceDescriptor = null;
            }
        }

        private int? _hiringSourceDescriptorId;
        private string _hiringSourceDescriptor;

        public virtual string HiringSourceDescriptor
        {
            get
            {
                if (_hiringSourceDescriptor == null)
                    _hiringSourceDescriptor = _hiringSourceDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("HiringSourceDescriptor", _hiringSourceDescriptorId.Value);
                    
                return _hiringSourceDescriptor;
            }
            set
            {
                _hiringSourceDescriptor = value;
                _hiringSourceDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string RequisitionNumber  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? WithdrawDate 
        {
            get { return _withdrawDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _withdrawDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _withdrawDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _withdrawDate;
        
        public virtual int? WithdrawReasonDescriptorId 
        {
            get
            {
                if (_withdrawReasonDescriptorId == default(int?))
                    _withdrawReasonDescriptorId = string.IsNullOrWhiteSpace(_withdrawReasonDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("WithdrawReasonDescriptor", _withdrawReasonDescriptor);

                return _withdrawReasonDescriptorId;
            } 
            set
            {
                _withdrawReasonDescriptorId = value;
                _withdrawReasonDescriptor = null;
            }
        }

        private int? _withdrawReasonDescriptorId;
        private string _withdrawReasonDescriptor;

        public virtual string WithdrawReasonDescriptor
        {
            get
            {
                if (_withdrawReasonDescriptor == null)
                    _withdrawReasonDescriptor = _withdrawReasonDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("WithdrawReasonDescriptor", _withdrawReasonDescriptorId.Value);
                    
                return _withdrawReasonDescriptor;
            }
            set
            {
                _withdrawReasonDescriptor = value;
                _withdrawReasonDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ApplicantProfileAggregate.TPDM.ApplicantProfileReferenceData ApplicantProfileReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the ApplicantProfile discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplication.ApplicantProfileDiscriminator
        {
            get { return ApplicantProfileReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the ApplicantProfile resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplication.ApplicantProfileResourceId
        {
            get { return ApplicantProfileReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplication.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplication.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.OpenStaffPositionAggregate.EdFi.OpenStaffPositionReferenceData OpenStaffPositionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplication.OpenStaffPositionDiscriminator
        {
            get { return OpenStaffPositionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplication.OpenStaffPositionResourceId
        {
            get { return OpenStaffPositionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationRecruitmentEventAttendance> _applicationRecruitmentEventAttendances;
        private ICollection<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance> _applicationRecruitmentEventAttendancesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationRecruitmentEventAttendance> ApplicationRecruitmentEventAttendances
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationRecruitmentEventAttendances)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationRecruitmentEventAttendances;
            }
            set
            {
                _applicationRecruitmentEventAttendances = value;
                _applicationRecruitmentEventAttendancesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance, Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationRecruitmentEventAttendance>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance> Entities.Common.TPDM.IApplication.ApplicationRecruitmentEventAttendances
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationRecruitmentEventAttendances)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationRecruitmentEventAttendancesCovariant;
            }
            set
            {
                ApplicationRecruitmentEventAttendances = new HashSet<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationRecruitmentEventAttendance>(value.Cast<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationRecruitmentEventAttendance>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult> _applicationScoreResults;
        private ICollection<Entities.Common.TPDM.IApplicationScoreResult> _applicationScoreResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult> ApplicationScoreResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationScoreResults)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationScoreResults;
            }
            set
            {
                _applicationScoreResults = value;
                _applicationScoreResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicationScoreResult, Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationScoreResult> Entities.Common.TPDM.IApplication.ApplicationScoreResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationScoreResults)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationScoreResultsCovariant;
            }
            set
            {
                ApplicationScoreResults = new HashSet<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult>(value.Cast<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm> _applicationTerms;
        private ICollection<Entities.Common.TPDM.IApplicationTerm> _applicationTermsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm> ApplicationTerms
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationTerms)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationTerms;
            }
            set
            {
                _applicationTerms = value;
                _applicationTermsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicationTerm, Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationTerm> Entities.Common.TPDM.IApplication.ApplicationTerms
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationTerms)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationTermsCovariant;
            }
            set
            {
                ApplicationTerms = new HashSet<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm>(value.Cast<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "ApplicationSourceDescriptor", new LookupColumnDetails { PropertyName = "ApplicationSourceDescriptorId", LookupTypeName = "ApplicationSourceDescriptor"} },
                { "ApplicationStatusDescriptor", new LookupColumnDetails { PropertyName = "ApplicationStatusDescriptorId", LookupTypeName = "ApplicationStatusDescriptor"} },
                { "HighNeedsAcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "HighNeedsAcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "HireStatusDescriptor", new LookupColumnDetails { PropertyName = "HireStatusDescriptorId", LookupTypeName = "HireStatusDescriptor"} },
                { "HiringSourceDescriptor", new LookupColumnDetails { PropertyName = "HiringSourceDescriptorId", LookupTypeName = "HiringSourceDescriptor"} },
                { "WithdrawReasonDescriptor", new LookupColumnDetails { PropertyName = "WithdrawReasonDescriptorId", LookupTypeName = "WithdrawReasonDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantProfileIdentifier", ApplicantProfileIdentifier);
            keyValues.Add("ApplicationIdentifier", ApplicationIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplication)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplication) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported
        {
            get { return _isAcademicSubjectDescriptorSupported; }
            set { _isAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isAcceptedDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsAcceptedDateSupported
        {
            get { return _isAcceptedDateSupported; }
            set { _isAcceptedDateSupported = value; }
        }

        private bool _isApplicationDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationDateSupported
        {
            get { return _isApplicationDateSupported; }
            set { _isApplicationDateSupported = value; }
        }

        private bool _isApplicationRecruitmentEventAttendancesSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationRecruitmentEventAttendancesSupported
        {
            get { return _isApplicationRecruitmentEventAttendancesSupported; }
            set { _isApplicationRecruitmentEventAttendancesSupported = value; }
        }

        private bool _isApplicationScoreResultsSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationScoreResultsSupported
        {
            get { return _isApplicationScoreResultsSupported; }
            set { _isApplicationScoreResultsSupported = value; }
        }

        private bool _isApplicationSourceDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationSourceDescriptorSupported
        {
            get { return _isApplicationSourceDescriptorSupported; }
            set { _isApplicationSourceDescriptorSupported = value; }
        }

        private bool _isApplicationStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationStatusDescriptorSupported
        {
            get { return _isApplicationStatusDescriptorSupported; }
            set { _isApplicationStatusDescriptorSupported = value; }
        }

        private bool _isApplicationTermsSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationTermsSupported
        {
            get { return _isApplicationTermsSupported; }
            set { _isApplicationTermsSupported = value; }
        }

        private bool _isCurrentEmployeeSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsCurrentEmployeeSupported
        {
            get { return _isCurrentEmployeeSupported; }
            set { _isCurrentEmployeeSupported = value; }
        }

        private bool _isFirstContactDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsFirstContactDateSupported
        {
            get { return _isFirstContactDateSupported; }
            set { _isFirstContactDateSupported = value; }
        }

        private bool _isHighNeedsAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHighNeedsAcademicSubjectDescriptorSupported
        {
            get { return _isHighNeedsAcademicSubjectDescriptorSupported; }
            set { _isHighNeedsAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isHireStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHireStatusDescriptorSupported
        {
            get { return _isHireStatusDescriptorSupported; }
            set { _isHireStatusDescriptorSupported = value; }
        }

        private bool _isHiringSourceDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHiringSourceDescriptorSupported
        {
            get { return _isHiringSourceDescriptorSupported; }
            set { _isHiringSourceDescriptorSupported = value; }
        }

        private bool _isRequisitionNumberSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsRequisitionNumberSupported
        {
            get { return _isRequisitionNumberSupported; }
            set { _isRequisitionNumberSupported = value; }
        }

        private bool _isWithdrawDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsWithdrawDateSupported
        {
            get { return _isWithdrawDateSupported; }
            set { _isWithdrawDateSupported = value; }
        }

        private bool _isWithdrawReasonDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsWithdrawReasonDescriptorSupported
        {
            get { return _isWithdrawReasonDescriptorSupported; }
            set { _isWithdrawReasonDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance, bool> _isApplicationRecruitmentEventAttendanceIncluded;
        Func<Entities.Common.TPDM.IApplicationRecruitmentEventAttendance, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationRecruitmentEventAttendanceIncluded
        {
            get { return _isApplicationRecruitmentEventAttendanceIncluded; }
            set { _isApplicationRecruitmentEventAttendanceIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicationScoreResult, bool> _isApplicationScoreResultIncluded;
        Func<Entities.Common.TPDM.IApplicationScoreResult, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationScoreResultIncluded
        {
            get { return _isApplicationScoreResultIncluded; }
            set { _isApplicationScoreResultIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicationTerm, bool> _isApplicationTermIncluded;
        Func<Entities.Common.TPDM.IApplicationTerm, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationTermIncluded
        {
            get { return _isApplicationTermIncluded; }
            set { _isApplicationTermIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationRecruitmentEventAttendance table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationRecruitmentEventAttendance : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicationRecruitmentEventAttendance, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationRecruitmentEventAttendanceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationRecruitmentEventAttendance()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Application Application { get; set; }

        Entities.Common.TPDM.IApplication IApplicationRecruitmentEventAttendance.Application
        {
            get { return Application; }
            set { Application = (Application) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EventTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string RecruitmentEventAttendeeIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceReferenceData RecruitmentEventAttendanceReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the RecruitmentEventAttendance discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplicationRecruitmentEventAttendance.RecruitmentEventAttendanceDiscriminator
        {
            get { return RecruitmentEventAttendanceReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the RecruitmentEventAttendance resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicationRecruitmentEventAttendance.RecruitmentEventAttendanceResourceId
        {
            get { return RecruitmentEventAttendanceReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Application as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("EventTitle", EventTitle);
            keyValues.Add("RecruitmentEventAttendeeIdentifier", RecruitmentEventAttendeeIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationRecruitmentEventAttendance)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationRecruitmentEventAttendance) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Application = (Application) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationScoreResult table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationScoreResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicationScoreResult, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationScoreResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Application Application { get; set; }

        Entities.Common.TPDM.IApplication IApplicationScoreResult.Application
        {
            get { return Application; }
            set { Application = (Application) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AssessmentReportingMethodDescriptorId 
        {
            get
            {
                if (_assessmentReportingMethodDescriptorId == default(int))
                    _assessmentReportingMethodDescriptorId = DescriptorsCache.GetCache().GetId("AssessmentReportingMethodDescriptor", _assessmentReportingMethodDescriptor);

                return _assessmentReportingMethodDescriptorId;
            } 
            set
            {
                _assessmentReportingMethodDescriptorId = value;
                _assessmentReportingMethodDescriptor = null;
            }
        }

        private int _assessmentReportingMethodDescriptorId;
        private string _assessmentReportingMethodDescriptor;

        public virtual string AssessmentReportingMethodDescriptor
        {
            get
            {
                if (_assessmentReportingMethodDescriptor == null)
                    _assessmentReportingMethodDescriptor = DescriptorsCache.GetCache().GetValue("AssessmentReportingMethodDescriptor", _assessmentReportingMethodDescriptorId);
                    
                return _assessmentReportingMethodDescriptor;
            }
            set
            {
                _assessmentReportingMethodDescriptor = value;
                _assessmentReportingMethodDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(35), NoDangerousText]
        public virtual string Result  { get; set; }
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AssessmentReportingMethodDescriptor", new LookupColumnDetails { PropertyName = "AssessmentReportingMethodDescriptorId", LookupTypeName = "AssessmentReportingMethodDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Application as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AssessmentReportingMethodDescriptorId", AssessmentReportingMethodDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationScoreResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationScoreResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Application = (Application) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultSupported = true;
        bool Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport.IsResultSupported
        {
            get { return _isResultSupported; }
            set { _isResultSupported = value; }
        }

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationTerm table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationTerm : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicationTerm, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationTermSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationTerm()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Application Application { get; set; }

        Entities.Common.TPDM.IApplication IApplicationTerm.Application
        {
            get { return Application; }
            set { Application = (Application) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Application as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationTerm)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationTerm) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Application = (Application) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: ApplicationEvent

namespace EdFi.Ods.Entities.NHibernate.ApplicationEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="ApplicationEvent"/> entity.
    /// </summary>
    public class ApplicationEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string ApplicantProfileIdentifier { get; set; }
        public virtual int ApplicationEventTypeDescriptorId { get; set; }
        public virtual string ApplicationIdentifier { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EventDate { get; set; }
        public virtual int SequenceNumber { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantProfileIdentifier", ApplicantProfileIdentifier);
            keyValues.Add("ApplicationEventTypeDescriptorId", ApplicationEventTypeDescriptorId);
            keyValues.Add("ApplicationIdentifier", ApplicationIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("SequenceNumber", SequenceNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationEvent table of the ApplicationEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IApplicationEvent, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ApplicantProfileIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ApplicationEventTypeDescriptorId 
        {
            get
            {
                if (_applicationEventTypeDescriptorId == default(int))
                    _applicationEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("ApplicationEventTypeDescriptor", _applicationEventTypeDescriptor);

                return _applicationEventTypeDescriptorId;
            } 
            set
            {
                _applicationEventTypeDescriptorId = value;
                _applicationEventTypeDescriptor = null;
            }
        }

        private int _applicationEventTypeDescriptorId;
        private string _applicationEventTypeDescriptor;

        public virtual string ApplicationEventTypeDescriptor
        {
            get
            {
                if (_applicationEventTypeDescriptor == null)
                    _applicationEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("ApplicationEventTypeDescriptor", _applicationEventTypeDescriptorId);
                    
                return _applicationEventTypeDescriptor;
            }
            set
            {
                _applicationEventTypeDescriptor = value;
                _applicationEventTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string ApplicationIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SequenceNumber  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999999999999999.999999999999999999", "999999999999999999.999999999999999999")]
        public virtual decimal? ApplicationEvaluationScore  { get; set; }
        public virtual int? ApplicationEventResultDescriptorId 
        {
            get
            {
                if (_applicationEventResultDescriptorId == default(int?))
                    _applicationEventResultDescriptorId = string.IsNullOrWhiteSpace(_applicationEventResultDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ApplicationEventResultDescriptor", _applicationEventResultDescriptor);

                return _applicationEventResultDescriptorId;
            } 
            set
            {
                _applicationEventResultDescriptorId = value;
                _applicationEventResultDescriptor = null;
            }
        }

        private int? _applicationEventResultDescriptorId;
        private string _applicationEventResultDescriptor;

        public virtual string ApplicationEventResultDescriptor
        {
            get
            {
                if (_applicationEventResultDescriptor == null)
                    _applicationEventResultDescriptor = _applicationEventResultDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ApplicationEventResultDescriptor", _applicationEventResultDescriptorId.Value);
                    
                return _applicationEventResultDescriptor;
            }
            set
            {
                _applicationEventResultDescriptor = value;
                _applicationEventResultDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? EventEndDate 
        {
            get { return _eventEndDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _eventEndDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _eventEndDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _eventEndDate;
        
        [RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ApplicationAggregate.TPDM.ApplicationReferenceData ApplicationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Application discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplicationEvent.ApplicationDiscriminator
        {
            get { return ApplicationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Application resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicationEvent.ApplicationResourceId
        {
            get { return ApplicationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicationEvent.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ApplicationEventResultDescriptor", new LookupColumnDetails { PropertyName = "ApplicationEventResultDescriptorId", LookupTypeName = "ApplicationEventResultDescriptor"} },
                { "ApplicationEventTypeDescriptor", new LookupColumnDetails { PropertyName = "ApplicationEventTypeDescriptorId", LookupTypeName = "ApplicationEventTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantProfileIdentifier", ApplicantProfileIdentifier);
            keyValues.Add("ApplicationEventTypeDescriptorId", ApplicationEventTypeDescriptorId);
            keyValues.Add("ApplicationIdentifier", ApplicationIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("SequenceNumber", SequenceNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicationEvaluationScoreSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsApplicationEvaluationScoreSupported
        {
            get { return _isApplicationEvaluationScoreSupported; }
            set { _isApplicationEvaluationScoreSupported = value; }
        }

        private bool _isApplicationEventResultDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsApplicationEventResultDescriptorSupported
        {
            get { return _isApplicationEventResultDescriptorSupported; }
            set { _isApplicationEventResultDescriptorSupported = value; }
        }

        private bool _isEventEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsEventEndDateSupported
        {
            get { return _isEventEndDateSupported; }
            set { _isEventEndDateSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicationEventResultDescriptor

namespace EdFi.Ods.Entities.NHibernate.ApplicationEventResultDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationEventResultDescriptor table of the ApplicationEventResultDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationEventResultDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IApplicationEventResultDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ApplicationEventResultDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicationEventResultDescriptorId", ApplicationEventResultDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationEventResultDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationEventResultDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicationEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.ApplicationEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationEventTypeDescriptor table of the ApplicationEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IApplicationEventTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ApplicationEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicationEventTypeDescriptorId", ApplicationEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicationSourceDescriptor

namespace EdFi.Ods.Entities.NHibernate.ApplicationSourceDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationSourceDescriptor table of the ApplicationSourceDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationSourceDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IApplicationSourceDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ApplicationSourceDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicationSourceDescriptorId", ApplicationSourceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationSourceDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicationStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.ApplicationStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationStatusDescriptor table of the ApplicationStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IApplicationStatusDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ApplicationStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicationStatusDescriptorId", ApplicationStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Assessment

namespace EdFi.Ods.Entities.NHibernate.AssessmentAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AssessmentExtension table of the Assessment aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AssessmentExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAssessmentExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAssessmentExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AssessmentExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Assessment Assessment { get; set; }

        Entities.Common.EdFi.IAssessment IAssessmentExtension.Assessment
        {
            get { return Assessment; }
            set { Assessment = (EdFi.Assessment) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? ProgramGatewayDescriptorId 
        {
            get
            {
                if (_programGatewayDescriptorId == default(int?))
                    _programGatewayDescriptorId = string.IsNullOrWhiteSpace(_programGatewayDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ProgramGatewayDescriptor", _programGatewayDescriptor);

                return _programGatewayDescriptorId;
            } 
            set
            {
                _programGatewayDescriptorId = value;
                _programGatewayDescriptor = null;
            }
        }

        private int? _programGatewayDescriptorId;
        private string _programGatewayDescriptor;

        public virtual string ProgramGatewayDescriptor
        {
            get
            {
                if (_programGatewayDescriptor == null)
                    _programGatewayDescriptor = _programGatewayDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ProgramGatewayDescriptor", _programGatewayDescriptorId.Value);
                    
                return _programGatewayDescriptor;
            }
            set
            {
                _programGatewayDescriptor = value;
                _programGatewayDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramGatewayDescriptor", new LookupColumnDetails { PropertyName = "ProgramGatewayDescriptorId", LookupTypeName = "ProgramGatewayDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Assessment as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAssessmentExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAssessmentExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Assessment = (EdFi.Assessment) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isProgramGatewayDescriptorSupported = true;
        bool Entities.Common.TPDM.IAssessmentExtensionSynchronizationSourceSupport.IsProgramGatewayDescriptorSupported
        {
            get { return _isProgramGatewayDescriptorSupported; }
            set { _isProgramGatewayDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: BackgroundCheckStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.BackgroundCheckStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.BackgroundCheckStatusDescriptor table of the BackgroundCheckStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class BackgroundCheckStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IBackgroundCheckStatusDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int BackgroundCheckStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BackgroundCheckStatusDescriptorId", BackgroundCheckStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IBackgroundCheckStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IBackgroundCheckStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: BackgroundCheckTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.BackgroundCheckTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.BackgroundCheckTypeDescriptor table of the BackgroundCheckTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class BackgroundCheckTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IBackgroundCheckTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int BackgroundCheckTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BackgroundCheckTypeDescriptorId", BackgroundCheckTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IBackgroundCheckTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IBackgroundCheckTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Candidate

namespace EdFi.Ods.Entities.NHibernate.CandidateAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Candidate"/> entity.
    /// </summary>
    public class CandidateReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string CandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CandidateIdentifier", CandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Candidate table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Candidate : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICandidate, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Candidate()
        {
           CandidateBackgroundCheckPersistentList = new HashSet<CandidateBackgroundCheck>();
            CandidateAddresses = new HashSet<CandidateAddress>();
            CandidateAids = new HashSet<CandidateAid>();
            CandidateCharacteristics = new HashSet<CandidateCharacteristic>();
            CandidateCohortYears = new HashSet<CandidateCohortYear>();
            CandidateDegreeSpecializations = new HashSet<CandidateDegreeSpecialization>();
            CandidateDisabilities = new HashSet<CandidateDisability>();
            CandidateElectronicMails = new HashSet<CandidateElectronicMail>();
            CandidateEPPProgramDegrees = new HashSet<CandidateEPPProgramDegree>();
            CandidateIdentificationCodes = new HashSet<CandidateIdentificationCode>();
            CandidateIdentificationDocuments = new HashSet<CandidateIdentificationDocument>();
            CandidateIndicators = new HashSet<CandidateIndicator>();
            CandidateInternationalAddresses = new HashSet<CandidateInternationalAddress>();
            CandidateLanguages = new HashSet<CandidateLanguage>();
            CandidateOtherNames = new HashSet<CandidateOtherName>();
            CandidatePersonalIdentificationDocuments = new HashSet<CandidatePersonalIdentificationDocument>();
            CandidateRaces = new HashSet<CandidateRace>();
            CandidateTelephones = new HashSet<CandidateTelephone>();
            CandidateVisas = new HashSet<CandidateVisa>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string CandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(32), NoDangerousText]
        public virtual string ApplicantProfileIdentifier  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string ApplicationIdentifier  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string BirthCity  { get; set; }
        public virtual int? BirthCountryDescriptorId 
        {
            get
            {
                if (_birthCountryDescriptorId == default(int?))
                    _birthCountryDescriptorId = string.IsNullOrWhiteSpace(_birthCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _birthCountryDescriptor);

                return _birthCountryDescriptorId;
            } 
            set
            {
                _birthCountryDescriptorId = value;
                _birthCountryDescriptor = null;
            }
        }

        private int? _birthCountryDescriptorId;
        private string _birthCountryDescriptor;

        public virtual string BirthCountryDescriptor
        {
            get
            {
                if (_birthCountryDescriptor == null)
                    _birthCountryDescriptor = _birthCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _birthCountryDescriptorId.Value);
                    
                return _birthCountryDescriptor;
            }
            set
            {
                _birthCountryDescriptor = value;
                _birthCountryDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BirthDate 
        {
            get { return _birthDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _birthDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _birthDate;
        
        [StringLength(150), NoDangerousText]
        public virtual string BirthInternationalProvince  { get; set; }
        public virtual int? BirthSexDescriptorId 
        {
            get
            {
                if (_birthSexDescriptorId == default(int?))
                    _birthSexDescriptorId = string.IsNullOrWhiteSpace(_birthSexDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SexDescriptor", _birthSexDescriptor);

                return _birthSexDescriptorId;
            } 
            set
            {
                _birthSexDescriptorId = value;
                _birthSexDescriptor = null;
            }
        }

        private int? _birthSexDescriptorId;
        private string _birthSexDescriptor;

        public virtual string BirthSexDescriptor
        {
            get
            {
                if (_birthSexDescriptor == null)
                    _birthSexDescriptor = _birthSexDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SexDescriptor", _birthSexDescriptorId.Value);
                    
                return _birthSexDescriptor;
            }
            set
            {
                _birthSexDescriptor = value;
                _birthSexDescriptorId = default(int?);
            }
        }
        public virtual int? BirthStateAbbreviationDescriptorId 
        {
            get
            {
                if (_birthStateAbbreviationDescriptorId == default(int?))
                    _birthStateAbbreviationDescriptorId = string.IsNullOrWhiteSpace(_birthStateAbbreviationDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("StateAbbreviationDescriptor", _birthStateAbbreviationDescriptor);

                return _birthStateAbbreviationDescriptorId;
            } 
            set
            {
                _birthStateAbbreviationDescriptorId = value;
                _birthStateAbbreviationDescriptor = null;
            }
        }

        private int? _birthStateAbbreviationDescriptorId;
        private string _birthStateAbbreviationDescriptor;

        public virtual string BirthStateAbbreviationDescriptor
        {
            get
            {
                if (_birthStateAbbreviationDescriptor == null)
                    _birthStateAbbreviationDescriptor = _birthStateAbbreviationDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("StateAbbreviationDescriptor", _birthStateAbbreviationDescriptorId.Value);
                    
                return _birthStateAbbreviationDescriptor;
            }
            set
            {
                _birthStateAbbreviationDescriptor = value;
                _birthStateAbbreviationDescriptorId = default(int?);
            }
        }
        public virtual int? CitizenshipStatusDescriptorId 
        {
            get
            {
                if (_citizenshipStatusDescriptorId == default(int?))
                    _citizenshipStatusDescriptorId = string.IsNullOrWhiteSpace(_citizenshipStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CitizenshipStatusDescriptor", _citizenshipStatusDescriptor);

                return _citizenshipStatusDescriptorId;
            } 
            set
            {
                _citizenshipStatusDescriptorId = value;
                _citizenshipStatusDescriptor = null;
            }
        }

        private int? _citizenshipStatusDescriptorId;
        private string _citizenshipStatusDescriptor;

        public virtual string CitizenshipStatusDescriptor
        {
            get
            {
                if (_citizenshipStatusDescriptor == null)
                    _citizenshipStatusDescriptor = _citizenshipStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CitizenshipStatusDescriptor", _citizenshipStatusDescriptorId.Value);
                    
                return _citizenshipStatusDescriptor;
            }
            set
            {
                _citizenshipStatusDescriptor = value;
                _citizenshipStatusDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? DateEnteredUS 
        {
            get { return _dateEnteredUS; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _dateEnteredUS = null;
                } else
                {
                    var given = (DateTime) value;
                    _dateEnteredUS = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _dateEnteredUS;
        
        [StringLength(30), NoDangerousText]
        public virtual string DisplacementStatus  { get; set; }
        public virtual bool? EconomicDisadvantaged  { get; set; }
        public virtual int? EducationOrganizationId  { get; set; }
        public virtual int? EnglishLanguageExamDescriptorId 
        {
            get
            {
                if (_englishLanguageExamDescriptorId == default(int?))
                    _englishLanguageExamDescriptorId = string.IsNullOrWhiteSpace(_englishLanguageExamDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EnglishLanguageExamDescriptor", _englishLanguageExamDescriptor);

                return _englishLanguageExamDescriptorId;
            } 
            set
            {
                _englishLanguageExamDescriptorId = value;
                _englishLanguageExamDescriptor = null;
            }
        }

        private int? _englishLanguageExamDescriptorId;
        private string _englishLanguageExamDescriptor;

        public virtual string EnglishLanguageExamDescriptor
        {
            get
            {
                if (_englishLanguageExamDescriptor == null)
                    _englishLanguageExamDescriptor = _englishLanguageExamDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EnglishLanguageExamDescriptor", _englishLanguageExamDescriptorId.Value);
                    
                return _englishLanguageExamDescriptor;
            }
            set
            {
                _englishLanguageExamDescriptor = value;
                _englishLanguageExamDescriptorId = default(int?);
            }
        }
        public virtual bool? FirstGenerationStudent  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string FirstName  { get; set; }
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        [StringLength(10), NoDangerousText]
        public virtual string GenerationCodeSuffix  { get; set; }
        public virtual bool? HispanicLatinoEthnicity  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string LastSurname  { get; set; }
        public virtual int? LimitedEnglishProficiencyDescriptorId 
        {
            get
            {
                if (_limitedEnglishProficiencyDescriptorId == default(int?))
                    _limitedEnglishProficiencyDescriptorId = string.IsNullOrWhiteSpace(_limitedEnglishProficiencyDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LimitedEnglishProficiencyDescriptor", _limitedEnglishProficiencyDescriptor);

                return _limitedEnglishProficiencyDescriptorId;
            } 
            set
            {
                _limitedEnglishProficiencyDescriptorId = value;
                _limitedEnglishProficiencyDescriptor = null;
            }
        }

        private int? _limitedEnglishProficiencyDescriptorId;
        private string _limitedEnglishProficiencyDescriptor;

        public virtual string LimitedEnglishProficiencyDescriptor
        {
            get
            {
                if (_limitedEnglishProficiencyDescriptor == null)
                    _limitedEnglishProficiencyDescriptor = _limitedEnglishProficiencyDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LimitedEnglishProficiencyDescriptor", _limitedEnglishProficiencyDescriptorId.Value);
                    
                return _limitedEnglishProficiencyDescriptor;
            }
            set
            {
                _limitedEnglishProficiencyDescriptor = value;
                _limitedEnglishProficiencyDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string LoginId  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MaidenName  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MiddleName  { get; set; }
        public virtual bool? MultipleBirthStatus  { get; set; }
        public virtual int? OldEthnicityDescriptorId 
        {
            get
            {
                if (_oldEthnicityDescriptorId == default(int?))
                    _oldEthnicityDescriptorId = string.IsNullOrWhiteSpace(_oldEthnicityDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("OldEthnicityDescriptor", _oldEthnicityDescriptor);

                return _oldEthnicityDescriptorId;
            } 
            set
            {
                _oldEthnicityDescriptorId = value;
                _oldEthnicityDescriptor = null;
            }
        }

        private int? _oldEthnicityDescriptorId;
        private string _oldEthnicityDescriptor;

        public virtual string OldEthnicityDescriptor
        {
            get
            {
                if (_oldEthnicityDescriptor == null)
                    _oldEthnicityDescriptor = _oldEthnicityDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("OldEthnicityDescriptor", _oldEthnicityDescriptorId.Value);
                    
                return _oldEthnicityDescriptor;
            }
            set
            {
                _oldEthnicityDescriptor = value;
                _oldEthnicityDescriptorId = default(int?);
            }
        }
        [StringLength(30), NoDangerousText]
        public virtual string PersonalTitlePrefix  { get; set; }
        [StringLength(32), NoDangerousText]
        public virtual string PersonId  { get; set; }
        public virtual int? PreviousCareerDescriptorId 
        {
            get
            {
                if (_previousCareerDescriptorId == default(int?))
                    _previousCareerDescriptorId = string.IsNullOrWhiteSpace(_previousCareerDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PreviousCareerDescriptor", _previousCareerDescriptor);

                return _previousCareerDescriptorId;
            } 
            set
            {
                _previousCareerDescriptorId = value;
                _previousCareerDescriptor = null;
            }
        }

        private int? _previousCareerDescriptorId;
        private string _previousCareerDescriptor;

        public virtual string PreviousCareerDescriptor
        {
            get
            {
                if (_previousCareerDescriptor == null)
                    _previousCareerDescriptor = _previousCareerDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PreviousCareerDescriptor", _previousCareerDescriptorId.Value);
                    
                return _previousCareerDescriptor;
            }
            set
            {
                _previousCareerDescriptor = value;
                _previousCareerDescriptorId = default(int?);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string ProfileThumbnail  { get; set; }
        public virtual bool? ProgramComplete  { get; set; }
        [RequiredWithNonDefault]
        public virtual int SexDescriptorId 
        {
            get
            {
                if (_sexDescriptorId == default(int))
                    _sexDescriptorId = DescriptorsCache.GetCache().GetId("SexDescriptor", _sexDescriptor);

                return _sexDescriptorId;
            } 
            set
            {
                _sexDescriptorId = value;
                _sexDescriptor = null;
            }
        }

        private int _sexDescriptorId;
        private string _sexDescriptor;

        public virtual string SexDescriptor
        {
            get
            {
                if (_sexDescriptor == null)
                    _sexDescriptor = DescriptorsCache.GetCache().GetValue("SexDescriptor", _sexDescriptorId);
                    
                return _sexDescriptor;
            }
            set
            {
                _sexDescriptor = value;
                _sexDescriptorId = default(int);
            }
        }
        public virtual int? SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int?))
                    _sourceSystemDescriptorId = string.IsNullOrWhiteSpace(_sourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int? _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = _sourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId.Value);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-999999999999999.9999", "999999999999999.9999")]
        public virtual decimal? TuitionCost  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.CandidateAggregate.TPDM.CandidateBackgroundCheck CandidateBackgroundCheck
        {
            get
            {
                // Return the item in the list, if one exists
                if (CandidateBackgroundCheckPersistentList.Any())
                    return CandidateBackgroundCheckPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (CandidateBackgroundCheckPersistentList.Any())
                    CandidateBackgroundCheckPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.Candidate = this;

                    CandidateBackgroundCheckPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.ICandidateBackgroundCheck Entities.Common.TPDM.ICandidate.CandidateBackgroundCheck
        {
            get { return CandidateBackgroundCheck; }
            set { CandidateBackgroundCheck = (Entities.NHibernate.CandidateAggregate.TPDM.CandidateBackgroundCheck) value; }
        }

        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateBackgroundCheck> _candidateBackgroundCheckPersistentList;

        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateBackgroundCheck> CandidateBackgroundCheckPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateBackgroundCheckPersistentList)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateBackgroundCheckPersistentList;
            }
            set
            {
                _candidateBackgroundCheckPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ApplicationAggregate.TPDM.ApplicationReferenceData ApplicationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Application discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICandidate.ApplicationDiscriminator
        {
            get { return ApplicationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Application resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICandidate.ApplicationResourceId
        {
            get { return ApplicationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICandidate.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICandidate.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddress> _candidateAddresses;
        private ICollection<Entities.Common.TPDM.ICandidateAddress> _candidateAddressesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddress> CandidateAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateAddresses)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateAddresses;
            }
            set
            {
                _candidateAddresses = value;
                _candidateAddressesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateAddress, Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateAddress> Entities.Common.TPDM.ICandidate.CandidateAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateAddresses)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateAddressesCovariant;
            }
            set
            {
                CandidateAddresses = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddress>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddress>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAid> _candidateAids;
        private ICollection<Entities.Common.TPDM.ICandidateAid> _candidateAidsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAid> CandidateAids
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateAids)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateAids;
            }
            set
            {
                _candidateAids = value;
                _candidateAidsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateAid, Entities.NHibernate.CandidateAggregate.TPDM.CandidateAid>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateAid> Entities.Common.TPDM.ICandidate.CandidateAids
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateAids)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateAidsCovariant;
            }
            set
            {
                CandidateAids = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAid>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAid>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateCharacteristic> _candidateCharacteristics;
        private ICollection<Entities.Common.TPDM.ICandidateCharacteristic> _candidateCharacteristicsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateCharacteristic> CandidateCharacteristics
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateCharacteristics)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateCharacteristics;
            }
            set
            {
                _candidateCharacteristics = value;
                _candidateCharacteristicsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateCharacteristic, Entities.NHibernate.CandidateAggregate.TPDM.CandidateCharacteristic>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateCharacteristic> Entities.Common.TPDM.ICandidate.CandidateCharacteristics
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateCharacteristics)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateCharacteristicsCovariant;
            }
            set
            {
                CandidateCharacteristics = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateCharacteristic>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateCharacteristic>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateCohortYear> _candidateCohortYears;
        private ICollection<Entities.Common.TPDM.ICandidateCohortYear> _candidateCohortYearsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateCohortYear> CandidateCohortYears
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateCohortYears)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateCohortYears;
            }
            set
            {
                _candidateCohortYears = value;
                _candidateCohortYearsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateCohortYear, Entities.NHibernate.CandidateAggregate.TPDM.CandidateCohortYear>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateCohortYear> Entities.Common.TPDM.ICandidate.CandidateCohortYears
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateCohortYears)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateCohortYearsCovariant;
            }
            set
            {
                CandidateCohortYears = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateCohortYear>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateCohortYear>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDegreeSpecialization> _candidateDegreeSpecializations;
        private ICollection<Entities.Common.TPDM.ICandidateDegreeSpecialization> _candidateDegreeSpecializationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDegreeSpecialization> CandidateDegreeSpecializations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateDegreeSpecializations)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateDegreeSpecializations;
            }
            set
            {
                _candidateDegreeSpecializations = value;
                _candidateDegreeSpecializationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateDegreeSpecialization, Entities.NHibernate.CandidateAggregate.TPDM.CandidateDegreeSpecialization>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateDegreeSpecialization> Entities.Common.TPDM.ICandidate.CandidateDegreeSpecializations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateDegreeSpecializations)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateDegreeSpecializationsCovariant;
            }
            set
            {
                CandidateDegreeSpecializations = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDegreeSpecialization>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDegreeSpecialization>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisability> _candidateDisabilities;
        private ICollection<Entities.Common.TPDM.ICandidateDisability> _candidateDisabilitiesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisability> CandidateDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateDisabilities)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateDisabilities;
            }
            set
            {
                _candidateDisabilities = value;
                _candidateDisabilitiesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateDisability, Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisability>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateDisability> Entities.Common.TPDM.ICandidate.CandidateDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateDisabilities)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateDisabilitiesCovariant;
            }
            set
            {
                CandidateDisabilities = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisability>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisability>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateElectronicMail> _candidateElectronicMails;
        private ICollection<Entities.Common.TPDM.ICandidateElectronicMail> _candidateElectronicMailsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateElectronicMail> CandidateElectronicMails
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateElectronicMails)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateElectronicMails;
            }
            set
            {
                _candidateElectronicMails = value;
                _candidateElectronicMailsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateElectronicMail, Entities.NHibernate.CandidateAggregate.TPDM.CandidateElectronicMail>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateElectronicMail> Entities.Common.TPDM.ICandidate.CandidateElectronicMails
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateElectronicMails)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateElectronicMailsCovariant;
            }
            set
            {
                CandidateElectronicMails = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateElectronicMail>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateElectronicMail>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateEPPProgramDegree> _candidateEPPProgramDegrees;
        private ICollection<Entities.Common.TPDM.ICandidateEPPProgramDegree> _candidateEPPProgramDegreesCovariant;
        [RequiredCollection]
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateEPPProgramDegree> CandidateEPPProgramDegrees
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateEPPProgramDegrees)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateEPPProgramDegrees;
            }
            set
            {
                _candidateEPPProgramDegrees = value;
                _candidateEPPProgramDegreesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateEPPProgramDegree, Entities.NHibernate.CandidateAggregate.TPDM.CandidateEPPProgramDegree>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateEPPProgramDegree> Entities.Common.TPDM.ICandidate.CandidateEPPProgramDegrees
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateEPPProgramDegrees)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateEPPProgramDegreesCovariant;
            }
            set
            {
                CandidateEPPProgramDegrees = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateEPPProgramDegree>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateEPPProgramDegree>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationCode> _candidateIdentificationCodes;
        private ICollection<Entities.Common.TPDM.ICandidateIdentificationCode> _candidateIdentificationCodesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationCode> CandidateIdentificationCodes
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateIdentificationCodes)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateIdentificationCodes;
            }
            set
            {
                _candidateIdentificationCodes = value;
                _candidateIdentificationCodesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateIdentificationCode, Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationCode>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateIdentificationCode> Entities.Common.TPDM.ICandidate.CandidateIdentificationCodes
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateIdentificationCodes)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateIdentificationCodesCovariant;
            }
            set
            {
                CandidateIdentificationCodes = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationCode>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationCode>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationDocument> _candidateIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.ICandidateIdentificationDocument> _candidateIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationDocument> CandidateIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateIdentificationDocuments)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateIdentificationDocuments;
            }
            set
            {
                _candidateIdentificationDocuments = value;
                _candidateIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateIdentificationDocument, Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateIdentificationDocument> Entities.Common.TPDM.ICandidate.CandidateIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateIdentificationDocuments)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateIdentificationDocumentsCovariant;
            }
            set
            {
                CandidateIdentificationDocuments = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationDocument>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicator> _candidateIndicators;
        private ICollection<Entities.Common.TPDM.ICandidateIndicator> _candidateIndicatorsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicator> CandidateIndicators
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateIndicators)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateIndicators;
            }
            set
            {
                _candidateIndicators = value;
                _candidateIndicatorsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateIndicator, Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicator>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateIndicator> Entities.Common.TPDM.ICandidate.CandidateIndicators
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateIndicators)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateIndicatorsCovariant;
            }
            set
            {
                CandidateIndicators = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicator>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicator>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateInternationalAddress> _candidateInternationalAddresses;
        private ICollection<Entities.Common.TPDM.ICandidateInternationalAddress> _candidateInternationalAddressesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateInternationalAddress> CandidateInternationalAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateInternationalAddresses)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateInternationalAddresses;
            }
            set
            {
                _candidateInternationalAddresses = value;
                _candidateInternationalAddressesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateInternationalAddress, Entities.NHibernate.CandidateAggregate.TPDM.CandidateInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateInternationalAddress> Entities.Common.TPDM.ICandidate.CandidateInternationalAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateInternationalAddresses)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateInternationalAddressesCovariant;
            }
            set
            {
                CandidateInternationalAddresses = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateInternationalAddress>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateInternationalAddress>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguage> _candidateLanguages;
        private ICollection<Entities.Common.TPDM.ICandidateLanguage> _candidateLanguagesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguage> CandidateLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateLanguages)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateLanguages;
            }
            set
            {
                _candidateLanguages = value;
                _candidateLanguagesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateLanguage, Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguage>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateLanguage> Entities.Common.TPDM.ICandidate.CandidateLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateLanguages)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateLanguagesCovariant;
            }
            set
            {
                CandidateLanguages = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguage>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguage>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateOtherName> _candidateOtherNames;
        private ICollection<Entities.Common.TPDM.ICandidateOtherName> _candidateOtherNamesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateOtherName> CandidateOtherNames
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateOtherNames)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateOtherNames;
            }
            set
            {
                _candidateOtherNames = value;
                _candidateOtherNamesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateOtherName, Entities.NHibernate.CandidateAggregate.TPDM.CandidateOtherName>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateOtherName> Entities.Common.TPDM.ICandidate.CandidateOtherNames
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateOtherNames)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateOtherNamesCovariant;
            }
            set
            {
                CandidateOtherNames = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateOtherName>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateOtherName>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidatePersonalIdentificationDocument> _candidatePersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument> _candidatePersonalIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidatePersonalIdentificationDocument> CandidatePersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidatePersonalIdentificationDocuments)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidatePersonalIdentificationDocuments;
            }
            set
            {
                _candidatePersonalIdentificationDocuments = value;
                _candidatePersonalIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument, Entities.NHibernate.CandidateAggregate.TPDM.CandidatePersonalIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument> Entities.Common.TPDM.ICandidate.CandidatePersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidatePersonalIdentificationDocuments)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidatePersonalIdentificationDocumentsCovariant;
            }
            set
            {
                CandidatePersonalIdentificationDocuments = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidatePersonalIdentificationDocument>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidatePersonalIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateRace> _candidateRaces;
        private ICollection<Entities.Common.TPDM.ICandidateRace> _candidateRacesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateRace> CandidateRaces
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateRaces)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateRaces;
            }
            set
            {
                _candidateRaces = value;
                _candidateRacesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateRace, Entities.NHibernate.CandidateAggregate.TPDM.CandidateRace>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateRace> Entities.Common.TPDM.ICandidate.CandidateRaces
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateRaces)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateRacesCovariant;
            }
            set
            {
                CandidateRaces = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateRace>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateRace>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateTelephone> _candidateTelephones;
        private ICollection<Entities.Common.TPDM.ICandidateTelephone> _candidateTelephonesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateTelephone> CandidateTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateTelephones)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateTelephones;
            }
            set
            {
                _candidateTelephones = value;
                _candidateTelephonesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateTelephone, Entities.NHibernate.CandidateAggregate.TPDM.CandidateTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateTelephone> Entities.Common.TPDM.ICandidate.CandidateTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateTelephones)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateTelephonesCovariant;
            }
            set
            {
                CandidateTelephones = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateTelephone>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateTelephone>());
            }
        }


        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateVisa> _candidateVisas;
        private ICollection<Entities.Common.TPDM.ICandidateVisa> _candidateVisasCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateVisa> CandidateVisas
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateVisas)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateVisas;
            }
            set
            {
                _candidateVisas = value;
                _candidateVisasCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateVisa, Entities.NHibernate.CandidateAggregate.TPDM.CandidateVisa>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateVisa> Entities.Common.TPDM.ICandidate.CandidateVisas
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateVisas)
                    if (item.Candidate == null)
                        item.Candidate = this;
                // -------------------------------------------------------------

                return _candidateVisasCovariant;
            }
            set
            {
                CandidateVisas = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateVisa>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateVisa>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "BirthCountryDescriptor", new LookupColumnDetails { PropertyName = "BirthCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "BirthSexDescriptor", new LookupColumnDetails { PropertyName = "BirthSexDescriptorId", LookupTypeName = "SexDescriptor"} },
                { "BirthStateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "BirthStateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
                { "CitizenshipStatusDescriptor", new LookupColumnDetails { PropertyName = "CitizenshipStatusDescriptorId", LookupTypeName = "CitizenshipStatusDescriptor"} },
                { "EnglishLanguageExamDescriptor", new LookupColumnDetails { PropertyName = "EnglishLanguageExamDescriptorId", LookupTypeName = "EnglishLanguageExamDescriptor"} },
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
                { "LimitedEnglishProficiencyDescriptor", new LookupColumnDetails { PropertyName = "LimitedEnglishProficiencyDescriptorId", LookupTypeName = "LimitedEnglishProficiencyDescriptor"} },
                { "OldEthnicityDescriptor", new LookupColumnDetails { PropertyName = "OldEthnicityDescriptorId", LookupTypeName = "OldEthnicityDescriptor"} },
                { "PreviousCareerDescriptor", new LookupColumnDetails { PropertyName = "PreviousCareerDescriptorId", LookupTypeName = "PreviousCareerDescriptor"} },
                { "SexDescriptor", new LookupColumnDetails { PropertyName = "SexDescriptorId", LookupTypeName = "SexDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CandidateIdentifier", CandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidate)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidate) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicantProfileIdentifierSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsApplicantProfileIdentifierSupported
        {
            get { return _isApplicantProfileIdentifierSupported; }
            set { _isApplicantProfileIdentifierSupported = value; }
        }

        private bool _isApplicationIdentifierSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsApplicationIdentifierSupported
        {
            get { return _isApplicationIdentifierSupported; }
            set { _isApplicationIdentifierSupported = value; }
        }

        private bool _isBirthCitySupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthCitySupported
        {
            get { return _isBirthCitySupported; }
            set { _isBirthCitySupported = value; }
        }

        private bool _isBirthCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthCountryDescriptorSupported
        {
            get { return _isBirthCountryDescriptorSupported; }
            set { _isBirthCountryDescriptorSupported = value; }
        }

        private bool _isBirthDateSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthDateSupported
        {
            get { return _isBirthDateSupported; }
            set { _isBirthDateSupported = value; }
        }

        private bool _isBirthInternationalProvinceSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthInternationalProvinceSupported
        {
            get { return _isBirthInternationalProvinceSupported; }
            set { _isBirthInternationalProvinceSupported = value; }
        }

        private bool _isBirthSexDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthSexDescriptorSupported
        {
            get { return _isBirthSexDescriptorSupported; }
            set { _isBirthSexDescriptorSupported = value; }
        }

        private bool _isBirthStateAbbreviationDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsBirthStateAbbreviationDescriptorSupported
        {
            get { return _isBirthStateAbbreviationDescriptorSupported; }
            set { _isBirthStateAbbreviationDescriptorSupported = value; }
        }

        private bool _isCandidateAddressesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateAddressesSupported
        {
            get { return _isCandidateAddressesSupported; }
            set { _isCandidateAddressesSupported = value; }
        }

        private bool _isCandidateAidsSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateAidsSupported
        {
            get { return _isCandidateAidsSupported; }
            set { _isCandidateAidsSupported = value; }
        }

        private bool _isCandidateBackgroundCheckSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateBackgroundCheckSupported
        {
            get { return _isCandidateBackgroundCheckSupported; }
            set { _isCandidateBackgroundCheckSupported = value; }
        }

        private bool _isCandidateCharacteristicsSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateCharacteristicsSupported
        {
            get { return _isCandidateCharacteristicsSupported; }
            set { _isCandidateCharacteristicsSupported = value; }
        }

        private bool _isCandidateCohortYearsSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateCohortYearsSupported
        {
            get { return _isCandidateCohortYearsSupported; }
            set { _isCandidateCohortYearsSupported = value; }
        }

        private bool _isCandidateDegreeSpecializationsSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateDegreeSpecializationsSupported
        {
            get { return _isCandidateDegreeSpecializationsSupported; }
            set { _isCandidateDegreeSpecializationsSupported = value; }
        }

        private bool _isCandidateDisabilitiesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateDisabilitiesSupported
        {
            get { return _isCandidateDisabilitiesSupported; }
            set { _isCandidateDisabilitiesSupported = value; }
        }

        private bool _isCandidateElectronicMailsSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateElectronicMailsSupported
        {
            get { return _isCandidateElectronicMailsSupported; }
            set { _isCandidateElectronicMailsSupported = value; }
        }

        private bool _isCandidateEPPProgramDegreesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateEPPProgramDegreesSupported
        {
            get { return _isCandidateEPPProgramDegreesSupported; }
            set { _isCandidateEPPProgramDegreesSupported = value; }
        }

        private bool _isCandidateIdentificationCodesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIdentificationCodesSupported
        {
            get { return _isCandidateIdentificationCodesSupported; }
            set { _isCandidateIdentificationCodesSupported = value; }
        }

        private bool _isCandidateIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIdentificationDocumentsSupported
        {
            get { return _isCandidateIdentificationDocumentsSupported; }
            set { _isCandidateIdentificationDocumentsSupported = value; }
        }

        private bool _isCandidateIndicatorsSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIndicatorsSupported
        {
            get { return _isCandidateIndicatorsSupported; }
            set { _isCandidateIndicatorsSupported = value; }
        }

        private bool _isCandidateInternationalAddressesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateInternationalAddressesSupported
        {
            get { return _isCandidateInternationalAddressesSupported; }
            set { _isCandidateInternationalAddressesSupported = value; }
        }

        private bool _isCandidateLanguagesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateLanguagesSupported
        {
            get { return _isCandidateLanguagesSupported; }
            set { _isCandidateLanguagesSupported = value; }
        }

        private bool _isCandidateOtherNamesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateOtherNamesSupported
        {
            get { return _isCandidateOtherNamesSupported; }
            set { _isCandidateOtherNamesSupported = value; }
        }

        private bool _isCandidatePersonalIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidatePersonalIdentificationDocumentsSupported
        {
            get { return _isCandidatePersonalIdentificationDocumentsSupported; }
            set { _isCandidatePersonalIdentificationDocumentsSupported = value; }
        }

        private bool _isCandidateRacesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateRacesSupported
        {
            get { return _isCandidateRacesSupported; }
            set { _isCandidateRacesSupported = value; }
        }

        private bool _isCandidateTelephonesSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateTelephonesSupported
        {
            get { return _isCandidateTelephonesSupported; }
            set { _isCandidateTelephonesSupported = value; }
        }

        private bool _isCandidateVisasSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateVisasSupported
        {
            get { return _isCandidateVisasSupported; }
            set { _isCandidateVisasSupported = value; }
        }

        private bool _isCitizenshipStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported
        {
            get { return _isCitizenshipStatusDescriptorSupported; }
            set { _isCitizenshipStatusDescriptorSupported = value; }
        }

        private bool _isDateEnteredUSSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsDateEnteredUSSupported
        {
            get { return _isDateEnteredUSSupported; }
            set { _isDateEnteredUSSupported = value; }
        }

        private bool _isDisplacementStatusSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsDisplacementStatusSupported
        {
            get { return _isDisplacementStatusSupported; }
            set { _isDisplacementStatusSupported = value; }
        }

        private bool _isEconomicDisadvantagedSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsEconomicDisadvantagedSupported
        {
            get { return _isEconomicDisadvantagedSupported; }
            set { _isEconomicDisadvantagedSupported = value; }
        }

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEnglishLanguageExamDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsEnglishLanguageExamDescriptorSupported
        {
            get { return _isEnglishLanguageExamDescriptorSupported; }
            set { _isEnglishLanguageExamDescriptorSupported = value; }
        }

        private bool _isFirstGenerationStudentSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsFirstGenerationStudentSupported
        {
            get { return _isFirstGenerationStudentSupported; }
            set { _isFirstGenerationStudentSupported = value; }
        }

        private bool _isFirstNameSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsFirstNameSupported
        {
            get { return _isFirstNameSupported; }
            set { _isFirstNameSupported = value; }
        }

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isGenerationCodeSuffixSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsGenerationCodeSuffixSupported
        {
            get { return _isGenerationCodeSuffixSupported; }
            set { _isGenerationCodeSuffixSupported = value; }
        }

        private bool _isHispanicLatinoEthnicitySupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported
        {
            get { return _isHispanicLatinoEthnicitySupported; }
            set { _isHispanicLatinoEthnicitySupported = value; }
        }

        private bool _isLastSurnameSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsLastSurnameSupported
        {
            get { return _isLastSurnameSupported; }
            set { _isLastSurnameSupported = value; }
        }

        private bool _isLimitedEnglishProficiencyDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsLimitedEnglishProficiencyDescriptorSupported
        {
            get { return _isLimitedEnglishProficiencyDescriptorSupported; }
            set { _isLimitedEnglishProficiencyDescriptorSupported = value; }
        }

        private bool _isLoginIdSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsLoginIdSupported
        {
            get { return _isLoginIdSupported; }
            set { _isLoginIdSupported = value; }
        }

        private bool _isMaidenNameSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsMaidenNameSupported
        {
            get { return _isMaidenNameSupported; }
            set { _isMaidenNameSupported = value; }
        }

        private bool _isMiddleNameSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsMiddleNameSupported
        {
            get { return _isMiddleNameSupported; }
            set { _isMiddleNameSupported = value; }
        }

        private bool _isMultipleBirthStatusSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsMultipleBirthStatusSupported
        {
            get { return _isMultipleBirthStatusSupported; }
            set { _isMultipleBirthStatusSupported = value; }
        }

        private bool _isOldEthnicityDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported
        {
            get { return _isOldEthnicityDescriptorSupported; }
            set { _isOldEthnicityDescriptorSupported = value; }
        }

        private bool _isPersonalTitlePrefixSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsPersonalTitlePrefixSupported
        {
            get { return _isPersonalTitlePrefixSupported; }
            set { _isPersonalTitlePrefixSupported = value; }
        }

        private bool _isPersonIdSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsPersonIdSupported
        {
            get { return _isPersonIdSupported; }
            set { _isPersonIdSupported = value; }
        }

        private bool _isPreviousCareerDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsPreviousCareerDescriptorSupported
        {
            get { return _isPreviousCareerDescriptorSupported; }
            set { _isPreviousCareerDescriptorSupported = value; }
        }

        private bool _isProfileThumbnailSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsProfileThumbnailSupported
        {
            get { return _isProfileThumbnailSupported; }
            set { _isProfileThumbnailSupported = value; }
        }

        private bool _isProgramCompleteSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsProgramCompleteSupported
        {
            get { return _isProgramCompleteSupported; }
            set { _isProgramCompleteSupported = value; }
        }

        private bool _isSexDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsSexDescriptorSupported
        {
            get { return _isSexDescriptorSupported; }
            set { _isSexDescriptorSupported = value; }
        }

        private bool _isSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsSourceSystemDescriptorSupported
        {
            get { return _isSourceSystemDescriptorSupported; }
            set { _isSourceSystemDescriptorSupported = value; }
        }

        private bool _isTuitionCostSupported = true;
        bool Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsTuitionCostSupported
        {
            get { return _isTuitionCostSupported; }
            set { _isTuitionCostSupported = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateAddress, bool> _isCandidateAddressIncluded;
        Func<Entities.Common.TPDM.ICandidateAddress, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateAddressIncluded
        {
            get { return _isCandidateAddressIncluded; }
            set { _isCandidateAddressIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateAid, bool> _isCandidateAidIncluded;
        Func<Entities.Common.TPDM.ICandidateAid, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateAidIncluded
        {
            get { return _isCandidateAidIncluded; }
            set { _isCandidateAidIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateCharacteristic, bool> _isCandidateCharacteristicIncluded;
        Func<Entities.Common.TPDM.ICandidateCharacteristic, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateCharacteristicIncluded
        {
            get { return _isCandidateCharacteristicIncluded; }
            set { _isCandidateCharacteristicIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateCohortYear, bool> _isCandidateCohortYearIncluded;
        Func<Entities.Common.TPDM.ICandidateCohortYear, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateCohortYearIncluded
        {
            get { return _isCandidateCohortYearIncluded; }
            set { _isCandidateCohortYearIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateDegreeSpecialization, bool> _isCandidateDegreeSpecializationIncluded;
        Func<Entities.Common.TPDM.ICandidateDegreeSpecialization, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateDegreeSpecializationIncluded
        {
            get { return _isCandidateDegreeSpecializationIncluded; }
            set { _isCandidateDegreeSpecializationIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateDisability, bool> _isCandidateDisabilityIncluded;
        Func<Entities.Common.TPDM.ICandidateDisability, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateDisabilityIncluded
        {
            get { return _isCandidateDisabilityIncluded; }
            set { _isCandidateDisabilityIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateElectronicMail, bool> _isCandidateElectronicMailIncluded;
        Func<Entities.Common.TPDM.ICandidateElectronicMail, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateElectronicMailIncluded
        {
            get { return _isCandidateElectronicMailIncluded; }
            set { _isCandidateElectronicMailIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateEPPProgramDegree, bool> _isCandidateEPPProgramDegreeIncluded;
        Func<Entities.Common.TPDM.ICandidateEPPProgramDegree, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateEPPProgramDegreeIncluded
        {
            get { return _isCandidateEPPProgramDegreeIncluded; }
            set { _isCandidateEPPProgramDegreeIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateIdentificationCode, bool> _isCandidateIdentificationCodeIncluded;
        Func<Entities.Common.TPDM.ICandidateIdentificationCode, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIdentificationCodeIncluded
        {
            get { return _isCandidateIdentificationCodeIncluded; }
            set { _isCandidateIdentificationCodeIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateIdentificationDocument, bool> _isCandidateIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.ICandidateIdentificationDocument, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIdentificationDocumentIncluded
        {
            get { return _isCandidateIdentificationDocumentIncluded; }
            set { _isCandidateIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateIndicator, bool> _isCandidateIndicatorIncluded;
        Func<Entities.Common.TPDM.ICandidateIndicator, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateIndicatorIncluded
        {
            get { return _isCandidateIndicatorIncluded; }
            set { _isCandidateIndicatorIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateInternationalAddress, bool> _isCandidateInternationalAddressIncluded;
        Func<Entities.Common.TPDM.ICandidateInternationalAddress, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateInternationalAddressIncluded
        {
            get { return _isCandidateInternationalAddressIncluded; }
            set { _isCandidateInternationalAddressIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateLanguage, bool> _isCandidateLanguageIncluded;
        Func<Entities.Common.TPDM.ICandidateLanguage, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateLanguageIncluded
        {
            get { return _isCandidateLanguageIncluded; }
            set { _isCandidateLanguageIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateOtherName, bool> _isCandidateOtherNameIncluded;
        Func<Entities.Common.TPDM.ICandidateOtherName, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateOtherNameIncluded
        {
            get { return _isCandidateOtherNameIncluded; }
            set { _isCandidateOtherNameIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument, bool> _isCandidatePersonalIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.ICandidatePersonalIdentificationDocument, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidatePersonalIdentificationDocumentIncluded
        {
            get { return _isCandidatePersonalIdentificationDocumentIncluded; }
            set { _isCandidatePersonalIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateRace, bool> _isCandidateRaceIncluded;
        Func<Entities.Common.TPDM.ICandidateRace, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateRaceIncluded
        {
            get { return _isCandidateRaceIncluded; }
            set { _isCandidateRaceIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateTelephone, bool> _isCandidateTelephoneIncluded;
        Func<Entities.Common.TPDM.ICandidateTelephone, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateTelephoneIncluded
        {
            get { return _isCandidateTelephoneIncluded; }
            set { _isCandidateTelephoneIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateVisa, bool> _isCandidateVisaIncluded;
        Func<Entities.Common.TPDM.ICandidateVisa, bool> Entities.Common.TPDM.ICandidateSynchronizationSourceSupport.IsCandidateVisaIncluded
        {
            get { return _isCandidateVisaIncluded; }
            set { _isCandidateVisaIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateAddress table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateAddress : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateAddress, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateAddress()
        {
            CandidateAddressPeriods = new HashSet<CandidateAddressPeriod>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateAddress.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AddressTypeDescriptorId 
        {
            get
            {
                if (_addressTypeDescriptorId == default(int))
                    _addressTypeDescriptorId = DescriptorsCache.GetCache().GetId("AddressTypeDescriptor", _addressTypeDescriptor);

                return _addressTypeDescriptorId;
            } 
            set
            {
                _addressTypeDescriptorId = value;
                _addressTypeDescriptor = null;
            }
        }

        private int _addressTypeDescriptorId;
        private string _addressTypeDescriptor;

        public virtual string AddressTypeDescriptor
        {
            get
            {
                if (_addressTypeDescriptor == null)
                    _addressTypeDescriptor = DescriptorsCache.GetCache().GetValue("AddressTypeDescriptor", _addressTypeDescriptorId);
                    
                return _addressTypeDescriptor;
            }
            set
            {
                _addressTypeDescriptor = value;
                _addressTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(30), NoDangerousText, NoWhitespace]
        public virtual string City  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(17), NoDangerousText, NoWhitespace]
        public virtual string PostalCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int StateAbbreviationDescriptorId 
        {
            get
            {
                if (_stateAbbreviationDescriptorId == default(int))
                    _stateAbbreviationDescriptorId = DescriptorsCache.GetCache().GetId("StateAbbreviationDescriptor", _stateAbbreviationDescriptor);

                return _stateAbbreviationDescriptorId;
            } 
            set
            {
                _stateAbbreviationDescriptorId = value;
                _stateAbbreviationDescriptor = null;
            }
        }

        private int _stateAbbreviationDescriptorId;
        private string _stateAbbreviationDescriptor;

        public virtual string StateAbbreviationDescriptor
        {
            get
            {
                if (_stateAbbreviationDescriptor == null)
                    _stateAbbreviationDescriptor = DescriptorsCache.GetCache().GetValue("StateAbbreviationDescriptor", _stateAbbreviationDescriptorId);
                    
                return _stateAbbreviationDescriptor;
            }
            set
            {
                _stateAbbreviationDescriptor = value;
                _stateAbbreviationDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(150), NoDangerousText, NoWhitespace]
        public virtual string StreetNumberName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(50), NoDangerousText]
        public virtual string ApartmentRoomSuiteNumber  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string BuildingSiteNumber  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string CongressionalDistrict  { get; set; }
        [StringLength(5), NoDangerousText]
        public virtual string CountyFIPSCode  { get; set; }
        public virtual bool? DoNotPublishIndicator  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string Latitude  { get; set; }
        public virtual int? LocaleDescriptorId 
        {
            get
            {
                if (_localeDescriptorId == default(int?))
                    _localeDescriptorId = string.IsNullOrWhiteSpace(_localeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LocaleDescriptor", _localeDescriptor);

                return _localeDescriptorId;
            } 
            set
            {
                _localeDescriptorId = value;
                _localeDescriptor = null;
            }
        }

        private int? _localeDescriptorId;
        private string _localeDescriptor;

        public virtual string LocaleDescriptor
        {
            get
            {
                if (_localeDescriptor == null)
                    _localeDescriptor = _localeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LocaleDescriptor", _localeDescriptorId.Value);
                    
                return _localeDescriptor;
            }
            set
            {
                _localeDescriptor = value;
                _localeDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string Longitude  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string NameOfCounty  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddressPeriod> _candidateAddressPeriods;
        private ICollection<Entities.Common.TPDM.ICandidateAddressPeriod> _candidateAddressPeriodsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddressPeriod> CandidateAddressPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateAddressPeriods)
                    if (item.CandidateAddress == null)
                        item.CandidateAddress = this;
                // -------------------------------------------------------------

                return _candidateAddressPeriods;
            }
            set
            {
                _candidateAddressPeriods = value;
                _candidateAddressPeriodsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateAddressPeriod, Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddressPeriod>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateAddressPeriod> Entities.Common.TPDM.ICandidateAddress.CandidateAddressPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateAddressPeriods)
                    if (item.CandidateAddress == null)
                        item.CandidateAddress = this;
                // -------------------------------------------------------------

                return _candidateAddressPeriodsCovariant;
            }
            set
            {
                CandidateAddressPeriods = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddressPeriod>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateAddressPeriod>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "LocaleDescriptor", new LookupColumnDetails { PropertyName = "LocaleDescriptorId", LookupTypeName = "LocaleDescriptor"} },
                { "StateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AddressTypeDescriptorId", AddressTypeDescriptorId);
            keyValues.Add("City", City);
            keyValues.Add("PostalCode", PostalCode);
            keyValues.Add("StateAbbreviationDescriptorId", StateAbbreviationDescriptorId);
            keyValues.Add("StreetNumberName", StreetNumberName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateAddress) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApartmentRoomSuiteNumberSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported
        {
            get { return _isApartmentRoomSuiteNumberSupported; }
            set { _isApartmentRoomSuiteNumberSupported = value; }
        }

        private bool _isBuildingSiteNumberSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported
        {
            get { return _isBuildingSiteNumberSupported; }
            set { _isBuildingSiteNumberSupported = value; }
        }

        private bool _isCandidateAddressPeriodsSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsCandidateAddressPeriodsSupported
        {
            get { return _isCandidateAddressPeriodsSupported; }
            set { _isCandidateAddressPeriodsSupported = value; }
        }

        private bool _isCongressionalDistrictSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported
        {
            get { return _isCongressionalDistrictSupported; }
            set { _isCongressionalDistrictSupported = value; }
        }

        private bool _isCountyFIPSCodeSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported
        {
            get { return _isCountyFIPSCodeSupported; }
            set { _isCountyFIPSCodeSupported = value; }
        }

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isLatitudeSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsLatitudeSupported
        {
            get { return _isLatitudeSupported; }
            set { _isLatitudeSupported = value; }
        }

        private bool _isLocaleDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported
        {
            get { return _isLocaleDescriptorSupported; }
            set { _isLocaleDescriptorSupported = value; }
        }

        private bool _isLongitudeSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsLongitudeSupported
        {
            get { return _isLongitudeSupported; }
            set { _isLongitudeSupported = value; }
        }

        private bool _isNameOfCountySupported = true;
        bool Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsNameOfCountySupported
        {
            get { return _isNameOfCountySupported; }
            set { _isNameOfCountySupported = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateAddressPeriod, bool> _isCandidateAddressPeriodIncluded;
        Func<Entities.Common.TPDM.ICandidateAddressPeriod, bool> Entities.Common.TPDM.ICandidateAddressSynchronizationSourceSupport.IsCandidateAddressPeriodIncluded
        {
            get { return _isCandidateAddressPeriodIncluded; }
            set { _isCandidateAddressPeriodIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateAddressPeriod table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateAddressPeriod : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateAddressPeriod, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateAddressPeriodSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateAddressPeriod()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual CandidateAddress CandidateAddress { get; set; }

        Entities.Common.TPDM.ICandidateAddress ICandidateAddressPeriod.CandidateAddress
        {
            get { return CandidateAddress; }
            set { CandidateAddress = (CandidateAddress) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "StateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (CandidateAddress as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateAddressPeriod) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            CandidateAddress = (CandidateAddress) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateAddressPeriodSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateAid table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateAid : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateAid, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateAid()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateAid.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AidTypeDescriptorId 
        {
            get
            {
                if (_aidTypeDescriptorId == default(int))
                    _aidTypeDescriptorId = DescriptorsCache.GetCache().GetId("AidTypeDescriptor", _aidTypeDescriptor);

                return _aidTypeDescriptorId;
            } 
            set
            {
                _aidTypeDescriptorId = value;
                _aidTypeDescriptor = null;
            }
        }

        private int _aidTypeDescriptorId;
        private string _aidTypeDescriptor;

        public virtual string AidTypeDescriptor
        {
            get
            {
                if (_aidTypeDescriptor == null)
                    _aidTypeDescriptor = DescriptorsCache.GetCache().GetValue("AidTypeDescriptor", _aidTypeDescriptorId);
                    
                return _aidTypeDescriptor;
            }
            set
            {
                _aidTypeDescriptor = value;
                _aidTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999999999999.9999", "999999999999999.9999")]
        public virtual decimal? AidAmount  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string AidConditionDescription  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual bool? PellGrantRecipient  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AidTypeDescriptor", new LookupColumnDetails { PropertyName = "AidTypeDescriptorId", LookupTypeName = "AidTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AidTypeDescriptorId", AidTypeDescriptorId);
            keyValues.Add("BeginDate", BeginDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateAid)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateAid) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAidAmountSupported = true;
        bool Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport.IsAidAmountSupported
        {
            get { return _isAidAmountSupported; }
            set { _isAidAmountSupported = value; }
        }

        private bool _isAidConditionDescriptionSupported = true;
        bool Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport.IsAidConditionDescriptionSupported
        {
            get { return _isAidConditionDescriptionSupported; }
            set { _isAidConditionDescriptionSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isPellGrantRecipientSupported = true;
        bool Entities.Common.TPDM.ICandidateAidSynchronizationSourceSupport.IsPellGrantRecipientSupported
        {
            get { return _isPellGrantRecipientSupported; }
            set { _isPellGrantRecipientSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateBackgroundCheck table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateBackgroundCheck : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateBackgroundCheck, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateBackgroundCheck()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateBackgroundCheck.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BackgroundCheckCompletedDate 
        {
            get { return _backgroundCheckCompletedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _backgroundCheckCompletedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _backgroundCheckCompletedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _backgroundCheckCompletedDate;
        
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BackgroundCheckRequestedDate 
        {
            get { return _backgroundCheckRequestedDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _backgroundCheckRequestedDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _backgroundCheckRequestedDate;
        
        public virtual int? BackgroundCheckStatusDescriptorId 
        {
            get
            {
                if (_backgroundCheckStatusDescriptorId == default(int?))
                    _backgroundCheckStatusDescriptorId = string.IsNullOrWhiteSpace(_backgroundCheckStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptor);

                return _backgroundCheckStatusDescriptorId;
            } 
            set
            {
                _backgroundCheckStatusDescriptorId = value;
                _backgroundCheckStatusDescriptor = null;
            }
        }

        private int? _backgroundCheckStatusDescriptorId;
        private string _backgroundCheckStatusDescriptor;

        public virtual string BackgroundCheckStatusDescriptor
        {
            get
            {
                if (_backgroundCheckStatusDescriptor == null)
                    _backgroundCheckStatusDescriptor = _backgroundCheckStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptorId.Value);
                    
                return _backgroundCheckStatusDescriptor;
            }
            set
            {
                _backgroundCheckStatusDescriptor = value;
                _backgroundCheckStatusDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault]
        public virtual int BackgroundCheckTypeDescriptorId 
        {
            get
            {
                if (_backgroundCheckTypeDescriptorId == default(int))
                    _backgroundCheckTypeDescriptorId = DescriptorsCache.GetCache().GetId("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptor);

                return _backgroundCheckTypeDescriptorId;
            } 
            set
            {
                _backgroundCheckTypeDescriptorId = value;
                _backgroundCheckTypeDescriptor = null;
            }
        }

        private int _backgroundCheckTypeDescriptorId;
        private string _backgroundCheckTypeDescriptor;

        public virtual string BackgroundCheckTypeDescriptor
        {
            get
            {
                if (_backgroundCheckTypeDescriptor == null)
                    _backgroundCheckTypeDescriptor = DescriptorsCache.GetCache().GetValue("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptorId);
                    
                return _backgroundCheckTypeDescriptor;
            }
            set
            {
                _backgroundCheckTypeDescriptor = value;
                _backgroundCheckTypeDescriptorId = default(int);
            }
        }
        public virtual bool? Fingerprint  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "BackgroundCheckStatusDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckStatusDescriptorId", LookupTypeName = "BackgroundCheckStatusDescriptor"} },
                { "BackgroundCheckTypeDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckTypeDescriptorId", LookupTypeName = "BackgroundCheckTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateBackgroundCheck) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBackgroundCheckCompletedDateSupported = true;
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported
        {
            get { return _isBackgroundCheckCompletedDateSupported; }
            set { _isBackgroundCheckCompletedDateSupported = value; }
        }

        private bool _isBackgroundCheckRequestedDateSupported = true;
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported
        {
            get { return _isBackgroundCheckRequestedDateSupported; }
            set { _isBackgroundCheckRequestedDateSupported = value; }
        }

        private bool _isBackgroundCheckStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported
        {
            get { return _isBackgroundCheckStatusDescriptorSupported; }
            set { _isBackgroundCheckStatusDescriptorSupported = value; }
        }

        private bool _isBackgroundCheckTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckTypeDescriptorSupported
        {
            get { return _isBackgroundCheckTypeDescriptorSupported; }
            set { _isBackgroundCheckTypeDescriptorSupported = value; }
        }

        private bool _isFingerprintSupported = true;
        bool Entities.Common.TPDM.ICandidateBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported
        {
            get { return _isFingerprintSupported; }
            set { _isFingerprintSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateCharacteristic table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateCharacteristic : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateCharacteristic, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateCharacteristicSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateCharacteristic()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateCharacteristic.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int CandidateCharacteristicDescriptorId 
        {
            get
            {
                if (_candidateCharacteristicDescriptorId == default(int))
                    _candidateCharacteristicDescriptorId = DescriptorsCache.GetCache().GetId("CandidateCharacteristicDescriptor", _candidateCharacteristicDescriptor);

                return _candidateCharacteristicDescriptorId;
            } 
            set
            {
                _candidateCharacteristicDescriptorId = value;
                _candidateCharacteristicDescriptor = null;
            }
        }

        private int _candidateCharacteristicDescriptorId;
        private string _candidateCharacteristicDescriptor;

        public virtual string CandidateCharacteristicDescriptor
        {
            get
            {
                if (_candidateCharacteristicDescriptor == null)
                    _candidateCharacteristicDescriptor = DescriptorsCache.GetCache().GetValue("CandidateCharacteristicDescriptor", _candidateCharacteristicDescriptorId);
                    
                return _candidateCharacteristicDescriptor;
            }
            set
            {
                _candidateCharacteristicDescriptor = value;
                _candidateCharacteristicDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DesignatedBy  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CandidateCharacteristicDescriptor", new LookupColumnDetails { PropertyName = "CandidateCharacteristicDescriptorId", LookupTypeName = "CandidateCharacteristicDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CandidateCharacteristicDescriptorId", CandidateCharacteristicDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateCharacteristic) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isDesignatedBySupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicSynchronizationSourceSupport.IsDesignatedBySupported
        {
            get { return _isDesignatedBySupported; }
            set { _isDesignatedBySupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateCohortYear table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateCohortYear : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateCohortYear, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateCohortYearSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateCohortYear()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateCohortYear.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int CohortYearTypeDescriptorId 
        {
            get
            {
                if (_cohortYearTypeDescriptorId == default(int))
                    _cohortYearTypeDescriptorId = DescriptorsCache.GetCache().GetId("CohortYearTypeDescriptor", _cohortYearTypeDescriptor);

                return _cohortYearTypeDescriptorId;
            } 
            set
            {
                _cohortYearTypeDescriptorId = value;
                _cohortYearTypeDescriptor = null;
            }
        }

        private int _cohortYearTypeDescriptorId;
        private string _cohortYearTypeDescriptor;

        public virtual string CohortYearTypeDescriptor
        {
            get
            {
                if (_cohortYearTypeDescriptor == null)
                    _cohortYearTypeDescriptor = DescriptorsCache.GetCache().GetValue("CohortYearTypeDescriptor", _cohortYearTypeDescriptorId);
                    
                return _cohortYearTypeDescriptor;
            }
            set
            {
                _cohortYearTypeDescriptor = value;
                _cohortYearTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICandidateCohortYear.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CohortYearTypeDescriptor", new LookupColumnDetails { PropertyName = "CohortYearTypeDescriptorId", LookupTypeName = "CohortYearTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CohortYearTypeDescriptorId", CohortYearTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateCohortYear)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateCohortYear) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateDegreeSpecialization table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateDegreeSpecialization : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateDegreeSpecialization, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateDegreeSpecializationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateDegreeSpecialization()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateDegreeSpecialization.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string MajorSpecialization  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [StringLength(75), NoDangerousText]
        public virtual string MinorSpecialization  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("MajorSpecialization", MajorSpecialization);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateDegreeSpecialization)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateDegreeSpecialization) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateDegreeSpecializationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isMinorSpecializationSupported = true;
        bool Entities.Common.TPDM.ICandidateDegreeSpecializationSynchronizationSourceSupport.IsMinorSpecializationSupported
        {
            get { return _isMinorSpecializationSupported; }
            set { _isMinorSpecializationSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateDisability table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateDisability : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateDisability, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateDisability()
        {
            CandidateDisabilityDesignations = new HashSet<CandidateDisabilityDesignation>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateDisability.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDescriptorId 
        {
            get
            {
                if (_disabilityDescriptorId == default(int))
                    _disabilityDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDescriptor", _disabilityDescriptor);

                return _disabilityDescriptorId;
            } 
            set
            {
                _disabilityDescriptorId = value;
                _disabilityDescriptor = null;
            }
        }

        private int _disabilityDescriptorId;
        private string _disabilityDescriptor;

        public virtual string DisabilityDescriptor
        {
            get
            {
                if (_disabilityDescriptor == null)
                    _disabilityDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDescriptor", _disabilityDescriptorId);
                    
                return _disabilityDescriptor;
            }
            set
            {
                _disabilityDescriptor = value;
                _disabilityDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? DisabilityDeterminationSourceTypeDescriptorId 
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptorId == default(int?))
                    _disabilityDeterminationSourceTypeDescriptorId = string.IsNullOrWhiteSpace(_disabilityDeterminationSourceTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptor);

                return _disabilityDeterminationSourceTypeDescriptorId;
            } 
            set
            {
                _disabilityDeterminationSourceTypeDescriptorId = value;
                _disabilityDeterminationSourceTypeDescriptor = null;
            }
        }

        private int? _disabilityDeterminationSourceTypeDescriptorId;
        private string _disabilityDeterminationSourceTypeDescriptor;

        public virtual string DisabilityDeterminationSourceTypeDescriptor
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptor == null)
                    _disabilityDeterminationSourceTypeDescriptor = _disabilityDeterminationSourceTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptorId.Value);
                    
                return _disabilityDeterminationSourceTypeDescriptor;
            }
            set
            {
                _disabilityDeterminationSourceTypeDescriptor = value;
                _disabilityDeterminationSourceTypeDescriptorId = default(int?);
            }
        }
        [StringLength(80), NoDangerousText]
        public virtual string DisabilityDiagnosis  { get; set; }
        public virtual int? OrderOfDisability  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisabilityDesignation> _candidateDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.ICandidateDisabilityDesignation> _candidateDisabilityDesignationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisabilityDesignation> CandidateDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateDisabilityDesignations)
                    if (item.CandidateDisability == null)
                        item.CandidateDisability = this;
                // -------------------------------------------------------------

                return _candidateDisabilityDesignations;
            }
            set
            {
                _candidateDisabilityDesignations = value;
                _candidateDisabilityDesignationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateDisabilityDesignation, Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisabilityDesignation>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateDisabilityDesignation> Entities.Common.TPDM.ICandidateDisability.CandidateDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateDisabilityDesignations)
                    if (item.CandidateDisability == null)
                        item.CandidateDisability = this;
                // -------------------------------------------------------------

                return _candidateDisabilityDesignationsCovariant;
            }
            set
            {
                CandidateDisabilityDesignations = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisabilityDesignation>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateDisabilityDesignation>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDeterminationSourceTypeDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDeterminationSourceTypeDescriptorId", LookupTypeName = "DisabilityDeterminationSourceTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDescriptorId", DisabilityDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateDisability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateDisability) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCandidateDisabilityDesignationsSupported = true;
        bool Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsCandidateDisabilityDesignationsSupported
        {
            get { return _isCandidateDisabilityDesignationsSupported; }
            set { _isCandidateDisabilityDesignationsSupported = value; }
        }

        private bool _isDisabilityDeterminationSourceTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported
        {
            get { return _isDisabilityDeterminationSourceTypeDescriptorSupported; }
            set { _isDisabilityDeterminationSourceTypeDescriptorSupported = value; }
        }

        private bool _isDisabilityDiagnosisSupported = true;
        bool Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported
        {
            get { return _isDisabilityDiagnosisSupported; }
            set { _isDisabilityDiagnosisSupported = value; }
        }

        private bool _isOrderOfDisabilitySupported = true;
        bool Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported
        {
            get { return _isOrderOfDisabilitySupported; }
            set { _isOrderOfDisabilitySupported = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateDisabilityDesignation, bool> _isCandidateDisabilityDesignationIncluded;
        Func<Entities.Common.TPDM.ICandidateDisabilityDesignation, bool> Entities.Common.TPDM.ICandidateDisabilitySynchronizationSourceSupport.IsCandidateDisabilityDesignationIncluded
        {
            get { return _isCandidateDisabilityDesignationIncluded; }
            set { _isCandidateDisabilityDesignationIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateDisabilityDesignation table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateDisabilityDesignation : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateDisabilityDesignation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateDisabilityDesignationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateDisabilityDesignation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual CandidateDisability CandidateDisability { get; set; }

        Entities.Common.TPDM.ICandidateDisability ICandidateDisabilityDesignation.CandidateDisability
        {
            get { return CandidateDisability; }
            set { CandidateDisability = (CandidateDisability) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDesignationDescriptorId 
        {
            get
            {
                if (_disabilityDesignationDescriptorId == default(int))
                    _disabilityDesignationDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDesignationDescriptor", _disabilityDesignationDescriptor);

                return _disabilityDesignationDescriptorId;
            } 
            set
            {
                _disabilityDesignationDescriptorId = value;
                _disabilityDesignationDescriptor = null;
            }
        }

        private int _disabilityDesignationDescriptorId;
        private string _disabilityDesignationDescriptor;

        public virtual string DisabilityDesignationDescriptor
        {
            get
            {
                if (_disabilityDesignationDescriptor == null)
                    _disabilityDesignationDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDesignationDescriptor", _disabilityDesignationDescriptorId);
                    
                return _disabilityDesignationDescriptor;
            }
            set
            {
                _disabilityDesignationDescriptor = value;
                _disabilityDesignationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDesignationDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDesignationDescriptorId", LookupTypeName = "DisabilityDesignationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (CandidateDisability as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDesignationDescriptorId", DisabilityDesignationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateDisabilityDesignation) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            CandidateDisability = (CandidateDisability) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateElectronicMail table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateElectronicMail : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateElectronicMail, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateElectronicMailSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateElectronicMail()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateElectronicMail.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(128), NoDangerousText, NoWhitespace]
        public virtual string ElectronicMailAddress  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ElectronicMailTypeDescriptorId 
        {
            get
            {
                if (_electronicMailTypeDescriptorId == default(int))
                    _electronicMailTypeDescriptorId = DescriptorsCache.GetCache().GetId("ElectronicMailTypeDescriptor", _electronicMailTypeDescriptor);

                return _electronicMailTypeDescriptorId;
            } 
            set
            {
                _electronicMailTypeDescriptorId = value;
                _electronicMailTypeDescriptor = null;
            }
        }

        private int _electronicMailTypeDescriptorId;
        private string _electronicMailTypeDescriptor;

        public virtual string ElectronicMailTypeDescriptor
        {
            get
            {
                if (_electronicMailTypeDescriptor == null)
                    _electronicMailTypeDescriptor = DescriptorsCache.GetCache().GetValue("ElectronicMailTypeDescriptor", _electronicMailTypeDescriptorId);
                    
                return _electronicMailTypeDescriptor;
            }
            set
            {
                _electronicMailTypeDescriptor = value;
                _electronicMailTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual bool? PrimaryEmailAddressIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ElectronicMailTypeDescriptor", new LookupColumnDetails { PropertyName = "ElectronicMailTypeDescriptorId", LookupTypeName = "ElectronicMailTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("ElectronicMailAddress", ElectronicMailAddress);
            keyValues.Add("ElectronicMailTypeDescriptorId", ElectronicMailTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateElectronicMail) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.ICandidateElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isPrimaryEmailAddressIndicatorSupported = true;
        bool Entities.Common.TPDM.ICandidateElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported
        {
            get { return _isPrimaryEmailAddressIndicatorSupported; }
            set { _isPrimaryEmailAddressIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateEPPProgramDegree table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateEPPProgramDegree : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateEPPProgramDegree, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateEPPProgramDegreeSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateEPPProgramDegree()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateEPPProgramDegree.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int))
                    _academicSubjectDescriptorId = DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EPPDegreeTypeDescriptorId 
        {
            get
            {
                if (_eppDegreeTypeDescriptorId == default(int))
                    _eppDegreeTypeDescriptorId = DescriptorsCache.GetCache().GetId("EPPDegreeTypeDescriptor", _eppDegreeTypeDescriptor);

                return _eppDegreeTypeDescriptorId;
            } 
            set
            {
                _eppDegreeTypeDescriptorId = value;
                _eppDegreeTypeDescriptor = null;
            }
        }

        private int _eppDegreeTypeDescriptorId;
        private string _eppDegreeTypeDescriptor;

        public virtual string EPPDegreeTypeDescriptor
        {
            get
            {
                if (_eppDegreeTypeDescriptor == null)
                    _eppDegreeTypeDescriptor = DescriptorsCache.GetCache().GetValue("EPPDegreeTypeDescriptor", _eppDegreeTypeDescriptorId);
                    
                return _eppDegreeTypeDescriptor;
            }
            set
            {
                _eppDegreeTypeDescriptor = value;
                _eppDegreeTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "EPPDegreeTypeDescriptor", new LookupColumnDetails { PropertyName = "EPPDegreeTypeDescriptorId", LookupTypeName = "EPPDegreeTypeDescriptor"} },
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicSubjectDescriptorId", AcademicSubjectDescriptorId);
            keyValues.Add("EPPDegreeTypeDescriptorId", EPPDegreeTypeDescriptorId);
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateEPPProgramDegree)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateEPPProgramDegree) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateIdentificationCode table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateIdentificationCode : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateIdentificationCode, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateIdentificationCodeSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateIdentificationCode()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateIdentificationCode.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AssigningOrganizationIdentificationCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string IdentificationCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int StudentIdentificationSystemDescriptorId 
        {
            get
            {
                if (_studentIdentificationSystemDescriptorId == default(int))
                    _studentIdentificationSystemDescriptorId = DescriptorsCache.GetCache().GetId("StudentIdentificationSystemDescriptor", _studentIdentificationSystemDescriptor);

                return _studentIdentificationSystemDescriptorId;
            } 
            set
            {
                _studentIdentificationSystemDescriptorId = value;
                _studentIdentificationSystemDescriptor = null;
            }
        }

        private int _studentIdentificationSystemDescriptorId;
        private string _studentIdentificationSystemDescriptor;

        public virtual string StudentIdentificationSystemDescriptor
        {
            get
            {
                if (_studentIdentificationSystemDescriptor == null)
                    _studentIdentificationSystemDescriptor = DescriptorsCache.GetCache().GetValue("StudentIdentificationSystemDescriptor", _studentIdentificationSystemDescriptorId);
                    
                return _studentIdentificationSystemDescriptor;
            }
            set
            {
                _studentIdentificationSystemDescriptor = value;
                _studentIdentificationSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StudentIdentificationSystemDescriptor", new LookupColumnDetails { PropertyName = "StudentIdentificationSystemDescriptorId", LookupTypeName = "StudentIdentificationSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AssigningOrganizationIdentificationCode", AssigningOrganizationIdentificationCode);
            keyValues.Add("IdentificationCode", IdentificationCode);
            keyValues.Add("StudentIdentificationSystemDescriptorId", StudentIdentificationSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateIdentificationCode) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateIdentificationDocument table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateIdentificationDocument, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateIdentificationDocument.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.ICandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateIndicator table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateIndicator : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateIndicator, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateIndicator()
        {
            CandidateIndicatorPeriods = new HashSet<CandidateIndicatorPeriod>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateIndicator.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(200), NoDangerousText, NoWhitespace]
        public virtual string IndicatorName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(60), NoDangerousText]
        public virtual string DesignatedBy  { get; set; }
        [RequiredWithNonDefault, StringLength(60), NoDangerousText]
        public virtual string Indicator  { get; set; }
        [StringLength(200), NoDangerousText]
        public virtual string IndicatorGroup  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicatorPeriod> _candidateIndicatorPeriods;
        private ICollection<Entities.Common.TPDM.ICandidateIndicatorPeriod> _candidateIndicatorPeriodsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicatorPeriod> CandidateIndicatorPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateIndicatorPeriods)
                    if (item.CandidateIndicator == null)
                        item.CandidateIndicator = this;
                // -------------------------------------------------------------

                return _candidateIndicatorPeriods;
            }
            set
            {
                _candidateIndicatorPeriods = value;
                _candidateIndicatorPeriodsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateIndicatorPeriod, Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicatorPeriod>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateIndicatorPeriod> Entities.Common.TPDM.ICandidateIndicator.CandidateIndicatorPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateIndicatorPeriods)
                    if (item.CandidateIndicator == null)
                        item.CandidateIndicator = this;
                // -------------------------------------------------------------

                return _candidateIndicatorPeriodsCovariant;
            }
            set
            {
                CandidateIndicatorPeriods = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicatorPeriod>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateIndicatorPeriod>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IndicatorName", IndicatorName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateIndicator)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateIndicator) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCandidateIndicatorPeriodsSupported = true;
        bool Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsCandidateIndicatorPeriodsSupported
        {
            get { return _isCandidateIndicatorPeriodsSupported; }
            set { _isCandidateIndicatorPeriodsSupported = value; }
        }

        private bool _isDesignatedBySupported = true;
        bool Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsDesignatedBySupported
        {
            get { return _isDesignatedBySupported; }
            set { _isDesignatedBySupported = value; }
        }

        private bool _isIndicatorSupported = true;
        bool Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsIndicatorSupported
        {
            get { return _isIndicatorSupported; }
            set { _isIndicatorSupported = value; }
        }

        private bool _isIndicatorGroupSupported = true;
        bool Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsIndicatorGroupSupported
        {
            get { return _isIndicatorGroupSupported; }
            set { _isIndicatorGroupSupported = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateIndicatorPeriod, bool> _isCandidateIndicatorPeriodIncluded;
        Func<Entities.Common.TPDM.ICandidateIndicatorPeriod, bool> Entities.Common.TPDM.ICandidateIndicatorSynchronizationSourceSupport.IsCandidateIndicatorPeriodIncluded
        {
            get { return _isCandidateIndicatorPeriodIncluded; }
            set { _isCandidateIndicatorPeriodIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateIndicatorPeriod table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateIndicatorPeriod : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateIndicatorPeriod, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateIndicatorPeriodSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateIndicatorPeriod()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual CandidateIndicator CandidateIndicator { get; set; }

        Entities.Common.TPDM.ICandidateIndicator ICandidateIndicatorPeriod.CandidateIndicator
        {
            get { return CandidateIndicator; }
            set { CandidateIndicator = (CandidateIndicator) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (CandidateIndicator as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateIndicatorPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateIndicatorPeriod) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            CandidateIndicator = (CandidateIndicator) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateIndicatorPeriodSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateInternationalAddress table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateInternationalAddress : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateInternationalAddress, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateInternationalAddress()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateInternationalAddress.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AddressTypeDescriptorId 
        {
            get
            {
                if (_addressTypeDescriptorId == default(int))
                    _addressTypeDescriptorId = DescriptorsCache.GetCache().GetId("AddressTypeDescriptor", _addressTypeDescriptor);

                return _addressTypeDescriptorId;
            } 
            set
            {
                _addressTypeDescriptorId = value;
                _addressTypeDescriptor = null;
            }
        }

        private int _addressTypeDescriptorId;
        private string _addressTypeDescriptor;

        public virtual string AddressTypeDescriptor
        {
            get
            {
                if (_addressTypeDescriptor == null)
                    _addressTypeDescriptor = DescriptorsCache.GetCache().GetValue("AddressTypeDescriptor", _addressTypeDescriptorId);
                    
                return _addressTypeDescriptor;
            }
            set
            {
                _addressTypeDescriptor = value;
                _addressTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(150), NoDangerousText]
        public virtual string AddressLine1  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine2  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine3  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine4  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [RequiredWithNonDefault]
        public virtual int CountryDescriptorId 
        {
            get
            {
                if (_countryDescriptorId == default(int))
                    _countryDescriptorId = DescriptorsCache.GetCache().GetId("CountryDescriptor", _countryDescriptor);

                return _countryDescriptorId;
            } 
            set
            {
                _countryDescriptorId = value;
                _countryDescriptor = null;
            }
        }

        private int _countryDescriptorId;
        private string _countryDescriptor;

        public virtual string CountryDescriptor
        {
            get
            {
                if (_countryDescriptor == null)
                    _countryDescriptor = DescriptorsCache.GetCache().GetValue("CountryDescriptor", _countryDescriptorId);
                    
                return _countryDescriptor;
            }
            set
            {
                _countryDescriptor = value;
                _countryDescriptorId = default(int);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [StringLength(20), NoDangerousText]
        public virtual string Latitude  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string Longitude  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "CountryDescriptor", new LookupColumnDetails { PropertyName = "CountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AddressTypeDescriptorId", AddressTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateInternationalAddress) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAddressLine1Supported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported
        {
            get { return _isAddressLine1Supported; }
            set { _isAddressLine1Supported = value; }
        }

        private bool _isAddressLine2Supported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported
        {
            get { return _isAddressLine2Supported; }
            set { _isAddressLine2Supported = value; }
        }

        private bool _isAddressLine3Supported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported
        {
            get { return _isAddressLine3Supported; }
            set { _isAddressLine3Supported = value; }
        }

        private bool _isAddressLine4Supported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported
        {
            get { return _isAddressLine4Supported; }
            set { _isAddressLine4Supported = value; }
        }

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported
        {
            get { return _isCountryDescriptorSupported; }
            set { _isCountryDescriptorSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isLatitudeSupported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported
        {
            get { return _isLatitudeSupported; }
            set { _isLatitudeSupported = value; }
        }

        private bool _isLongitudeSupported = true;
        bool Entities.Common.TPDM.ICandidateInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported
        {
            get { return _isLongitudeSupported; }
            set { _isLongitudeSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateLanguage table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateLanguage : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateLanguage, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateLanguageSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateLanguage()
        {
            CandidateLanguageUses = new HashSet<CandidateLanguageUse>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateLanguage.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageDescriptorId 
        {
            get
            {
                if (_languageDescriptorId == default(int))
                    _languageDescriptorId = DescriptorsCache.GetCache().GetId("LanguageDescriptor", _languageDescriptor);

                return _languageDescriptorId;
            } 
            set
            {
                _languageDescriptorId = value;
                _languageDescriptor = null;
            }
        }

        private int _languageDescriptorId;
        private string _languageDescriptor;

        public virtual string LanguageDescriptor
        {
            get
            {
                if (_languageDescriptor == null)
                    _languageDescriptor = DescriptorsCache.GetCache().GetValue("LanguageDescriptor", _languageDescriptorId);
                    
                return _languageDescriptor;
            }
            set
            {
                _languageDescriptor = value;
                _languageDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguageUse> _candidateLanguageUses;
        private ICollection<Entities.Common.TPDM.ICandidateLanguageUse> _candidateLanguageUsesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguageUse> CandidateLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateLanguageUses)
                    if (item.CandidateLanguage == null)
                        item.CandidateLanguage = this;
                // -------------------------------------------------------------

                return _candidateLanguageUses;
            }
            set
            {
                _candidateLanguageUses = value;
                _candidateLanguageUsesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICandidateLanguageUse, Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguageUse>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICandidateLanguageUse> Entities.Common.TPDM.ICandidateLanguage.CandidateLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateLanguageUses)
                    if (item.CandidateLanguage == null)
                        item.CandidateLanguage = this;
                // -------------------------------------------------------------

                return _candidateLanguageUsesCovariant;
            }
            set
            {
                CandidateLanguageUses = new HashSet<Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguageUse>(value.Cast<Entities.NHibernate.CandidateAggregate.TPDM.CandidateLanguageUse>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageDescriptorId", LanguageDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateLanguage) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCandidateLanguageUsesSupported = true;
        bool Entities.Common.TPDM.ICandidateLanguageSynchronizationSourceSupport.IsCandidateLanguageUsesSupported
        {
            get { return _isCandidateLanguageUsesSupported; }
            set { _isCandidateLanguageUsesSupported = value; }
        }

        private Func<Entities.Common.TPDM.ICandidateLanguageUse, bool> _isCandidateLanguageUseIncluded;
        Func<Entities.Common.TPDM.ICandidateLanguageUse, bool> Entities.Common.TPDM.ICandidateLanguageSynchronizationSourceSupport.IsCandidateLanguageUseIncluded
        {
            get { return _isCandidateLanguageUseIncluded; }
            set { _isCandidateLanguageUseIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateLanguageUse table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateLanguageUse : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateLanguageUse, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateLanguageUseSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateLanguageUse()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual CandidateLanguage CandidateLanguage { get; set; }

        Entities.Common.TPDM.ICandidateLanguage ICandidateLanguageUse.CandidateLanguage
        {
            get { return CandidateLanguage; }
            set { CandidateLanguage = (CandidateLanguage) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageUseDescriptorId 
        {
            get
            {
                if (_languageUseDescriptorId == default(int))
                    _languageUseDescriptorId = DescriptorsCache.GetCache().GetId("LanguageUseDescriptor", _languageUseDescriptor);

                return _languageUseDescriptorId;
            } 
            set
            {
                _languageUseDescriptorId = value;
                _languageUseDescriptor = null;
            }
        }

        private int _languageUseDescriptorId;
        private string _languageUseDescriptor;

        public virtual string LanguageUseDescriptor
        {
            get
            {
                if (_languageUseDescriptor == null)
                    _languageUseDescriptor = DescriptorsCache.GetCache().GetValue("LanguageUseDescriptor", _languageUseDescriptorId);
                    
                return _languageUseDescriptor;
            }
            set
            {
                _languageUseDescriptor = value;
                _languageUseDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
                { "LanguageUseDescriptor", new LookupColumnDetails { PropertyName = "LanguageUseDescriptorId", LookupTypeName = "LanguageUseDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (CandidateLanguage as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageUseDescriptorId", LanguageUseDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateLanguageUse) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            CandidateLanguage = (CandidateLanguage) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateOtherName table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateOtherName : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateOtherName, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateOtherName()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateOtherName.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int OtherNameTypeDescriptorId 
        {
            get
            {
                if (_otherNameTypeDescriptorId == default(int))
                    _otherNameTypeDescriptorId = DescriptorsCache.GetCache().GetId("OtherNameTypeDescriptor", _otherNameTypeDescriptor);

                return _otherNameTypeDescriptorId;
            } 
            set
            {
                _otherNameTypeDescriptorId = value;
                _otherNameTypeDescriptor = null;
            }
        }

        private int _otherNameTypeDescriptorId;
        private string _otherNameTypeDescriptor;

        public virtual string OtherNameTypeDescriptor
        {
            get
            {
                if (_otherNameTypeDescriptor == null)
                    _otherNameTypeDescriptor = DescriptorsCache.GetCache().GetValue("OtherNameTypeDescriptor", _otherNameTypeDescriptorId);
                    
                return _otherNameTypeDescriptor;
            }
            set
            {
                _otherNameTypeDescriptor = value;
                _otherNameTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string FirstName  { get; set; }
        [StringLength(10), NoDangerousText]
        public virtual string GenerationCodeSuffix  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string LastSurname  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MiddleName  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string PersonalTitlePrefix  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "OtherNameTypeDescriptor", new LookupColumnDetails { PropertyName = "OtherNameTypeDescriptorId", LookupTypeName = "OtherNameTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("OtherNameTypeDescriptorId", OtherNameTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateOtherName)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateOtherName) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFirstNameSupported = true;
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsFirstNameSupported
        {
            get { return _isFirstNameSupported; }
            set { _isFirstNameSupported = value; }
        }

        private bool _isGenerationCodeSuffixSupported = true;
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported
        {
            get { return _isGenerationCodeSuffixSupported; }
            set { _isGenerationCodeSuffixSupported = value; }
        }

        private bool _isLastSurnameSupported = true;
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsLastSurnameSupported
        {
            get { return _isLastSurnameSupported; }
            set { _isLastSurnameSupported = value; }
        }

        private bool _isMiddleNameSupported = true;
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsMiddleNameSupported
        {
            get { return _isMiddleNameSupported; }
            set { _isMiddleNameSupported = value; }
        }

        private bool _isPersonalTitlePrefixSupported = true;
        bool Entities.Common.TPDM.ICandidateOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported
        {
            get { return _isPersonalTitlePrefixSupported; }
            set { _isPersonalTitlePrefixSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidatePersonalIdentificationDocument table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidatePersonalIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidatePersonalIdentificationDocument, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidatePersonalIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidatePersonalIdentificationDocument.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidatePersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidatePersonalIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateRace table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateRace : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateRace, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateRaceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateRace()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateRace.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int RaceDescriptorId 
        {
            get
            {
                if (_raceDescriptorId == default(int))
                    _raceDescriptorId = DescriptorsCache.GetCache().GetId("RaceDescriptor", _raceDescriptor);

                return _raceDescriptorId;
            } 
            set
            {
                _raceDescriptorId = value;
                _raceDescriptor = null;
            }
        }

        private int _raceDescriptorId;
        private string _raceDescriptor;

        public virtual string RaceDescriptor
        {
            get
            {
                if (_raceDescriptor == null)
                    _raceDescriptor = DescriptorsCache.GetCache().GetValue("RaceDescriptor", _raceDescriptorId);
                    
                return _raceDescriptor;
            }
            set
            {
                _raceDescriptor = value;
                _raceDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RaceDescriptor", new LookupColumnDetails { PropertyName = "RaceDescriptorId", LookupTypeName = "RaceDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RaceDescriptorId", RaceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateRace) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateTelephone table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateTelephone : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateTelephone, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateTelephoneSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateTelephone()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateTelephone.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(24), NoDangerousText, NoWhitespace]
        public virtual string TelephoneNumber  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TelephoneNumberTypeDescriptorId 
        {
            get
            {
                if (_telephoneNumberTypeDescriptorId == default(int))
                    _telephoneNumberTypeDescriptorId = DescriptorsCache.GetCache().GetId("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptor);

                return _telephoneNumberTypeDescriptorId;
            } 
            set
            {
                _telephoneNumberTypeDescriptorId = value;
                _telephoneNumberTypeDescriptor = null;
            }
        }

        private int _telephoneNumberTypeDescriptorId;
        private string _telephoneNumberTypeDescriptor;

        public virtual string TelephoneNumberTypeDescriptor
        {
            get
            {
                if (_telephoneNumberTypeDescriptor == null)
                    _telephoneNumberTypeDescriptor = DescriptorsCache.GetCache().GetValue("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptorId);
                    
                return _telephoneNumberTypeDescriptor;
            }
            set
            {
                _telephoneNumberTypeDescriptor = value;
                _telephoneNumberTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual int? OrderOfPriority  { get; set; }
        public virtual bool? TextMessageCapabilityIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TelephoneNumberTypeDescriptor", new LookupColumnDetails { PropertyName = "TelephoneNumberTypeDescriptorId", LookupTypeName = "TelephoneNumberTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TelephoneNumber", TelephoneNumber);
            keyValues.Add("TelephoneNumberTypeDescriptorId", TelephoneNumberTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateTelephone) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.ICandidateTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isOrderOfPrioritySupported = true;
        bool Entities.Common.TPDM.ICandidateTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported
        {
            get { return _isOrderOfPrioritySupported; }
            set { _isOrderOfPrioritySupported = value; }
        }

        private bool _isTextMessageCapabilityIndicatorSupported = true;
        bool Entities.Common.TPDM.ICandidateTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported
        {
            get { return _isTextMessageCapabilityIndicatorSupported; }
            set { _isTextMessageCapabilityIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateVisa table of the Candidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateVisa : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateVisa, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateVisaSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateVisa()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Candidate Candidate { get; set; }

        Entities.Common.TPDM.ICandidate ICandidateVisa.Candidate
        {
            get { return Candidate; }
            set { Candidate = (Candidate) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int VisaDescriptorId 
        {
            get
            {
                if (_visaDescriptorId == default(int))
                    _visaDescriptorId = DescriptorsCache.GetCache().GetId("VisaDescriptor", _visaDescriptor);

                return _visaDescriptorId;
            } 
            set
            {
                _visaDescriptorId = value;
                _visaDescriptor = null;
            }
        }

        private int _visaDescriptorId;
        private string _visaDescriptor;

        public virtual string VisaDescriptor
        {
            get
            {
                if (_visaDescriptor == null)
                    _visaDescriptor = DescriptorsCache.GetCache().GetValue("VisaDescriptor", _visaDescriptorId);
                    
                return _visaDescriptor;
            }
            set
            {
                _visaDescriptor = value;
                _visaDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "VisaDescriptor", new LookupColumnDetails { PropertyName = "VisaDescriptorId", LookupTypeName = "VisaDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Candidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("VisaDescriptorId", VisaDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateVisa)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateVisa) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Candidate = (Candidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: CandidateCharacteristicDescriptor

namespace EdFi.Ods.Entities.NHibernate.CandidateCharacteristicDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateCharacteristicDescriptor table of the CandidateCharacteristicDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateCharacteristicDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICandidateCharacteristicDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CandidateCharacteristicDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CandidateCharacteristicDescriptorId", CandidateCharacteristicDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateCharacteristicDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateCharacteristicDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICandidateCharacteristicDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CandidateEducatorPreparationProgramAssociation

namespace EdFi.Ods.Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CandidateEducatorPreparationProgramAssociation"/> entity.
    /// </summary>
    public class CandidateEducatorPreparationProgramAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime BeginDate { get; set; }
        public virtual string CandidateIdentifier { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProgramName { get; set; }
        public virtual int ProgramTypeDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("CandidateIdentifier", CandidateIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociation table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateEducatorPreparationProgramAssociation()
        {
           CandidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList = new HashSet<CandidateEducatorPreparationProgramAssociationCandidateIndicator>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string CandidateIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string ProgramName  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramTypeDescriptorId 
        {
            get
            {
                if (_programTypeDescriptorId == default(int))
                    _programTypeDescriptorId = DescriptorsCache.GetCache().GetId("ProgramTypeDescriptor", _programTypeDescriptor);

                return _programTypeDescriptorId;
            } 
            set
            {
                _programTypeDescriptorId = value;
                _programTypeDescriptor = null;
            }
        }

        private int _programTypeDescriptorId;
        private string _programTypeDescriptor;

        public virtual string ProgramTypeDescriptor
        {
            get
            {
                if (_programTypeDescriptor == null)
                    _programTypeDescriptor = DescriptorsCache.GetCache().GetValue("ProgramTypeDescriptor", _programTypeDescriptorId);
                    
                return _programTypeDescriptor;
            }
            set
            {
                _programTypeDescriptor = value;
                _programTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual int? EPPProgramPathwayDescriptorId 
        {
            get
            {
                if (_eppProgramPathwayDescriptorId == default(int?))
                    _eppProgramPathwayDescriptorId = string.IsNullOrWhiteSpace(_eppProgramPathwayDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EPPProgramPathwayDescriptor", _eppProgramPathwayDescriptor);

                return _eppProgramPathwayDescriptorId;
            } 
            set
            {
                _eppProgramPathwayDescriptorId = value;
                _eppProgramPathwayDescriptor = null;
            }
        }

        private int? _eppProgramPathwayDescriptorId;
        private string _eppProgramPathwayDescriptor;

        public virtual string EPPProgramPathwayDescriptor
        {
            get
            {
                if (_eppProgramPathwayDescriptor == null)
                    _eppProgramPathwayDescriptor = _eppProgramPathwayDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EPPProgramPathwayDescriptor", _eppProgramPathwayDescriptorId.Value);
                    
                return _eppProgramPathwayDescriptor;
            }
            set
            {
                _eppProgramPathwayDescriptor = value;
                _eppProgramPathwayDescriptorId = default(int?);
            }
        }
        [StringLength(75), NoDangerousText]
        public virtual string MajorSpecialization  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MinorSpecialization  { get; set; }
        public virtual int? ReasonExitedDescriptorId 
        {
            get
            {
                if (_reasonExitedDescriptorId == default(int?))
                    _reasonExitedDescriptorId = string.IsNullOrWhiteSpace(_reasonExitedDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ReasonExitedDescriptor", _reasonExitedDescriptor);

                return _reasonExitedDescriptorId;
            } 
            set
            {
                _reasonExitedDescriptorId = value;
                _reasonExitedDescriptor = null;
            }
        }

        private int? _reasonExitedDescriptorId;
        private string _reasonExitedDescriptor;

        public virtual string ReasonExitedDescriptor
        {
            get
            {
                if (_reasonExitedDescriptor == null)
                    _reasonExitedDescriptor = _reasonExitedDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ReasonExitedDescriptor", _reasonExitedDescriptorId.Value);
                    
                return _reasonExitedDescriptor;
            }
            set
            {
                _reasonExitedDescriptor = value;
                _reasonExitedDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicator CandidateEducatorPreparationProgramAssociationCandidateIndicator
        {
            get
            {
                // Return the item in the list, if one exists
                if (CandidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList.Any())
                    return CandidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (CandidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList.Any())
                    CandidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.CandidateEducatorPreparationProgramAssociation = this;

                    CandidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateEducatorPreparationProgramAssociationCandidateIndicator
        {
            get { return CandidateEducatorPreparationProgramAssociationCandidateIndicator; }
            set { CandidateEducatorPreparationProgramAssociationCandidateIndicator = (Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicator) value; }
        }

        private ICollection<Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicator> _candidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList;

        public virtual ICollection<Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicator> CandidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList)
                    if (item.CandidateEducatorPreparationProgramAssociation == null)
                        item.CandidateEducatorPreparationProgramAssociation = this;
                // -------------------------------------------------------------

                return _candidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList;
            }
            set
            {
                _candidateEducatorPreparationProgramAssociationCandidateIndicatorPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CandidateAggregate.TPDM.CandidateReferenceData CandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Candidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateDiscriminator
        {
            get { return CandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Candidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.CandidateResourceId
        {
            get { return CandidateReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramReferenceData EducatorPreparationProgramReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducatorPreparationProgram discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.EducatorPreparationProgramDiscriminator
        {
            get { return EducatorPreparationProgramReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducatorPreparationProgram resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation.EducatorPreparationProgramResourceId
        {
            get { return EducatorPreparationProgramReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EPPProgramPathwayDescriptor", new LookupColumnDetails { PropertyName = "EPPProgramPathwayDescriptorId", LookupTypeName = "EPPProgramPathwayDescriptor"} },
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
                { "ReasonExitedDescriptor", new LookupColumnDetails { PropertyName = "ReasonExitedDescriptorId", LookupTypeName = "ReasonExitedDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("CandidateIdentifier", CandidateIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported
        {
            get { return _isCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported; }
            set { _isCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isEPPProgramPathwayDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsEPPProgramPathwayDescriptorSupported
        {
            get { return _isEPPProgramPathwayDescriptorSupported; }
            set { _isEPPProgramPathwayDescriptorSupported = value; }
        }

        private bool _isMajorSpecializationSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsMajorSpecializationSupported
        {
            get { return _isMajorSpecializationSupported; }
            set { _isMajorSpecializationSupported = value; }
        }

        private bool _isMinorSpecializationSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsMinorSpecializationSupported
        {
            get { return _isMinorSpecializationSupported; }
            set { _isMinorSpecializationSupported = value; }
        }

        private bool _isReasonExitedDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsReasonExitedDescriptorSupported
        {
            get { return _isReasonExitedDescriptorSupported; }
            set { _isReasonExitedDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociationCandidateIndicator table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationCandidateIndicator : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateEducatorPreparationProgramAssociationCandidateIndicator()
        {
           CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList = new HashSet<CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual CandidateEducatorPreparationProgramAssociation CandidateEducatorPreparationProgramAssociation { get; set; }

        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociation ICandidateEducatorPreparationProgramAssociationCandidateIndicator.CandidateEducatorPreparationProgramAssociation
        {
            get { return CandidateEducatorPreparationProgramAssociation; }
            set { CandidateEducatorPreparationProgramAssociation = (CandidateEducatorPreparationProgramAssociation) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(60), NoDangerousText]
        public virtual string DesignatedBy  { get; set; }
        [RequiredWithNonDefault, StringLength(60), NoDangerousText]
        public virtual string Indicator  { get; set; }
        [StringLength(200), NoDangerousText]
        public virtual string IndicatorGroup  { get; set; }
        [RequiredWithNonDefault, StringLength(200), NoDangerousText]
        public virtual string IndicatorName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod
        {
            get
            {
                // Return the item in the list, if one exists
                if (CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList.Any())
                    return CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList.Any())
                    CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.CandidateEducatorPreparationProgramAssociationCandidateIndicator = this;

                    CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod
        {
            get { return CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod; }
            set { CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod = (Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod) value; }
        }

        private ICollection<Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod> _candidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList;

        public virtual ICollection<Entities.NHibernate.CandidateEducatorPreparationProgramAssociationAggregate.TPDM.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod> CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _candidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList)
                    if (item.CandidateEducatorPreparationProgramAssociationCandidateIndicator == null)
                        item.CandidateEducatorPreparationProgramAssociationCandidateIndicator = this;
                // -------------------------------------------------------------

                return _candidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList;
            }
            set
            {
                _candidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (CandidateEducatorPreparationProgramAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            CandidateEducatorPreparationProgramAssociation = (CandidateEducatorPreparationProgramAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported
        {
            get { return _isCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported; }
            set { _isCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported = value; }
        }

        private bool _isDesignatedBySupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsDesignatedBySupported
        {
            get { return _isDesignatedBySupported; }
            set { _isDesignatedBySupported = value; }
        }

        private bool _isIndicatorSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsIndicatorSupported
        {
            get { return _isIndicatorSupported; }
            set { _isIndicatorSupported = value; }
        }

        private bool _isIndicatorGroupSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsIndicatorGroupSupported
        {
            get { return _isIndicatorGroupSupported; }
            set { _isIndicatorGroupSupported = value; }
        }

        private bool _isIndicatorNameSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport.IsIndicatorNameSupported
        {
            get { return _isIndicatorNameSupported; }
            set { _isIndicatorNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod table of the CandidateEducatorPreparationProgramAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual CandidateEducatorPreparationProgramAssociationCandidateIndicator CandidateEducatorPreparationProgramAssociationCandidateIndicator { get; set; }

        Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicator ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod.CandidateEducatorPreparationProgramAssociationCandidateIndicator
        {
            get { return CandidateEducatorPreparationProgramAssociationCandidateIndicator; }
            set { CandidateEducatorPreparationProgramAssociationCandidateIndicator = (CandidateEducatorPreparationProgramAssociationCandidateIndicator) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (CandidateEducatorPreparationProgramAssociationCandidateIndicator as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            CandidateEducatorPreparationProgramAssociationCandidateIndicator = (CandidateEducatorPreparationProgramAssociationCandidateIndicator) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CandidateRelationshipToStaffAssociation

namespace EdFi.Ods.Entities.NHibernate.CandidateRelationshipToStaffAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CandidateRelationshipToStaffAssociation"/> entity.
    /// </summary>
    public class CandidateRelationshipToStaffAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string CandidateIdentifier { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CandidateIdentifier", CandidateIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CandidateRelationshipToStaffAssociation table of the CandidateRelationshipToStaffAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CandidateRelationshipToStaffAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CandidateRelationshipToStaffAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string CandidateIdentifier  { get; set; }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual int? StaffToCandidateRelationshipDescriptorId 
        {
            get
            {
                if (_staffToCandidateRelationshipDescriptorId == default(int?))
                    _staffToCandidateRelationshipDescriptorId = string.IsNullOrWhiteSpace(_staffToCandidateRelationshipDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("StaffToCandidateRelationshipDescriptor", _staffToCandidateRelationshipDescriptor);

                return _staffToCandidateRelationshipDescriptorId;
            } 
            set
            {
                _staffToCandidateRelationshipDescriptorId = value;
                _staffToCandidateRelationshipDescriptor = null;
            }
        }

        private int? _staffToCandidateRelationshipDescriptorId;
        private string _staffToCandidateRelationshipDescriptor;

        public virtual string StaffToCandidateRelationshipDescriptor
        {
            get
            {
                if (_staffToCandidateRelationshipDescriptor == null)
                    _staffToCandidateRelationshipDescriptor = _staffToCandidateRelationshipDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("StaffToCandidateRelationshipDescriptor", _staffToCandidateRelationshipDescriptorId.Value);
                    
                return _staffToCandidateRelationshipDescriptor;
            }
            set
            {
                _staffToCandidateRelationshipDescriptor = value;
                _staffToCandidateRelationshipDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CandidateAggregate.TPDM.CandidateReferenceData CandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Candidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.CandidateDiscriminator
        {
            get { return CandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Candidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.CandidateResourceId
        {
            get { return CandidateReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StaffToCandidateRelationshipDescriptor", new LookupColumnDetails { PropertyName = "StaffToCandidateRelationshipDescriptorId", LookupTypeName = "StaffToCandidateRelationshipDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CandidateIdentifier", CandidateIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICandidateRelationshipToStaffAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isStaffToCandidateRelationshipDescriptorSupported = true;
        bool Entities.Common.TPDM.ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport.IsStaffToCandidateRelationshipDescriptorSupported
        {
            get { return _isStaffToCandidateRelationshipDescriptorSupported; }
            set { _isStaffToCandidateRelationshipDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Certification

namespace EdFi.Ods.Entities.NHibernate.CertificationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Certification"/> entity.
    /// </summary>
    public class CertificationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string CertificationIdentifier { get; set; }
        public virtual string Namespace { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationIdentifier", CertificationIdentifier);
            keyValues.Add("Namespace", Namespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Certification table of the Certification aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Certification : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICertification, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Certification()
        {
            CertificationCertificationExams = new HashSet<CertificationCertificationExam>();
            CertificationGradeLevels = new HashSet<CertificationGradeLevel>();
            CertificationRoutes = new HashSet<CertificationRoute>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CertificationIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? CertificationFieldDescriptorId 
        {
            get
            {
                if (_certificationFieldDescriptorId == default(int?))
                    _certificationFieldDescriptorId = string.IsNullOrWhiteSpace(_certificationFieldDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationFieldDescriptor", _certificationFieldDescriptor);

                return _certificationFieldDescriptorId;
            } 
            set
            {
                _certificationFieldDescriptorId = value;
                _certificationFieldDescriptor = null;
            }
        }

        private int? _certificationFieldDescriptorId;
        private string _certificationFieldDescriptor;

        public virtual string CertificationFieldDescriptor
        {
            get
            {
                if (_certificationFieldDescriptor == null)
                    _certificationFieldDescriptor = _certificationFieldDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationFieldDescriptor", _certificationFieldDescriptorId.Value);
                    
                return _certificationFieldDescriptor;
            }
            set
            {
                _certificationFieldDescriptor = value;
                _certificationFieldDescriptorId = default(int?);
            }
        }
        public virtual int? CertificationLevelDescriptorId 
        {
            get
            {
                if (_certificationLevelDescriptorId == default(int?))
                    _certificationLevelDescriptorId = string.IsNullOrWhiteSpace(_certificationLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationLevelDescriptor", _certificationLevelDescriptor);

                return _certificationLevelDescriptorId;
            } 
            set
            {
                _certificationLevelDescriptorId = value;
                _certificationLevelDescriptor = null;
            }
        }

        private int? _certificationLevelDescriptorId;
        private string _certificationLevelDescriptor;

        public virtual string CertificationLevelDescriptor
        {
            get
            {
                if (_certificationLevelDescriptor == null)
                    _certificationLevelDescriptor = _certificationLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationLevelDescriptor", _certificationLevelDescriptorId.Value);
                    
                return _certificationLevelDescriptor;
            }
            set
            {
                _certificationLevelDescriptor = value;
                _certificationLevelDescriptorId = default(int?);
            }
        }
        public virtual int? CertificationStandardDescriptorId 
        {
            get
            {
                if (_certificationStandardDescriptorId == default(int?))
                    _certificationStandardDescriptorId = string.IsNullOrWhiteSpace(_certificationStandardDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationStandardDescriptor", _certificationStandardDescriptor);

                return _certificationStandardDescriptorId;
            } 
            set
            {
                _certificationStandardDescriptorId = value;
                _certificationStandardDescriptor = null;
            }
        }

        private int? _certificationStandardDescriptorId;
        private string _certificationStandardDescriptor;

        public virtual string CertificationStandardDescriptor
        {
            get
            {
                if (_certificationStandardDescriptor == null)
                    _certificationStandardDescriptor = _certificationStandardDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationStandardDescriptor", _certificationStandardDescriptorId.Value);
                    
                return _certificationStandardDescriptor;
            }
            set
            {
                _certificationStandardDescriptor = value;
                _certificationStandardDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, StringLength(64), NoDangerousText]
        public virtual string CertificationTitle  { get; set; }
        public virtual int? EducationOrganizationId  { get; set; }
        public virtual int? EducatorRoleDescriptorId 
        {
            get
            {
                if (_educatorRoleDescriptorId == default(int?))
                    _educatorRoleDescriptorId = string.IsNullOrWhiteSpace(_educatorRoleDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EducatorRoleDescriptor", _educatorRoleDescriptor);

                return _educatorRoleDescriptorId;
            } 
            set
            {
                _educatorRoleDescriptorId = value;
                _educatorRoleDescriptor = null;
            }
        }

        private int? _educatorRoleDescriptorId;
        private string _educatorRoleDescriptor;

        public virtual string EducatorRoleDescriptor
        {
            get
            {
                if (_educatorRoleDescriptor == null)
                    _educatorRoleDescriptor = _educatorRoleDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EducatorRoleDescriptor", _educatorRoleDescriptorId.Value);
                    
                return _educatorRoleDescriptor;
            }
            set
            {
                _educatorRoleDescriptor = value;
                _educatorRoleDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? EffectiveDate 
        {
            get { return _effectiveDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _effectiveDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _effectiveDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _effectiveDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual int? InstructionalSettingDescriptorId 
        {
            get
            {
                if (_instructionalSettingDescriptorId == default(int?))
                    _instructionalSettingDescriptorId = string.IsNullOrWhiteSpace(_instructionalSettingDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("InstructionalSettingDescriptor", _instructionalSettingDescriptor);

                return _instructionalSettingDescriptorId;
            } 
            set
            {
                _instructionalSettingDescriptorId = value;
                _instructionalSettingDescriptor = null;
            }
        }

        private int? _instructionalSettingDescriptorId;
        private string _instructionalSettingDescriptor;

        public virtual string InstructionalSettingDescriptor
        {
            get
            {
                if (_instructionalSettingDescriptor == null)
                    _instructionalSettingDescriptor = _instructionalSettingDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("InstructionalSettingDescriptor", _instructionalSettingDescriptorId.Value);
                    
                return _instructionalSettingDescriptor;
            }
            set
            {
                _instructionalSettingDescriptor = value;
                _instructionalSettingDescriptorId = default(int?);
            }
        }
        public virtual int? MinimumDegreeDescriptorId 
        {
            get
            {
                if (_minimumDegreeDescriptorId == default(int?))
                    _minimumDegreeDescriptorId = string.IsNullOrWhiteSpace(_minimumDegreeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DegreeDescriptor", _minimumDegreeDescriptor);

                return _minimumDegreeDescriptorId;
            } 
            set
            {
                _minimumDegreeDescriptorId = value;
                _minimumDegreeDescriptor = null;
            }
        }

        private int? _minimumDegreeDescriptorId;
        private string _minimumDegreeDescriptor;

        public virtual string MinimumDegreeDescriptor
        {
            get
            {
                if (_minimumDegreeDescriptor == null)
                    _minimumDegreeDescriptor = _minimumDegreeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DegreeDescriptor", _minimumDegreeDescriptorId.Value);
                    
                return _minimumDegreeDescriptor;
            }
            set
            {
                _minimumDegreeDescriptor = value;
                _minimumDegreeDescriptorId = default(int?);
            }
        }
        public virtual int? PopulationServedDescriptorId 
        {
            get
            {
                if (_populationServedDescriptorId == default(int?))
                    _populationServedDescriptorId = string.IsNullOrWhiteSpace(_populationServedDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PopulationServedDescriptor", _populationServedDescriptor);

                return _populationServedDescriptorId;
            } 
            set
            {
                _populationServedDescriptorId = value;
                _populationServedDescriptor = null;
            }
        }

        private int? _populationServedDescriptorId;
        private string _populationServedDescriptor;

        public virtual string PopulationServedDescriptor
        {
            get
            {
                if (_populationServedDescriptor == null)
                    _populationServedDescriptor = _populationServedDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PopulationServedDescriptor", _populationServedDescriptorId.Value);
                    
                return _populationServedDescriptor;
            }
            set
            {
                _populationServedDescriptor = value;
                _populationServedDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertification.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertification.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam> _certificationCertificationExams;
        private ICollection<Entities.Common.TPDM.ICertificationCertificationExam> _certificationCertificationExamsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam> CertificationCertificationExams
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationCertificationExams)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationCertificationExams;
            }
            set
            {
                _certificationCertificationExams = value;
                _certificationCertificationExamsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICertificationCertificationExam, Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationCertificationExam> Entities.Common.TPDM.ICertification.CertificationCertificationExams
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationCertificationExams)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationCertificationExamsCovariant;
            }
            set
            {
                CertificationCertificationExams = new HashSet<Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam>(value.Cast<Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam>());
            }
        }


        private ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel> _certificationGradeLevels;
        private ICollection<Entities.Common.TPDM.ICertificationGradeLevel> _certificationGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel> CertificationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationGradeLevels)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationGradeLevels;
            }
            set
            {
                _certificationGradeLevels = value;
                _certificationGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICertificationGradeLevel, Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationGradeLevel> Entities.Common.TPDM.ICertification.CertificationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationGradeLevels)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationGradeLevelsCovariant;
            }
            set
            {
                CertificationGradeLevels = new HashSet<Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel>(value.Cast<Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel>());
            }
        }


        private ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute> _certificationRoutes;
        private ICollection<Entities.Common.TPDM.ICertificationRoute> _certificationRoutesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute> CertificationRoutes
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationRoutes)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationRoutes;
            }
            set
            {
                _certificationRoutes = value;
                _certificationRoutesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICertificationRoute, Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationRoute> Entities.Common.TPDM.ICertification.CertificationRoutes
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationRoutes)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationRoutesCovariant;
            }
            set
            {
                CertificationRoutes = new HashSet<Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute>(value.Cast<Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationFieldDescriptor", new LookupColumnDetails { PropertyName = "CertificationFieldDescriptorId", LookupTypeName = "CertificationFieldDescriptor"} },
                { "CertificationLevelDescriptor", new LookupColumnDetails { PropertyName = "CertificationLevelDescriptorId", LookupTypeName = "CertificationLevelDescriptor"} },
                { "CertificationStandardDescriptor", new LookupColumnDetails { PropertyName = "CertificationStandardDescriptorId", LookupTypeName = "CertificationStandardDescriptor"} },
                { "EducatorRoleDescriptor", new LookupColumnDetails { PropertyName = "EducatorRoleDescriptorId", LookupTypeName = "EducatorRoleDescriptor"} },
                { "InstructionalSettingDescriptor", new LookupColumnDetails { PropertyName = "InstructionalSettingDescriptorId", LookupTypeName = "InstructionalSettingDescriptor"} },
                { "MinimumDegreeDescriptor", new LookupColumnDetails { PropertyName = "MinimumDegreeDescriptorId", LookupTypeName = "DegreeDescriptor"} },
                { "PopulationServedDescriptor", new LookupColumnDetails { PropertyName = "PopulationServedDescriptorId", LookupTypeName = "PopulationServedDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationIdentifier", CertificationIdentifier);
            keyValues.Add("Namespace", Namespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertification)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertification) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCertificationCertificationExamsSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationCertificationExamsSupported
        {
            get { return _isCertificationCertificationExamsSupported; }
            set { _isCertificationCertificationExamsSupported = value; }
        }

        private bool _isCertificationFieldDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationFieldDescriptorSupported
        {
            get { return _isCertificationFieldDescriptorSupported; }
            set { _isCertificationFieldDescriptorSupported = value; }
        }

        private bool _isCertificationGradeLevelsSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationGradeLevelsSupported
        {
            get { return _isCertificationGradeLevelsSupported; }
            set { _isCertificationGradeLevelsSupported = value; }
        }

        private bool _isCertificationLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationLevelDescriptorSupported
        {
            get { return _isCertificationLevelDescriptorSupported; }
            set { _isCertificationLevelDescriptorSupported = value; }
        }

        private bool _isCertificationRoutesSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationRoutesSupported
        {
            get { return _isCertificationRoutesSupported; }
            set { _isCertificationRoutesSupported = value; }
        }

        private bool _isCertificationStandardDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationStandardDescriptorSupported
        {
            get { return _isCertificationStandardDescriptorSupported; }
            set { _isCertificationStandardDescriptorSupported = value; }
        }

        private bool _isCertificationTitleSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationTitleSupported
        {
            get { return _isCertificationTitleSupported; }
            set { _isCertificationTitleSupported = value; }
        }

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEducatorRoleDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEducatorRoleDescriptorSupported
        {
            get { return _isEducatorRoleDescriptorSupported; }
            set { _isEducatorRoleDescriptorSupported = value; }
        }

        private bool _isEffectiveDateSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEffectiveDateSupported
        {
            get { return _isEffectiveDateSupported; }
            set { _isEffectiveDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isInstructionalSettingDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsInstructionalSettingDescriptorSupported
        {
            get { return _isInstructionalSettingDescriptorSupported; }
            set { _isInstructionalSettingDescriptorSupported = value; }
        }

        private bool _isMinimumDegreeDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsMinimumDegreeDescriptorSupported
        {
            get { return _isMinimumDegreeDescriptorSupported; }
            set { _isMinimumDegreeDescriptorSupported = value; }
        }

        private bool _isPopulationServedDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsPopulationServedDescriptorSupported
        {
            get { return _isPopulationServedDescriptorSupported; }
            set { _isPopulationServedDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.ICertificationCertificationExam, bool> _isCertificationCertificationExamIncluded;
        Func<Entities.Common.TPDM.ICertificationCertificationExam, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationCertificationExamIncluded
        {
            get { return _isCertificationCertificationExamIncluded; }
            set { _isCertificationCertificationExamIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICertificationGradeLevel, bool> _isCertificationGradeLevelIncluded;
        Func<Entities.Common.TPDM.ICertificationGradeLevel, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationGradeLevelIncluded
        {
            get { return _isCertificationGradeLevelIncluded; }
            set { _isCertificationGradeLevelIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICertificationRoute, bool> _isCertificationRouteIncluded;
        Func<Entities.Common.TPDM.ICertificationRoute, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationRouteIncluded
        {
            get { return _isCertificationRouteIncluded; }
            set { _isCertificationRouteIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationCertificationExam table of the Certification aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationCertificationExam : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICertificationCertificationExam, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationCertificationExamSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationCertificationExam()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Certification Certification { get; set; }

        Entities.Common.TPDM.ICertification ICertificationCertificationExam.Certification
        {
            get { return Certification; }
            set { Certification = (Certification) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CertificationExamIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string CertificationExamNamespace  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CertificationExamAggregate.TPDM.CertificationExamReferenceData CertificationExamReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the CertificationExam discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertificationCertificationExam.CertificationExamDiscriminator
        {
            get { return CertificationExamReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the CertificationExam resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertificationCertificationExam.CertificationExamResourceId
        {
            get { return CertificationExamReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Certification as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("CertificationExamNamespace", CertificationExamNamespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationCertificationExam)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationCertificationExam) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Certification = (Certification) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationGradeLevel table of the Certification aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICertificationGradeLevel, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Certification Certification { get; set; }

        Entities.Common.TPDM.ICertification ICertificationGradeLevel.Certification
        {
            get { return Certification; }
            set { Certification = (Certification) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Certification as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Certification = (Certification) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationRoute table of the Certification aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationRoute : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICertificationRoute, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationRouteSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationRoute()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Certification Certification { get; set; }

        Entities.Common.TPDM.ICertification ICertificationRoute.Certification
        {
            get { return Certification; }
            set { Certification = (Certification) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int CertificationRouteDescriptorId 
        {
            get
            {
                if (_certificationRouteDescriptorId == default(int))
                    _certificationRouteDescriptorId = DescriptorsCache.GetCache().GetId("CertificationRouteDescriptor", _certificationRouteDescriptor);

                return _certificationRouteDescriptorId;
            } 
            set
            {
                _certificationRouteDescriptorId = value;
                _certificationRouteDescriptor = null;
            }
        }

        private int _certificationRouteDescriptorId;
        private string _certificationRouteDescriptor;

        public virtual string CertificationRouteDescriptor
        {
            get
            {
                if (_certificationRouteDescriptor == null)
                    _certificationRouteDescriptor = DescriptorsCache.GetCache().GetValue("CertificationRouteDescriptor", _certificationRouteDescriptorId);
                    
                return _certificationRouteDescriptor;
            }
            set
            {
                _certificationRouteDescriptor = value;
                _certificationRouteDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationRouteDescriptor", new LookupColumnDetails { PropertyName = "CertificationRouteDescriptorId", LookupTypeName = "CertificationRouteDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Certification as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CertificationRouteDescriptorId", CertificationRouteDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationRoute)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationRoute) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Certification = (Certification) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: CertificationExam

namespace EdFi.Ods.Entities.NHibernate.CertificationExamAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CertificationExam"/> entity.
    /// </summary>
    public class CertificationExamReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string CertificationExamIdentifier { get; set; }
        public virtual string Namespace { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("Namespace", Namespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationExam table of the CertificationExam aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationExam : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICertificationExam, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationExam()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CertificationExamIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(60), NoDangerousText]
        public virtual string CertificationExamTitle  { get; set; }
        public virtual int? CertificationExamTypeDescriptorId 
        {
            get
            {
                if (_certificationExamTypeDescriptorId == default(int?))
                    _certificationExamTypeDescriptorId = string.IsNullOrWhiteSpace(_certificationExamTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationExamTypeDescriptor", _certificationExamTypeDescriptor);

                return _certificationExamTypeDescriptorId;
            } 
            set
            {
                _certificationExamTypeDescriptorId = value;
                _certificationExamTypeDescriptor = null;
            }
        }

        private int? _certificationExamTypeDescriptorId;
        private string _certificationExamTypeDescriptor;

        public virtual string CertificationExamTypeDescriptor
        {
            get
            {
                if (_certificationExamTypeDescriptor == null)
                    _certificationExamTypeDescriptor = _certificationExamTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationExamTypeDescriptor", _certificationExamTypeDescriptorId.Value);
                    
                return _certificationExamTypeDescriptor;
            }
            set
            {
                _certificationExamTypeDescriptor = value;
                _certificationExamTypeDescriptorId = default(int?);
            }
        }
        public virtual int? EducationOrganizationId  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EffectiveDate 
        {
            get { return _effectiveDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _effectiveDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _effectiveDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _effectiveDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertificationExam.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertificationExam.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationExamTypeDescriptor", new LookupColumnDetails { PropertyName = "CertificationExamTypeDescriptorId", LookupTypeName = "CertificationExamTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("Namespace", Namespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationExam)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationExam) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCertificationExamTitleSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsCertificationExamTitleSupported
        {
            get { return _isCertificationExamTitleSupported; }
            set { _isCertificationExamTitleSupported = value; }
        }

        private bool _isCertificationExamTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsCertificationExamTypeDescriptorSupported
        {
            get { return _isCertificationExamTypeDescriptorSupported; }
            set { _isCertificationExamTypeDescriptorSupported = value; }
        }

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEffectiveDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEffectiveDateSupported
        {
            get { return _isEffectiveDateSupported; }
            set { _isEffectiveDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationExamResult

namespace EdFi.Ods.Entities.NHibernate.CertificationExamResultAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CertificationExamResult"/> entity.
    /// </summary>
    public class CertificationExamResultReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime CertificationExamDate { get; set; }
        public virtual string CertificationExamIdentifier { get; set; }
        public virtual string Namespace { get; set; }
        public virtual string PersonId { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamDate", CertificationExamDate);
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationExamResult table of the CertificationExamResult aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationExamResult : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICertificationExamResult, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationExamResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime CertificationExamDate 
        {
            get { return _certificationExamDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _certificationExamDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _certificationExamDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CertificationExamIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AttemptNumber  { get; set; }
        public virtual bool? CertificationExamPassIndicator  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? CertificationExamScore  { get; set; }
        public virtual int? CertificationExamStatusDescriptorId 
        {
            get
            {
                if (_certificationExamStatusDescriptorId == default(int?))
                    _certificationExamStatusDescriptorId = string.IsNullOrWhiteSpace(_certificationExamStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationExamStatusDescriptor", _certificationExamStatusDescriptor);

                return _certificationExamStatusDescriptorId;
            } 
            set
            {
                _certificationExamStatusDescriptorId = value;
                _certificationExamStatusDescriptor = null;
            }
        }

        private int? _certificationExamStatusDescriptorId;
        private string _certificationExamStatusDescriptor;

        public virtual string CertificationExamStatusDescriptor
        {
            get
            {
                if (_certificationExamStatusDescriptor == null)
                    _certificationExamStatusDescriptor = _certificationExamStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationExamStatusDescriptor", _certificationExamStatusDescriptorId.Value);
                    
                return _certificationExamStatusDescriptor;
            }
            set
            {
                _certificationExamStatusDescriptor = value;
                _certificationExamStatusDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CertificationExamAggregate.TPDM.CertificationExamReferenceData CertificationExamReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the CertificationExam discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertificationExamResult.CertificationExamDiscriminator
        {
            get { return CertificationExamReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the CertificationExam resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertificationExamResult.CertificationExamResourceId
        {
            get { return CertificationExamReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertificationExamResult.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertificationExamResult.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationExamStatusDescriptor", new LookupColumnDetails { PropertyName = "CertificationExamStatusDescriptorId", LookupTypeName = "CertificationExamStatusDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamDate", CertificationExamDate);
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationExamResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationExamResult) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAttemptNumberSupported = true;
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsAttemptNumberSupported
        {
            get { return _isAttemptNumberSupported; }
            set { _isAttemptNumberSupported = value; }
        }

        private bool _isCertificationExamPassIndicatorSupported = true;
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamPassIndicatorSupported
        {
            get { return _isCertificationExamPassIndicatorSupported; }
            set { _isCertificationExamPassIndicatorSupported = value; }
        }

        private bool _isCertificationExamScoreSupported = true;
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamScoreSupported
        {
            get { return _isCertificationExamScoreSupported; }
            set { _isCertificationExamScoreSupported = value; }
        }

        private bool _isCertificationExamStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamStatusDescriptorSupported
        {
            get { return _isCertificationExamStatusDescriptorSupported; }
            set { _isCertificationExamStatusDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationExamStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationExamStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationExamStatusDescriptor table of the CertificationExamStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationExamStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationExamStatusDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationExamStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamStatusDescriptorId", CertificationExamStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationExamStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationExamStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationExamTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationExamTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationExamTypeDescriptor table of the CertificationExamTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationExamTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationExamTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationExamTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamTypeDescriptorId", CertificationExamTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationExamTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationExamTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationFieldDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationFieldDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationFieldDescriptor table of the CertificationFieldDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationFieldDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationFieldDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationFieldDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationFieldDescriptorId", CertificationFieldDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationFieldDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationFieldDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationLevelDescriptor table of the CertificationLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationLevelDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationLevelDescriptorId", CertificationLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationRouteDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationRouteDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationRouteDescriptor table of the CertificationRouteDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationRouteDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationRouteDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationRouteDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationRouteDescriptorId", CertificationRouteDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationRouteDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationRouteDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationStandardDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationStandardDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationStandardDescriptor table of the CertificationStandardDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationStandardDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationStandardDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationStandardDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationStandardDescriptorId", CertificationStandardDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationStandardDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationStandardDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CoteachingStyleObservedDescriptor

namespace EdFi.Ods.Entities.NHibernate.CoteachingStyleObservedDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CoteachingStyleObservedDescriptor table of the CoteachingStyleObservedDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CoteachingStyleObservedDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICoteachingStyleObservedDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CoteachingStyleObservedDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CoteachingStyleObservedDescriptorId", CoteachingStyleObservedDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICoteachingStyleObservedDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICoteachingStyleObservedDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Credential

namespace EdFi.Ods.Entities.NHibernate.CredentialAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialStudentAcademicRecord table of the Credential aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialStudentAcademicRecord : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICredentialStudentAcademicRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialStudentAcademicRecordSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CredentialStudentAcademicRecord()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Credential Credential { get; set; }

        Entities.Common.TPDM.ICredentialExtension ICredentialStudentAcademicRecord.CredentialExtension
        {
            get { return (ICredentialExtension) Credential.Extensions["TPDM"]; }
            set { Credential.Extensions["TPDM"] = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [Display(Name="StudentUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Student")]
        public virtual int StudentUSI 
        {
            get
            {
                if (_studentUSI == default(int))
                    _studentUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Student", _studentUniqueId);

                return _studentUSI;
            } 
            set
            {
                _studentUSI = value;
            }
        }

        private int _studentUSI;
        private string _studentUniqueId;

        [RequiredWithNonDefault]
        public virtual string StudentUniqueId
        {
            get
            {
                if (_studentUniqueId == null)
                    _studentUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Student", _studentUSI);
                    
                return _studentUniqueId;
            }
            set
            {
                if (_studentUniqueId != value)
                        _studentUSI = default(int);

                _studentUniqueId = value;
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.StudentAcademicRecordAggregate.EdFi.StudentAcademicRecordReferenceData StudentAcademicRecordReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the StudentAcademicRecord discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentAcademicRecordDiscriminator
        {
            get { return StudentAcademicRecordReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the StudentAcademicRecord resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentAcademicRecordResourceId
        {
            get { return StudentAcademicRecordReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StateOfIssueStateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateOfIssueStateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Credential as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("StudentUSI", StudentUSI);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialStudentAcademicRecord)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialStudentAcademicRecord) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Credential = (EdFi.Credential) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialExtension table of the Credential aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICredentialExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CredentialExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Credential Credential { get; set; }

        Entities.Common.EdFi.ICredential ICredentialExtension.Credential
        {
            get { return Credential; }
            set { Credential = (EdFi.Credential) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? BoardCertificationIndicator  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string CertificationIdentifier  { get; set; }
        public virtual int? CertificationRouteDescriptorId 
        {
            get
            {
                if (_certificationRouteDescriptorId == default(int?))
                    _certificationRouteDescriptorId = string.IsNullOrWhiteSpace(_certificationRouteDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationRouteDescriptor", _certificationRouteDescriptor);

                return _certificationRouteDescriptorId;
            } 
            set
            {
                _certificationRouteDescriptorId = value;
                _certificationRouteDescriptor = null;
            }
        }

        private int? _certificationRouteDescriptorId;
        private string _certificationRouteDescriptor;

        public virtual string CertificationRouteDescriptor
        {
            get
            {
                if (_certificationRouteDescriptor == null)
                    _certificationRouteDescriptor = _certificationRouteDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationRouteDescriptor", _certificationRouteDescriptorId.Value);
                    
                return _certificationRouteDescriptor;
            }
            set
            {
                _certificationRouteDescriptor = value;
                _certificationRouteDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, StringLength(64), NoDangerousText]
        public virtual string CertificationTitle  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? CredentialStatusDate 
        {
            get { return _credentialStatusDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _credentialStatusDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _credentialStatusDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _credentialStatusDate;
        
        public virtual int? CredentialStatusDescriptorId 
        {
            get
            {
                if (_credentialStatusDescriptorId == default(int?))
                    _credentialStatusDescriptorId = string.IsNullOrWhiteSpace(_credentialStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CredentialStatusDescriptor", _credentialStatusDescriptor);

                return _credentialStatusDescriptorId;
            } 
            set
            {
                _credentialStatusDescriptorId = value;
                _credentialStatusDescriptor = null;
            }
        }

        private int? _credentialStatusDescriptorId;
        private string _credentialStatusDescriptor;

        public virtual string CredentialStatusDescriptor
        {
            get
            {
                if (_credentialStatusDescriptor == null)
                    _credentialStatusDescriptor = _credentialStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CredentialStatusDescriptor", _credentialStatusDescriptorId.Value);
                    
                return _credentialStatusDescriptor;
            }
            set
            {
                _credentialStatusDescriptor = value;
                _credentialStatusDescriptorId = default(int?);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string Namespace  { get; set; }
        [RequiredWithNonDefault, StringLength(32), NoDangerousText]
        public virtual string PersonId  { get; set; }
        [RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CertificationAggregate.TPDM.CertificationReferenceData CertificationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Certification discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICredentialExtension.CertificationDiscriminator
        {
            get { return CertificationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Certification resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICredentialExtension.CertificationResourceId
        {
            get { return CertificationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICredentialExtension.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICredentialExtension.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<Entities.Common.TPDM.ICredentialStudentAcademicRecord> _credentialStudentAcademicRecords;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.ICredentialStudentAcademicRecord> ICredentialExtension.CredentialStudentAcademicRecords
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, CredentialStudentAcademicRecord>((IList<object>) Credential.AggregateExtensions["TPDM_CredentialStudentAcademicRecords"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (CredentialStudentAcademicRecord item in sourceList)
                    if (item.Credential == null)
                        item.Credential = this.Credential;
                // -------------------------------------------------------------

                if (_credentialStudentAcademicRecords == null)
                    _credentialStudentAcademicRecords = new CovariantCollectionAdapter<Entities.Common.TPDM.ICredentialStudentAcademicRecord, CredentialStudentAcademicRecord>(sourceList);

                return _credentialStudentAcademicRecords;
            }
            set
            {
                Credential.AggregateExtensions["TPDM_CredentialStudentAcademicRecords"] = value;
            }
        }
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationRouteDescriptor", new LookupColumnDetails { PropertyName = "CertificationRouteDescriptorId", LookupTypeName = "CertificationRouteDescriptor"} },
                { "CredentialStatusDescriptor", new LookupColumnDetails { PropertyName = "CredentialStatusDescriptorId", LookupTypeName = "CredentialStatusDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Credential as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Credential = (EdFi.Credential) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBoardCertificationIndicatorSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsBoardCertificationIndicatorSupported
        {
            get { return _isBoardCertificationIndicatorSupported; }
            set { _isBoardCertificationIndicatorSupported = value; }
        }

        private bool _isCertificationIdentifierSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationIdentifierSupported
        {
            get { return _isCertificationIdentifierSupported; }
            set { _isCertificationIdentifierSupported = value; }
        }

        private bool _isCertificationRouteDescriptorSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationRouteDescriptorSupported
        {
            get { return _isCertificationRouteDescriptorSupported; }
            set { _isCertificationRouteDescriptorSupported = value; }
        }

        private bool _isCertificationTitleSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationTitleSupported
        {
            get { return _isCertificationTitleSupported; }
            set { _isCertificationTitleSupported = value; }
        }

        private bool _isCredentialStatusDateSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStatusDateSupported
        {
            get { return _isCredentialStatusDateSupported; }
            set { _isCredentialStatusDateSupported = value; }
        }

        private bool _isCredentialStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStatusDescriptorSupported
        {
            get { return _isCredentialStatusDescriptorSupported; }
            set { _isCredentialStatusDescriptorSupported = value; }
        }

        private bool _isCredentialStudentAcademicRecordsSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStudentAcademicRecordsSupported
        {
            get { return _isCredentialStudentAcademicRecordsSupported; }
            set { _isCredentialStudentAcademicRecordsSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPersonIdSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsPersonIdSupported
        {
            get { return _isPersonIdSupported; }
            set { _isPersonIdSupported = value; }
        }

        private bool _isSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsSourceSystemDescriptorSupported
        {
            get { return _isSourceSystemDescriptorSupported; }
            set { _isSourceSystemDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.ICredentialStudentAcademicRecord, bool> _isCredentialStudentAcademicRecordIncluded;
        Func<Entities.Common.TPDM.ICredentialStudentAcademicRecord, bool> Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStudentAcademicRecordIncluded
        {
            get { return _isCredentialStudentAcademicRecordIncluded; }
            set { _isCredentialStudentAcademicRecordIncluded = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CredentialEvent

namespace EdFi.Ods.Entities.NHibernate.CredentialEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CredentialEvent"/> entity.
    /// </summary>
    public class CredentialEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime CredentialEventDate { get; set; }
        public virtual int CredentialEventTypeDescriptorId { get; set; }
        public virtual string CredentialIdentifier { get; set; }
        public virtual int StateOfIssueStateAbbreviationDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CredentialEventDate", CredentialEventDate);
            keyValues.Add("CredentialEventTypeDescriptorId", CredentialEventTypeDescriptorId);
            keyValues.Add("CredentialIdentifier", CredentialIdentifier);
            keyValues.Add("StateOfIssueStateAbbreviationDescriptorId", StateOfIssueStateAbbreviationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialEvent table of the CredentialEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICredentialEvent, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CredentialEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime CredentialEventDate 
        {
            get { return _credentialEventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _credentialEventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _credentialEventDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int CredentialEventTypeDescriptorId 
        {
            get
            {
                if (_credentialEventTypeDescriptorId == default(int))
                    _credentialEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("CredentialEventTypeDescriptor", _credentialEventTypeDescriptor);

                return _credentialEventTypeDescriptorId;
            } 
            set
            {
                _credentialEventTypeDescriptorId = value;
                _credentialEventTypeDescriptor = null;
            }
        }

        private int _credentialEventTypeDescriptorId;
        private string _credentialEventTypeDescriptor;

        public virtual string CredentialEventTypeDescriptor
        {
            get
            {
                if (_credentialEventTypeDescriptor == null)
                    _credentialEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("CredentialEventTypeDescriptor", _credentialEventTypeDescriptorId);
                    
                return _credentialEventTypeDescriptor;
            }
            set
            {
                _credentialEventTypeDescriptor = value;
                _credentialEventTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CredentialIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int StateOfIssueStateAbbreviationDescriptorId 
        {
            get
            {
                if (_stateOfIssueStateAbbreviationDescriptorId == default(int))
                    _stateOfIssueStateAbbreviationDescriptorId = DescriptorsCache.GetCache().GetId("StateAbbreviationDescriptor", _stateOfIssueStateAbbreviationDescriptor);

                return _stateOfIssueStateAbbreviationDescriptorId;
            } 
            set
            {
                _stateOfIssueStateAbbreviationDescriptorId = value;
                _stateOfIssueStateAbbreviationDescriptor = null;
            }
        }

        private int _stateOfIssueStateAbbreviationDescriptorId;
        private string _stateOfIssueStateAbbreviationDescriptor;

        public virtual string StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (_stateOfIssueStateAbbreviationDescriptor == null)
                    _stateOfIssueStateAbbreviationDescriptor = DescriptorsCache.GetCache().GetValue("StateAbbreviationDescriptor", _stateOfIssueStateAbbreviationDescriptorId);
                    
                return _stateOfIssueStateAbbreviationDescriptor;
            }
            set
            {
                _stateOfIssueStateAbbreviationDescriptor = value;
                _stateOfIssueStateAbbreviationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(1024), NoDangerousText]
        public virtual string CredentialEventReason  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CredentialAggregate.EdFi.CredentialReferenceData CredentialReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Credential discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICredentialEvent.CredentialDiscriminator
        {
            get { return CredentialReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Credential resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICredentialEvent.CredentialResourceId
        {
            get { return CredentialReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CredentialEventTypeDescriptor", new LookupColumnDetails { PropertyName = "CredentialEventTypeDescriptorId", LookupTypeName = "CredentialEventTypeDescriptor"} },
                { "StateOfIssueStateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateOfIssueStateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CredentialEventDate", CredentialEventDate);
            keyValues.Add("CredentialEventTypeDescriptorId", CredentialEventTypeDescriptorId);
            keyValues.Add("CredentialIdentifier", CredentialIdentifier);
            keyValues.Add("StateOfIssueStateAbbreviationDescriptorId", StateOfIssueStateAbbreviationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCredentialEventReasonSupported = true;
        bool Entities.Common.TPDM.ICredentialEventSynchronizationSourceSupport.IsCredentialEventReasonSupported
        {
            get { return _isCredentialEventReasonSupported; }
            set { _isCredentialEventReasonSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CredentialEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.CredentialEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialEventTypeDescriptor table of the CredentialEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICredentialEventTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CredentialEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CredentialEventTypeDescriptorId", CredentialEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CredentialStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.CredentialStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialStatusDescriptor table of the CredentialStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICredentialStatusDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CredentialStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CredentialStatusDescriptorId", CredentialStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: DegreeDescriptor

namespace EdFi.Ods.Entities.NHibernate.DegreeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.DegreeDescriptor table of the DegreeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class DegreeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IDegreeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int DegreeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("DegreeDescriptorId", DegreeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IDegreeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IDegreeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EducatorPreparationProgram

namespace EdFi.Ods.Entities.NHibernate.EducatorPreparationProgramAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EducatorPreparationProgram"/> entity.
    /// </summary>
    public class EducatorPreparationProgramReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProgramName { get; set; }
        public virtual int ProgramTypeDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EducatorPreparationProgram table of the EducatorPreparationProgram aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgram : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEducatorPreparationProgram, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EducatorPreparationProgram()
        {
            EducatorPreparationProgramGradeLevels = new HashSet<EducatorPreparationProgramGradeLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string ProgramName  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramTypeDescriptorId 
        {
            get
            {
                if (_programTypeDescriptorId == default(int))
                    _programTypeDescriptorId = DescriptorsCache.GetCache().GetId("ProgramTypeDescriptor", _programTypeDescriptor);

                return _programTypeDescriptorId;
            } 
            set
            {
                _programTypeDescriptorId = value;
                _programTypeDescriptor = null;
            }
        }

        private int _programTypeDescriptorId;
        private string _programTypeDescriptor;

        public virtual string ProgramTypeDescriptor
        {
            get
            {
                if (_programTypeDescriptor == null)
                    _programTypeDescriptor = DescriptorsCache.GetCache().GetValue("ProgramTypeDescriptor", _programTypeDescriptorId);
                    
                return _programTypeDescriptor;
            }
            set
            {
                _programTypeDescriptor = value;
                _programTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AccreditationStatusDescriptorId 
        {
            get
            {
                if (_accreditationStatusDescriptorId == default(int?))
                    _accreditationStatusDescriptorId = string.IsNullOrWhiteSpace(_accreditationStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AccreditationStatusDescriptor", _accreditationStatusDescriptor);

                return _accreditationStatusDescriptorId;
            } 
            set
            {
                _accreditationStatusDescriptorId = value;
                _accreditationStatusDescriptor = null;
            }
        }

        private int? _accreditationStatusDescriptorId;
        private string _accreditationStatusDescriptor;

        public virtual string AccreditationStatusDescriptor
        {
            get
            {
                if (_accreditationStatusDescriptor == null)
                    _accreditationStatusDescriptor = _accreditationStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AccreditationStatusDescriptor", _accreditationStatusDescriptorId.Value);
                    
                return _accreditationStatusDescriptor;
            }
            set
            {
                _accreditationStatusDescriptor = value;
                _accreditationStatusDescriptorId = default(int?);
            }
        }
        public virtual int? EducatorPreparationProgramTypeDescriptorId 
        {
            get
            {
                if (_educatorPreparationProgramTypeDescriptorId == default(int?))
                    _educatorPreparationProgramTypeDescriptorId = string.IsNullOrWhiteSpace(_educatorPreparationProgramTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EducatorPreparationProgramTypeDescriptor", _educatorPreparationProgramTypeDescriptor);

                return _educatorPreparationProgramTypeDescriptorId;
            } 
            set
            {
                _educatorPreparationProgramTypeDescriptorId = value;
                _educatorPreparationProgramTypeDescriptor = null;
            }
        }

        private int? _educatorPreparationProgramTypeDescriptorId;
        private string _educatorPreparationProgramTypeDescriptor;

        public virtual string EducatorPreparationProgramTypeDescriptor
        {
            get
            {
                if (_educatorPreparationProgramTypeDescriptor == null)
                    _educatorPreparationProgramTypeDescriptor = _educatorPreparationProgramTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EducatorPreparationProgramTypeDescriptor", _educatorPreparationProgramTypeDescriptorId.Value);
                    
                return _educatorPreparationProgramTypeDescriptor;
            }
            set
            {
                _educatorPreparationProgramTypeDescriptor = value;
                _educatorPreparationProgramTypeDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string ProgramId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEducatorPreparationProgram.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEducatorPreparationProgram.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramGradeLevel> _educatorPreparationProgramGradeLevels;
        private ICollection<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel> _educatorPreparationProgramGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramGradeLevel> EducatorPreparationProgramGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _educatorPreparationProgramGradeLevels)
                    if (item.EducatorPreparationProgram == null)
                        item.EducatorPreparationProgram = this;
                // -------------------------------------------------------------

                return _educatorPreparationProgramGradeLevels;
            }
            set
            {
                _educatorPreparationProgramGradeLevels = value;
                _educatorPreparationProgramGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel, Entities.NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel> Entities.Common.TPDM.IEducatorPreparationProgram.EducatorPreparationProgramGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _educatorPreparationProgramGradeLevels)
                    if (item.EducatorPreparationProgram == null)
                        item.EducatorPreparationProgram = this;
                // -------------------------------------------------------------

                return _educatorPreparationProgramGradeLevelsCovariant;
            }
            set
            {
                EducatorPreparationProgramGradeLevels = new HashSet<Entities.NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramGradeLevel>(value.Cast<Entities.NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramGradeLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AccreditationStatusDescriptor", new LookupColumnDetails { PropertyName = "AccreditationStatusDescriptorId", LookupTypeName = "AccreditationStatusDescriptor"} },
                { "EducatorPreparationProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "EducatorPreparationProgramTypeDescriptorId", LookupTypeName = "EducatorPreparationProgramTypeDescriptor"} },
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEducatorPreparationProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEducatorPreparationProgram) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAccreditationStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsAccreditationStatusDescriptorSupported
        {
            get { return _isAccreditationStatusDescriptorSupported; }
            set { _isAccreditationStatusDescriptorSupported = value; }
        }

        private bool _isEducatorPreparationProgramGradeLevelsSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsEducatorPreparationProgramGradeLevelsSupported
        {
            get { return _isEducatorPreparationProgramGradeLevelsSupported; }
            set { _isEducatorPreparationProgramGradeLevelsSupported = value; }
        }

        private bool _isEducatorPreparationProgramTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsEducatorPreparationProgramTypeDescriptorSupported
        {
            get { return _isEducatorPreparationProgramTypeDescriptorSupported; }
            set { _isEducatorPreparationProgramTypeDescriptorSupported = value; }
        }

        private bool _isProgramIdSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsProgramIdSupported
        {
            get { return _isProgramIdSupported; }
            set { _isProgramIdSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel, bool> _isEducatorPreparationProgramGradeLevelIncluded;
        Func<Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel, bool> Entities.Common.TPDM.IEducatorPreparationProgramSynchronizationSourceSupport.IsEducatorPreparationProgramGradeLevelIncluded
        {
            get { return _isEducatorPreparationProgramGradeLevelIncluded; }
            set { _isEducatorPreparationProgramGradeLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EducatorPreparationProgramGradeLevel table of the EducatorPreparationProgram aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEducatorPreparationProgramGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EducatorPreparationProgramGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EducatorPreparationProgram EducatorPreparationProgram { get; set; }

        Entities.Common.TPDM.IEducatorPreparationProgram IEducatorPreparationProgramGradeLevel.EducatorPreparationProgram
        {
            get { return EducatorPreparationProgram; }
            set { EducatorPreparationProgram = (EducatorPreparationProgram) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EducatorPreparationProgram as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEducatorPreparationProgramGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EducatorPreparationProgram = (EducatorPreparationProgram) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: EducatorPreparationProgramTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.EducatorPreparationProgramTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EducatorPreparationProgramTypeDescriptor table of the EducatorPreparationProgramTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EducatorPreparationProgramTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EducatorPreparationProgramTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducatorPreparationProgramTypeDescriptorId", EducatorPreparationProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EducatorRoleDescriptor

namespace EdFi.Ods.Entities.NHibernate.EducatorRoleDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EducatorRoleDescriptor table of the EducatorRoleDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EducatorRoleDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEducatorRoleDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EducatorRoleDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducatorRoleDescriptorId", EducatorRoleDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEducatorRoleDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEducatorRoleDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EnglishLanguageExamDescriptor

namespace EdFi.Ods.Entities.NHibernate.EnglishLanguageExamDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EnglishLanguageExamDescriptor table of the EnglishLanguageExamDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EnglishLanguageExamDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEnglishLanguageExamDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EnglishLanguageExamDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EnglishLanguageExamDescriptorId", EnglishLanguageExamDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEnglishLanguageExamDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEnglishLanguageExamDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EPPDegreeTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.EPPDegreeTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EPPDegreeTypeDescriptor table of the EPPDegreeTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EPPDegreeTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEPPDegreeTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EPPDegreeTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EPPDegreeTypeDescriptorId", EPPDegreeTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEPPDegreeTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEPPDegreeTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEPPDegreeTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EPPProgramPathwayDescriptor

namespace EdFi.Ods.Entities.NHibernate.EPPProgramPathwayDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EPPProgramPathwayDescriptor table of the EPPProgramPathwayDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EPPProgramPathwayDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEPPProgramPathwayDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EPPProgramPathwayDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EPPProgramPathwayDescriptorId", EPPProgramPathwayDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEPPProgramPathwayDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEPPProgramPathwayDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEPPProgramPathwayDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Evaluation

namespace EdFi.Ods.Entities.NHibernate.EvaluationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Evaluation"/> entity.
    /// </summary>
    public class EvaluationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Evaluation table of the Evaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Evaluation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Evaluation()
        {
            EvaluationRatingLevels = new HashSet<EvaluationRatingLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EvaluationTypeDescriptorId 
        {
            get
            {
                if (_evaluationTypeDescriptorId == default(int?))
                    _evaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_evaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationTypeDescriptor", _evaluationTypeDescriptor);

                return _evaluationTypeDescriptorId;
            } 
            set
            {
                _evaluationTypeDescriptorId = value;
                _evaluationTypeDescriptor = null;
            }
        }

        private int? _evaluationTypeDescriptorId;
        private string _evaluationTypeDescriptor;

        public virtual string EvaluationTypeDescriptor
        {
            get
            {
                if (_evaluationTypeDescriptor == null)
                    _evaluationTypeDescriptor = _evaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationTypeDescriptor", _evaluationTypeDescriptorId.Value);
                    
                return _evaluationTypeDescriptor;
            }
            set
            {
                _evaluationTypeDescriptor = value;
                _evaluationTypeDescriptorId = default(int?);
            }
        }
        public virtual int? InterRaterReliabilityScore  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationReferenceData PerformanceEvaluationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluation discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluation.PerformanceEvaluationDiscriminator
        {
            get { return PerformanceEvaluationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluation resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluation.PerformanceEvaluationResourceId
        {
            get { return PerformanceEvaluationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel> _evaluationRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingLevel> _evaluationRatingLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel> EvaluationRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingLevels)
                    if (item.Evaluation == null)
                        item.Evaluation = this;
                // -------------------------------------------------------------

                return _evaluationRatingLevels;
            }
            set
            {
                _evaluationRatingLevels = value;
                _evaluationRatingLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationRatingLevel, Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingLevel> Entities.Common.TPDM.IEvaluation.EvaluationRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingLevels)
                    if (item.Evaluation == null)
                        item.Evaluation = this;
                // -------------------------------------------------------------

                return _evaluationRatingLevelsCovariant;
            }
            set
            {
                EvaluationRatingLevels = new HashSet<Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel>(value.Cast<Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "EvaluationTypeDescriptorId", LookupTypeName = "EvaluationTypeDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationRatingLevelsSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationRatingLevelsSupported
        {
            get { return _isEvaluationRatingLevelsSupported; }
            set { _isEvaluationRatingLevelsSupported = value; }
        }

        private bool _isEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported
        {
            get { return _isEvaluationTypeDescriptorSupported; }
            set { _isEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isInterRaterReliabilityScoreSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported
        {
            get { return _isInterRaterReliabilityScoreSupported; }
            set { _isInterRaterReliabilityScoreSupported = value; }
        }

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationRatingLevel, bool> _isEvaluationRatingLevelIncluded;
        Func<Entities.Common.TPDM.IEvaluationRatingLevel, bool> Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationRatingLevelIncluded
        {
            get { return _isEvaluationRatingLevelIncluded; }
            set { _isEvaluationRatingLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingLevel table of the Evaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationRatingLevel, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRatingLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Evaluation Evaluation { get; set; }

        Entities.Common.TPDM.IEvaluation IEvaluationRatingLevel.Evaluation
        {
            get { return Evaluation; }
            set { Evaluation = (Evaluation) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int))
                    _evaluationRatingLevelDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Evaluation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Evaluation = (Evaluation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationElement

namespace EdFi.Ods.Entities.NHibernate.EvaluationElementAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationElement"/> entity.
    /// </summary>
    public class EvaluationElementReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElement table of the EvaluationElement aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElement : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationElement, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationElement()
        {
            EvaluationElementRatingLevels = new HashSet<EvaluationElementRatingLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EvaluationTypeDescriptorId 
        {
            get
            {
                if (_evaluationTypeDescriptorId == default(int?))
                    _evaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_evaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationTypeDescriptor", _evaluationTypeDescriptor);

                return _evaluationTypeDescriptorId;
            } 
            set
            {
                _evaluationTypeDescriptorId = value;
                _evaluationTypeDescriptor = null;
            }
        }

        private int? _evaluationTypeDescriptorId;
        private string _evaluationTypeDescriptor;

        public virtual string EvaluationTypeDescriptor
        {
            get
            {
                if (_evaluationTypeDescriptor == null)
                    _evaluationTypeDescriptor = _evaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationTypeDescriptor", _evaluationTypeDescriptorId.Value);
                    
                return _evaluationTypeDescriptor;
            }
            set
            {
                _evaluationTypeDescriptor = value;
                _evaluationTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        public virtual int? SortOrder  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveReferenceData EvaluationObjectiveReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationObjective discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveDiscriminator
        {
            get { return EvaluationObjectiveReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationObjective resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveResourceId
        {
            get { return EvaluationObjectiveReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel> _evaluationElementRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationElementRatingLevel> _evaluationElementRatingLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel> EvaluationElementRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationElementRatingLevels)
                    if (item.EvaluationElement == null)
                        item.EvaluationElement = this;
                // -------------------------------------------------------------

                return _evaluationElementRatingLevels;
            }
            set
            {
                _evaluationElementRatingLevels = value;
                _evaluationElementRatingLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationElementRatingLevel, Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationElementRatingLevel> Entities.Common.TPDM.IEvaluationElement.EvaluationElementRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationElementRatingLevels)
                    if (item.EvaluationElement == null)
                        item.EvaluationElement = this;
                // -------------------------------------------------------------

                return _evaluationElementRatingLevelsCovariant;
            }
            set
            {
                EvaluationElementRatingLevels = new HashSet<Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel>(value.Cast<Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "EvaluationTypeDescriptorId", LookupTypeName = "EvaluationTypeDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElement)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElement) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationElementRatingLevelsSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationElementRatingLevelsSupported
        {
            get { return _isEvaluationElementRatingLevelsSupported; }
            set { _isEvaluationElementRatingLevelsSupported = value; }
        }

        private bool _isEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported
        {
            get { return _isEvaluationTypeDescriptorSupported; }
            set { _isEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        private bool _isSortOrderSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsSortOrderSupported
        {
            get { return _isSortOrderSupported; }
            set { _isSortOrderSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationElementRatingLevel, bool> _isEvaluationElementRatingLevelIncluded;
        Func<Entities.Common.TPDM.IEvaluationElementRatingLevel, bool> Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationElementRatingLevelIncluded
        {
            get { return _isEvaluationElementRatingLevelIncluded; }
            set { _isEvaluationElementRatingLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingLevel table of the EvaluationElement aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationElementRatingLevel, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationElementRatingLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationElement EvaluationElement { get; set; }

        Entities.Common.TPDM.IEvaluationElement IEvaluationElementRatingLevel.EvaluationElement
        {
            get { return EvaluationElement; }
            set { EvaluationElement = (EvaluationElement) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int))
                    _evaluationRatingLevelDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationElement as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElementRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElementRatingLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationElement = (EvaluationElement) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationElementRating

namespace EdFi.Ods.Entities.NHibernate.EvaluationElementRatingAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationElementRating"/> entity.
    /// </summary>
    public class EvaluationElementRatingReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRating table of the EvaluationElementRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRating : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationElementRating, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationElementRating()
        {
            EvaluationElementRatingResults = new HashSet<EvaluationElementRatingResult>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(1024), NoDangerousText]
        public virtual string AreaOfRefinement  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string AreaOfReinforcement  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string Comments  { get; set; }
        public virtual int? EvaluationElementRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationElementRatingLevelDescriptorId == default(int?))
                    _evaluationElementRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_evaluationElementRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationElementRatingLevelDescriptor", _evaluationElementRatingLevelDescriptor);

                return _evaluationElementRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationElementRatingLevelDescriptorId = value;
                _evaluationElementRatingLevelDescriptor = null;
            }
        }

        private int? _evaluationElementRatingLevelDescriptorId;
        private string _evaluationElementRatingLevelDescriptor;

        public virtual string EvaluationElementRatingLevelDescriptor
        {
            get
            {
                if (_evaluationElementRatingLevelDescriptor == null)
                    _evaluationElementRatingLevelDescriptor = _evaluationElementRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationElementRatingLevelDescriptor", _evaluationElementRatingLevelDescriptorId.Value);
                    
                return _evaluationElementRatingLevelDescriptor;
            }
            set
            {
                _evaluationElementRatingLevelDescriptor = value;
                _evaluationElementRatingLevelDescriptorId = default(int?);
            }
        }
        [StringLength(1024), NoDangerousText]
        public virtual string Feedback  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingReferenceData EvaluationObjectiveRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationObjectiveRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveRatingDiscriminator
        {
            get { return EvaluationObjectiveRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationObjectiveRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveRatingResourceId
        {
            get { return EvaluationObjectiveRatingReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult> _evaluationElementRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationElementRatingResult> _evaluationElementRatingResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult> EvaluationElementRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationElementRatingResults)
                    if (item.EvaluationElementRating == null)
                        item.EvaluationElementRating = this;
                // -------------------------------------------------------------

                return _evaluationElementRatingResults;
            }
            set
            {
                _evaluationElementRatingResults = value;
                _evaluationElementRatingResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationElementRatingResult, Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationElementRatingResult> Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationElementRatingResults)
                    if (item.EvaluationElementRating == null)
                        item.EvaluationElementRating = this;
                // -------------------------------------------------------------

                return _evaluationElementRatingResultsCovariant;
            }
            set
            {
                EvaluationElementRatingResults = new HashSet<Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult>(value.Cast<Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationElementRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationElementRatingLevelDescriptorId", LookupTypeName = "EvaluationElementRatingLevelDescriptor"} },
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElementRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElementRating) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAreaOfRefinementSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsAreaOfRefinementSupported
        {
            get { return _isAreaOfRefinementSupported; }
            set { _isAreaOfRefinementSupported = value; }
        }

        private bool _isAreaOfReinforcementSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsAreaOfReinforcementSupported
        {
            get { return _isAreaOfReinforcementSupported; }
            set { _isAreaOfReinforcementSupported = value; }
        }

        private bool _isCommentsSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsCommentsSupported
        {
            get { return _isCommentsSupported; }
            set { _isCommentsSupported = value; }
        }

        private bool _isEvaluationElementRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingLevelDescriptorSupported
        {
            get { return _isEvaluationElementRatingLevelDescriptorSupported; }
            set { _isEvaluationElementRatingLevelDescriptorSupported = value; }
        }

        private bool _isEvaluationElementRatingResultsSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingResultsSupported
        {
            get { return _isEvaluationElementRatingResultsSupported; }
            set { _isEvaluationElementRatingResultsSupported = value; }
        }

        private bool _isFeedbackSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsFeedbackSupported
        {
            get { return _isFeedbackSupported; }
            set { _isFeedbackSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationElementRatingResult, bool> _isEvaluationElementRatingResultIncluded;
        Func<Entities.Common.TPDM.IEvaluationElementRatingResult, bool> Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingResultIncluded
        {
            get { return _isEvaluationElementRatingResultIncluded; }
            set { _isEvaluationElementRatingResultIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingResult table of the EvaluationElementRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationElementRatingResult, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementRatingResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationElementRatingResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationElementRating EvaluationElementRating { get; set; }

        Entities.Common.TPDM.IEvaluationElementRating IEvaluationElementRatingResult.EvaluationElementRating
        {
            get { return EvaluationElementRating; }
            set { EvaluationElementRating = (EvaluationElementRating) value; }
        }

        [DomainSignature]
        public virtual decimal Rating  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string RatingResultTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationElementRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("Rating", Rating);
            keyValues.Add("RatingResultTitle", RatingResultTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElementRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElementRatingResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationElementRating = (EvaluationElementRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationElementRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.EvaluationElementRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingLevelDescriptor table of the EvaluationElementRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EvaluationElementRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EvaluationElementRatingLevelDescriptorId", EvaluationElementRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationObjective

namespace EdFi.Ods.Entities.NHibernate.EvaluationObjectiveAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationObjective"/> entity.
    /// </summary>
    public class EvaluationObjectiveReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjective table of the EvaluationObjective aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjective : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationObjective, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationObjective()
        {
            EvaluationObjectiveRatingLevels = new HashSet<EvaluationObjectiveRatingLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EvaluationTypeDescriptorId 
        {
            get
            {
                if (_evaluationTypeDescriptorId == default(int?))
                    _evaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_evaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationTypeDescriptor", _evaluationTypeDescriptor);

                return _evaluationTypeDescriptorId;
            } 
            set
            {
                _evaluationTypeDescriptorId = value;
                _evaluationTypeDescriptor = null;
            }
        }

        private int? _evaluationTypeDescriptorId;
        private string _evaluationTypeDescriptor;

        public virtual string EvaluationTypeDescriptor
        {
            get
            {
                if (_evaluationTypeDescriptor == null)
                    _evaluationTypeDescriptor = _evaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationTypeDescriptor", _evaluationTypeDescriptorId.Value);
                    
                return _evaluationTypeDescriptor;
            }
            set
            {
                _evaluationTypeDescriptor = value;
                _evaluationTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        public virtual int? SortOrder  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationAggregate.TPDM.EvaluationReferenceData EvaluationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Evaluation discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationObjective.EvaluationDiscriminator
        {
            get { return EvaluationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Evaluation resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationObjective.EvaluationResourceId
        {
            get { return EvaluationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel> _evaluationObjectiveRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel> _evaluationObjectiveRatingLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel> EvaluationObjectiveRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationObjectiveRatingLevels)
                    if (item.EvaluationObjective == null)
                        item.EvaluationObjective = this;
                // -------------------------------------------------------------

                return _evaluationObjectiveRatingLevels;
            }
            set
            {
                _evaluationObjectiveRatingLevels = value;
                _evaluationObjectiveRatingLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel> Entities.Common.TPDM.IEvaluationObjective.EvaluationObjectiveRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationObjectiveRatingLevels)
                    if (item.EvaluationObjective == null)
                        item.EvaluationObjective = this;
                // -------------------------------------------------------------

                return _evaluationObjectiveRatingLevelsCovariant;
            }
            set
            {
                EvaluationObjectiveRatingLevels = new HashSet<Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel>(value.Cast<Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "EvaluationTypeDescriptorId", LookupTypeName = "EvaluationTypeDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationObjective) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationObjectiveRatingLevelsSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationObjectiveRatingLevelsSupported
        {
            get { return _isEvaluationObjectiveRatingLevelsSupported; }
            set { _isEvaluationObjectiveRatingLevelsSupported = value; }
        }

        private bool _isEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported
        {
            get { return _isEvaluationTypeDescriptorSupported; }
            set { _isEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        private bool _isSortOrderSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsSortOrderSupported
        {
            get { return _isSortOrderSupported; }
            set { _isSortOrderSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, bool> _isEvaluationObjectiveRatingLevelIncluded;
        Func<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, bool> Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationObjectiveRatingLevelIncluded
        {
            get { return _isEvaluationObjectiveRatingLevelIncluded; }
            set { _isEvaluationObjectiveRatingLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRatingLevel table of the EvaluationObjective aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationObjectiveRatingLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationObjective EvaluationObjective { get; set; }

        Entities.Common.TPDM.IEvaluationObjective IEvaluationObjectiveRatingLevel.EvaluationObjective
        {
            get { return EvaluationObjective; }
            set { EvaluationObjective = (EvaluationObjective) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int))
                    _evaluationRatingLevelDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationObjective as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationObjectiveRatingLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationObjective = (EvaluationObjective) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationObjectiveRating

namespace EdFi.Ods.Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationObjectiveRating"/> entity.
    /// </summary>
    public class EvaluationObjectiveRatingReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRating table of the EvaluationObjectiveRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRating : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationObjectiveRating, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationObjectiveRating()
        {
            EvaluationObjectiveRatingResults = new HashSet<EvaluationObjectiveRatingResult>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(1024), NoDangerousText]
        public virtual string Comments  { get; set; }
        public virtual int? ObjectiveRatingLevelDescriptorId 
        {
            get
            {
                if (_objectiveRatingLevelDescriptorId == default(int?))
                    _objectiveRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_objectiveRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ObjectiveRatingLevelDescriptor", _objectiveRatingLevelDescriptor);

                return _objectiveRatingLevelDescriptorId;
            } 
            set
            {
                _objectiveRatingLevelDescriptorId = value;
                _objectiveRatingLevelDescriptor = null;
            }
        }

        private int? _objectiveRatingLevelDescriptorId;
        private string _objectiveRatingLevelDescriptor;

        public virtual string ObjectiveRatingLevelDescriptor
        {
            get
            {
                if (_objectiveRatingLevelDescriptor == null)
                    _objectiveRatingLevelDescriptor = _objectiveRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ObjectiveRatingLevelDescriptor", _objectiveRatingLevelDescriptorId.Value);
                    
                return _objectiveRatingLevelDescriptor;
            }
            set
            {
                _objectiveRatingLevelDescriptor = value;
                _objectiveRatingLevelDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveReferenceData EvaluationObjectiveReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationObjective discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveDiscriminator
        {
            get { return EvaluationObjectiveReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationObjective resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveResourceId
        {
            get { return EvaluationObjectiveReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReferenceData EvaluationRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationRatingDiscriminator
        {
            get { return EvaluationRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationRatingResourceId
        {
            get { return EvaluationRatingReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult> _evaluationObjectiveRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingResult> _evaluationObjectiveRatingResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult> EvaluationObjectiveRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationObjectiveRatingResults)
                    if (item.EvaluationObjectiveRating == null)
                        item.EvaluationObjectiveRating = this;
                // -------------------------------------------------------------

                return _evaluationObjectiveRatingResults;
            }
            set
            {
                _evaluationObjectiveRatingResults = value;
                _evaluationObjectiveRatingResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingResult> Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationObjectiveRatingResults)
                    if (item.EvaluationObjectiveRating == null)
                        item.EvaluationObjectiveRating = this;
                // -------------------------------------------------------------

                return _evaluationObjectiveRatingResultsCovariant;
            }
            set
            {
                EvaluationObjectiveRatingResults = new HashSet<Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult>(value.Cast<Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "ObjectiveRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "ObjectiveRatingLevelDescriptorId", LookupTypeName = "ObjectiveRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationObjectiveRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationObjectiveRating) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCommentsSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsCommentsSupported
        {
            get { return _isCommentsSupported; }
            set { _isCommentsSupported = value; }
        }

        private bool _isEvaluationObjectiveRatingResultsSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsEvaluationObjectiveRatingResultsSupported
        {
            get { return _isEvaluationObjectiveRatingResultsSupported; }
            set { _isEvaluationObjectiveRatingResultsSupported = value; }
        }

        private bool _isObjectiveRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsObjectiveRatingLevelDescriptorSupported
        {
            get { return _isObjectiveRatingLevelDescriptorSupported; }
            set { _isObjectiveRatingLevelDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, bool> _isEvaluationObjectiveRatingResultIncluded;
        Func<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, bool> Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsEvaluationObjectiveRatingResultIncluded
        {
            get { return _isEvaluationObjectiveRatingResultIncluded; }
            set { _isEvaluationObjectiveRatingResultIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRatingResult table of the EvaluationObjectiveRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationObjectiveRatingResult, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationObjectiveRatingResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationObjectiveRatingResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationObjectiveRating EvaluationObjectiveRating { get; set; }

        Entities.Common.TPDM.IEvaluationObjectiveRating IEvaluationObjectiveRatingResult.EvaluationObjectiveRating
        {
            get { return EvaluationObjectiveRating; }
            set { EvaluationObjectiveRating = (EvaluationObjectiveRating) value; }
        }

        [DomainSignature]
        public virtual decimal Rating  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string RatingResultTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationObjectiveRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("Rating", Rating);
            keyValues.Add("RatingResultTitle", RatingResultTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationObjectiveRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationObjectiveRatingResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationObjectiveRating = (EvaluationObjectiveRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationPeriodDescriptor

namespace EdFi.Ods.Entities.NHibernate.EvaluationPeriodDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationPeriodDescriptor table of the EvaluationPeriodDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationPeriodDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEvaluationPeriodDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationPeriodDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationPeriodDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationRating

namespace EdFi.Ods.Entities.NHibernate.EvaluationRatingAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationRating"/> entity.
    /// </summary>
    public class EvaluationRatingReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRating table of the EvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRating : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationRating, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRating()
        {
            EvaluationRatingResults = new HashSet<EvaluationRatingResult>();
            EvaluationRatingReviewers = new HashSet<EvaluationRatingReviewer>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int?))
                    _evaluationRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_evaluationRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int? _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = _evaluationRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId.Value);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string LocalCourseCode  { get; set; }
        public virtual int? SchoolId  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string SectionIdentifier  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string SessionName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationAggregate.TPDM.EvaluationReferenceData EvaluationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Evaluation discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationRating.EvaluationDiscriminator
        {
            get { return EvaluationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Evaluation resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationRating.EvaluationResourceId
        {
            get { return EvaluationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReferenceData PerformanceEvaluationRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluationRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationRatingDiscriminator
        {
            get { return PerformanceEvaluationRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluationRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationRatingResourceId
        {
            get { return PerformanceEvaluationRatingReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SectionAggregate.EdFi.SectionReferenceData SectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Section discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationRating.SectionDiscriminator
        {
            get { return SectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Section resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationRating.SectionResourceId
        {
            get { return SectionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult> _evaluationRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingResult> _evaluationRatingResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult> EvaluationRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingResults)
                    if (item.EvaluationRating == null)
                        item.EvaluationRating = this;
                // -------------------------------------------------------------

                return _evaluationRatingResults;
            }
            set
            {
                _evaluationRatingResults = value;
                _evaluationRatingResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationRatingResult, Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingResult> Entities.Common.TPDM.IEvaluationRating.EvaluationRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingResults)
                    if (item.EvaluationRating == null)
                        item.EvaluationRating = this;
                // -------------------------------------------------------------

                return _evaluationRatingResultsCovariant;
            }
            set
            {
                EvaluationRatingResults = new HashSet<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult>(value.Cast<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult>());
            }
        }


        private ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer> _evaluationRatingReviewers;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingReviewer> _evaluationRatingReviewersCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer> EvaluationRatingReviewers
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingReviewers)
                    if (item.EvaluationRating == null)
                        item.EvaluationRating = this;
                // -------------------------------------------------------------

                return _evaluationRatingReviewers;
            }
            set
            {
                _evaluationRatingReviewers = value;
                _evaluationRatingReviewersCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationRatingReviewer, Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingReviewer> Entities.Common.TPDM.IEvaluationRating.EvaluationRatingReviewers
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingReviewers)
                    if (item.EvaluationRating == null)
                        item.EvaluationRating = this;
                // -------------------------------------------------------------

                return _evaluationRatingReviewersCovariant;
            }
            set
            {
                EvaluationRatingReviewers = new HashSet<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer>(value.Cast<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRating) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingLevelDescriptorSupported
        {
            get { return _isEvaluationRatingLevelDescriptorSupported; }
            set { _isEvaluationRatingLevelDescriptorSupported = value; }
        }

        private bool _isEvaluationRatingResultsSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingResultsSupported
        {
            get { return _isEvaluationRatingResultsSupported; }
            set { _isEvaluationRatingResultsSupported = value; }
        }

        private bool _isEvaluationRatingReviewersSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingReviewersSupported
        {
            get { return _isEvaluationRatingReviewersSupported; }
            set { _isEvaluationRatingReviewersSupported = value; }
        }

        private bool _isLocalCourseCodeSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsLocalCourseCodeSupported
        {
            get { return _isLocalCourseCodeSupported; }
            set { _isLocalCourseCodeSupported = value; }
        }

        private bool _isSchoolIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSchoolIdSupported
        {
            get { return _isSchoolIdSupported; }
            set { _isSchoolIdSupported = value; }
        }

        private bool _isSectionIdentifierSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSectionIdentifierSupported
        {
            get { return _isSectionIdentifierSupported; }
            set { _isSectionIdentifierSupported = value; }
        }

        private bool _isSessionNameSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSessionNameSupported
        {
            get { return _isSessionNameSupported; }
            set { _isSessionNameSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationRatingResult, bool> _isEvaluationRatingResultIncluded;
        Func<Entities.Common.TPDM.IEvaluationRatingResult, bool> Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingResultIncluded
        {
            get { return _isEvaluationRatingResultIncluded; }
            set { _isEvaluationRatingResultIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationRatingReviewer, bool> _isEvaluationRatingReviewerIncluded;
        Func<Entities.Common.TPDM.IEvaluationRatingReviewer, bool> Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingReviewerIncluded
        {
            get { return _isEvaluationRatingReviewerIncluded; }
            set { _isEvaluationRatingReviewerIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingResult table of the EvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationRatingResult, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRatingResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationRating EvaluationRating { get; set; }

        Entities.Common.TPDM.IEvaluationRating IEvaluationRatingResult.EvaluationRating
        {
            get { return EvaluationRating; }
            set { EvaluationRating = (EvaluationRating) value; }
        }

        [DomainSignature]
        public virtual decimal Rating  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string RatingResultTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("Rating", Rating);
            keyValues.Add("RatingResultTitle", RatingResultTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationRating = (EvaluationRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingReviewer table of the EvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewer : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationRatingReviewer, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRatingReviewer()
        {
           EvaluationRatingReviewerReceivedTrainingPersistentList = new HashSet<EvaluationRatingReviewerReceivedTraining>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationRating EvaluationRating { get; set; }

        Entities.Common.TPDM.IEvaluationRating IEvaluationRatingReviewer.EvaluationRating
        {
            get { return EvaluationRating; }
            set { EvaluationRating = (EvaluationRating) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string FirstName  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string LastSurname  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(32), NoDangerousText]
        public virtual string ReviewerPersonId  { get; set; }
        public virtual int? ReviewerSourceSystemDescriptorId 
        {
            get
            {
                if (_reviewerSourceSystemDescriptorId == default(int?))
                    _reviewerSourceSystemDescriptorId = string.IsNullOrWhiteSpace(_reviewerSourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _reviewerSourceSystemDescriptor);

                return _reviewerSourceSystemDescriptorId;
            } 
            set
            {
                _reviewerSourceSystemDescriptorId = value;
                _reviewerSourceSystemDescriptor = null;
            }
        }

        private int? _reviewerSourceSystemDescriptorId;
        private string _reviewerSourceSystemDescriptor;

        public virtual string ReviewerSourceSystemDescriptor
        {
            get
            {
                if (_reviewerSourceSystemDescriptor == null)
                    _reviewerSourceSystemDescriptor = _reviewerSourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _reviewerSourceSystemDescriptorId.Value);
                    
                return _reviewerSourceSystemDescriptor;
            }
            set
            {
                _reviewerSourceSystemDescriptor = value;
                _reviewerSourceSystemDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewerReceivedTraining EvaluationRatingReviewerReceivedTraining
        {
            get
            {
                // Return the item in the list, if one exists
                if (EvaluationRatingReviewerReceivedTrainingPersistentList.Any())
                    return EvaluationRatingReviewerReceivedTrainingPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (EvaluationRatingReviewerReceivedTrainingPersistentList.Any())
                    EvaluationRatingReviewerReceivedTrainingPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.EvaluationRatingReviewer = this;

                    EvaluationRatingReviewerReceivedTrainingPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining Entities.Common.TPDM.IEvaluationRatingReviewer.EvaluationRatingReviewerReceivedTraining
        {
            get { return EvaluationRatingReviewerReceivedTraining; }
            set { EvaluationRatingReviewerReceivedTraining = (Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewerReceivedTraining) value; }
        }

        private ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewerReceivedTraining> _evaluationRatingReviewerReceivedTrainingPersistentList;

        public virtual ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewerReceivedTraining> EvaluationRatingReviewerReceivedTrainingPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingReviewerReceivedTrainingPersistentList)
                    if (item.EvaluationRatingReviewer == null)
                        item.EvaluationRatingReviewer = this;
                // -------------------------------------------------------------

                return _evaluationRatingReviewerReceivedTrainingPersistentList;
            }
            set
            {
                _evaluationRatingReviewerReceivedTrainingPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData ReviewerPersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the ReviewerPerson discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonDiscriminator
        {
            get { return ReviewerPersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the ReviewerPerson resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonResourceId
        {
            get { return ReviewerPersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ReviewerSourceSystemDescriptor", new LookupColumnDetails { PropertyName = "ReviewerSourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("FirstName", FirstName);
            keyValues.Add("LastSurname", LastSurname);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingReviewer)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingReviewer) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationRating = (EvaluationRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationRatingReviewerReceivedTrainingSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsEvaluationRatingReviewerReceivedTrainingSupported
        {
            get { return _isEvaluationRatingReviewerReceivedTrainingSupported; }
            set { _isEvaluationRatingReviewerReceivedTrainingSupported = value; }
        }

        private bool _isReviewerPersonIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerPersonIdSupported
        {
            get { return _isReviewerPersonIdSupported; }
            set { _isReviewerPersonIdSupported = value; }
        }

        private bool _isReviewerSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerSourceSystemDescriptorSupported
        {
            get { return _isReviewerSourceSystemDescriptorSupported; }
            set { _isReviewerSourceSystemDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingReviewerReceivedTraining table of the EvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewerReceivedTraining : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRatingReviewerReceivedTraining()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationRatingReviewer EvaluationRatingReviewer { get; set; }

        Entities.Common.TPDM.IEvaluationRatingReviewer IEvaluationRatingReviewerReceivedTraining.EvaluationRatingReviewer
        {
            get { return EvaluationRatingReviewer; }
            set { EvaluationRatingReviewer = (EvaluationRatingReviewer) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? InterRaterReliabilityScore  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? ReceivedTrainingDate 
        {
            get { return _receivedTrainingDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _receivedTrainingDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _receivedTrainingDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _receivedTrainingDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationRatingReviewer as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationRatingReviewer = (EvaluationRatingReviewer) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isInterRaterReliabilityScoreSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported
        {
            get { return _isInterRaterReliabilityScoreSupported; }
            set { _isInterRaterReliabilityScoreSupported = value; }
        }

        private bool _isReceivedTrainingDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsReceivedTrainingDateSupported
        {
            get { return _isReceivedTrainingDateSupported; }
            set { _isReceivedTrainingDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.EvaluationRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingLevelDescriptor table of the EvaluationRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEvaluationRatingLevelDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.EvaluationTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationTypeDescriptor table of the EvaluationTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEvaluationTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EvaluationTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EvaluationTypeDescriptorId", EvaluationTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: FederalLocaleCodeDescriptor

namespace EdFi.Ods.Entities.NHibernate.FederalLocaleCodeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FederalLocaleCodeDescriptor table of the FederalLocaleCodeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FederalLocaleCodeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IFederalLocaleCodeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int FederalLocaleCodeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FederalLocaleCodeDescriptorId", FederalLocaleCodeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFederalLocaleCodeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFederalLocaleCodeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: FieldworkExperience

namespace EdFi.Ods.Entities.NHibernate.FieldworkExperienceAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="FieldworkExperience"/> entity.
    /// </summary>
    public class FieldworkExperienceReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime BeginDate { get; set; }
        public virtual string FieldworkIdentifier { get; set; }
        public virtual int StudentUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FieldworkIdentifier", FieldworkIdentifier);
            keyValues.Add("StudentUSI", StudentUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperience table of the FieldworkExperience aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperience : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IFieldworkExperience, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public FieldworkExperience()
        {
           FieldworkExperienceCoteachingPersistentList = new HashSet<FieldworkExperienceCoteaching>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string FieldworkIdentifier  { get; set; }
        [Display(Name="StudentUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Student")]
        public virtual int StudentUSI 
        {
            get
            {
                if (_studentUSI == default(int))
                    _studentUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Student", _studentUniqueId);

                return _studentUSI;
            } 
            set
            {
                _studentUSI = value;
            }
        }

        private int _studentUSI;
        private string _studentUniqueId;

        [RequiredWithNonDefault]
        public virtual string StudentUniqueId
        {
            get
            {
                if (_studentUniqueId == null)
                    _studentUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Student", _studentUSI);
                    
                return _studentUniqueId;
            }
            set
            {
                if (_studentUniqueId != value)
                        _studentUSI = default(int);

                _studentUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EducationOrganizationId  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [RequiredWithNonDefault]
        public virtual int FieldworkTypeDescriptorId 
        {
            get
            {
                if (_fieldworkTypeDescriptorId == default(int))
                    _fieldworkTypeDescriptorId = DescriptorsCache.GetCache().GetId("FieldworkTypeDescriptor", _fieldworkTypeDescriptor);

                return _fieldworkTypeDescriptorId;
            } 
            set
            {
                _fieldworkTypeDescriptorId = value;
                _fieldworkTypeDescriptor = null;
            }
        }

        private int _fieldworkTypeDescriptorId;
        private string _fieldworkTypeDescriptor;

        public virtual string FieldworkTypeDescriptor
        {
            get
            {
                if (_fieldworkTypeDescriptor == null)
                    _fieldworkTypeDescriptor = DescriptorsCache.GetCache().GetValue("FieldworkTypeDescriptor", _fieldworkTypeDescriptorId);
                    
                return _fieldworkTypeDescriptor;
            }
            set
            {
                _fieldworkTypeDescriptor = value;
                _fieldworkTypeDescriptorId = default(int);
            }
        }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? HoursCompleted  { get; set; }
        public virtual int? ProgramGatewayDescriptorId 
        {
            get
            {
                if (_programGatewayDescriptorId == default(int?))
                    _programGatewayDescriptorId = string.IsNullOrWhiteSpace(_programGatewayDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ProgramGatewayDescriptor", _programGatewayDescriptor);

                return _programGatewayDescriptorId;
            } 
            set
            {
                _programGatewayDescriptorId = value;
                _programGatewayDescriptor = null;
            }
        }

        private int? _programGatewayDescriptorId;
        private string _programGatewayDescriptor;

        public virtual string ProgramGatewayDescriptor
        {
            get
            {
                if (_programGatewayDescriptor == null)
                    _programGatewayDescriptor = _programGatewayDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ProgramGatewayDescriptor", _programGatewayDescriptorId.Value);
                    
                return _programGatewayDescriptor;
            }
            set
            {
                _programGatewayDescriptor = value;
                _programGatewayDescriptorId = default(int?);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string ProgramName  { get; set; }
        public virtual int? ProgramTypeDescriptorId 
        {
            get
            {
                if (_programTypeDescriptorId == default(int?))
                    _programTypeDescriptorId = string.IsNullOrWhiteSpace(_programTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ProgramTypeDescriptor", _programTypeDescriptor);

                return _programTypeDescriptorId;
            } 
            set
            {
                _programTypeDescriptorId = value;
                _programTypeDescriptor = null;
            }
        }

        private int? _programTypeDescriptorId;
        private string _programTypeDescriptor;

        public virtual string ProgramTypeDescriptor
        {
            get
            {
                if (_programTypeDescriptor == null)
                    _programTypeDescriptor = _programTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ProgramTypeDescriptor", _programTypeDescriptorId.Value);
                    
                return _programTypeDescriptor;
            }
            set
            {
                _programTypeDescriptor = value;
                _programTypeDescriptorId = default(int?);
            }
        }
        public virtual int? SchoolId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceCoteaching FieldworkExperienceCoteaching
        {
            get
            {
                // Return the item in the list, if one exists
                if (FieldworkExperienceCoteachingPersistentList.Any())
                    return FieldworkExperienceCoteachingPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (FieldworkExperienceCoteachingPersistentList.Any())
                    FieldworkExperienceCoteachingPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.FieldworkExperience = this;

                    FieldworkExperienceCoteachingPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IFieldworkExperienceCoteaching Entities.Common.TPDM.IFieldworkExperience.FieldworkExperienceCoteaching
        {
            get { return FieldworkExperienceCoteaching; }
            set { FieldworkExperienceCoteaching = (Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceCoteaching) value; }
        }

        private ICollection<Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceCoteaching> _fieldworkExperienceCoteachingPersistentList;

        public virtual ICollection<Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceCoteaching> FieldworkExperienceCoteachingPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _fieldworkExperienceCoteachingPersistentList)
                    if (item.FieldworkExperience == null)
                        item.FieldworkExperience = this;
                // -------------------------------------------------------------

                return _fieldworkExperienceCoteachingPersistentList;
            }
            set
            {
                _fieldworkExperienceCoteachingPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramReferenceData EducatorPreparationProgramReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducatorPreparationProgram discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IFieldworkExperience.EducatorPreparationProgramDiscriminator
        {
            get { return EducatorPreparationProgramReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducatorPreparationProgram resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperience.EducatorPreparationProgramResourceId
        {
            get { return EducatorPreparationProgramReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData SchoolReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the School resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperience.SchoolResourceId
        {
            get { return SchoolReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StudentAggregate.EdFi.StudentReferenceData StudentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Student discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IFieldworkExperience.StudentDiscriminator
        {
            get { return StudentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Student resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperience.StudentResourceId
        {
            get { return StudentReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FieldworkTypeDescriptor", new LookupColumnDetails { PropertyName = "FieldworkTypeDescriptorId", LookupTypeName = "FieldworkTypeDescriptor"} },
                { "ProgramGatewayDescriptor", new LookupColumnDetails { PropertyName = "ProgramGatewayDescriptorId", LookupTypeName = "ProgramGatewayDescriptor"} },
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FieldworkIdentifier", FieldworkIdentifier);
            keyValues.Add("StudentUSI", StudentUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkExperience)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkExperience) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isFieldworkExperienceCoteachingSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsFieldworkExperienceCoteachingSupported
        {
            get { return _isFieldworkExperienceCoteachingSupported; }
            set { _isFieldworkExperienceCoteachingSupported = value; }
        }

        private bool _isFieldworkTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsFieldworkTypeDescriptorSupported
        {
            get { return _isFieldworkTypeDescriptorSupported; }
            set { _isFieldworkTypeDescriptorSupported = value; }
        }

        private bool _isHoursCompletedSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsHoursCompletedSupported
        {
            get { return _isHoursCompletedSupported; }
            set { _isHoursCompletedSupported = value; }
        }

        private bool _isProgramGatewayDescriptorSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsProgramGatewayDescriptorSupported
        {
            get { return _isProgramGatewayDescriptorSupported; }
            set { _isProgramGatewayDescriptorSupported = value; }
        }

        private bool _isProgramNameSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsProgramNameSupported
        {
            get { return _isProgramNameSupported; }
            set { _isProgramNameSupported = value; }
        }

        private bool _isProgramTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsProgramTypeDescriptorSupported
        {
            get { return _isProgramTypeDescriptorSupported; }
            set { _isProgramTypeDescriptorSupported = value; }
        }

        private bool _isSchoolIdSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsSchoolIdSupported
        {
            get { return _isSchoolIdSupported; }
            set { _isSchoolIdSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperienceCoteaching table of the FieldworkExperience aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceCoteaching : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IFieldworkExperienceCoteaching, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public FieldworkExperienceCoteaching()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual FieldworkExperience FieldworkExperience { get; set; }

        Entities.Common.TPDM.IFieldworkExperience IFieldworkExperienceCoteaching.FieldworkExperience
        {
            get { return FieldworkExperience; }
            set { FieldworkExperience = (FieldworkExperience) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime CoteachingBeginDate 
        {
            get { return _coteachingBeginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _coteachingBeginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _coteachingBeginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? CoteachingEndDate 
        {
            get { return _coteachingEndDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _coteachingEndDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _coteachingEndDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _coteachingEndDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (FieldworkExperience as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkExperienceCoteaching)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkExperienceCoteaching) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            FieldworkExperience = (FieldworkExperience) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCoteachingBeginDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport.IsCoteachingBeginDateSupported
        {
            get { return _isCoteachingBeginDateSupported; }
            set { _isCoteachingBeginDateSupported = value; }
        }

        private bool _isCoteachingEndDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport.IsCoteachingEndDateSupported
        {
            get { return _isCoteachingEndDateSupported; }
            set { _isCoteachingEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: FieldworkExperienceSectionAssociation

namespace EdFi.Ods.Entities.NHibernate.FieldworkExperienceSectionAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="FieldworkExperienceSectionAssociation"/> entity.
    /// </summary>
    public class FieldworkExperienceSectionAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime BeginDate { get; set; }
        public virtual string FieldworkIdentifier { get; set; }
        public virtual string LocalCourseCode { get; set; }
        public virtual int SchoolId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string SectionIdentifier { get; set; }
        public virtual string SessionName { get; set; }
        public virtual int StudentUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FieldworkIdentifier", FieldworkIdentifier);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("StudentUSI", StudentUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperienceSectionAssociation table of the FieldworkExperienceSectionAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceSectionAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IFieldworkExperienceSectionAssociation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkExperienceSectionAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public FieldworkExperienceSectionAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string FieldworkIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string LocalCourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SchoolId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SectionIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SessionName  { get; set; }
        [Display(Name="StudentUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Student")]
        public virtual int StudentUSI 
        {
            get
            {
                if (_studentUSI == default(int))
                    _studentUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Student", _studentUniqueId);

                return _studentUSI;
            } 
            set
            {
                _studentUSI = value;
            }
        }

        private int _studentUSI;
        private string _studentUniqueId;

        [RequiredWithNonDefault]
        public virtual string StudentUniqueId
        {
            get
            {
                if (_studentUniqueId == null)
                    _studentUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Student", _studentUSI);
                    
                return _studentUniqueId;
            }
            set
            {
                if (_studentUniqueId != value)
                        _studentUSI = default(int);

                _studentUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceReferenceData FieldworkExperienceReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the FieldworkExperience discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.FieldworkExperienceDiscriminator
        {
            get { return FieldworkExperienceReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the FieldworkExperience resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.FieldworkExperienceResourceId
        {
            get { return FieldworkExperienceReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SectionAggregate.EdFi.SectionReferenceData SectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Section discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SectionDiscriminator
        {
            get { return SectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Section resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SectionResourceId
        {
            get { return SectionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FieldworkIdentifier", FieldworkIdentifier);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("StudentUSI", StudentUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkExperienceSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkExperienceSectionAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: FieldworkTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.FieldworkTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkTypeDescriptor table of the FieldworkTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IFieldworkTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int FieldworkTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FieldworkTypeDescriptorId", FieldworkTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: FundingSourceDescriptor

namespace EdFi.Ods.Entities.NHibernate.FundingSourceDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FundingSourceDescriptor table of the FundingSourceDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FundingSourceDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IFundingSourceDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int FundingSourceDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FundingSourceDescriptorId", FundingSourceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFundingSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFundingSourceDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: GenderDescriptor

namespace EdFi.Ods.Entities.NHibernate.GenderDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.GenderDescriptor table of the GenderDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class GenderDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IGenderDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int GenderDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("GenderDescriptorId", GenderDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IGenderDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IGenderDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Goal

namespace EdFi.Ods.Entities.NHibernate.GoalAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Goal"/> entity.
    /// </summary>
    public class GoalReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime AssignmentDate { get; set; }
        public virtual string GoalTitle { get; set; }
        public virtual string PersonId { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AssignmentDate", AssignmentDate);
            keyValues.Add("GoalTitle", GoalTitle);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Goal table of the Goal aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Goal : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IGoal, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IGoalSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Goal()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime AssignmentDate 
        {
            get { return _assignmentDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _assignmentDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _assignmentDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string GoalTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(1024), NoDangerousText]
        public virtual string Comments  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? CompletedDate 
        {
            get { return _completedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _completedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _completedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _completedDate;
        
        public virtual bool? CompletedIndicator  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? DueDate 
        {
            get { return _dueDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _dueDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _dueDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _dueDate;
        
        public virtual int? EducationOrganizationId  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string EvaluationElementTitle  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        public virtual int? EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int?))
                    _evaluationPeriodDescriptorId = string.IsNullOrWhiteSpace(_evaluationPeriodDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int? _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = _evaluationPeriodDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId.Value);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int?);
            }
        }
        [StringLength(50), NoDangerousText]
        public virtual string EvaluationTitle  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string GoalDescription  { get; set; }
        public virtual int? GoalTypeDescriptorId 
        {
            get
            {
                if (_goalTypeDescriptorId == default(int?))
                    _goalTypeDescriptorId = string.IsNullOrWhiteSpace(_goalTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GoalTypeDescriptor", _goalTypeDescriptor);

                return _goalTypeDescriptorId;
            } 
            set
            {
                _goalTypeDescriptorId = value;
                _goalTypeDescriptor = null;
            }
        }

        private int? _goalTypeDescriptorId;
        private string _goalTypeDescriptor;

        public virtual string GoalTypeDescriptor
        {
            get
            {
                if (_goalTypeDescriptor == null)
                    _goalTypeDescriptor = _goalTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GoalTypeDescriptor", _goalTypeDescriptorId.Value);
                    
                return _goalTypeDescriptor;
            }
            set
            {
                _goalTypeDescriptor = value;
                _goalTypeDescriptorId = default(int?);
            }
        }
        [StringLength(50), NoDangerousText]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        public virtual int? PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int?))
                    _performanceEvaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_performanceEvaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int? _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = _performanceEvaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId.Value);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int?);
            }
        }
        public virtual short? SchoolYear  { get; set; }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IGoal.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IGoal.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IGoal.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IGoal.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "GoalTypeDescriptor", new LookupColumnDetails { PropertyName = "GoalTypeDescriptorId", LookupTypeName = "GoalTypeDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AssignmentDate", AssignmentDate);
            keyValues.Add("GoalTitle", GoalTitle);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IGoal)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IGoal) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCommentsSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCommentsSupported
        {
            get { return _isCommentsSupported; }
            set { _isCommentsSupported = value; }
        }

        private bool _isCompletedDateSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCompletedDateSupported
        {
            get { return _isCompletedDateSupported; }
            set { _isCompletedDateSupported = value; }
        }

        private bool _isCompletedIndicatorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCompletedIndicatorSupported
        {
            get { return _isCompletedIndicatorSupported; }
            set { _isCompletedIndicatorSupported = value; }
        }

        private bool _isDueDateSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsDueDateSupported
        {
            get { return _isDueDateSupported; }
            set { _isDueDateSupported = value; }
        }

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEvaluationElementTitleSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationElementTitleSupported
        {
            get { return _isEvaluationElementTitleSupported; }
            set { _isEvaluationElementTitleSupported = value; }
        }

        private bool _isEvaluationObjectiveTitleSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationObjectiveTitleSupported
        {
            get { return _isEvaluationObjectiveTitleSupported; }
            set { _isEvaluationObjectiveTitleSupported = value; }
        }

        private bool _isEvaluationPeriodDescriptorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationPeriodDescriptorSupported
        {
            get { return _isEvaluationPeriodDescriptorSupported; }
            set { _isEvaluationPeriodDescriptorSupported = value; }
        }

        private bool _isEvaluationTitleSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationTitleSupported
        {
            get { return _isEvaluationTitleSupported; }
            set { _isEvaluationTitleSupported = value; }
        }

        private bool _isGoalDescriptionSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsGoalDescriptionSupported
        {
            get { return _isGoalDescriptionSupported; }
            set { _isGoalDescriptionSupported = value; }
        }

        private bool _isGoalTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsGoalTypeDescriptorSupported
        {
            get { return _isGoalTypeDescriptorSupported; }
            set { _isGoalTypeDescriptorSupported = value; }
        }

        private bool _isPerformanceEvaluationTitleSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsPerformanceEvaluationTitleSupported
        {
            get { return _isPerformanceEvaluationTitleSupported; }
            set { _isPerformanceEvaluationTitleSupported = value; }
        }

        private bool _isPerformanceEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsPerformanceEvaluationTypeDescriptorSupported
        {
            get { return _isPerformanceEvaluationTypeDescriptorSupported; }
            set { _isPerformanceEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: GoalTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.GoalTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.GoalTypeDescriptor table of the GoalTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class GoalTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IGoalTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int GoalTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("GoalTypeDescriptorId", GoalTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IGoalTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IGoalTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: GraduationPlan

namespace EdFi.Ods.Entities.NHibernate.GraduationPlanAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.GraduationPlanRequiredCertification table of the GraduationPlan aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class GraduationPlanRequiredCertification : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IGraduationPlanRequiredCertification, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public GraduationPlanRequiredCertification()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.GraduationPlan GraduationPlan { get; set; }

        Entities.Common.TPDM.IGraduationPlanExtension IGraduationPlanRequiredCertification.GraduationPlanExtension
        {
            get { return (IGraduationPlanExtension) GraduationPlan.Extensions["TPDM"]; }
            set { GraduationPlan.Extensions["TPDM"] = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string CertificationTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(60), NoDangerousText]
        public virtual string CertificationIdentifier  { get; set; }
        public virtual int? CertificationRouteDescriptorId 
        {
            get
            {
                if (_certificationRouteDescriptorId == default(int?))
                    _certificationRouteDescriptorId = string.IsNullOrWhiteSpace(_certificationRouteDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationRouteDescriptor", _certificationRouteDescriptor);

                return _certificationRouteDescriptorId;
            } 
            set
            {
                _certificationRouteDescriptorId = value;
                _certificationRouteDescriptor = null;
            }
        }

        private int? _certificationRouteDescriptorId;
        private string _certificationRouteDescriptor;

        public virtual string CertificationRouteDescriptor
        {
            get
            {
                if (_certificationRouteDescriptor == null)
                    _certificationRouteDescriptor = _certificationRouteDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationRouteDescriptor", _certificationRouteDescriptorId.Value);
                    
                return _certificationRouteDescriptor;
            }
            set
            {
                _certificationRouteDescriptor = value;
                _certificationRouteDescriptorId = default(int?);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string Namespace  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CertificationAggregate.TPDM.CertificationReferenceData CertificationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Certification discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IGraduationPlanRequiredCertification.CertificationDiscriminator
        {
            get { return CertificationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Certification resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IGraduationPlanRequiredCertification.CertificationResourceId
        {
            get { return CertificationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationRouteDescriptor", new LookupColumnDetails { PropertyName = "CertificationRouteDescriptorId", LookupTypeName = "CertificationRouteDescriptor"} },
                { "GraduationPlanTypeDescriptor", new LookupColumnDetails { PropertyName = "GraduationPlanTypeDescriptorId", LookupTypeName = "GraduationPlanTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (GraduationPlan as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CertificationTitle", CertificationTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IGraduationPlanRequiredCertification)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IGraduationPlanRequiredCertification) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            GraduationPlan = (EdFi.GraduationPlan) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCertificationIdentifierSupported = true;
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsCertificationIdentifierSupported
        {
            get { return _isCertificationIdentifierSupported; }
            set { _isCertificationIdentifierSupported = value; }
        }

        private bool _isCertificationRouteDescriptorSupported = true;
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsCertificationRouteDescriptorSupported
        {
            get { return _isCertificationRouteDescriptorSupported; }
            set { _isCertificationRouteDescriptorSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        // -----------------------------------------
    }

    /// <summary>
    /// An implicitly created entity extension class to enable entity mapping and sychronization behavior for the GraduationPlan entity's aggregate extensions.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class GraduationPlanExtension : IGraduationPlanExtension, IGraduationPlanExtensionSynchronizationSourceSupport, IChildEntity, IImplicitEntityExtension, IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private EdFi.GraduationPlan _graduationPlan;

        Common.EdFi.IGraduationPlan IGraduationPlanExtension.GraduationPlan
        {
            get { return _graduationPlan; }
            set { _graduationPlan = (EdFi.GraduationPlan) value; }
        }

        private EdFi.GraduationPlan GraduationPlan
        {
            get { return (this as IGraduationPlanExtension).GraduationPlan as EdFi.GraduationPlan; }
        }

        bool IImplicitEntityExtension.IsEmpty()
        {
            return (true
                && ((IList<object>) _graduationPlan.AggregateExtensions["TPDM_GraduationPlanRequiredCertifications"]).Count == 0
            );
        }

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        ICollection<IGraduationPlanRequiredCertification> IGraduationPlanExtension.GraduationPlanRequiredCertifications
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, GraduationPlanRequiredCertification>((IList<object>) _graduationPlan.AggregateExtensions["TPDM_GraduationPlanRequiredCertifications"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (GraduationPlanRequiredCertification item in sourceList)
                    if (item.GraduationPlan == null)
                        item.GraduationPlan = this.GraduationPlan;
                // -------------------------------------------------------------

                var adaptedList = new CovariantCollectionAdapter<IGraduationPlanRequiredCertification, GraduationPlanRequiredCertification>(sourceList);

                return adaptedList;
            }
            set
            {
                _graduationPlan.AggregateExtensions["TPDM_GraduationPlanRequiredCertifications"] = value;
            }
        }
        // -------------------------------------------------------------

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanExtension) target, null);
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanExtension) target);
        }

        void IChildEntity.SetParent(object value)
        {
            _graduationPlan = (EdFi.GraduationPlan)value;
        }

        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            return (_graduationPlan as IHasPrimaryKeyValues).GetPrimaryKeyValues();
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------
        bool IGraduationPlanExtensionSynchronizationSourceSupport.IsGraduationPlanRequiredCertificationsSupported { get; set; } = true;
        Func<IGraduationPlanRequiredCertification, bool> IGraduationPlanExtensionSynchronizationSourceSupport.IsGraduationPlanRequiredCertificationIncluded { get; set; }

        void IGetByExample.SuspendReferenceAssignmentCheck() { }
    }
}
// Aggregate: HireStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.HireStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.HireStatusDescriptor table of the HireStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class HireStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IHireStatusDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int HireStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("HireStatusDescriptorId", HireStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IHireStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IHireStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: HiringSourceDescriptor

namespace EdFi.Ods.Entities.NHibernate.HiringSourceDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.HiringSourceDescriptor table of the HiringSourceDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class HiringSourceDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IHiringSourceDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int HiringSourceDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("HiringSourceDescriptorId", HiringSourceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IHiringSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IHiringSourceDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: InstructionalSettingDescriptor

namespace EdFi.Ods.Entities.NHibernate.InstructionalSettingDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.InstructionalSettingDescriptor table of the InstructionalSettingDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class InstructionalSettingDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IInstructionalSettingDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int InstructionalSettingDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("InstructionalSettingDescriptorId", InstructionalSettingDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IInstructionalSettingDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IInstructionalSettingDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: LengthOfContractDescriptor

namespace EdFi.Ods.Entities.NHibernate.LengthOfContractDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.LengthOfContractDescriptor table of the LengthOfContractDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class LengthOfContractDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ILengthOfContractDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int LengthOfContractDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("LengthOfContractDescriptorId", LengthOfContractDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ILengthOfContractDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ILengthOfContractDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ILengthOfContractDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Entities.NHibernate.LocalEducationAgencyAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.LocalEducationAgencyExtension table of the LocalEducationAgency aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class LocalEducationAgencyExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ILocalEducationAgencyExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ILocalEducationAgencyExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public LocalEducationAgencyExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.LocalEducationAgency LocalEducationAgency { get; set; }

        Entities.Common.EdFi.ILocalEducationAgency ILocalEducationAgencyExtension.LocalEducationAgency
        {
            get { return LocalEducationAgency; }
            set { LocalEducationAgency = (EdFi.LocalEducationAgency) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (LocalEducationAgency as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ILocalEducationAgencyExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ILocalEducationAgencyExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            LocalEducationAgency = (EdFi.LocalEducationAgency) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.ILocalEducationAgencyExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ObjectiveRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.ObjectiveRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ObjectiveRatingLevelDescriptor table of the ObjectiveRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ObjectiveRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IObjectiveRatingLevelDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ObjectiveRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ObjectiveRatingLevelDescriptorId", ObjectiveRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IObjectiveRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IObjectiveRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionExtension table of the OpenStaffPosition aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IOpenStaffPositionExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public OpenStaffPositionExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.OpenStaffPosition OpenStaffPosition { get; set; }

        Entities.Common.EdFi.IOpenStaffPosition IOpenStaffPositionExtension.OpenStaffPosition
        {
            get { return OpenStaffPosition; }
            set { OpenStaffPosition = (EdFi.OpenStaffPosition) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-9.9999", "9.9999")]
        public virtual decimal? FullTimeEquivalency  { get; set; }
        public virtual int? FundingSourceDescriptorId 
        {
            get
            {
                if (_fundingSourceDescriptorId == default(int?))
                    _fundingSourceDescriptorId = string.IsNullOrWhiteSpace(_fundingSourceDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FundingSourceDescriptor", _fundingSourceDescriptor);

                return _fundingSourceDescriptorId;
            } 
            set
            {
                _fundingSourceDescriptorId = value;
                _fundingSourceDescriptor = null;
            }
        }

        private int? _fundingSourceDescriptorId;
        private string _fundingSourceDescriptor;

        public virtual string FundingSourceDescriptor
        {
            get
            {
                if (_fundingSourceDescriptor == null)
                    _fundingSourceDescriptor = _fundingSourceDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FundingSourceDescriptor", _fundingSourceDescriptorId.Value);
                    
                return _fundingSourceDescriptor;
            }
            set
            {
                _fundingSourceDescriptor = value;
                _fundingSourceDescriptorId = default(int?);
            }
        }
        public virtual bool? HighNeedAcademicSubject  { get; set; }
        public virtual bool? IsActive  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? MaxSalary  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? MinSalary  { get; set; }
        public virtual int? OpenStaffPositionReasonDescriptorId 
        {
            get
            {
                if (_openStaffPositionReasonDescriptorId == default(int?))
                    _openStaffPositionReasonDescriptorId = string.IsNullOrWhiteSpace(_openStaffPositionReasonDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("OpenStaffPositionReasonDescriptor", _openStaffPositionReasonDescriptor);

                return _openStaffPositionReasonDescriptorId;
            } 
            set
            {
                _openStaffPositionReasonDescriptorId = value;
                _openStaffPositionReasonDescriptor = null;
            }
        }

        private int? _openStaffPositionReasonDescriptorId;
        private string _openStaffPositionReasonDescriptor;

        public virtual string OpenStaffPositionReasonDescriptor
        {
            get
            {
                if (_openStaffPositionReasonDescriptor == null)
                    _openStaffPositionReasonDescriptor = _openStaffPositionReasonDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("OpenStaffPositionReasonDescriptor", _openStaffPositionReasonDescriptorId.Value);
                    
                return _openStaffPositionReasonDescriptor;
            }
            set
            {
                _openStaffPositionReasonDescriptor = value;
                _openStaffPositionReasonDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string PositionControlNumber  { get; set; }
        public virtual short? SchoolYear  { get; set; }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? TotalBudgeted  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IOpenStaffPositionExtension.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FundingSourceDescriptor", new LookupColumnDetails { PropertyName = "FundingSourceDescriptorId", LookupTypeName = "FundingSourceDescriptor"} },
                { "OpenStaffPositionReasonDescriptor", new LookupColumnDetails { PropertyName = "OpenStaffPositionReasonDescriptorId", LookupTypeName = "OpenStaffPositionReasonDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (OpenStaffPosition as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            OpenStaffPosition = (EdFi.OpenStaffPosition) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFullTimeEquivalencySupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsFullTimeEquivalencySupported
        {
            get { return _isFullTimeEquivalencySupported; }
            set { _isFullTimeEquivalencySupported = value; }
        }

        private bool _isFundingSourceDescriptorSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsFundingSourceDescriptorSupported
        {
            get { return _isFundingSourceDescriptorSupported; }
            set { _isFundingSourceDescriptorSupported = value; }
        }

        private bool _isHighNeedAcademicSubjectSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsHighNeedAcademicSubjectSupported
        {
            get { return _isHighNeedAcademicSubjectSupported; }
            set { _isHighNeedAcademicSubjectSupported = value; }
        }

        private bool _isIsActiveSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsIsActiveSupported
        {
            get { return _isIsActiveSupported; }
            set { _isIsActiveSupported = value; }
        }

        private bool _isMaxSalarySupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsMaxSalarySupported
        {
            get { return _isMaxSalarySupported; }
            set { _isMaxSalarySupported = value; }
        }

        private bool _isMinSalarySupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsMinSalarySupported
        {
            get { return _isMinSalarySupported; }
            set { _isMinSalarySupported = value; }
        }

        private bool _isOpenStaffPositionReasonDescriptorSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsOpenStaffPositionReasonDescriptorSupported
        {
            get { return _isOpenStaffPositionReasonDescriptorSupported; }
            set { _isOpenStaffPositionReasonDescriptorSupported = value; }
        }

        private bool _isPositionControlNumberSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsPositionControlNumberSupported
        {
            get { return _isPositionControlNumberSupported; }
            set { _isPositionControlNumberSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        private bool _isTotalBudgetedSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsTotalBudgetedSupported
        {
            get { return _isTotalBudgetedSupported; }
            set { _isTotalBudgetedSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPositionEvent

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="OpenStaffPositionEvent"/> entity.
    /// </summary>
    public class OpenStaffPositionEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EventDate { get; set; }
        public virtual int OpenStaffPositionEventTypeDescriptorId { get; set; }
        public virtual string RequisitionNumber { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("OpenStaffPositionEventTypeDescriptorId", OpenStaffPositionEventTypeDescriptorId);
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEvent table of the OpenStaffPositionEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IOpenStaffPositionEvent, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public OpenStaffPositionEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int OpenStaffPositionEventTypeDescriptorId 
        {
            get
            {
                if (_openStaffPositionEventTypeDescriptorId == default(int))
                    _openStaffPositionEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("OpenStaffPositionEventTypeDescriptor", _openStaffPositionEventTypeDescriptor);

                return _openStaffPositionEventTypeDescriptorId;
            } 
            set
            {
                _openStaffPositionEventTypeDescriptorId = value;
                _openStaffPositionEventTypeDescriptor = null;
            }
        }

        private int _openStaffPositionEventTypeDescriptorId;
        private string _openStaffPositionEventTypeDescriptor;

        public virtual string OpenStaffPositionEventTypeDescriptor
        {
            get
            {
                if (_openStaffPositionEventTypeDescriptor == null)
                    _openStaffPositionEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("OpenStaffPositionEventTypeDescriptor", _openStaffPositionEventTypeDescriptorId);
                    
                return _openStaffPositionEventTypeDescriptor;
            }
            set
            {
                _openStaffPositionEventTypeDescriptor = value;
                _openStaffPositionEventTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string RequisitionNumber  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? OpenStaffPositionEventStatusDescriptorId 
        {
            get
            {
                if (_openStaffPositionEventStatusDescriptorId == default(int?))
                    _openStaffPositionEventStatusDescriptorId = string.IsNullOrWhiteSpace(_openStaffPositionEventStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("OpenStaffPositionEventStatusDescriptor", _openStaffPositionEventStatusDescriptor);

                return _openStaffPositionEventStatusDescriptorId;
            } 
            set
            {
                _openStaffPositionEventStatusDescriptorId = value;
                _openStaffPositionEventStatusDescriptor = null;
            }
        }

        private int? _openStaffPositionEventStatusDescriptorId;
        private string _openStaffPositionEventStatusDescriptor;

        public virtual string OpenStaffPositionEventStatusDescriptor
        {
            get
            {
                if (_openStaffPositionEventStatusDescriptor == null)
                    _openStaffPositionEventStatusDescriptor = _openStaffPositionEventStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("OpenStaffPositionEventStatusDescriptor", _openStaffPositionEventStatusDescriptorId.Value);
                    
                return _openStaffPositionEventStatusDescriptor;
            }
            set
            {
                _openStaffPositionEventStatusDescriptor = value;
                _openStaffPositionEventStatusDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.OpenStaffPositionAggregate.EdFi.OpenStaffPositionReferenceData OpenStaffPositionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IOpenStaffPositionEvent.OpenStaffPositionDiscriminator
        {
            get { return OpenStaffPositionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IOpenStaffPositionEvent.OpenStaffPositionResourceId
        {
            get { return OpenStaffPositionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "OpenStaffPositionEventStatusDescriptor", new LookupColumnDetails { PropertyName = "OpenStaffPositionEventStatusDescriptorId", LookupTypeName = "OpenStaffPositionEventStatusDescriptor"} },
                { "OpenStaffPositionEventTypeDescriptor", new LookupColumnDetails { PropertyName = "OpenStaffPositionEventTypeDescriptorId", LookupTypeName = "OpenStaffPositionEventTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("OpenStaffPositionEventTypeDescriptorId", OpenStaffPositionEventTypeDescriptorId);
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isOpenStaffPositionEventStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventSynchronizationSourceSupport.IsOpenStaffPositionEventStatusDescriptorSupported
        {
            get { return _isOpenStaffPositionEventStatusDescriptorSupported; }
            set { _isOpenStaffPositionEventStatusDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPositionEventStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionEventStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEventStatusDescriptor table of the OpenStaffPositionEventStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int OpenStaffPositionEventStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("OpenStaffPositionEventStatusDescriptorId", OpenStaffPositionEventStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPositionEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEventTypeDescriptor table of the OpenStaffPositionEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int OpenStaffPositionEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("OpenStaffPositionEventTypeDescriptorId", OpenStaffPositionEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPositionReasonDescriptor

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionReasonDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionReasonDescriptor table of the OpenStaffPositionReasonDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionReasonDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int OpenStaffPositionReasonDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("OpenStaffPositionReasonDescriptorId", OpenStaffPositionReasonDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PerformanceEvaluation

namespace EdFi.Ods.Entities.NHibernate.PerformanceEvaluationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="PerformanceEvaluation"/> entity.
    /// </summary>
    public class PerformanceEvaluationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluation table of the PerformanceEvaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IPerformanceEvaluation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluation()
        {
            PerformanceEvaluationGradeLevels = new HashSet<PerformanceEvaluationGradeLevel>();
            PerformanceEvaluationProgramGateways = new HashSet<PerformanceEvaluationProgramGateway>();
            PerformanceEvaluationRatingLevels = new HashSet<PerformanceEvaluationRatingLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int?))
                    _academicSubjectDescriptorId = string.IsNullOrWhiteSpace(_academicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int? _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = _academicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId.Value);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluation.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel> _performanceEvaluationGradeLevels;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel> _performanceEvaluationGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel> PerformanceEvaluationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationGradeLevels)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationGradeLevels;
            }
            set
            {
                _performanceEvaluationGradeLevels = value;
                _performanceEvaluationGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationGradeLevels)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationGradeLevelsCovariant;
            }
            set
            {
                PerformanceEvaluationGradeLevels = new HashSet<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel>(value.Cast<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel>());
            }
        }


        private ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway> _performanceEvaluationProgramGateways;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway> _performanceEvaluationProgramGatewaysCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway> PerformanceEvaluationProgramGateways
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationProgramGateways)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationProgramGateways;
            }
            set
            {
                _performanceEvaluationProgramGateways = value;
                _performanceEvaluationProgramGatewaysCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationProgramGateways
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationProgramGateways)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationProgramGatewaysCovariant;
            }
            set
            {
                PerformanceEvaluationProgramGateways = new HashSet<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway>(value.Cast<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway>());
            }
        }


        private ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel> _performanceEvaluationRatingLevels;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel> _performanceEvaluationRatingLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel> PerformanceEvaluationRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingLevels)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingLevels;
            }
            set
            {
                _performanceEvaluationRatingLevels = value;
                _performanceEvaluationRatingLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingLevels)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingLevelsCovariant;
            }
            set
            {
                PerformanceEvaluationRatingLevels = new HashSet<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel>(value.Cast<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported
        {
            get { return _isAcademicSubjectDescriptorSupported; }
            set { _isAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isPerformanceEvaluationGradeLevelsSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationGradeLevelsSupported
        {
            get { return _isPerformanceEvaluationGradeLevelsSupported; }
            set { _isPerformanceEvaluationGradeLevelsSupported = value; }
        }

        private bool _isPerformanceEvaluationProgramGatewaysSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationProgramGatewaysSupported
        {
            get { return _isPerformanceEvaluationProgramGatewaysSupported; }
            set { _isPerformanceEvaluationProgramGatewaysSupported = value; }
        }

        private bool _isPerformanceEvaluationRatingLevelsSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelsSupported
        {
            get { return _isPerformanceEvaluationRatingLevelsSupported; }
            set { _isPerformanceEvaluationRatingLevelsSupported = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, bool> _isPerformanceEvaluationGradeLevelIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationGradeLevelIncluded
        {
            get { return _isPerformanceEvaluationGradeLevelIncluded; }
            set { _isPerformanceEvaluationGradeLevelIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, bool> _isPerformanceEvaluationProgramGatewayIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationProgramGatewayIncluded
        {
            get { return _isPerformanceEvaluationProgramGatewayIncluded; }
            set { _isPerformanceEvaluationProgramGatewayIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, bool> _isPerformanceEvaluationRatingLevelIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelIncluded
        {
            get { return _isPerformanceEvaluationRatingLevelIncluded; }
            set { _isPerformanceEvaluationRatingLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationGradeLevel table of the PerformanceEvaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluation PerformanceEvaluation { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluation IPerformanceEvaluationGradeLevel.PerformanceEvaluation
        {
            get { return PerformanceEvaluation; }
            set { PerformanceEvaluation = (PerformanceEvaluation) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluation = (PerformanceEvaluation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationProgramGateway table of the PerformanceEvaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationProgramGateway : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationProgramGateway()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluation PerformanceEvaluation { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluation IPerformanceEvaluationProgramGateway.PerformanceEvaluation
        {
            get { return PerformanceEvaluation; }
            set { PerformanceEvaluation = (PerformanceEvaluation) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramGatewayDescriptorId 
        {
            get
            {
                if (_programGatewayDescriptorId == default(int))
                    _programGatewayDescriptorId = DescriptorsCache.GetCache().GetId("ProgramGatewayDescriptor", _programGatewayDescriptor);

                return _programGatewayDescriptorId;
            } 
            set
            {
                _programGatewayDescriptorId = value;
                _programGatewayDescriptor = null;
            }
        }

        private int _programGatewayDescriptorId;
        private string _programGatewayDescriptor;

        public virtual string ProgramGatewayDescriptor
        {
            get
            {
                if (_programGatewayDescriptor == null)
                    _programGatewayDescriptor = DescriptorsCache.GetCache().GetValue("ProgramGatewayDescriptor", _programGatewayDescriptorId);
                    
                return _programGatewayDescriptor;
            }
            set
            {
                _programGatewayDescriptor = value;
                _programGatewayDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ProgramGatewayDescriptor", new LookupColumnDetails { PropertyName = "ProgramGatewayDescriptorId", LookupTypeName = "ProgramGatewayDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("ProgramGatewayDescriptorId", ProgramGatewayDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationProgramGateway)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationProgramGateway) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluation = (PerformanceEvaluation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingLevel table of the PerformanceEvaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRatingLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluation PerformanceEvaluation { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluation IPerformanceEvaluationRatingLevel.PerformanceEvaluation
        {
            get { return PerformanceEvaluation; }
            set { PerformanceEvaluation = (PerformanceEvaluation) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int))
                    _evaluationRatingLevelDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluation = (PerformanceEvaluation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PerformanceEvaluationRating

namespace EdFi.Ods.Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="PerformanceEvaluationRating"/> entity.
    /// </summary>
    public class PerformanceEvaluationRatingReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRating table of the PerformanceEvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRating : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IPerformanceEvaluationRating, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRating()
        {
            PerformanceEvaluationRatingResults = new HashSet<PerformanceEvaluationRatingResult>();
            PerformanceEvaluationRatingReviewers = new HashSet<PerformanceEvaluationRatingReviewer>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime ActualDate 
        {
            get { return _actualDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _actualDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _actualDate;
        
        public virtual int? ActualDuration  { get; set; }
        public virtual TimeSpan? ActualTime  { get; set; }
        public virtual bool? Announced  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string Comments  { get; set; }
        public virtual int? CoteachingStyleObservedDescriptorId 
        {
            get
            {
                if (_coteachingStyleObservedDescriptorId == default(int?))
                    _coteachingStyleObservedDescriptorId = string.IsNullOrWhiteSpace(_coteachingStyleObservedDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CoteachingStyleObservedDescriptor", _coteachingStyleObservedDescriptor);

                return _coteachingStyleObservedDescriptorId;
            } 
            set
            {
                _coteachingStyleObservedDescriptorId = value;
                _coteachingStyleObservedDescriptor = null;
            }
        }

        private int? _coteachingStyleObservedDescriptorId;
        private string _coteachingStyleObservedDescriptor;

        public virtual string CoteachingStyleObservedDescriptor
        {
            get
            {
                if (_coteachingStyleObservedDescriptor == null)
                    _coteachingStyleObservedDescriptor = _coteachingStyleObservedDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CoteachingStyleObservedDescriptor", _coteachingStyleObservedDescriptorId.Value);
                    
                return _coteachingStyleObservedDescriptor;
            }
            set
            {
                _coteachingStyleObservedDescriptor = value;
                _coteachingStyleObservedDescriptorId = default(int?);
            }
        }
        public virtual int? PerformanceEvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_performanceEvaluationRatingLevelDescriptorId == default(int?))
                    _performanceEvaluationRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_performanceEvaluationRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PerformanceEvaluationRatingLevelDescriptor", _performanceEvaluationRatingLevelDescriptor);

                return _performanceEvaluationRatingLevelDescriptorId;
            } 
            set
            {
                _performanceEvaluationRatingLevelDescriptorId = value;
                _performanceEvaluationRatingLevelDescriptor = null;
            }
        }

        private int? _performanceEvaluationRatingLevelDescriptorId;
        private string _performanceEvaluationRatingLevelDescriptor;

        public virtual string PerformanceEvaluationRatingLevelDescriptor
        {
            get
            {
                if (_performanceEvaluationRatingLevelDescriptor == null)
                    _performanceEvaluationRatingLevelDescriptor = _performanceEvaluationRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PerformanceEvaluationRatingLevelDescriptor", _performanceEvaluationRatingLevelDescriptorId.Value);
                    
                return _performanceEvaluationRatingLevelDescriptor;
            }
            set
            {
                _performanceEvaluationRatingLevelDescriptor = value;
                _performanceEvaluationRatingLevelDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? ScheduleDate 
        {
            get { return _scheduleDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _scheduleDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _scheduleDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _scheduleDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationReferenceData PerformanceEvaluationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluation discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationDiscriminator
        {
            get { return PerformanceEvaluationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluation resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationResourceId
        {
            get { return PerformanceEvaluationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRating.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult> _performanceEvaluationRatingResults;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingResult> _performanceEvaluationRatingResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult> PerformanceEvaluationRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingResults)
                    if (item.PerformanceEvaluationRating == null)
                        item.PerformanceEvaluationRating = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingResults;
            }
            set
            {
                _performanceEvaluationRatingResults = value;
                _performanceEvaluationRatingResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingResult> Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingResults)
                    if (item.PerformanceEvaluationRating == null)
                        item.PerformanceEvaluationRating = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingResultsCovariant;
            }
            set
            {
                PerformanceEvaluationRatingResults = new HashSet<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult>(value.Cast<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult>());
            }
        }


        private ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer> _performanceEvaluationRatingReviewers;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer> _performanceEvaluationRatingReviewersCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer> PerformanceEvaluationRatingReviewers
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingReviewers)
                    if (item.PerformanceEvaluationRating == null)
                        item.PerformanceEvaluationRating = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingReviewers;
            }
            set
            {
                _performanceEvaluationRatingReviewers = value;
                _performanceEvaluationRatingReviewersCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer> Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationRatingReviewers
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingReviewers)
                    if (item.PerformanceEvaluationRating == null)
                        item.PerformanceEvaluationRating = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingReviewersCovariant;
            }
            set
            {
                PerformanceEvaluationRatingReviewers = new HashSet<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer>(value.Cast<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CoteachingStyleObservedDescriptor", new LookupColumnDetails { PropertyName = "CoteachingStyleObservedDescriptorId", LookupTypeName = "CoteachingStyleObservedDescriptor"} },
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationRatingLevelDescriptorId", LookupTypeName = "PerformanceEvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRating) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isActualDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualDateSupported
        {
            get { return _isActualDateSupported; }
            set { _isActualDateSupported = value; }
        }

        private bool _isActualDurationSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualDurationSupported
        {
            get { return _isActualDurationSupported; }
            set { _isActualDurationSupported = value; }
        }

        private bool _isActualTimeSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualTimeSupported
        {
            get { return _isActualTimeSupported; }
            set { _isActualTimeSupported = value; }
        }

        private bool _isAnnouncedSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsAnnouncedSupported
        {
            get { return _isAnnouncedSupported; }
            set { _isAnnouncedSupported = value; }
        }

        private bool _isCommentsSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsCommentsSupported
        {
            get { return _isCommentsSupported; }
            set { _isCommentsSupported = value; }
        }

        private bool _isCoteachingStyleObservedDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsCoteachingStyleObservedDescriptorSupported
        {
            get { return _isCoteachingStyleObservedDescriptorSupported; }
            set { _isCoteachingStyleObservedDescriptorSupported = value; }
        }

        private bool _isPerformanceEvaluationRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported
        {
            get { return _isPerformanceEvaluationRatingLevelDescriptorSupported; }
            set { _isPerformanceEvaluationRatingLevelDescriptorSupported = value; }
        }

        private bool _isPerformanceEvaluationRatingResultsSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingResultsSupported
        {
            get { return _isPerformanceEvaluationRatingResultsSupported; }
            set { _isPerformanceEvaluationRatingResultsSupported = value; }
        }

        private bool _isPerformanceEvaluationRatingReviewersSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewersSupported
        {
            get { return _isPerformanceEvaluationRatingReviewersSupported; }
            set { _isPerformanceEvaluationRatingReviewersSupported = value; }
        }

        private bool _isScheduleDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsScheduleDateSupported
        {
            get { return _isScheduleDateSupported; }
            set { _isScheduleDateSupported = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, bool> _isPerformanceEvaluationRatingResultIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, bool> Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingResultIncluded
        {
            get { return _isPerformanceEvaluationRatingResultIncluded; }
            set { _isPerformanceEvaluationRatingResultIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, bool> _isPerformanceEvaluationRatingReviewerIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, bool> Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewerIncluded
        {
            get { return _isPerformanceEvaluationRatingReviewerIncluded; }
            set { _isPerformanceEvaluationRatingReviewerIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingResult table of the PerformanceEvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationRatingResult, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRatingResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluationRating PerformanceEvaluationRating { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluationRating IPerformanceEvaluationRatingResult.PerformanceEvaluationRating
        {
            get { return PerformanceEvaluationRating; }
            set { PerformanceEvaluationRating = (PerformanceEvaluationRating) value; }
        }

        [DomainSignature]
        public virtual decimal Rating  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string RatingResultTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluationRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("Rating", Rating);
            keyValues.Add("RatingResultTitle", RatingResultTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluationRating = (PerformanceEvaluationRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingReviewer table of the PerformanceEvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewer : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRatingReviewer()
        {
           PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList = new HashSet<PerformanceEvaluationRatingReviewerReceivedTraining>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluationRating PerformanceEvaluationRating { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluationRating IPerformanceEvaluationRatingReviewer.PerformanceEvaluationRating
        {
            get { return PerformanceEvaluationRating; }
            set { PerformanceEvaluationRating = (PerformanceEvaluationRating) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string FirstName  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string LastSurname  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(32), NoDangerousText]
        public virtual string ReviewerPersonId  { get; set; }
        public virtual int? ReviewerSourceSystemDescriptorId 
        {
            get
            {
                if (_reviewerSourceSystemDescriptorId == default(int?))
                    _reviewerSourceSystemDescriptorId = string.IsNullOrWhiteSpace(_reviewerSourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _reviewerSourceSystemDescriptor);

                return _reviewerSourceSystemDescriptorId;
            } 
            set
            {
                _reviewerSourceSystemDescriptorId = value;
                _reviewerSourceSystemDescriptor = null;
            }
        }

        private int? _reviewerSourceSystemDescriptorId;
        private string _reviewerSourceSystemDescriptor;

        public virtual string ReviewerSourceSystemDescriptor
        {
            get
            {
                if (_reviewerSourceSystemDescriptor == null)
                    _reviewerSourceSystemDescriptor = _reviewerSourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _reviewerSourceSystemDescriptorId.Value);
                    
                return _reviewerSourceSystemDescriptor;
            }
            set
            {
                _reviewerSourceSystemDescriptor = value;
                _reviewerSourceSystemDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewerReceivedTraining PerformanceEvaluationRatingReviewerReceivedTraining
        {
            get
            {
                // Return the item in the list, if one exists
                if (PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.Any())
                    return PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.Any())
                    PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.PerformanceEvaluationRatingReviewer = this;

                    PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.PerformanceEvaluationRatingReviewerReceivedTraining
        {
            get { return PerformanceEvaluationRatingReviewerReceivedTraining; }
            set { PerformanceEvaluationRatingReviewerReceivedTraining = (Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewerReceivedTraining) value; }
        }

        private ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewerReceivedTraining> _performanceEvaluationRatingReviewerReceivedTrainingPersistentList;

        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewerReceivedTraining> PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingReviewerReceivedTrainingPersistentList)
                    if (item.PerformanceEvaluationRatingReviewer == null)
                        item.PerformanceEvaluationRatingReviewer = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingReviewerReceivedTrainingPersistentList;
            }
            set
            {
                _performanceEvaluationRatingReviewerReceivedTrainingPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData ReviewerPersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the ReviewerPerson discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonDiscriminator
        {
            get { return ReviewerPersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the ReviewerPerson resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonResourceId
        {
            get { return ReviewerPersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ReviewerSourceSystemDescriptor", new LookupColumnDetails { PropertyName = "ReviewerSourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluationRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("FirstName", FirstName);
            keyValues.Add("LastSurname", LastSurname);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluationRating = (PerformanceEvaluationRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isPerformanceEvaluationRatingReviewerReceivedTrainingSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported
        {
            get { return _isPerformanceEvaluationRatingReviewerReceivedTrainingSupported; }
            set { _isPerformanceEvaluationRatingReviewerReceivedTrainingSupported = value; }
        }

        private bool _isReviewerPersonIdSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerPersonIdSupported
        {
            get { return _isReviewerPersonIdSupported; }
            set { _isReviewerPersonIdSupported = value; }
        }

        private bool _isReviewerSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerSourceSystemDescriptorSupported
        {
            get { return _isReviewerSourceSystemDescriptorSupported; }
            set { _isReviewerSourceSystemDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingReviewerReceivedTraining table of the PerformanceEvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewerReceivedTraining : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRatingReviewerReceivedTraining()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluationRatingReviewer PerformanceEvaluationRatingReviewer { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer IPerformanceEvaluationRatingReviewerReceivedTraining.PerformanceEvaluationRatingReviewer
        {
            get { return PerformanceEvaluationRatingReviewer; }
            set { PerformanceEvaluationRatingReviewer = (PerformanceEvaluationRatingReviewer) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? InterRaterReliabilityScore  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? ReceivedTrainingDate 
        {
            get { return _receivedTrainingDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _receivedTrainingDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _receivedTrainingDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _receivedTrainingDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluationRatingReviewer as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluationRatingReviewer = (PerformanceEvaluationRatingReviewer) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isInterRaterReliabilityScoreSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported
        {
            get { return _isInterRaterReliabilityScoreSupported; }
            set { _isInterRaterReliabilityScoreSupported = value; }
        }

        private bool _isReceivedTrainingDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsReceivedTrainingDateSupported
        {
            get { return _isReceivedTrainingDateSupported; }
            set { _isReceivedTrainingDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PerformanceEvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.PerformanceEvaluationRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingLevelDescriptor table of the PerformanceEvaluationRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int PerformanceEvaluationRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("PerformanceEvaluationRatingLevelDescriptorId", PerformanceEvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PerformanceEvaluationTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.PerformanceEvaluationTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationTypeDescriptor table of the PerformanceEvaluationTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PostSecondaryInstitution

namespace EdFi.Ods.Entities.NHibernate.PostSecondaryInstitutionAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PostSecondaryInstitutionExtension table of the PostSecondaryInstitution aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PostSecondaryInstitutionExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPostSecondaryInstitutionExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPostSecondaryInstitutionExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PostSecondaryInstitutionExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.PostSecondaryInstitution PostSecondaryInstitution { get; set; }

        Entities.Common.EdFi.IPostSecondaryInstitution IPostSecondaryInstitutionExtension.PostSecondaryInstitution
        {
            get { return PostSecondaryInstitution; }
            set { PostSecondaryInstitution = (EdFi.PostSecondaryInstitution) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PostSecondaryInstitution as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPostSecondaryInstitutionExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPostSecondaryInstitutionExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PostSecondaryInstitution = (EdFi.PostSecondaryInstitution) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.IPostSecondaryInstitutionExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PreviousCareerDescriptor

namespace EdFi.Ods.Entities.NHibernate.PreviousCareerDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PreviousCareerDescriptor table of the PreviousCareerDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PreviousCareerDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IPreviousCareerDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int PreviousCareerDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("PreviousCareerDescriptorId", PreviousCareerDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPreviousCareerDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPreviousCareerDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ProfessionalDevelopmentEvent

namespace EdFi.Ods.Entities.NHibernate.ProfessionalDevelopmentEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="ProfessionalDevelopmentEvent"/> entity.
    /// </summary>
    public class ProfessionalDevelopmentEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string Namespace { get; set; }
        public virtual string ProfessionalDevelopmentTitle { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("ProfessionalDevelopmentTitle", ProfessionalDevelopmentTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentEvent table of the ProfessionalDevelopmentEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IProfessionalDevelopmentEvent, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProfessionalDevelopmentEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string ProfessionalDevelopmentTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? MultipleSession  { get; set; }
        [RequiredWithNonDefault]
        public virtual int ProfessionalDevelopmentOfferedByDescriptorId 
        {
            get
            {
                if (_professionalDevelopmentOfferedByDescriptorId == default(int))
                    _professionalDevelopmentOfferedByDescriptorId = DescriptorsCache.GetCache().GetId("ProfessionalDevelopmentOfferedByDescriptor", _professionalDevelopmentOfferedByDescriptor);

                return _professionalDevelopmentOfferedByDescriptorId;
            } 
            set
            {
                _professionalDevelopmentOfferedByDescriptorId = value;
                _professionalDevelopmentOfferedByDescriptor = null;
            }
        }

        private int _professionalDevelopmentOfferedByDescriptorId;
        private string _professionalDevelopmentOfferedByDescriptor;

        public virtual string ProfessionalDevelopmentOfferedByDescriptor
        {
            get
            {
                if (_professionalDevelopmentOfferedByDescriptor == null)
                    _professionalDevelopmentOfferedByDescriptor = DescriptorsCache.GetCache().GetValue("ProfessionalDevelopmentOfferedByDescriptor", _professionalDevelopmentOfferedByDescriptorId);
                    
                return _professionalDevelopmentOfferedByDescriptor;
            }
            set
            {
                _professionalDevelopmentOfferedByDescriptor = value;
                _professionalDevelopmentOfferedByDescriptorId = default(int);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string ProfessionalDevelopmentReason  { get; set; }
        public virtual bool? Required  { get; set; }
        public virtual int? TotalHours  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProfessionalDevelopmentOfferedByDescriptor", new LookupColumnDetails { PropertyName = "ProfessionalDevelopmentOfferedByDescriptorId", LookupTypeName = "ProfessionalDevelopmentOfferedByDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("ProfessionalDevelopmentTitle", ProfessionalDevelopmentTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProfessionalDevelopmentEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProfessionalDevelopmentEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMultipleSessionSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsMultipleSessionSupported
        {
            get { return _isMultipleSessionSupported; }
            set { _isMultipleSessionSupported = value; }
        }

        private bool _isProfessionalDevelopmentOfferedByDescriptorSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported
        {
            get { return _isProfessionalDevelopmentOfferedByDescriptorSupported; }
            set { _isProfessionalDevelopmentOfferedByDescriptorSupported = value; }
        }

        private bool _isProfessionalDevelopmentReasonSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsProfessionalDevelopmentReasonSupported
        {
            get { return _isProfessionalDevelopmentReasonSupported; }
            set { _isProfessionalDevelopmentReasonSupported = value; }
        }

        private bool _isRequiredSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsRequiredSupported
        {
            get { return _isRequiredSupported; }
            set { _isRequiredSupported = value; }
        }

        private bool _isTotalHoursSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsTotalHoursSupported
        {
            get { return _isTotalHoursSupported; }
            set { _isTotalHoursSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ProfessionalDevelopmentEventAttendance

namespace EdFi.Ods.Entities.NHibernate.ProfessionalDevelopmentEventAttendanceAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="ProfessionalDevelopmentEventAttendance"/> entity.
    /// </summary>
    public class ProfessionalDevelopmentEventAttendanceReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime AttendanceDate { get; set; }
        public virtual string Namespace { get; set; }
        public virtual string PersonId { get; set; }
        public virtual string ProfessionalDevelopmentTitle { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AttendanceDate", AttendanceDate);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("ProfessionalDevelopmentTitle", ProfessionalDevelopmentTitle);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentEventAttendance table of the ProfessionalDevelopmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEventAttendance : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProfessionalDevelopmentEventAttendance()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime AttendanceDate 
        {
            get { return _attendanceDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _attendanceDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _attendanceDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string ProfessionalDevelopmentTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int AttendanceEventCategoryDescriptorId 
        {
            get
            {
                if (_attendanceEventCategoryDescriptorId == default(int))
                    _attendanceEventCategoryDescriptorId = DescriptorsCache.GetCache().GetId("AttendanceEventCategoryDescriptor", _attendanceEventCategoryDescriptor);

                return _attendanceEventCategoryDescriptorId;
            } 
            set
            {
                _attendanceEventCategoryDescriptorId = value;
                _attendanceEventCategoryDescriptor = null;
            }
        }

        private int _attendanceEventCategoryDescriptorId;
        private string _attendanceEventCategoryDescriptor;

        public virtual string AttendanceEventCategoryDescriptor
        {
            get
            {
                if (_attendanceEventCategoryDescriptor == null)
                    _attendanceEventCategoryDescriptor = DescriptorsCache.GetCache().GetValue("AttendanceEventCategoryDescriptor", _attendanceEventCategoryDescriptorId);
                    
                return _attendanceEventCategoryDescriptor;
            }
            set
            {
                _attendanceEventCategoryDescriptor = value;
                _attendanceEventCategoryDescriptorId = default(int);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string AttendanceEventReason  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.ProfessionalDevelopmentEventAggregate.TPDM.ProfessionalDevelopmentEventReferenceData ProfessionalDevelopmentEventReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the ProfessionalDevelopmentEvent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.ProfessionalDevelopmentEventDiscriminator
        {
            get { return ProfessionalDevelopmentEventReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the ProfessionalDevelopmentEvent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.ProfessionalDevelopmentEventResourceId
        {
            get { return ProfessionalDevelopmentEventReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AttendanceEventCategoryDescriptor", new LookupColumnDetails { PropertyName = "AttendanceEventCategoryDescriptorId", LookupTypeName = "AttendanceEventCategoryDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AttendanceDate", AttendanceDate);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("ProfessionalDevelopmentTitle", ProfessionalDevelopmentTitle);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAttendanceEventCategoryDescriptorSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport.IsAttendanceEventCategoryDescriptorSupported
        {
            get { return _isAttendanceEventCategoryDescriptorSupported; }
            set { _isAttendanceEventCategoryDescriptorSupported = value; }
        }

        private bool _isAttendanceEventReasonSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport.IsAttendanceEventReasonSupported
        {
            get { return _isAttendanceEventReasonSupported; }
            set { _isAttendanceEventReasonSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ProfessionalDevelopmentOfferedByDescriptor

namespace EdFi.Ods.Entities.NHibernate.ProfessionalDevelopmentOfferedByDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentOfferedByDescriptor table of the ProfessionalDevelopmentOfferedByDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentOfferedByDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ProfessionalDevelopmentOfferedByDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ProfessionalDevelopmentOfferedByDescriptorId", ProfessionalDevelopmentOfferedByDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ProgramGatewayDescriptor

namespace EdFi.Ods.Entities.NHibernate.ProgramGatewayDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProgramGatewayDescriptor table of the ProgramGatewayDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProgramGatewayDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IProgramGatewayDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ProgramGatewayDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ProgramGatewayDescriptorId", ProgramGatewayDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProgramGatewayDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProgramGatewayDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: QuantitativeMeasure

namespace EdFi.Ods.Entities.NHibernate.QuantitativeMeasureAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="QuantitativeMeasure"/> entity.
    /// </summary>
    public class QuantitativeMeasureReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string QuantitativeMeasureIdentifier { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("QuantitativeMeasureIdentifier", QuantitativeMeasureIdentifier);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasure table of the QuantitativeMeasure aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasure : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IQuantitativeMeasure, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public QuantitativeMeasure()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string QuantitativeMeasureIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? QuantitativeMeasureDatatypeDescriptorId 
        {
            get
            {
                if (_quantitativeMeasureDatatypeDescriptorId == default(int?))
                    _quantitativeMeasureDatatypeDescriptorId = string.IsNullOrWhiteSpace(_quantitativeMeasureDatatypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("QuantitativeMeasureDatatypeDescriptor", _quantitativeMeasureDatatypeDescriptor);

                return _quantitativeMeasureDatatypeDescriptorId;
            } 
            set
            {
                _quantitativeMeasureDatatypeDescriptorId = value;
                _quantitativeMeasureDatatypeDescriptor = null;
            }
        }

        private int? _quantitativeMeasureDatatypeDescriptorId;
        private string _quantitativeMeasureDatatypeDescriptor;

        public virtual string QuantitativeMeasureDatatypeDescriptor
        {
            get
            {
                if (_quantitativeMeasureDatatypeDescriptor == null)
                    _quantitativeMeasureDatatypeDescriptor = _quantitativeMeasureDatatypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("QuantitativeMeasureDatatypeDescriptor", _quantitativeMeasureDatatypeDescriptorId.Value);
                    
                return _quantitativeMeasureDatatypeDescriptor;
            }
            set
            {
                _quantitativeMeasureDatatypeDescriptor = value;
                _quantitativeMeasureDatatypeDescriptorId = default(int?);
            }
        }
        public virtual int? QuantitativeMeasureTypeDescriptorId 
        {
            get
            {
                if (_quantitativeMeasureTypeDescriptorId == default(int?))
                    _quantitativeMeasureTypeDescriptorId = string.IsNullOrWhiteSpace(_quantitativeMeasureTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("QuantitativeMeasureTypeDescriptor", _quantitativeMeasureTypeDescriptor);

                return _quantitativeMeasureTypeDescriptorId;
            } 
            set
            {
                _quantitativeMeasureTypeDescriptorId = value;
                _quantitativeMeasureTypeDescriptor = null;
            }
        }

        private int? _quantitativeMeasureTypeDescriptorId;
        private string _quantitativeMeasureTypeDescriptor;

        public virtual string QuantitativeMeasureTypeDescriptor
        {
            get
            {
                if (_quantitativeMeasureTypeDescriptor == null)
                    _quantitativeMeasureTypeDescriptor = _quantitativeMeasureTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("QuantitativeMeasureTypeDescriptor", _quantitativeMeasureTypeDescriptorId.Value);
                    
                return _quantitativeMeasureTypeDescriptor;
            }
            set
            {
                _quantitativeMeasureTypeDescriptor = value;
                _quantitativeMeasureTypeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IQuantitativeMeasure.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IQuantitativeMeasure.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "QuantitativeMeasureDatatypeDescriptor", new LookupColumnDetails { PropertyName = "QuantitativeMeasureDatatypeDescriptorId", LookupTypeName = "QuantitativeMeasureDatatypeDescriptor"} },
                { "QuantitativeMeasureTypeDescriptor", new LookupColumnDetails { PropertyName = "QuantitativeMeasureTypeDescriptorId", LookupTypeName = "QuantitativeMeasureTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("QuantitativeMeasureIdentifier", QuantitativeMeasureIdentifier);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IQuantitativeMeasure)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IQuantitativeMeasure) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isQuantitativeMeasureDatatypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport.IsQuantitativeMeasureDatatypeDescriptorSupported
        {
            get { return _isQuantitativeMeasureDatatypeDescriptorSupported; }
            set { _isQuantitativeMeasureDatatypeDescriptorSupported = value; }
        }

        private bool _isQuantitativeMeasureTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport.IsQuantitativeMeasureTypeDescriptorSupported
        {
            get { return _isQuantitativeMeasureTypeDescriptorSupported; }
            set { _isQuantitativeMeasureTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: QuantitativeMeasureDatatypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.QuantitativeMeasureDatatypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureDatatypeDescriptor table of the QuantitativeMeasureDatatypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureDatatypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int QuantitativeMeasureDatatypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("QuantitativeMeasureDatatypeDescriptorId", QuantitativeMeasureDatatypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: QuantitativeMeasureScore

namespace EdFi.Ods.Entities.NHibernate.QuantitativeMeasureScoreAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="QuantitativeMeasureScore"/> entity.
    /// </summary>
    public class QuantitativeMeasureScoreReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual string QuantitativeMeasureIdentifier { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("QuantitativeMeasureIdentifier", QuantitativeMeasureIdentifier);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureScore table of the QuantitativeMeasureScore aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureScore : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IQuantitativeMeasureScore, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public QuantitativeMeasureScore()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string QuantitativeMeasureIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal ScoreValue  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? StandardError  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingReferenceData EvaluationElementRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElementRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationElementRatingDiscriminator
        {
            get { return EvaluationElementRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElementRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationElementRatingResourceId
        {
            get { return EvaluationElementRatingReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.QuantitativeMeasureAggregate.TPDM.QuantitativeMeasureReferenceData QuantitativeMeasureReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the QuantitativeMeasure discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IQuantitativeMeasureScore.QuantitativeMeasureDiscriminator
        {
            get { return QuantitativeMeasureReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the QuantitativeMeasure resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IQuantitativeMeasureScore.QuantitativeMeasureResourceId
        {
            get { return QuantitativeMeasureReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("QuantitativeMeasureIdentifier", QuantitativeMeasureIdentifier);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IQuantitativeMeasureScore)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IQuantitativeMeasureScore) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isScoreValueSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport.IsScoreValueSupported
        {
            get { return _isScoreValueSupported; }
            set { _isScoreValueSupported = value; }
        }

        private bool _isStandardErrorSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport.IsStandardErrorSupported
        {
            get { return _isStandardErrorSupported; }
            set { _isStandardErrorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: QuantitativeMeasureTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.QuantitativeMeasureTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureTypeDescriptor table of the QuantitativeMeasureTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int QuantitativeMeasureTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("QuantitativeMeasureTypeDescriptorId", QuantitativeMeasureTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RecruitmentEvent

namespace EdFi.Ods.Entities.NHibernate.RecruitmentEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="RecruitmentEvent"/> entity.
    /// </summary>
    public class RecruitmentEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EventDate { get; set; }
        public virtual string EventTitle { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("EventTitle", EventTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEvent table of the RecruitmentEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IRecruitmentEvent, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EventTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(255), NoDangerousText]
        public virtual string EventDescription  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string EventLocation  { get; set; }
        [RequiredWithNonDefault]
        public virtual int RecruitmentEventTypeDescriptorId 
        {
            get
            {
                if (_recruitmentEventTypeDescriptorId == default(int))
                    _recruitmentEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("RecruitmentEventTypeDescriptor", _recruitmentEventTypeDescriptor);

                return _recruitmentEventTypeDescriptorId;
            } 
            set
            {
                _recruitmentEventTypeDescriptorId = value;
                _recruitmentEventTypeDescriptor = null;
            }
        }

        private int _recruitmentEventTypeDescriptorId;
        private string _recruitmentEventTypeDescriptor;

        public virtual string RecruitmentEventTypeDescriptor
        {
            get
            {
                if (_recruitmentEventTypeDescriptor == null)
                    _recruitmentEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("RecruitmentEventTypeDescriptor", _recruitmentEventTypeDescriptorId);
                    
                return _recruitmentEventTypeDescriptor;
            }
            set
            {
                _recruitmentEventTypeDescriptor = value;
                _recruitmentEventTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IRecruitmentEvent.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IRecruitmentEvent.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RecruitmentEventTypeDescriptor", new LookupColumnDetails { PropertyName = "RecruitmentEventTypeDescriptorId", LookupTypeName = "RecruitmentEventTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("EventTitle", EventTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEventDescriptionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsEventDescriptionSupported
        {
            get { return _isEventDescriptionSupported; }
            set { _isEventDescriptionSupported = value; }
        }

        private bool _isEventLocationSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsEventLocationSupported
        {
            get { return _isEventLocationSupported; }
            set { _isEventLocationSupported = value; }
        }

        private bool _isRecruitmentEventTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsRecruitmentEventTypeDescriptorSupported
        {
            get { return _isRecruitmentEventTypeDescriptorSupported; }
            set { _isRecruitmentEventTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RecruitmentEventAttendance

namespace EdFi.Ods.Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="RecruitmentEventAttendance"/> entity.
    /// </summary>
    public class RecruitmentEventAttendanceReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EventDate { get; set; }
        public virtual string EventTitle { get; set; }
        public virtual string RecruitmentEventAttendeeIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("EventTitle", EventTitle);
            keyValues.Add("RecruitmentEventAttendeeIdentifier", RecruitmentEventAttendeeIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendance table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendance : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IRecruitmentEventAttendance, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendance()
        {
           RecruitmentEventAttendanceCurrentPositionPersistentList = new HashSet<RecruitmentEventAttendanceCurrentPosition>();
           RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList = new HashSet<RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications>();
            RecruitmentEventAttendanceDisabilities = new HashSet<RecruitmentEventAttendanceDisability>();
            RecruitmentEventAttendancePersonalIdentificationDocuments = new HashSet<RecruitmentEventAttendancePersonalIdentificationDocument>();
            RecruitmentEventAttendanceRaces = new HashSet<RecruitmentEventAttendanceRace>();
            RecruitmentEventAttendanceTelephones = new HashSet<RecruitmentEventAttendanceTelephone>();
            RecruitmentEventAttendanceTouchpoints = new HashSet<RecruitmentEventAttendanceTouchpoint>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EventTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string RecruitmentEventAttendeeIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? Applied  { get; set; }
        [RequiredWithNonDefault, StringLength(128), NoDangerousText]
        public virtual string ElectronicMailAddress  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string FirstName  { get; set; }
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        [StringLength(10), NoDangerousText]
        public virtual string GenerationCodeSuffix  { get; set; }
        public virtual bool? HispanicLatinoEthnicity  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string LastSurname  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MaidenName  { get; set; }
        public virtual bool? Met  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MiddleName  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string Notes  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string PersonalTitlePrefix  { get; set; }
        public virtual int? PreScreeningRating  { get; set; }
        public virtual int? RecruitmentEventAttendeeTypeDescriptorId 
        {
            get
            {
                if (_recruitmentEventAttendeeTypeDescriptorId == default(int?))
                    _recruitmentEventAttendeeTypeDescriptorId = string.IsNullOrWhiteSpace(_recruitmentEventAttendeeTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("RecruitmentEventAttendeeTypeDescriptor", _recruitmentEventAttendeeTypeDescriptor);

                return _recruitmentEventAttendeeTypeDescriptorId;
            } 
            set
            {
                _recruitmentEventAttendeeTypeDescriptorId = value;
                _recruitmentEventAttendeeTypeDescriptor = null;
            }
        }

        private int? _recruitmentEventAttendeeTypeDescriptorId;
        private string _recruitmentEventAttendeeTypeDescriptor;

        public virtual string RecruitmentEventAttendeeTypeDescriptor
        {
            get
            {
                if (_recruitmentEventAttendeeTypeDescriptor == null)
                    _recruitmentEventAttendeeTypeDescriptor = _recruitmentEventAttendeeTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("RecruitmentEventAttendeeTypeDescriptor", _recruitmentEventAttendeeTypeDescriptorId.Value);
                    
                return _recruitmentEventAttendeeTypeDescriptor;
            }
            set
            {
                _recruitmentEventAttendeeTypeDescriptor = value;
                _recruitmentEventAttendeeTypeDescriptorId = default(int?);
            }
        }
        public virtual bool? Referral  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string ReferredBy  { get; set; }
        public virtual int? SexDescriptorId 
        {
            get
            {
                if (_sexDescriptorId == default(int?))
                    _sexDescriptorId = string.IsNullOrWhiteSpace(_sexDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SexDescriptor", _sexDescriptor);

                return _sexDescriptorId;
            } 
            set
            {
                _sexDescriptorId = value;
                _sexDescriptor = null;
            }
        }

        private int? _sexDescriptorId;
        private string _sexDescriptor;

        public virtual string SexDescriptor
        {
            get
            {
                if (_sexDescriptor == null)
                    _sexDescriptor = _sexDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SexDescriptor", _sexDescriptorId.Value);
                    
                return _sexDescriptor;
            }
            set
            {
                _sexDescriptor = value;
                _sexDescriptorId = default(int?);
            }
        }
        [StringLength(50), NoDangerousText]
        public virtual string SocialMediaNetworkName  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string SocialMediaUserName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPosition RecruitmentEventAttendanceCurrentPosition
        {
            get
            {
                // Return the item in the list, if one exists
                if (RecruitmentEventAttendanceCurrentPositionPersistentList.Any())
                    return RecruitmentEventAttendanceCurrentPositionPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (RecruitmentEventAttendanceCurrentPositionPersistentList.Any())
                    RecruitmentEventAttendanceCurrentPositionPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.RecruitmentEventAttendance = this;

                    RecruitmentEventAttendanceCurrentPositionPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceCurrentPosition
        {
            get { return RecruitmentEventAttendanceCurrentPosition; }
            set { RecruitmentEventAttendanceCurrentPosition = (Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPosition) value; }
        }

        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPosition> _recruitmentEventAttendanceCurrentPositionPersistentList;

        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPosition> RecruitmentEventAttendanceCurrentPositionPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceCurrentPositionPersistentList)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceCurrentPositionPersistentList;
            }
            set
            {
                _recruitmentEventAttendanceCurrentPositionPersistentList = value;
            }
        }

        [ValidateObject]
        public virtual Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications
        {
            get
            {
                // Return the item in the list, if one exists
                if (RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList.Any())
                    return RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList.Any())
                    RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.RecruitmentEventAttendance = this;

                    RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications
        {
            get { return RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications; }
            set { RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications = (Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications) value; }
        }

        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications> _recruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList;

        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications> RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList;
            }
            set
            {
                _recruitmentEventAttendanceRecruitmentEventAttendeeQualificationsPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.RecruitmentEventAggregate.TPDM.RecruitmentEventReferenceData RecruitmentEventReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the RecruitmentEvent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventDiscriminator
        {
            get { return RecruitmentEventReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the RecruitmentEvent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventResourceId
        {
            get { return RecruitmentEventReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisability> _recruitmentEventAttendanceDisabilities;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability> _recruitmentEventAttendanceDisabilitiesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisability> RecruitmentEventAttendanceDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceDisabilities)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceDisabilities;
            }
            set
            {
                _recruitmentEventAttendanceDisabilities = value;
                _recruitmentEventAttendanceDisabilitiesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability, Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisability>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceDisabilities)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceDisabilitiesCovariant;
            }
            set
            {
                RecruitmentEventAttendanceDisabilities = new HashSet<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisability>(value.Cast<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisability>());
            }
        }


        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendancePersonalIdentificationDocument> _recruitmentEventAttendancePersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument> _recruitmentEventAttendancePersonalIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendancePersonalIdentificationDocument> RecruitmentEventAttendancePersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendancePersonalIdentificationDocuments)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendancePersonalIdentificationDocuments;
            }
            set
            {
                _recruitmentEventAttendancePersonalIdentificationDocuments = value;
                _recruitmentEventAttendancePersonalIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument, Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendancePersonalIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendancePersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendancePersonalIdentificationDocuments)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendancePersonalIdentificationDocumentsCovariant;
            }
            set
            {
                RecruitmentEventAttendancePersonalIdentificationDocuments = new HashSet<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendancePersonalIdentificationDocument>(value.Cast<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendancePersonalIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRace> _recruitmentEventAttendanceRaces;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceRace> _recruitmentEventAttendanceRacesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRace> RecruitmentEventAttendanceRaces
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceRaces)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceRaces;
            }
            set
            {
                _recruitmentEventAttendanceRaces = value;
                _recruitmentEventAttendanceRacesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IRecruitmentEventAttendanceRace, Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRace>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceRace> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceRaces
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceRaces)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceRacesCovariant;
            }
            set
            {
                RecruitmentEventAttendanceRaces = new HashSet<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRace>(value.Cast<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceRace>());
            }
        }


        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTelephone> _recruitmentEventAttendanceTelephones;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone> _recruitmentEventAttendanceTelephonesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTelephone> RecruitmentEventAttendanceTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceTelephones)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceTelephones;
            }
            set
            {
                _recruitmentEventAttendanceTelephones = value;
                _recruitmentEventAttendanceTelephonesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone, Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceTelephones)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceTelephonesCovariant;
            }
            set
            {
                RecruitmentEventAttendanceTelephones = new HashSet<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTelephone>(value.Cast<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTelephone>());
            }
        }


        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTouchpoint> _recruitmentEventAttendanceTouchpoints;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint> _recruitmentEventAttendanceTouchpointsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTouchpoint> RecruitmentEventAttendanceTouchpoints
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceTouchpoints)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceTouchpoints;
            }
            set
            {
                _recruitmentEventAttendanceTouchpoints = value;
                _recruitmentEventAttendanceTouchpointsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint, Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTouchpoint>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint> Entities.Common.TPDM.IRecruitmentEventAttendance.RecruitmentEventAttendanceTouchpoints
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceTouchpoints)
                    if (item.RecruitmentEventAttendance == null)
                        item.RecruitmentEventAttendance = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceTouchpointsCovariant;
            }
            set
            {
                RecruitmentEventAttendanceTouchpoints = new HashSet<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTouchpoint>(value.Cast<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceTouchpoint>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
                { "RecruitmentEventAttendeeTypeDescriptor", new LookupColumnDetails { PropertyName = "RecruitmentEventAttendeeTypeDescriptorId", LookupTypeName = "RecruitmentEventAttendeeTypeDescriptor"} },
                { "SexDescriptor", new LookupColumnDetails { PropertyName = "SexDescriptorId", LookupTypeName = "SexDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("EventTitle", EventTitle);
            keyValues.Add("RecruitmentEventAttendeeIdentifier", RecruitmentEventAttendeeIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendance)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendance) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAppliedSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsAppliedSupported
        {
            get { return _isAppliedSupported; }
            set { _isAppliedSupported = value; }
        }

        private bool _isElectronicMailAddressSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsElectronicMailAddressSupported
        {
            get { return _isElectronicMailAddressSupported; }
            set { _isElectronicMailAddressSupported = value; }
        }

        private bool _isFirstNameSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsFirstNameSupported
        {
            get { return _isFirstNameSupported; }
            set { _isFirstNameSupported = value; }
        }

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isGenerationCodeSuffixSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsGenerationCodeSuffixSupported
        {
            get { return _isGenerationCodeSuffixSupported; }
            set { _isGenerationCodeSuffixSupported = value; }
        }

        private bool _isHispanicLatinoEthnicitySupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported
        {
            get { return _isHispanicLatinoEthnicitySupported; }
            set { _isHispanicLatinoEthnicitySupported = value; }
        }

        private bool _isLastSurnameSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsLastSurnameSupported
        {
            get { return _isLastSurnameSupported; }
            set { _isLastSurnameSupported = value; }
        }

        private bool _isMaidenNameSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsMaidenNameSupported
        {
            get { return _isMaidenNameSupported; }
            set { _isMaidenNameSupported = value; }
        }

        private bool _isMetSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsMetSupported
        {
            get { return _isMetSupported; }
            set { _isMetSupported = value; }
        }

        private bool _isMiddleNameSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsMiddleNameSupported
        {
            get { return _isMiddleNameSupported; }
            set { _isMiddleNameSupported = value; }
        }

        private bool _isNotesSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsNotesSupported
        {
            get { return _isNotesSupported; }
            set { _isNotesSupported = value; }
        }

        private bool _isPersonalTitlePrefixSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsPersonalTitlePrefixSupported
        {
            get { return _isPersonalTitlePrefixSupported; }
            set { _isPersonalTitlePrefixSupported = value; }
        }

        private bool _isPreScreeningRatingSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsPreScreeningRatingSupported
        {
            get { return _isPreScreeningRatingSupported; }
            set { _isPreScreeningRatingSupported = value; }
        }

        private bool _isRecruitmentEventAttendanceCurrentPositionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceCurrentPositionSupported
        {
            get { return _isRecruitmentEventAttendanceCurrentPositionSupported; }
            set { _isRecruitmentEventAttendanceCurrentPositionSupported = value; }
        }

        private bool _isRecruitmentEventAttendanceDisabilitiesSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceDisabilitiesSupported
        {
            get { return _isRecruitmentEventAttendanceDisabilitiesSupported; }
            set { _isRecruitmentEventAttendanceDisabilitiesSupported = value; }
        }

        private bool _isRecruitmentEventAttendancePersonalIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentsSupported
        {
            get { return _isRecruitmentEventAttendancePersonalIdentificationDocumentsSupported; }
            set { _isRecruitmentEventAttendancePersonalIdentificationDocumentsSupported = value; }
        }

        private bool _isRecruitmentEventAttendanceRacesSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceRacesSupported
        {
            get { return _isRecruitmentEventAttendanceRacesSupported; }
            set { _isRecruitmentEventAttendanceRacesSupported = value; }
        }

        private bool _isRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported
        {
            get { return _isRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported; }
            set { _isRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported = value; }
        }

        private bool _isRecruitmentEventAttendanceTelephonesSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceTelephonesSupported
        {
            get { return _isRecruitmentEventAttendanceTelephonesSupported; }
            set { _isRecruitmentEventAttendanceTelephonesSupported = value; }
        }

        private bool _isRecruitmentEventAttendanceTouchpointsSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceTouchpointsSupported
        {
            get { return _isRecruitmentEventAttendanceTouchpointsSupported; }
            set { _isRecruitmentEventAttendanceTouchpointsSupported = value; }
        }

        private bool _isRecruitmentEventAttendeeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendeeTypeDescriptorSupported
        {
            get { return _isRecruitmentEventAttendeeTypeDescriptorSupported; }
            set { _isRecruitmentEventAttendeeTypeDescriptorSupported = value; }
        }

        private bool _isReferralSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsReferralSupported
        {
            get { return _isReferralSupported; }
            set { _isReferralSupported = value; }
        }

        private bool _isReferredBySupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsReferredBySupported
        {
            get { return _isReferredBySupported; }
            set { _isReferredBySupported = value; }
        }

        private bool _isSexDescriptorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsSexDescriptorSupported
        {
            get { return _isSexDescriptorSupported; }
            set { _isSexDescriptorSupported = value; }
        }

        private bool _isSocialMediaNetworkNameSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsSocialMediaNetworkNameSupported
        {
            get { return _isSocialMediaNetworkNameSupported; }
            set { _isSocialMediaNetworkNameSupported = value; }
        }

        private bool _isSocialMediaUserNameSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsSocialMediaUserNameSupported
        {
            get { return _isSocialMediaUserNameSupported; }
            set { _isSocialMediaUserNameSupported = value; }
        }

        private Func<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability, bool> _isRecruitmentEventAttendanceDisabilityIncluded;
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceDisability, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceDisabilityIncluded
        {
            get { return _isRecruitmentEventAttendanceDisabilityIncluded; }
            set { _isRecruitmentEventAttendanceDisabilityIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument, bool> _isRecruitmentEventAttendancePersonalIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentIncluded
        {
            get { return _isRecruitmentEventAttendancePersonalIdentificationDocumentIncluded; }
            set { _isRecruitmentEventAttendancePersonalIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IRecruitmentEventAttendanceRace, bool> _isRecruitmentEventAttendanceRaceIncluded;
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceRace, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceRaceIncluded
        {
            get { return _isRecruitmentEventAttendanceRaceIncluded; }
            set { _isRecruitmentEventAttendanceRaceIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone, bool> _isRecruitmentEventAttendanceTelephoneIncluded;
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceTelephoneIncluded
        {
            get { return _isRecruitmentEventAttendanceTelephoneIncluded; }
            set { _isRecruitmentEventAttendanceTelephoneIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint, bool> _isRecruitmentEventAttendanceTouchpointIncluded;
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceSynchronizationSourceSupport.IsRecruitmentEventAttendanceTouchpointIncluded
        {
            get { return _isRecruitmentEventAttendanceTouchpointIncluded; }
            set { _isRecruitmentEventAttendanceTouchpointIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceCurrentPosition table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceCurrentPosition : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendanceCurrentPosition()
        {
            RecruitmentEventAttendanceCurrentPositionGradeLevels = new HashSet<RecruitmentEventAttendanceCurrentPositionGradeLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendance RecruitmentEventAttendance { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendance IRecruitmentEventAttendanceCurrentPosition.RecruitmentEventAttendance
        {
            get { return RecruitmentEventAttendance; }
            set { RecruitmentEventAttendance = (RecruitmentEventAttendance) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int?))
                    _academicSubjectDescriptorId = string.IsNullOrWhiteSpace(_academicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int? _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = _academicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId.Value);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string Location  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string NameOfInstitution  { get; set; }
        [RequiredWithNonDefault, StringLength(100), NoDangerousText]
        public virtual string PositionTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPositionGradeLevel> _recruitmentEventAttendanceCurrentPositionGradeLevels;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel> _recruitmentEventAttendanceCurrentPositionGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPositionGradeLevel> RecruitmentEventAttendanceCurrentPositionGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceCurrentPositionGradeLevels)
                    if (item.RecruitmentEventAttendanceCurrentPosition == null)
                        item.RecruitmentEventAttendanceCurrentPosition = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceCurrentPositionGradeLevels;
            }
            set
            {
                _recruitmentEventAttendanceCurrentPositionGradeLevels = value;
                _recruitmentEventAttendanceCurrentPositionGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel, Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPositionGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel> Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition.RecruitmentEventAttendanceCurrentPositionGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceCurrentPositionGradeLevels)
                    if (item.RecruitmentEventAttendanceCurrentPosition == null)
                        item.RecruitmentEventAttendanceCurrentPosition = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceCurrentPositionGradeLevelsCovariant;
            }
            set
            {
                RecruitmentEventAttendanceCurrentPositionGradeLevels = new HashSet<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPositionGradeLevel>(value.Cast<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceCurrentPositionGradeLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendance as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendance = (RecruitmentEventAttendance) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported
        {
            get { return _isAcademicSubjectDescriptorSupported; }
            set { _isAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isLocationSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsLocationSupported
        {
            get { return _isLocationSupported; }
            set { _isLocationSupported = value; }
        }

        private bool _isNameOfInstitutionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsNameOfInstitutionSupported
        {
            get { return _isNameOfInstitutionSupported; }
            set { _isNameOfInstitutionSupported = value; }
        }

        private bool _isPositionTitleSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsPositionTitleSupported
        {
            get { return _isPositionTitleSupported; }
            set { _isPositionTitleSupported = value; }
        }

        private bool _isRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported
        {
            get { return _isRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported; }
            set { _isRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported = value; }
        }

        private Func<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel, bool> _isRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded;
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded
        {
            get { return _isRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded; }
            set { _isRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceCurrentPositionGradeLevel table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceCurrentPositionGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendanceCurrentPositionGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendanceCurrentPosition RecruitmentEventAttendanceCurrentPosition { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPosition IRecruitmentEventAttendanceCurrentPositionGradeLevel.RecruitmentEventAttendanceCurrentPosition
        {
            get { return RecruitmentEventAttendanceCurrentPosition; }
            set { RecruitmentEventAttendanceCurrentPosition = (RecruitmentEventAttendanceCurrentPosition) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendanceCurrentPosition as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendanceCurrentPositionGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendanceCurrentPosition = (RecruitmentEventAttendanceCurrentPosition) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceDisability table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceDisability : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendanceDisability, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendanceDisability()
        {
            RecruitmentEventAttendanceDisabilityDesignations = new HashSet<RecruitmentEventAttendanceDisabilityDesignation>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendance RecruitmentEventAttendance { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendance IRecruitmentEventAttendanceDisability.RecruitmentEventAttendance
        {
            get { return RecruitmentEventAttendance; }
            set { RecruitmentEventAttendance = (RecruitmentEventAttendance) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDescriptorId 
        {
            get
            {
                if (_disabilityDescriptorId == default(int))
                    _disabilityDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDescriptor", _disabilityDescriptor);

                return _disabilityDescriptorId;
            } 
            set
            {
                _disabilityDescriptorId = value;
                _disabilityDescriptor = null;
            }
        }

        private int _disabilityDescriptorId;
        private string _disabilityDescriptor;

        public virtual string DisabilityDescriptor
        {
            get
            {
                if (_disabilityDescriptor == null)
                    _disabilityDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDescriptor", _disabilityDescriptorId);
                    
                return _disabilityDescriptor;
            }
            set
            {
                _disabilityDescriptor = value;
                _disabilityDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? DisabilityDeterminationSourceTypeDescriptorId 
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptorId == default(int?))
                    _disabilityDeterminationSourceTypeDescriptorId = string.IsNullOrWhiteSpace(_disabilityDeterminationSourceTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptor);

                return _disabilityDeterminationSourceTypeDescriptorId;
            } 
            set
            {
                _disabilityDeterminationSourceTypeDescriptorId = value;
                _disabilityDeterminationSourceTypeDescriptor = null;
            }
        }

        private int? _disabilityDeterminationSourceTypeDescriptorId;
        private string _disabilityDeterminationSourceTypeDescriptor;

        public virtual string DisabilityDeterminationSourceTypeDescriptor
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptor == null)
                    _disabilityDeterminationSourceTypeDescriptor = _disabilityDeterminationSourceTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptorId.Value);
                    
                return _disabilityDeterminationSourceTypeDescriptor;
            }
            set
            {
                _disabilityDeterminationSourceTypeDescriptor = value;
                _disabilityDeterminationSourceTypeDescriptorId = default(int?);
            }
        }
        [StringLength(80), NoDangerousText]
        public virtual string DisabilityDiagnosis  { get; set; }
        public virtual int? OrderOfDisability  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisabilityDesignation> _recruitmentEventAttendanceDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation> _recruitmentEventAttendanceDisabilityDesignationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisabilityDesignation> RecruitmentEventAttendanceDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceDisabilityDesignations)
                    if (item.RecruitmentEventAttendanceDisability == null)
                        item.RecruitmentEventAttendanceDisability = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceDisabilityDesignations;
            }
            set
            {
                _recruitmentEventAttendanceDisabilityDesignations = value;
                _recruitmentEventAttendanceDisabilityDesignationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation, Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisabilityDesignation>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation> Entities.Common.TPDM.IRecruitmentEventAttendanceDisability.RecruitmentEventAttendanceDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _recruitmentEventAttendanceDisabilityDesignations)
                    if (item.RecruitmentEventAttendanceDisability == null)
                        item.RecruitmentEventAttendanceDisability = this;
                // -------------------------------------------------------------

                return _recruitmentEventAttendanceDisabilityDesignationsCovariant;
            }
            set
            {
                RecruitmentEventAttendanceDisabilityDesignations = new HashSet<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisabilityDesignation>(value.Cast<Entities.NHibernate.RecruitmentEventAttendanceAggregate.TPDM.RecruitmentEventAttendanceDisabilityDesignation>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDeterminationSourceTypeDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDeterminationSourceTypeDescriptorId", LookupTypeName = "DisabilityDeterminationSourceTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendance as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDescriptorId", DisabilityDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendanceDisability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendanceDisability) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendance = (RecruitmentEventAttendance) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDisabilityDeterminationSourceTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported
        {
            get { return _isDisabilityDeterminationSourceTypeDescriptorSupported; }
            set { _isDisabilityDeterminationSourceTypeDescriptorSupported = value; }
        }

        private bool _isDisabilityDiagnosisSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported
        {
            get { return _isDisabilityDiagnosisSupported; }
            set { _isDisabilityDiagnosisSupported = value; }
        }

        private bool _isOrderOfDisabilitySupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported
        {
            get { return _isOrderOfDisabilitySupported; }
            set { _isOrderOfDisabilitySupported = value; }
        }

        private bool _isRecruitmentEventAttendanceDisabilityDesignationsSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsRecruitmentEventAttendanceDisabilityDesignationsSupported
        {
            get { return _isRecruitmentEventAttendanceDisabilityDesignationsSupported; }
            set { _isRecruitmentEventAttendanceDisabilityDesignationsSupported = value; }
        }

        private Func<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation, bool> _isRecruitmentEventAttendanceDisabilityDesignationIncluded;
        Func<Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation, bool> Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport.IsRecruitmentEventAttendanceDisabilityDesignationIncluded
        {
            get { return _isRecruitmentEventAttendanceDisabilityDesignationIncluded; }
            set { _isRecruitmentEventAttendanceDisabilityDesignationIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceDisabilityDesignation table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceDisabilityDesignation : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendanceDisabilityDesignation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendanceDisability RecruitmentEventAttendanceDisability { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendanceDisability IRecruitmentEventAttendanceDisabilityDesignation.RecruitmentEventAttendanceDisability
        {
            get { return RecruitmentEventAttendanceDisability; }
            set { RecruitmentEventAttendanceDisability = (RecruitmentEventAttendanceDisability) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDesignationDescriptorId 
        {
            get
            {
                if (_disabilityDesignationDescriptorId == default(int))
                    _disabilityDesignationDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDesignationDescriptor", _disabilityDesignationDescriptor);

                return _disabilityDesignationDescriptorId;
            } 
            set
            {
                _disabilityDesignationDescriptorId = value;
                _disabilityDesignationDescriptor = null;
            }
        }

        private int _disabilityDesignationDescriptorId;
        private string _disabilityDesignationDescriptor;

        public virtual string DisabilityDesignationDescriptor
        {
            get
            {
                if (_disabilityDesignationDescriptor == null)
                    _disabilityDesignationDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDesignationDescriptor", _disabilityDesignationDescriptorId);
                    
                return _disabilityDesignationDescriptor;
            }
            set
            {
                _disabilityDesignationDescriptor = value;
                _disabilityDesignationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDesignationDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDesignationDescriptorId", LookupTypeName = "DisabilityDesignationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendanceDisability as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDesignationDescriptorId", DisabilityDesignationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendanceDisabilityDesignation) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendanceDisability = (RecruitmentEventAttendanceDisability) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendancePersonalIdentificationDocument table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendancePersonalIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendancePersonalIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendance RecruitmentEventAttendance { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendance IRecruitmentEventAttendancePersonalIdentificationDocument.RecruitmentEventAttendance
        {
            get { return RecruitmentEventAttendance; }
            set { RecruitmentEventAttendance = (RecruitmentEventAttendance) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendance as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendance = (RecruitmentEventAttendance) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceRace table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceRace : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendanceRace, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceRaceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendanceRace()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendance RecruitmentEventAttendance { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendance IRecruitmentEventAttendanceRace.RecruitmentEventAttendance
        {
            get { return RecruitmentEventAttendance; }
            set { RecruitmentEventAttendance = (RecruitmentEventAttendance) value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int RaceDescriptorId 
        {
            get
            {
                if (_raceDescriptorId == default(int))
                    _raceDescriptorId = DescriptorsCache.GetCache().GetId("RaceDescriptor", _raceDescriptor);

                return _raceDescriptorId;
            } 
            set
            {
                _raceDescriptorId = value;
                _raceDescriptor = null;
            }
        }

        private int _raceDescriptorId;
        private string _raceDescriptor;

        public virtual string RaceDescriptor
        {
            get
            {
                if (_raceDescriptor == null)
                    _raceDescriptor = DescriptorsCache.GetCache().GetValue("RaceDescriptor", _raceDescriptorId);
                    
                return _raceDescriptor;
            }
            set
            {
                _raceDescriptor = value;
                _raceDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RaceDescriptor", new LookupColumnDetails { PropertyName = "RaceDescriptorId", LookupTypeName = "RaceDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendance as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RaceDescriptorId", RaceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendanceRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendanceRace) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendance = (RecruitmentEventAttendance) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendance RecruitmentEventAttendance { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendance IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications.RecruitmentEventAttendance
        {
            get { return RecruitmentEventAttendance; }
            set { RecruitmentEventAttendance = (RecruitmentEventAttendance) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? CapacityToServe  { get; set; }
        public virtual bool Eligible  { get; set; }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? YearsOfServiceCurrentPlacement  { get; set; }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal YearsOfServiceTotal  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendance as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendance = (RecruitmentEventAttendance) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCapacityToServeSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport.IsCapacityToServeSupported
        {
            get { return _isCapacityToServeSupported; }
            set { _isCapacityToServeSupported = value; }
        }

        private bool _isEligibleSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport.IsEligibleSupported
        {
            get { return _isEligibleSupported; }
            set { _isEligibleSupported = value; }
        }

        private bool _isYearsOfServiceCurrentPlacementSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport.IsYearsOfServiceCurrentPlacementSupported
        {
            get { return _isYearsOfServiceCurrentPlacementSupported; }
            set { _isYearsOfServiceCurrentPlacementSupported = value; }
        }

        private bool _isYearsOfServiceTotalSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport.IsYearsOfServiceTotalSupported
        {
            get { return _isYearsOfServiceTotalSupported; }
            set { _isYearsOfServiceTotalSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceTelephone table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceTelephone : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendanceTelephone()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendance RecruitmentEventAttendance { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendance IRecruitmentEventAttendanceTelephone.RecruitmentEventAttendance
        {
            get { return RecruitmentEventAttendance; }
            set { RecruitmentEventAttendance = (RecruitmentEventAttendance) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(24), NoDangerousText, NoWhitespace]
        public virtual string TelephoneNumber  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TelephoneNumberTypeDescriptorId 
        {
            get
            {
                if (_telephoneNumberTypeDescriptorId == default(int))
                    _telephoneNumberTypeDescriptorId = DescriptorsCache.GetCache().GetId("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptor);

                return _telephoneNumberTypeDescriptorId;
            } 
            set
            {
                _telephoneNumberTypeDescriptorId = value;
                _telephoneNumberTypeDescriptor = null;
            }
        }

        private int _telephoneNumberTypeDescriptorId;
        private string _telephoneNumberTypeDescriptor;

        public virtual string TelephoneNumberTypeDescriptor
        {
            get
            {
                if (_telephoneNumberTypeDescriptor == null)
                    _telephoneNumberTypeDescriptor = DescriptorsCache.GetCache().GetValue("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptorId);
                    
                return _telephoneNumberTypeDescriptor;
            }
            set
            {
                _telephoneNumberTypeDescriptor = value;
                _telephoneNumberTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual int? OrderOfPriority  { get; set; }
        public virtual bool? TextMessageCapabilityIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TelephoneNumberTypeDescriptor", new LookupColumnDetails { PropertyName = "TelephoneNumberTypeDescriptorId", LookupTypeName = "TelephoneNumberTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendance as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TelephoneNumber", TelephoneNumber);
            keyValues.Add("TelephoneNumberTypeDescriptorId", TelephoneNumberTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendanceTelephone) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendance = (RecruitmentEventAttendance) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isOrderOfPrioritySupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported
        {
            get { return _isOrderOfPrioritySupported; }
            set { _isOrderOfPrioritySupported = value; }
        }

        private bool _isTextMessageCapabilityIndicatorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported
        {
            get { return _isTextMessageCapabilityIndicatorSupported; }
            set { _isTextMessageCapabilityIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendanceTouchpoint table of the RecruitmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendanceTouchpoint : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpointSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEventAttendanceTouchpoint()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual RecruitmentEventAttendance RecruitmentEventAttendance { get; set; }

        Entities.Common.TPDM.IRecruitmentEventAttendance IRecruitmentEventAttendanceTouchpoint.RecruitmentEventAttendance
        {
            get { return RecruitmentEventAttendance; }
            set { RecruitmentEventAttendance = (RecruitmentEventAttendance) value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string TouchpointContent  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime TouchpointDate 
        {
            get { return _touchpointDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _touchpointDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _touchpointDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (RecruitmentEventAttendance as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TouchpointContent", TouchpointContent);
            keyValues.Add("TouchpointDate", TouchpointDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendanceTouchpoint) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            RecruitmentEventAttendance = (RecruitmentEventAttendance) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: RecruitmentEventAttendeeTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.RecruitmentEventAttendeeTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventAttendeeTypeDescriptor table of the RecruitmentEventAttendeeTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventAttendeeTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int RecruitmentEventAttendeeTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("RecruitmentEventAttendeeTypeDescriptorId", RecruitmentEventAttendeeTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RecruitmentEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.RecruitmentEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventTypeDescriptor table of the RecruitmentEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IRecruitmentEventTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int RecruitmentEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("RecruitmentEventTypeDescriptorId", RecruitmentEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RubricDimension

namespace EdFi.Ods.Entities.NHibernate.RubricDimensionAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="RubricDimension"/> entity.
    /// </summary>
    public class RubricDimensionReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual int RubricRating { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("RubricRating", RubricRating);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RubricDimension table of the RubricDimension aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RubricDimension : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IRubricDimension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RubricDimension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature]
        public virtual int RubricRating  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(1024), NoDangerousText]
        public virtual string CriterionDescription  { get; set; }
        public virtual int? DimensionOrder  { get; set; }
        public virtual int? RubricRatingLevelDescriptorId 
        {
            get
            {
                if (_rubricRatingLevelDescriptorId == default(int?))
                    _rubricRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_rubricRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("RubricRatingLevelDescriptor", _rubricRatingLevelDescriptor);

                return _rubricRatingLevelDescriptorId;
            } 
            set
            {
                _rubricRatingLevelDescriptorId = value;
                _rubricRatingLevelDescriptor = null;
            }
        }

        private int? _rubricRatingLevelDescriptorId;
        private string _rubricRatingLevelDescriptor;

        public virtual string RubricRatingLevelDescriptor
        {
            get
            {
                if (_rubricRatingLevelDescriptor == null)
                    _rubricRatingLevelDescriptor = _rubricRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("RubricRatingLevelDescriptor", _rubricRatingLevelDescriptorId.Value);
                    
                return _rubricRatingLevelDescriptor;
            }
            set
            {
                _rubricRatingLevelDescriptor = value;
                _rubricRatingLevelDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IRubricDimension.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IRubricDimension.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "RubricRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "RubricRatingLevelDescriptorId", LookupTypeName = "RubricRatingLevelDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("RubricRating", RubricRating);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRubricDimension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRubricDimension) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCriterionDescriptionSupported = true;
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsCriterionDescriptionSupported
        {
            get { return _isCriterionDescriptionSupported; }
            set { _isCriterionDescriptionSupported = value; }
        }

        private bool _isDimensionOrderSupported = true;
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsDimensionOrderSupported
        {
            get { return _isDimensionOrderSupported; }
            set { _isDimensionOrderSupported = value; }
        }

        private bool _isRubricRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsRubricRatingLevelDescriptorSupported
        {
            get { return _isRubricRatingLevelDescriptorSupported; }
            set { _isRubricRatingLevelDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RubricRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.RubricRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RubricRatingLevelDescriptor table of the RubricRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RubricRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IRubricRatingLevelDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int RubricRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("RubricRatingLevelDescriptorId", RubricRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRubricRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRubricRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SalaryTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.SalaryTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SalaryTypeDescriptor table of the SalaryTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SalaryTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ISalaryTypeDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int SalaryTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("SalaryTypeDescriptorId", SalaryTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISalaryTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISalaryTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: School

namespace EdFi.Ods.Entities.NHibernate.SchoolAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SchoolExtension table of the School aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SchoolExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ISchoolExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SchoolExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.School School { get; set; }

        Entities.Common.EdFi.ISchool ISchoolExtension.School
        {
            get { return School; }
            set { School = (EdFi.School) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AccreditationStatusDescriptorId 
        {
            get
            {
                if (_accreditationStatusDescriptorId == default(int?))
                    _accreditationStatusDescriptorId = string.IsNullOrWhiteSpace(_accreditationStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AccreditationStatusDescriptor", _accreditationStatusDescriptor);

                return _accreditationStatusDescriptorId;
            } 
            set
            {
                _accreditationStatusDescriptorId = value;
                _accreditationStatusDescriptor = null;
            }
        }

        private int? _accreditationStatusDescriptorId;
        private string _accreditationStatusDescriptor;

        public virtual string AccreditationStatusDescriptor
        {
            get
            {
                if (_accreditationStatusDescriptor == null)
                    _accreditationStatusDescriptor = _accreditationStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AccreditationStatusDescriptor", _accreditationStatusDescriptorId.Value);
                    
                return _accreditationStatusDescriptor;
            }
            set
            {
                _accreditationStatusDescriptor = value;
                _accreditationStatusDescriptorId = default(int?);
            }
        }
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        public virtual bool? ImprovingSchool  { get; set; }
        public virtual int? PostSecondaryInstitutionId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData PostSecondaryInstitutionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the PostSecondaryInstitution resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISchoolExtension.PostSecondaryInstitutionResourceId
        {
            get { return PostSecondaryInstitutionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AccreditationStatusDescriptor", new LookupColumnDetails { PropertyName = "AccreditationStatusDescriptorId", LookupTypeName = "AccreditationStatusDescriptor"} },
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (School as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISchoolExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISchoolExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            School = (EdFi.School) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAccreditationStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsAccreditationStatusDescriptorSupported
        {
            get { return _isAccreditationStatusDescriptorSupported; }
            set { _isAccreditationStatusDescriptorSupported = value; }
        }

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        private bool _isImprovingSchoolSupported = true;
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsImprovingSchoolSupported
        {
            get { return _isImprovingSchoolSupported; }
            set { _isImprovingSchoolSupported = value; }
        }

        private bool _isPostSecondaryInstitutionIdSupported = true;
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsPostSecondaryInstitutionIdSupported
        {
            get { return _isPostSecondaryInstitutionIdSupported; }
            set { _isPostSecondaryInstitutionIdSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Staff

namespace EdFi.Ods.Entities.NHibernate.StaffAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducatorPreparationProgram table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducatorPreparationProgram : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffEducatorPreparationProgram, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducatorPreparationProgramSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducatorPreparationProgram()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffEducatorPreparationProgram.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string ProgramName  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramTypeDescriptorId 
        {
            get
            {
                if (_programTypeDescriptorId == default(int))
                    _programTypeDescriptorId = DescriptorsCache.GetCache().GetId("ProgramTypeDescriptor", _programTypeDescriptor);

                return _programTypeDescriptorId;
            } 
            set
            {
                _programTypeDescriptorId = value;
                _programTypeDescriptor = null;
            }
        }

        private int _programTypeDescriptorId;
        private string _programTypeDescriptor;

        public virtual string ProgramTypeDescriptor
        {
            get
            {
                if (_programTypeDescriptor == null)
                    _programTypeDescriptor = DescriptorsCache.GetCache().GetValue("ProgramTypeDescriptor", _programTypeDescriptorId);
                    
                return _programTypeDescriptor;
            }
            set
            {
                _programTypeDescriptor = value;
                _programTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramReferenceData EducatorPreparationProgramReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducatorPreparationProgram discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffEducatorPreparationProgram.EducatorPreparationProgramDiscriminator
        {
            get { return EducatorPreparationProgramReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducatorPreparationProgram resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffEducatorPreparationProgram.EducatorPreparationProgramResourceId
        {
            get { return EducatorPreparationProgramReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducatorPreparationProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducatorPreparationProgram) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducatorResearch table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducatorResearch : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffEducatorResearch, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducatorResearchSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducatorResearch()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffEducatorResearch.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime ResearchExperienceDate 
        {
            get { return _researchExperienceDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _researchExperienceDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _researchExperienceDate;
        
        [StringLength(1024), NoDangerousText]
        public virtual string ResearchExperienceDescription  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string ResearchExperienceTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducatorResearch)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducatorResearch) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResearchExperienceDateSupported = true;
        bool Entities.Common.TPDM.IStaffEducatorResearchSynchronizationSourceSupport.IsResearchExperienceDateSupported
        {
            get { return _isResearchExperienceDateSupported; }
            set { _isResearchExperienceDateSupported = value; }
        }

        private bool _isResearchExperienceDescriptionSupported = true;
        bool Entities.Common.TPDM.IStaffEducatorResearchSynchronizationSourceSupport.IsResearchExperienceDescriptionSupported
        {
            get { return _isResearchExperienceDescriptionSupported; }
            set { _isResearchExperienceDescriptionSupported = value; }
        }

        private bool _isResearchExperienceTitleSupported = true;
        bool Entities.Common.TPDM.IStaffEducatorResearchSynchronizationSourceSupport.IsResearchExperienceTitleSupported
        {
            get { return _isResearchExperienceTitleSupported; }
            set { _isResearchExperienceTitleSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffHighlyQualifiedAcademicSubject table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffHighlyQualifiedAcademicSubject : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffHighlyQualifiedAcademicSubject()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffHighlyQualifiedAcademicSubject.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int))
                    _academicSubjectDescriptorId = DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicSubjectDescriptorId", AcademicSubjectDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffExtension table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.EdFi.IStaff IStaffExtension.Staff
        {
            get { return Staff; }
            set { Staff = (EdFi.Staff) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EducationOrganizationId  { get; set; }
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string RequisitionNumber  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // This property implementation exists to provide the mapper with reflection-based access to the target instance's .NET type (for creating new instances)
        public Entities.NHibernate.StaffAggregate.TPDM.StaffEducatorResearch StaffEducatorResearch
        {
            get { return (Entities.NHibernate.StaffAggregate.TPDM.StaffEducatorResearch) (this as Entities.Common.TPDM.IStaffExtension).StaffEducatorResearch;  }
            set { (this as Entities.Common.TPDM.IStaffExtension).StaffEducatorResearch = value;  }
        }

        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        Entities.Common.TPDM.IStaffEducatorResearch Entities.Common.TPDM.IStaffExtension.StaffEducatorResearch
        {
            get
            {
                var list = (IList) Staff.AggregateExtensions["TPDM_StaffEducatorResearches"];

                if (list != null && list.Count > 0)
                    return (Entities.Common.TPDM.IStaffEducatorResearch) list[0];

                return null;
            }
            set
            {
                // Delete the existing object
                var list = (IList) Staff.AggregateExtensions["TPDM_StaffEducatorResearches"] ?? new List<object>();
                list.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    list.Add(value);

                    // Set the parent reference
                    (value as IChildEntity).SetParent(Staff);
                }
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.OpenStaffPositionAggregate.EdFi.OpenStaffPositionReferenceData OpenStaffPositionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffExtension.OpenStaffPositionDiscriminator
        {
            get { return OpenStaffPositionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffExtension.OpenStaffPositionResourceId
        {
            get { return OpenStaffPositionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<Entities.Common.TPDM.IStaffEducatorPreparationProgram> _staffEducatorPreparationPrograms;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.IStaffEducatorPreparationProgram> IStaffExtension.StaffEducatorPreparationPrograms
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, StaffEducatorPreparationProgram>((IList<object>) Staff.AggregateExtensions["TPDM_StaffEducatorPreparationPrograms"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (StaffEducatorPreparationProgram item in sourceList)
                    if (item.Staff == null)
                        item.Staff = this.Staff;
                // -------------------------------------------------------------

                if (_staffEducatorPreparationPrograms == null)
                    _staffEducatorPreparationPrograms = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffEducatorPreparationProgram, StaffEducatorPreparationProgram>(sourceList);

                return _staffEducatorPreparationPrograms;
            }
            set
            {
                Staff.AggregateExtensions["TPDM_StaffEducatorPreparationPrograms"] = value;
            }
        }
        private ICollection<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject> _staffHighlyQualifiedAcademicSubjects;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject> IStaffExtension.StaffHighlyQualifiedAcademicSubjects
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, StaffHighlyQualifiedAcademicSubject>((IList<object>) Staff.AggregateExtensions["TPDM_StaffHighlyQualifiedAcademicSubjects"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (StaffHighlyQualifiedAcademicSubject item in sourceList)
                    if (item.Staff == null)
                        item.Staff = this.Staff;
                // -------------------------------------------------------------

                if (_staffHighlyQualifiedAcademicSubjects == null)
                    _staffHighlyQualifiedAcademicSubjects = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, StaffHighlyQualifiedAcademicSubject>(sourceList);

                return _staffHighlyQualifiedAcademicSubjects;
            }
            set
            {
                Staff.AggregateExtensions["TPDM_StaffHighlyQualifiedAcademicSubjects"] = value;
            }
        }
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isRequisitionNumberSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsRequisitionNumberSupported
        {
            get { return _isRequisitionNumberSupported; }
            set { _isRequisitionNumberSupported = value; }
        }

        private bool _isStaffEducatorPreparationProgramsSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffEducatorPreparationProgramsSupported
        {
            get { return _isStaffEducatorPreparationProgramsSupported; }
            set { _isStaffEducatorPreparationProgramsSupported = value; }
        }

        private bool _isStaffEducatorResearchSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffEducatorResearchSupported
        {
            get { return _isStaffEducatorResearchSupported; }
            set { _isStaffEducatorResearchSupported = value; }
        }

        private bool _isStaffHighlyQualifiedAcademicSubjectsSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported
        {
            get { return _isStaffHighlyQualifiedAcademicSubjectsSupported; }
            set { _isStaffHighlyQualifiedAcademicSubjectsSupported = value; }
        }

        private Func<Entities.Common.TPDM.IStaffEducatorPreparationProgram, bool> _isStaffEducatorPreparationProgramIncluded;
        Func<Entities.Common.TPDM.IStaffEducatorPreparationProgram, bool> Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffEducatorPreparationProgramIncluded
        {
            get { return _isStaffEducatorPreparationProgramIncluded; }
            set { _isStaffEducatorPreparationProgramIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, bool> _isStaffHighlyQualifiedAcademicSubjectIncluded;
        Func<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, bool> Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded
        {
            get { return _isStaffHighlyQualifiedAcademicSubjectIncluded; }
            set { _isStaffHighlyQualifiedAcademicSubjectIncluded = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffEducationOrganizationAssignmentAssociationAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationAssignmentAssociationExtension table of the StaffEducationOrganizationAssignmentAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationAssignmentAssociationExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducationOrganizationAssignmentAssociationExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StaffEducationOrganizationAssignmentAssociation StaffEducationOrganizationAssignmentAssociation { get; set; }

        Entities.Common.EdFi.IStaffEducationOrganizationAssignmentAssociation IStaffEducationOrganizationAssignmentAssociationExtension.StaffEducationOrganizationAssignmentAssociation
        {
            get { return StaffEducationOrganizationAssignmentAssociation; }
            set { StaffEducationOrganizationAssignmentAssociation = (EdFi.StaffEducationOrganizationAssignmentAssociation) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? YearsOfExperienceAtCurrentEducationOrganization  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffEducationOrganizationAssignmentAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffEducationOrganizationAssignmentAssociation = (EdFi.StaffEducationOrganizationAssignmentAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isYearsOfExperienceAtCurrentEducationOrganizationSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported
        {
            get { return _isYearsOfExperienceAtCurrentEducationOrganizationSupported; }
            set { _isYearsOfExperienceAtCurrentEducationOrganizationSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffEducationOrganizationEmploymentAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffEducationOrganizationEmploymentAssociationAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationEmploymentAssociationBackgroundCheck table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationBackgroundCheck : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducationOrganizationEmploymentAssociationBackgroundCheck()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StaffEducationOrganizationEmploymentAssociation StaffEducationOrganizationEmploymentAssociation { get; set; }

        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension IStaffEducationOrganizationEmploymentAssociationBackgroundCheck.StaffEducationOrganizationEmploymentAssociationExtension
        {
            get { return (IStaffEducationOrganizationEmploymentAssociationExtension) StaffEducationOrganizationEmploymentAssociation.Extensions["TPDM"]; }
            set { StaffEducationOrganizationEmploymentAssociation.Extensions["TPDM"] = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int BackgroundCheckTypeDescriptorId 
        {
            get
            {
                if (_backgroundCheckTypeDescriptorId == default(int))
                    _backgroundCheckTypeDescriptorId = DescriptorsCache.GetCache().GetId("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptor);

                return _backgroundCheckTypeDescriptorId;
            } 
            set
            {
                _backgroundCheckTypeDescriptorId = value;
                _backgroundCheckTypeDescriptor = null;
            }
        }

        private int _backgroundCheckTypeDescriptorId;
        private string _backgroundCheckTypeDescriptor;

        public virtual string BackgroundCheckTypeDescriptor
        {
            get
            {
                if (_backgroundCheckTypeDescriptor == null)
                    _backgroundCheckTypeDescriptor = DescriptorsCache.GetCache().GetValue("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptorId);
                    
                return _backgroundCheckTypeDescriptor;
            }
            set
            {
                _backgroundCheckTypeDescriptor = value;
                _backgroundCheckTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BackgroundCheckCompletedDate 
        {
            get { return _backgroundCheckCompletedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _backgroundCheckCompletedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _backgroundCheckCompletedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _backgroundCheckCompletedDate;
        
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BackgroundCheckRequestedDate 
        {
            get { return _backgroundCheckRequestedDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _backgroundCheckRequestedDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _backgroundCheckRequestedDate;
        
        public virtual int? BackgroundCheckStatusDescriptorId 
        {
            get
            {
                if (_backgroundCheckStatusDescriptorId == default(int?))
                    _backgroundCheckStatusDescriptorId = string.IsNullOrWhiteSpace(_backgroundCheckStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptor);

                return _backgroundCheckStatusDescriptorId;
            } 
            set
            {
                _backgroundCheckStatusDescriptorId = value;
                _backgroundCheckStatusDescriptor = null;
            }
        }

        private int? _backgroundCheckStatusDescriptorId;
        private string _backgroundCheckStatusDescriptor;

        public virtual string BackgroundCheckStatusDescriptor
        {
            get
            {
                if (_backgroundCheckStatusDescriptor == null)
                    _backgroundCheckStatusDescriptor = _backgroundCheckStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptorId.Value);
                    
                return _backgroundCheckStatusDescriptor;
            }
            set
            {
                _backgroundCheckStatusDescriptor = value;
                _backgroundCheckStatusDescriptorId = default(int?);
            }
        }
        public virtual bool? Fingerprint  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "BackgroundCheckStatusDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckStatusDescriptorId", LookupTypeName = "BackgroundCheckStatusDescriptor"} },
                { "BackgroundCheckTypeDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckTypeDescriptorId", LookupTypeName = "BackgroundCheckTypeDescriptor"} },
                { "EmploymentStatusDescriptor", new LookupColumnDetails { PropertyName = "EmploymentStatusDescriptorId", LookupTypeName = "EmploymentStatusDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffEducationOrganizationEmploymentAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BackgroundCheckTypeDescriptorId", BackgroundCheckTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffEducationOrganizationEmploymentAssociation = (EdFi.StaffEducationOrganizationEmploymentAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBackgroundCheckCompletedDateSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported
        {
            get { return _isBackgroundCheckCompletedDateSupported; }
            set { _isBackgroundCheckCompletedDateSupported = value; }
        }

        private bool _isBackgroundCheckRequestedDateSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported
        {
            get { return _isBackgroundCheckRequestedDateSupported; }
            set { _isBackgroundCheckRequestedDateSupported = value; }
        }

        private bool _isBackgroundCheckStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported
        {
            get { return _isBackgroundCheckStatusDescriptorSupported; }
            set { _isBackgroundCheckStatusDescriptorSupported = value; }
        }

        private bool _isFingerprintSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported
        {
            get { return _isFingerprintSupported; }
            set { _isFingerprintSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationEmploymentAssociationSalary table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationSalary : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducationOrganizationEmploymentAssociationSalary()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StaffEducationOrganizationEmploymentAssociation StaffEducationOrganizationEmploymentAssociation { get; set; }

        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension IStaffEducationOrganizationEmploymentAssociationSalary.StaffEducationOrganizationEmploymentAssociationExtension
        {
            get { return (IStaffEducationOrganizationEmploymentAssociationExtension) StaffEducationOrganizationEmploymentAssociation.Extensions["TPDM"]; }
            set { StaffEducationOrganizationEmploymentAssociation.Extensions["TPDM"] = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999999999999.9999", "999999999999999.9999")]
        public virtual decimal? SalaryAmount  { get; set; }
        public virtual int? SalaryMaxRange  { get; set; }
        public virtual int? SalaryMinRange  { get; set; }
        public virtual int? SalaryTypeDescriptorId 
        {
            get
            {
                if (_salaryTypeDescriptorId == default(int?))
                    _salaryTypeDescriptorId = string.IsNullOrWhiteSpace(_salaryTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SalaryTypeDescriptor", _salaryTypeDescriptor);

                return _salaryTypeDescriptorId;
            } 
            set
            {
                _salaryTypeDescriptorId = value;
                _salaryTypeDescriptor = null;
            }
        }

        private int? _salaryTypeDescriptorId;
        private string _salaryTypeDescriptor;

        public virtual string SalaryTypeDescriptor
        {
            get
            {
                if (_salaryTypeDescriptor == null)
                    _salaryTypeDescriptor = _salaryTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SalaryTypeDescriptor", _salaryTypeDescriptorId.Value);
                    
                return _salaryTypeDescriptor;
            }
            set
            {
                _salaryTypeDescriptor = value;
                _salaryTypeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EmploymentStatusDescriptor", new LookupColumnDetails { PropertyName = "EmploymentStatusDescriptorId", LookupTypeName = "EmploymentStatusDescriptor"} },
                { "SalaryTypeDescriptor", new LookupColumnDetails { PropertyName = "SalaryTypeDescriptorId", LookupTypeName = "SalaryTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffEducationOrganizationEmploymentAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffEducationOrganizationEmploymentAssociation = (EdFi.StaffEducationOrganizationEmploymentAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isSalaryAmountSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport.IsSalaryAmountSupported
        {
            get { return _isSalaryAmountSupported; }
            set { _isSalaryAmountSupported = value; }
        }

        private bool _isSalaryMaxRangeSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport.IsSalaryMaxRangeSupported
        {
            get { return _isSalaryMaxRangeSupported; }
            set { _isSalaryMaxRangeSupported = value; }
        }

        private bool _isSalaryMinRangeSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport.IsSalaryMinRangeSupported
        {
            get { return _isSalaryMinRangeSupported; }
            set { _isSalaryMinRangeSupported = value; }
        }

        private bool _isSalaryTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport.IsSalaryTypeDescriptorSupported
        {
            get { return _isSalaryTypeDescriptorSupported; }
            set { _isSalaryTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationEmploymentAssociationSeniority table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationSeniority : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSenioritySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducationOrganizationEmploymentAssociationSeniority()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StaffEducationOrganizationEmploymentAssociation StaffEducationOrganizationEmploymentAssociation { get; set; }

        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension IStaffEducationOrganizationEmploymentAssociationSeniority.StaffEducationOrganizationEmploymentAssociationExtension
        {
            get { return (IStaffEducationOrganizationEmploymentAssociationExtension) StaffEducationOrganizationEmploymentAssociation.Extensions["TPDM"]; }
            set { StaffEducationOrganizationEmploymentAssociation.Extensions["TPDM"] = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int CredentialFieldDescriptorId 
        {
            get
            {
                if (_credentialFieldDescriptorId == default(int))
                    _credentialFieldDescriptorId = DescriptorsCache.GetCache().GetId("CredentialFieldDescriptor", _credentialFieldDescriptor);

                return _credentialFieldDescriptorId;
            } 
            set
            {
                _credentialFieldDescriptorId = value;
                _credentialFieldDescriptor = null;
            }
        }

        private int _credentialFieldDescriptorId;
        private string _credentialFieldDescriptor;

        public virtual string CredentialFieldDescriptor
        {
            get
            {
                if (_credentialFieldDescriptor == null)
                    _credentialFieldDescriptor = DescriptorsCache.GetCache().GetValue("CredentialFieldDescriptor", _credentialFieldDescriptorId);
                    
                return _credentialFieldDescriptor;
            }
            set
            {
                _credentialFieldDescriptor = value;
                _credentialFieldDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string NameOfInstitution  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal YearsExperience  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CredentialFieldDescriptor", new LookupColumnDetails { PropertyName = "CredentialFieldDescriptorId", LookupTypeName = "CredentialFieldDescriptor"} },
                { "EmploymentStatusDescriptor", new LookupColumnDetails { PropertyName = "EmploymentStatusDescriptorId", LookupTypeName = "EmploymentStatusDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffEducationOrganizationEmploymentAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CredentialFieldDescriptorId", CredentialFieldDescriptorId);
            keyValues.Add("NameOfInstitution", NameOfInstitution);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffEducationOrganizationEmploymentAssociation = (EdFi.StaffEducationOrganizationEmploymentAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isYearsExperienceSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSenioritySynchronizationSourceSupport.IsYearsExperienceSupported
        {
            get { return _isYearsExperienceSupported; }
            set { _isYearsExperienceSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationEmploymentAssociationExtension table of the StaffEducationOrganizationEmploymentAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationEmploymentAssociationExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducationOrganizationEmploymentAssociationExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StaffEducationOrganizationEmploymentAssociation StaffEducationOrganizationEmploymentAssociation { get; set; }

        Entities.Common.EdFi.IStaffEducationOrganizationEmploymentAssociation IStaffEducationOrganizationEmploymentAssociationExtension.StaffEducationOrganizationEmploymentAssociation
        {
            get { return StaffEducationOrganizationEmploymentAssociation; }
            set { StaffEducationOrganizationEmploymentAssociation = (EdFi.StaffEducationOrganizationEmploymentAssociation) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? LengthOfContractDescriptorId 
        {
            get
            {
                if (_lengthOfContractDescriptorId == default(int?))
                    _lengthOfContractDescriptorId = string.IsNullOrWhiteSpace(_lengthOfContractDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LengthOfContractDescriptor", _lengthOfContractDescriptor);

                return _lengthOfContractDescriptorId;
            } 
            set
            {
                _lengthOfContractDescriptorId = value;
                _lengthOfContractDescriptor = null;
            }
        }

        private int? _lengthOfContractDescriptorId;
        private string _lengthOfContractDescriptor;

        public virtual string LengthOfContractDescriptor
        {
            get
            {
                if (_lengthOfContractDescriptor == null)
                    _lengthOfContractDescriptor = _lengthOfContractDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LengthOfContractDescriptor", _lengthOfContractDescriptorId.Value);
                    
                return _lengthOfContractDescriptor;
            }
            set
            {
                _lengthOfContractDescriptor = value;
                _lengthOfContractDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? ProbationCompleteDate 
        {
            get { return _probationCompleteDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _probationCompleteDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _probationCompleteDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _probationCompleteDate;
        
        public virtual bool? Tenured  { get; set; }
        public virtual bool? TenureTrack  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // This property implementation exists to provide the mapper with reflection-based access to the target instance's .NET type (for creating new instances)
        public Entities.NHibernate.StaffEducationOrganizationEmploymentAssociationAggregate.TPDM.StaffEducationOrganizationEmploymentAssociationSalary StaffEducationOrganizationEmploymentAssociationSalary
        {
            get { return (Entities.NHibernate.StaffEducationOrganizationEmploymentAssociationAggregate.TPDM.StaffEducationOrganizationEmploymentAssociationSalary) (this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension).StaffEducationOrganizationEmploymentAssociationSalary;  }
            set { (this as Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension).StaffEducationOrganizationEmploymentAssociationSalary = value;  }
        }

        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension.StaffEducationOrganizationEmploymentAssociationSalary
        {
            get
            {
                var list = (IList) StaffEducationOrganizationEmploymentAssociation.AggregateExtensions["TPDM_StaffEducationOrganizationEmploymentAssociationSalaries"];

                if (list != null && list.Count > 0)
                    return (Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSalary) list[0];

                return null;
            }
            set
            {
                // Delete the existing object
                var list = (IList) StaffEducationOrganizationEmploymentAssociation.AggregateExtensions["TPDM_StaffEducationOrganizationEmploymentAssociationSalaries"] ?? new List<object>();
                list.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    list.Add(value);

                    // Set the parent reference
                    (value as IChildEntity).SetParent(StaffEducationOrganizationEmploymentAssociation);
                }
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck> _staffEducationOrganizationEmploymentAssociationBackgroundChecks;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck> IStaffEducationOrganizationEmploymentAssociationExtension.StaffEducationOrganizationEmploymentAssociationBackgroundChecks
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, StaffEducationOrganizationEmploymentAssociationBackgroundCheck>((IList<object>) StaffEducationOrganizationEmploymentAssociation.AggregateExtensions["TPDM_StaffEducationOrganizationEmploymentAssociationBackgroundChecks"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (StaffEducationOrganizationEmploymentAssociationBackgroundCheck item in sourceList)
                    if (item.StaffEducationOrganizationEmploymentAssociation == null)
                        item.StaffEducationOrganizationEmploymentAssociation = this.StaffEducationOrganizationEmploymentAssociation;
                // -------------------------------------------------------------

                if (_staffEducationOrganizationEmploymentAssociationBackgroundChecks == null)
                    _staffEducationOrganizationEmploymentAssociationBackgroundChecks = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, StaffEducationOrganizationEmploymentAssociationBackgroundCheck>(sourceList);

                return _staffEducationOrganizationEmploymentAssociationBackgroundChecks;
            }
            set
            {
                StaffEducationOrganizationEmploymentAssociation.AggregateExtensions["TPDM_StaffEducationOrganizationEmploymentAssociationBackgroundChecks"] = value;
            }
        }
        private ICollection<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority> _staffEducationOrganizationEmploymentAssociationSeniorities;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority> IStaffEducationOrganizationEmploymentAssociationExtension.StaffEducationOrganizationEmploymentAssociationSeniorities
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, StaffEducationOrganizationEmploymentAssociationSeniority>((IList<object>) StaffEducationOrganizationEmploymentAssociation.AggregateExtensions["TPDM_StaffEducationOrganizationEmploymentAssociationSeniorities"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (StaffEducationOrganizationEmploymentAssociationSeniority item in sourceList)
                    if (item.StaffEducationOrganizationEmploymentAssociation == null)
                        item.StaffEducationOrganizationEmploymentAssociation = this.StaffEducationOrganizationEmploymentAssociation;
                // -------------------------------------------------------------

                if (_staffEducationOrganizationEmploymentAssociationSeniorities == null)
                    _staffEducationOrganizationEmploymentAssociationSeniorities = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority, StaffEducationOrganizationEmploymentAssociationSeniority>(sourceList);

                return _staffEducationOrganizationEmploymentAssociationSeniorities;
            }
            set
            {
                StaffEducationOrganizationEmploymentAssociation.AggregateExtensions["TPDM_StaffEducationOrganizationEmploymentAssociationSeniorities"] = value;
            }
        }
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LengthOfContractDescriptor", new LookupColumnDetails { PropertyName = "LengthOfContractDescriptorId", LookupTypeName = "LengthOfContractDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffEducationOrganizationEmploymentAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffEducationOrganizationEmploymentAssociation = (EdFi.StaffEducationOrganizationEmploymentAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isLengthOfContractDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsLengthOfContractDescriptorSupported
        {
            get { return _isLengthOfContractDescriptorSupported; }
            set { _isLengthOfContractDescriptorSupported = value; }
        }

        private bool _isProbationCompleteDateSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported
        {
            get { return _isProbationCompleteDateSupported; }
            set { _isProbationCompleteDateSupported = value; }
        }

        private bool _isStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported
        {
            get { return _isStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported; }
            set { _isStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported = value; }
        }

        private bool _isStaffEducationOrganizationEmploymentAssociationSalarySupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationSalarySupported
        {
            get { return _isStaffEducationOrganizationEmploymentAssociationSalarySupported; }
            set { _isStaffEducationOrganizationEmploymentAssociationSalarySupported = value; }
        }

        private bool _isStaffEducationOrganizationEmploymentAssociationSenioritiesSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationSenioritiesSupported
        {
            get { return _isStaffEducationOrganizationEmploymentAssociationSenioritiesSupported; }
            set { _isStaffEducationOrganizationEmploymentAssociationSenioritiesSupported = value; }
        }

        private bool _isTenuredSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsTenuredSupported
        {
            get { return _isTenuredSupported; }
            set { _isTenuredSupported = value; }
        }

        private bool _isTenureTrackSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsTenureTrackSupported
        {
            get { return _isTenureTrackSupported; }
            set { _isTenureTrackSupported = value; }
        }

        private Func<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, bool> _isStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded;
        Func<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, bool> Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded
        {
            get { return _isStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded; }
            set { _isStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority, bool> _isStaffEducationOrganizationEmploymentAssociationSeniorityIncluded;
        Func<Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationSeniority, bool> Entities.Common.TPDM.IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport.IsStaffEducationOrganizationEmploymentAssociationSeniorityIncluded
        {
            get { return _isStaffEducationOrganizationEmploymentAssociationSeniorityIncluded; }
            set { _isStaffEducationOrganizationEmploymentAssociationSeniorityIncluded = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffEducatorPreparationProgramAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffEducatorPreparationProgramAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffEducatorPreparationProgramAssociation"/> entity.
    /// </summary>
    public class StaffEducatorPreparationProgramAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProgramName { get; set; }
        public virtual int ProgramTypeDescriptorId { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducatorPreparationProgramAssociation table of the StaffEducatorPreparationProgramAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducatorPreparationProgramAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducatorPreparationProgramAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string ProgramName  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramTypeDescriptorId 
        {
            get
            {
                if (_programTypeDescriptorId == default(int))
                    _programTypeDescriptorId = DescriptorsCache.GetCache().GetId("ProgramTypeDescriptor", _programTypeDescriptor);

                return _programTypeDescriptorId;
            } 
            set
            {
                _programTypeDescriptorId = value;
                _programTypeDescriptor = null;
            }
        }

        private int _programTypeDescriptorId;
        private string _programTypeDescriptor;

        public virtual string ProgramTypeDescriptor
        {
            get
            {
                if (_programTypeDescriptor == null)
                    _programTypeDescriptor = DescriptorsCache.GetCache().GetValue("ProgramTypeDescriptor", _programTypeDescriptorId);
                    
                return _programTypeDescriptor;
            }
            set
            {
                _programTypeDescriptor = value;
                _programTypeDescriptorId = default(int);
            }
        }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        public virtual bool? Completer  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducatorPreparationProgramAggregate.TPDM.EducatorPreparationProgramReferenceData EducatorPreparationProgramReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducatorPreparationProgram discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.EducatorPreparationProgramDiscriminator
        {
            get { return EducatorPreparationProgramReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducatorPreparationProgram resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.EducatorPreparationProgramResourceId
        {
            get { return EducatorPreparationProgramReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isCompleterSupported = true;
        bool Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsCompleterSupported
        {
            get { return _isCompleterSupported; }
            set { _isCompleterSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffToCandidateRelationshipDescriptor

namespace EdFi.Ods.Entities.NHibernate.StaffToCandidateRelationshipDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffToCandidateRelationshipDescriptor table of the StaffToCandidateRelationshipDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffToCandidateRelationshipDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int StaffToCandidateRelationshipDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("StaffToCandidateRelationshipDescriptorId", StaffToCandidateRelationshipDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Entities.NHibernate.StateEducationAgencyAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StateEducationAgencyExtension table of the StateEducationAgency aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StateEducationAgencyExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStateEducationAgencyExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStateEducationAgencyExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StateEducationAgencyExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StateEducationAgency StateEducationAgency { get; set; }

        Entities.Common.EdFi.IStateEducationAgency IStateEducationAgencyExtension.StateEducationAgency
        {
            get { return StateEducationAgency; }
            set { StateEducationAgency = (EdFi.StateEducationAgency) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StateEducationAgency as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStateEducationAgencyExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStateEducationAgencyExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StateEducationAgency = (EdFi.StateEducationAgency) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.IStateEducationAgencyExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Entities.NHibernate.StudentGradebookEntryAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StudentGradebookEntryExtension table of the StudentGradebookEntry aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StudentGradebookEntryExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStudentGradebookEntryExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StudentGradebookEntryExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StudentGradebookEntry StudentGradebookEntry { get; set; }

        Entities.Common.EdFi.IStudentGradebookEntry IStudentGradebookEntryExtension.StudentGradebookEntry
        {
            get { return StudentGradebookEntry; }
            set { StudentGradebookEntry = (EdFi.StudentGradebookEntry) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? AssignmentPassed  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? DateCompleted 
        {
            get { return _dateCompleted; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _dateCompleted = null;
                } else
                {
                    var given = (DateTime) value;
                    _dateCompleted = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _dateCompleted;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StudentGradebookEntry as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStudentGradebookEntryExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStudentGradebookEntryExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StudentGradebookEntry = (EdFi.StudentGradebookEntry) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAssignmentPassedSupported = true;
        bool Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport.IsAssignmentPassedSupported
        {
            get { return _isAssignmentPassedSupported; }
            set { _isAssignmentPassedSupported = value; }
        }

        private bool _isDateCompletedSupported = true;
        bool Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport.IsDateCompletedSupported
        {
            get { return _isDateCompletedSupported; }
            set { _isDateCompletedSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SurveyResponse

namespace EdFi.Ods.Entities.NHibernate.SurveyResponseAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveyResponseExtension table of the SurveyResponse aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveyResponseExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ISurveyResponseExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveyResponseExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.SurveyResponse SurveyResponse { get; set; }

        Entities.Common.EdFi.ISurveyResponse ISurveyResponseExtension.SurveyResponse
        {
            get { return SurveyResponse; }
            set { SurveyResponse = (EdFi.SurveyResponse) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(32), NoDangerousText]
        public virtual string PersonId  { get; set; }
        public virtual int? SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int?))
                    _sourceSystemDescriptorId = string.IsNullOrWhiteSpace(_sourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int? _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = _sourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId.Value);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveyResponseExtension.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveyResponseExtension.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (SurveyResponse as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveyResponseExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveyResponseExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            SurveyResponse = (EdFi.SurveyResponse) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isPersonIdSupported = true;
        bool Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport.IsPersonIdSupported
        {
            get { return _isPersonIdSupported; }
            set { _isPersonIdSupported = value; }
        }

        private bool _isSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport.IsSourceSystemDescriptorSupported
        {
            get { return _isSourceSystemDescriptorSupported; }
            set { _isSourceSystemDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SurveyResponsePersonTargetAssociation

namespace EdFi.Ods.Entities.NHibernate.SurveyResponsePersonTargetAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="SurveyResponsePersonTargetAssociation"/> entity.
    /// </summary>
    public class SurveyResponsePersonTargetAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string Namespace { get; set; }
        public virtual string PersonId { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual string SurveyIdentifier { get; set; }
        public virtual string SurveyResponseIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveyResponseIdentifier", SurveyResponseIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveyResponsePersonTargetAssociation table of the SurveyResponsePersonTargetAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveyResponsePersonTargetAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveyResponsePersonTargetAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveyResponsePersonTargetAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyResponseIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SurveyResponseAggregate.EdFi.SurveyResponseReferenceData SurveyResponseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SurveyResponse discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyResponseDiscriminator
        {
            get { return SurveyResponseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the SurveyResponse resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation.SurveyResponseResourceId
        {
            get { return SurveyResponseReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveyResponseIdentifier", SurveyResponseIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveyResponsePersonTargetAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: SurveySection

namespace EdFi.Ods.Entities.NHibernate.SurveySectionAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveySectionExtension table of the SurveySection aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveySectionExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ISurveySectionExtension, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveySectionExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.SurveySection SurveySection { get; set; }

        Entities.Common.EdFi.ISurveySection ISurveySectionExtension.SurveySection
        {
            get { return SurveySection; }
            set { SurveySection = (EdFi.SurveySection) value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EducationOrganizationId  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string EvaluationElementTitle  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        public virtual int? EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int?))
                    _evaluationPeriodDescriptorId = string.IsNullOrWhiteSpace(_evaluationPeriodDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int? _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = _evaluationPeriodDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId.Value);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int?);
            }
        }
        [StringLength(50), NoDangerousText]
        public virtual string EvaluationTitle  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        public virtual int? PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int?))
                    _performanceEvaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_performanceEvaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int? _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = _performanceEvaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId.Value);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int?);
            }
        }
        public virtual short? SchoolYear  { get; set; }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionExtension.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionExtension.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (SurveySection as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveySectionExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveySectionExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            SurveySection = (EdFi.SurveySection) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEvaluationElementTitleSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationElementTitleSupported
        {
            get { return _isEvaluationElementTitleSupported; }
            set { _isEvaluationElementTitleSupported = value; }
        }

        private bool _isEvaluationObjectiveTitleSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationObjectiveTitleSupported
        {
            get { return _isEvaluationObjectiveTitleSupported; }
            set { _isEvaluationObjectiveTitleSupported = value; }
        }

        private bool _isEvaluationPeriodDescriptorSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationPeriodDescriptorSupported
        {
            get { return _isEvaluationPeriodDescriptorSupported; }
            set { _isEvaluationPeriodDescriptorSupported = value; }
        }

        private bool _isEvaluationTitleSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationTitleSupported
        {
            get { return _isEvaluationTitleSupported; }
            set { _isEvaluationTitleSupported = value; }
        }

        private bool _isPerformanceEvaluationTitleSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsPerformanceEvaluationTitleSupported
        {
            get { return _isPerformanceEvaluationTitleSupported; }
            set { _isPerformanceEvaluationTitleSupported = value; }
        }

        private bool _isPerformanceEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsPerformanceEvaluationTypeDescriptorSupported
        {
            get { return _isPerformanceEvaluationTypeDescriptorSupported; }
            set { _isPerformanceEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SurveySectionAggregateResponse

namespace EdFi.Ods.Entities.NHibernate.SurveySectionAggregateResponseAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="SurveySectionAggregateResponse"/> entity.
    /// </summary>
    public class SurveySectionAggregateResponseReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string Namespace { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual string SurveyIdentifier { get; set; }
        public virtual string SurveySectionTitle { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveySectionTitle", SurveySectionTitle);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveySectionAggregateResponse table of the SurveySectionAggregateResponse aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveySectionAggregateResponse : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ISurveySectionAggregateResponse, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveySectionAggregateResponseSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveySectionAggregateResponse()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SurveySectionTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal ScoreValue  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingReferenceData EvaluationElementRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElementRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationElementRatingDiscriminator
        {
            get { return EvaluationElementRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElementRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationElementRatingResourceId
        {
            get { return EvaluationElementRatingReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SurveySectionAggregate.EdFi.SurveySectionReferenceData SurveySectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SurveySection discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.SurveySectionDiscriminator
        {
            get { return SurveySectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the SurveySection resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionAggregateResponse.SurveySectionResourceId
        {
            get { return SurveySectionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveySectionTitle", SurveySectionTitle);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveySectionAggregateResponse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveySectionAggregateResponse) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isScoreValueSupported = true;
        bool Entities.Common.TPDM.ISurveySectionAggregateResponseSynchronizationSourceSupport.IsScoreValueSupported
        {
            get { return _isScoreValueSupported; }
            set { _isScoreValueSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SurveySectionResponsePersonTargetAssociation

namespace EdFi.Ods.Entities.NHibernate.SurveySectionResponsePersonTargetAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="SurveySectionResponsePersonTargetAssociation"/> entity.
    /// </summary>
    public class SurveySectionResponsePersonTargetAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string Namespace { get; set; }
        public virtual string PersonId { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual string SurveyIdentifier { get; set; }
        public virtual string SurveyResponseIdentifier { get; set; }
        public virtual string SurveySectionTitle { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveyResponseIdentifier", SurveyResponseIdentifier);
            keyValues.Add("SurveySectionTitle", SurveySectionTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveySectionResponsePersonTargetAssociation table of the SurveySectionResponsePersonTargetAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveySectionResponsePersonTargetAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveySectionResponsePersonTargetAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyResponseIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SurveySectionTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SurveySectionResponseAggregate.EdFi.SurveySectionResponseReferenceData SurveySectionResponseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SurveySectionResponse discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveySectionResponseDiscriminator
        {
            get { return SurveySectionResponseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the SurveySectionResponse resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation.SurveySectionResponseResourceId
        {
            get { return SurveySectionResponseReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveyResponseIdentifier", SurveyResponseIdentifier);
            keyValues.Add("SurveySectionTitle", SurveySectionTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveySectionResponsePersonTargetAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: WithdrawReasonDescriptor

namespace EdFi.Ods.Entities.NHibernate.WithdrawReasonDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.WithdrawReasonDescriptor table of the WithdrawReasonDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class WithdrawReasonDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IWithdrawReasonDescriptor, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int WithdrawReasonDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("WithdrawReasonDescriptorId", WithdrawReasonDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IWithdrawReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IWithdrawReasonDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
